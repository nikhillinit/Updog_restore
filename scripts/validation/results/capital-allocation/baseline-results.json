{
  "evalId": "eval-bs9-2025-10-29T23:37:02",
  "results": {
    "version": 3,
    "timestamp": "2025-10-29T23:37:02.241Z",
    "prompts": [
      {
        "raw": "\"\"\"\nPromptfoo prompt functions for documentation validation.\nAdapted from Anthropic Cookbook summarization patterns.\n\"\"\"\n\ndef exit_recycling_prompt(doc_content):\n    \"\"\"\n    Simplified prompt function for exit recycling documentation validation.\n\n    Note: Only receives doc_content. Truth cases, schema, and doc_type are\n    passed to the custom scorer (doc_domain_scorer.mjs) via vars.\n\n    This prompt asks the LLM to explain the documentation content in terms\n    of the expected categories, which the scorer then validates.\n    \"\"\"\n\n    prompt = f\"\"\"You are a technical documentation analyst for a venture capital fund modeling platform.\n\nYour task: Analyze and explain this exit recycling documentation, focusing on the key categories and concepts.\n\n## Documentation Content\n{doc_content}\n\n---\n\n## Analysis Instructions\n\nPlease provide a structured analysis covering these aspects:\n\n1. **Capacity Calculation Features**\n   - What functions handle recycling capacity?\n   - How is the maximum recyclable capital calculated?\n   - What formulas are used?\n\n2. **Schedule Calculation Logic**\n   - How are recycling schedules generated?\n   - What chronological processing occurs?\n   - How are exit events processed?\n\n3. **Cap Enforcement Mechanisms**\n   - How is the recycling cap enforced?\n   - What happens when the cap is reached?\n   - How is remaining capacity tracked?\n\n4. **Term Validation Rules**\n   - What defines the recycling period?\n   - How is exit eligibility determined?\n   - Are there critical boundary conditions? (e.g., ER-015: year 5 in 5-year period)\n\n5. **Code References and Integration**\n   - What are the main file locations?\n   - What functions are exposed?\n   - How does this integrate with other modules?\n\n---\n\n## Output Format\n\nProvide a clear, technical explanation covering all five areas above. Include:\n- Function names and signatures where relevant\n- Formulas and calculation logic\n- Critical edge cases and boundary conditions\n- Integration points and dependencies\n\nFocus on accuracy and completeness. Reference specific truth case IDs (e.g., ER-001, ER-015) where relevant to boundary conditions.\n\"\"\"\n\n    return prompt\n\n\ndef fee_prompt(doc_content):\n    \"\"\"\n    Prompt function for fee documentation validation.\n\n    Analyzes management and performance fee documentation to ensure\n    accurate description of calculations, timing, and integration.\n    \"\"\"\n\n    prompt = f\"\"\"You are a technical documentation analyst for a venture capital fund modeling platform.\n\nYour task: Analyze and explain this fee calculation documentation, focusing on the key categories and concepts.\n\n## Documentation Content\n{doc_content}\n\n---\n\n## Analysis Instructions\n\nPlease provide a structured analysis covering these aspects:\n\n1. **Management Fee Calculations**\n   - What functions handle management fee computation?\n   - How is the management fee basis calculated?\n   - What formulas are used?\n   - How is fee timing handled?\n\n2. **Performance Fee (Carry) Calculations**\n   - How are performance fees computed?\n   - What is the hurdle rate mechanism?\n   - How is catch-up calculated?\n   - What formulas govern carry distribution?\n\n3. **Fee Basis and Timing**\n   - What are the different fee basis options (committed capital, invested capital, NAV)?\n   - How is fee timing controlled?\n   - Are fees calculated annually, quarterly, or on-demand?\n\n4. **Integration with Waterfall**\n   - How do fees integrate with waterfall calculations?\n   - What is the relationship between performance fees and carry distribution?\n   - Are there special cases or edge conditions?\n\n5. **Code References and Integration**\n   - What are the main file locations?\n   - What functions are exposed?\n   - How does this integrate with other modules?\n\n---\n\n## Output Format\n\nProvide a clear, technical explanation covering all five areas above. Include:\n- Function names and signatures where relevant\n- Formulas and calculation logic\n- Critical edge cases and boundary conditions\n- Integration points and dependencies\n\nFocus on accuracy and completeness. Reference specific truth case IDs where relevant to boundary conditions.\n\"\"\"\n\n    return prompt\n\n\ndef summarize_doc_for_validation(doc_content):\n    \"\"\"\n    Stage 1: Summarize documentation into validation-ready format.\n    Use this for very long documents (>2000 lines).\n    \"\"\"\n\n    prompt = f\"\"\"Extract validation points from this technical documentation.\n\nDocumentation:\n{doc_content}\n\n---\n\nReturn a structured summary with:\n\n1. **Functions Documented** (list with signatures)\n2. **Core Concepts** (list)\n3. **Mathematical Formulas** (list with formula text)\n4. **Code References** (file:line citations)\n5. **Cross-References** (to other modules)\n6. **API Completeness** (estimated % coverage)\n\nKeep response concise and structured. No commentary.\n\"\"\"\n\n    return prompt\n\n\ndef capital_allocation_prompt(doc_content: str) -> str:\n    \"\"\"\n    Capital Allocation validation prompt (single-var pattern).\n    Multi-var context (truth_cases, schema, doc_type) handled by custom scorer.\n    \"\"\"\n    return f\"\"\"\nYou are a meticulous documentation validator for the **Capital Allocation** module.\n\nGoals:\n1) Summarize three engines: Reserve, Pacing, Cohort\n2) Explain key formulas (reserve target/floor, pacing with carryover, cohort caps/rounding)\n3) State precedence rules (Reserve > Pacing > Cohort) and recycling interaction\n4) Reference code/docs with ≥3 trace anchors (file:line style)\n5) Demonstrate understanding via ≥1 boundary behavior (cap binds, reserve precedence, carryover)\n\nOutput structure:\n- **Domain Summary** (6-10 bullets covering engines, precedence, edge cases)\n- **Key Formulas** (≥5 formulas with variable definitions)\n- **Rules & Precedence** (clear, testable statements)\n- **Traceability** (≥3 file:line anchors to code/schema/docs)\n\nOnly use information from the document below. Do not invent APIs not present in it.\n\n<document>\n{doc_content}\n</document>\n\"\"\"\n",
        "label": "prompts.py:capital_allocation_prompt",
        "id": "918ebaaaa613175d758dbd8e7c6e1defe3e805eeef13da0766eb265e18def0bd",
        "provider": "Claude 3.7 Sonnet",
        "metrics": {
          "score": 2,
          "testPassCount": 2,
          "testFailCount": 0,
          "testErrorCount": 0,
          "assertPassCount": 0,
          "assertFailCount": 0,
          "totalLatencyMs": 43646,
          "tokenUsage": {
            "prompt": 19293,
            "completion": 2367,
            "cached": 0,
            "total": 21660,
            "numRequests": 2,
            "completionDetails": {
              "reasoning": 0,
              "acceptedPrediction": 0,
              "rejectedPrediction": 0
            },
            "assertions": {
              "total": 0,
              "prompt": 0,
              "completion": 0,
              "cached": 0,
              "numRequests": 0,
              "completionDetails": {
                "reasoning": 0,
                "acceptedPrediction": 0,
                "rejectedPrediction": 0
              }
            }
          },
          "namedScores": {},
          "namedScoresCount": {},
          "cost": 0.093384
        }
      }
    ],
    "results": [
      {
        "cost": 0.045129,
        "gradingResult": {
          "pass": true,
          "score": 1,
          "reason": "No assertions",
          "tokensUsed": {
            "total": 0,
            "prompt": 0,
            "completion": 0,
            "cached": 0,
            "numRequests": 0
          }
        },
        "id": "f6b5b0fb-6a10-4fab-bb7f-5fe20139de98",
        "latencyMs": 23211,
        "namedScores": {},
        "prompt": {
          "raw": "\nYou are a meticulous documentation validator for the **Capital Allocation** module.\n\nGoals:\n1) Summarize three engines: Reserve, Pacing, Cohort\n2) Explain key formulas (reserve target/floor, pacing with carryover, cohort caps/rounding)\n3) State precedence rules (Reserve > Pacing > Cohort) and recycling interaction\n4) Reference code/docs with ≥3 trace anchors (file:line style)\n5) Demonstrate understanding via ≥1 boundary behavior (cap binds, reserve precedence, carryover)\n\nOutput structure:\n- **Domain Summary** (6-10 bullets covering engines, precedence, edge cases)\n- **Key Formulas** (≥5 formulas with variable definitions)\n- **Rules & Precedence** (clear, testable statements)\n- **Traceability** (≥3 file:line anchors to code/schema/docs)\n\nOnly use information from the document below. Do not invent APIs not present in it.\n\n<document>\n{'vars': {'doc_type': 'capital_allocation', 'doc_content': '# Capital Allocation Module\\n\\n**Version**: 1.0.0 **Schema**:\\n`docs/schemas/capital-allocation-truth-case.schema.json` **ADR**:\\n`docs/adr/ADR-008-capital-allocation-policy.md`\\n\\n---\\n\\n## Domain Summary\\n\\nThis module implements deterministic, auditable allocation of capital across\\ntime and cohorts through three coordinated engines:\\n\\n- **Reserve Engine**: Maintains liquidity protection via reserve target/floor\\n  and cash buffer\\n- **Pacing Engine**: Smooths deployment over time using rolling window with\\n  carryover of shortfalls\\n- **Cohort Engine**: Allocates capital across cohorts by weights with caps and\\n  deterministic spill\\n- **Core Precedence**: Reserve floor → Pacing target → Cohort allocation (see\\n  ADR-008)\\n- **Recycling Integration**: Eligible distributions increase allocable capacity\\n  after reserve checks\\n- **Prospective Behavior**: Rule changes (e.g., pacing window adjustments) apply\\n  from change date forward with no retroactive reallocation\\n- **Pure Functions**: All engines are stateless with explicit inputs/outputs for\\n  auditability\\n- **Schema Versioning**: Semver-tracked with breaking changes requiring major\\n  version bump\\n\\n---\\n\\n## Key Formulas\\n\\n### Reserve Engine\\n\\n1. **Reserve target**: `R* = target_reserve_pct × commitment`\\n2. **Reserve delta (need)**: `ΔR_t = R* - R_t`\\n3. **Reserve floor**: `floor = max(R*, min_cash_buffer)`\\n4. **Buffer violation check**: `R_t < floor` triggers allocation reduction\\n\\n### Pacing Engine\\n\\n5. **Monthly pacing target**: `P_m = commitment / pacing_window_months`\\n6. **Carryover from prior period**: `C_t = max(0, P_{t-1} - A_{t-1})`\\n7. **Adjusted pacing target**: `P̃_t = P_t + C_t`\\n8. **Quarterly adjustment**: `P_q = P_m × 3` (monthly → quarterly cadence)\\n\\n### Cohort Engine\\n\\n9. **Weight normalization**: `w_i_norm = weight_i / Σ(active_weights)`\\n10. **Pro-rata allocation (pre-caps)**: `alloc_i = w_i_norm × A_t`\\n11. **Cap enforcement**: `alloc_i_capped = min(alloc_i, max_per_cohort × A_t)`\\n12. **Spill calculation**: `spill = Σ(alloc_i - alloc_i_capped)`\\n13. **Bankers\\' rounding**: Round to nearest even; tie-break to highest remainder\\n    → lexicographic name\\n\\n---\\n\\n## Reserve Engine\\n\\n**Purpose**: Maintain reserve levels before allocating capital to deals.\\n\\n**Key Rules**:\\n\\n- Reserve floor **overrides** pacing targets when binding (CA-013 demonstrates\\n  this precedence)\\n- Cash buffer enforcement: `R_t ≥ max(R*, min_cash_buffer)` must hold at all\\n  times\\n- Reserve policy options: `static_pct` (default), `dynamic_ratio`,\\n  `waterfall_dependent`\\n\\n**Truth Cases**:\\n\\n- CA-001: Baseline scenario with reserve at target\\n- CA-002: Underfunded reserve triggers buffer top-up\\n- CA-013: Reserve floor precedence over monthly pacing (conflict resolution)\\n\\n**Schema References**:\\n\\n- `docs/schemas/capital-allocation-truth-case.schema.json:52-60` (reserve_policy\\n  enum)\\n- `docs/adr/ADR-008-capital-allocation-policy.md:45-72` (precedence rationale)\\n\\n---\\n\\n## Pacing Engine\\n\\n**Purpose**: Smooth deployment across time with rolling window and carryover.\\n\\n**Key Rules**:\\n\\n- Rolling window (typically 12-24 months) distributes deployment smoothly\\n- **Carryover logic**: Shortfalls from period t-1 roll forward to period t\\n- Cadence options: monthly, quarterly, annual (via `rebalance_frequency`)\\n- Window changes apply **prospectively** (no retroactive adjustments)\\n\\n**Truth Cases**:\\n\\n- CA-008: Monthly pacing baseline (24-month window)\\n- CA-009: Quarterly pacing with Q1 shortfall carrying to Q2\\n- CA-012: Comparison of 24-month vs 18-month window assumptions (separate\\n  scenarios)\\n\\n**Schema References**:\\n\\n- `docs/schemas/capital-allocation-truth-case.schema.json:62-66`\\n  (pacing_window_months)\\n- `docs/adr/ADR-008-capital-allocation-policy.md:89-110` (pacing mechanics and\\n  carryover)\\n\\n**Formulas in Action** (CA-009 example):\\n\\n- Q1 target: 6M, deployed: 4M → carryover = 2M\\n- Q2 target: 6M + 2M carryover = 8M adjusted target\\n\\n---\\n\\n## Cohort Engine\\n\\n**Purpose**: Allocate period amount across cohorts by weights with caps and\\ndeterministic spill.\\n\\n**Key Rules**:\\n\\n1. Filter to **active cohorts only** (`start_date ≤ t ≤ end_date`)\\n2. Normalize weights across active cohorts\\n3. Calculate pro-rata allocation for each cohort\\n4. Apply `max_allocation_per_cohort` cap\\n5. Reallocate spill to remaining cohorts deterministically\\n6. Apply bankers\\' rounding with tie-break rules\\n\\n**Truth Cases**:\\n\\n- CA-014: Fixed weights with simple pro-rata split\\n- CA-015: Cohort cap binding forces spill reallocation\\n- CA-016: Cohort lifecycle transitions (Alpha closes 06/30, Gamma opens 07/01)\\n\\n**Schema References**:\\n\\n- `docs/schemas/capital-allocation-truth-case.schema.json:155-180` (cohorts\\n  array definition)\\n- `docs/adr/ADR-008-capital-allocation-policy.md:112-145` (cohort allocation\\n  algorithm)\\n\\n**Example** (CA-015 with cap binding):\\n\\n- Pre-cap: Large cohort = 80%, Small cohort = 20%\\n- Cap: 55% max per cohort\\n- Post-cap: Large capped at 55%, spill (25%) reallocated to Small → Small = 45%\\n\\n---\\n\\n## Integration & Precedence\\n\\n**Decision Tree** (conflict resolution order):\\n\\n1. **Reserve Floor Check**\\n   - If `R_t < floor`, reduce `A_t` until reserve satisfied\\n   - Example: CA-013 (reserve precedence over pacing)\\n\\n2. **Pacing Target Application**\\n   - Calculate `P̃_t = P_t + C_t` (base + carryover)\\n   - Allocable amount bounded by pacing constraints\\n\\n3. **Cohort Allocation**\\n   - Distribute `A_t` across active cohorts\\n   - Apply caps and deterministic spill\\n   - Example: CA-015 (cap enforcement)\\n\\n**Recycling Integration**:\\n\\n- Eligible distributions (`recycle_eligible: true`) increase allocable capacity\\n- Applied **after** reserve floor satisfied\\n- Example: CA-020 (integration case with recycling + reserve + pacing + caps)\\n\\n**Precedence Rationale** (from ADR-008):\\n\\n- **Why Reserve > Pacing**: Liquidity protection is non-negotiable; prevents\\n  cash shortfalls\\n- **Why Pacing > Cohort**: Deployment smoothness prevents vintage concentration\\n  before fairness\\n- **Why deterministic spill**: Audit trail requires reproducible allocations\\n\\n---\\n\\n## Adversarial & Edge Cases\\n\\n| Case ID | Scenario                    | Expected Behavior                                | Validation Point                   |\\n| ------- | --------------------------- | ------------------------------------------------ | ---------------------------------- |\\n| CA-004  | Zero contributions          | Reserve maintained; no deployment                | Handles null deployment gracefully |\\n| CA-013  | Reserve overrides pacing    | Deployment deferred until reserve satisfied      | Precedence rule enforcement        |\\n| CA-015  | Cohort cap binding          | Deterministic spill to remaining cohorts         | Cap enforcement + spill algorithm  |\\n| CA-016  | Cohort lifecycle transition | Active cohorts only; no retroactive reallocation | Date-based filtering correctness   |\\n\\n---\\n\\n## Schema Reference\\n\\n**Location**: `docs/schemas/capital-allocation-truth-case.schema.json`\\n**Version**: 1.0.0 (Draft-07 JSON Schema)\\n\\n**Core Input Structures**:\\n\\n- `fund`: commitment, target_reserve_pct, reserve_policy, pacing_window_months,\\n  vintage_year\\n- `timeline`: start_date, end_date\\n- `flows`: contributions[] (non-negative), distributions[] (allows negative for\\n  recalls per ADR-008)\\n- `constraints`: min_cash_buffer, max_allocation_per_cohort, rebalance_frequency\\n- `cohorts`: [{name, start_date, end_date, weight}]\\n\\n**Expected Output Structures**:\\n\\n- `reserve_balance`: number\\n- `allocations_by_cohort`: [{cohort, amount}]\\n- `pacing_targets`: [{period, target}] (optional)\\n- `violations`: string[] (for adversarial test documentation)\\n\\n**Design Decision** (ADR-008):\\n\\n- Negative `distribution.amount` represents capital recalls/clawbacks\\n- Trade-off: mathematical simplicity vs semantic clarity\\n- Future migration: explicit `capitalRecall` transaction type in v2.0\\n\\n---\\n\\n## Truth Cases Coverage\\n\\n**Location**: `docs/capital-allocation.truth-cases.json` **Count**: 6 cases\\n(CA-001 through CA-006) **Schema Version**: 1.0.0\\n\\n### Current Coverage\\n\\n| Category       | Case IDs                       | Focus                                                 |\\n| -------------- | ------------------------------ | ----------------------------------------------------- |\\n| Reserve Engine | CA-001, CA-002, CA-003, CA-004 | Baseline, underfunded, overfunded, zero contributions |\\n| Pacing Engine  | CA-005                         | Dynamic ratio tracking                                |\\n| Cohort Engine  | CA-006                         | Large distribution rebalancing                        |\\n\\n**Note**: CA-007 through CA-020 to be added in Phase 2 expansion (14 additional\\ncases covering:\\n\\n- Pacing: monthly/quarterly cadence, carryover, window changes\\n- Cohort: cap binding, lifecycle transitions, rounding tie-breaks\\n- Integration: multi-engine coordination with recycling)\\n\\n---\\n\\n## Validation Framework\\n\\n**Config**: `scripts/validation/capital-allocation-validation.yaml` **Prompt**:\\n`scripts/validation/prompts.py:capital_allocation_prompt()` **Scorer**:\\n`scripts/validation/doc_domain_scorer.mjs`\\n\\n**Scoring Dimensions**:\\n\\n1. Domain Concept Coverage (30%): Capital allocation keywords (12 terms)\\n2. Schema Vocabulary Alignment (25%): Schema field mentions\\n3. Code Reference Completeness (25%): `file:line` anchor count\\n4. Truth Case Overlap (20%): Mentions of specific test cases\\n\\n**Contradiction Detection**: 10% penalty for negative statements (e.g., \"reserve\\ndoes not override pacing\")\\n\\n**Target Scores**:\\n\\n- Primary documentation: ≥90% (matching Phase 1B/1C standard)\\n- ADR documents: ≥85% (relaxed schema vocabulary weighting)\\n\\n---\\n\\n## References\\n\\n### Schema & Data\\n\\n- **Schema**: `docs/schemas/capital-allocation-truth-case.schema.json` (v1.0.0)\\n- **Truth Cases**: `docs/capital-allocation.truth-cases.json` (6 cases\\n  currently, 20 planned)\\n- **Validator**: `scripts/validation/capital-allocation-validation.yaml`\\n\\n### Architecture Decisions\\n\\n- **ADR-008**: Capital Allocation Policy (precedence, pacing, cohorts,\\n  recycling)\\n- **Related**: ADR-006 (Fee Calculation), ADR-007 (Exit Recycling)\\n\\n### Validation Tools\\n\\n- **Prompt**: `scripts/validation/prompts.py:capital_allocation_prompt()`\\n- **Scorer**: `scripts/validation/doc_domain_scorer.mjs`\\n- **Truth case validator**: `scripts/validate-ca-cases.mjs`\\n\\n---\\n\\n## Future Enhancements\\n\\n**Phase 2 Expansion** (pending checkpoint approval):\\n\\n- Add 14 remaining truth cases (CA-007 through CA-020)\\n- Expand each engine section with pseudocode and worked examples\\n- Add 15+ implementation `file:line` anchors\\n- Include step-by-step walkthroughs for CA-009, CA-013, CA-015\\n\\n**Schema v2.0** (technical debt):\\n\\n- Introduce explicit `capitalRecall` transaction type\\n- Replace negative distributions with semantic transaction types\\n- Add `status` field to cohorts for lifecycle modeling\\n- Support time-varying pacing windows\\n\\n**Tooling**:\\n\\n- Symbolic anchoring system (@doc-anchor annotations)\\n- CLI tool for anchor validation and maintenance\\n- Behavioral validation (code execution tests)\\n\\n---\\n\\n**Document Version**: 1.0.0 (checkpoint skeleton) **Last Updated**: 2025-10-29\\n**Status**: Phase 1 checkpoint - ready for validation feedback', 'truth_cases': '[\\n  {\\n    \"id\": \"CA-001\",\\n    \"module\": \"CapitalAllocation\",\\n    \"category\": \"reserve_engine\",\\n    \"description\": \"Static % reserve at target with smooth quarterly inflows\",\\n    \"inputs\": {\\n      \"fund\": {\\n        \"commitment\": 100,\\n        \"target_reserve_pct\": 0.2,\\n        \"reserve_policy\": \"static_pct\",\\n        \"pacing_window_months\": 24,\\n        \"vintage_year\": 2024\\n      },\\n      \"timeline\": {\\n        \"start_date\": \"2024-01-01\",\\n        \"end_date\": \"2024-12-31\"\\n      },\\n      \"flows\": {\\n        \"contributions\": [\\n          {\\n            \"date\": \"2024-03-31\",\\n            \"amount\": 5\\n          },\\n          {\\n            \"date\": \"2024-06-30\",\\n            \"amount\": 5\\n          },\\n          {\\n            \"date\": \"2024-09-30\",\\n            \"amount\": 5\\n          },\\n          {\\n            \"date\": \"2024-12-31\",\\n            \"amount\": 5\\n          }\\n        ],\\n        \"distributions\": []\\n      },\\n      \"constraints\": {\\n        \"min_cash_buffer\": 1,\\n        \"rebalance_frequency\": \"quarterly\"\\n      }\\n    },\\n    \"expected\": {\\n      \"reserve_balance\": 20,\\n      \"allocations_by_cohort\": [\\n        {\\n          \"cohort\": \"2024\",\\n          \"amount\": 80\\n        }\\n      ],\\n      \"violations\": []\\n    },\\n    \"notes\": \"Baseline case: reserve reaches 20% target with no violations\",\\n    \"schemaVersion\": \"1.0.0\"\\n  },\\n  {\\n    \"id\": \"CA-002\",\\n    \"module\": \"CapitalAllocation\",\\n    \"category\": \"reserve_engine\",\\n    \"description\": \"Underfunded reserve triggers buffer top-up from next contribution\",\\n    \"inputs\": {\\n      \"fund\": {\\n        \"commitment\": 100,\\n        \"target_reserve_pct\": 0.2,\\n        \"reserve_policy\": \"static_pct\",\\n        \"pacing_window_months\": 24,\\n        \"vintage_year\": 2024\\n      },\\n      \"timeline\": {\\n        \"start_date\": \"2024-01-01\",\\n        \"end_date\": \"2024-06-30\"\\n      },\\n      \"flows\": {\\n        \"contributions\": [\\n          {\\n            \"date\": \"2024-03-31\",\\n            \"amount\": 10\\n          }\\n        ],\\n        \"distributions\": [\\n          {\\n            \"date\": \"2024-05-15\",\\n            \"amount\": 8,\\n            \"recycle_eligible\": false\\n          }\\n        ]\\n      },\\n      \"constraints\": {\\n        \"min_cash_buffer\": 2,\\n        \"rebalance_frequency\": \"quarterly\"\\n      }\\n    },\\n    \"expected\": {\\n      \"reserve_balance\": 2,\\n      \"allocations_by_cohort\": [\\n        {\\n          \"cohort\": \"2024\",\\n          \"amount\": 0\\n        }\\n      ],\\n      \"violations\": []\\n    },\\n    \"notes\": \"Distribution depletes reserve below target; min_cash_buffer is preserved\",\\n    \"schemaVersion\": \"1.0.0\"\\n  },\\n  {\\n    \"id\": \"CA-003\",\\n    \"module\": \"CapitalAllocation\",\\n    \"category\": \"reserve_engine\",\\n    \"description\": \"Overfunded reserve redeploys excess in next rebalancing period\",\\n    \"inputs\": {\\n      \"fund\": {\\n        \"commitment\": 100,\\n        \"target_reserve_pct\": 0.15,\\n        \"reserve_policy\": \"static_pct\",\\n        \"pacing_window_months\": 24,\\n        \"vintage_year\": 2024\\n      },\\n      \"timeline\": {\\n        \"start_date\": \"2024-01-01\",\\n        \"end_date\": \"2024-12-31\"\\n      },\\n      \"flows\": {\\n        \"contributions\": [\\n          {\\n            \"date\": \"2024-03-31\",\\n            \"amount\": 25\\n          }\\n        ],\\n        \"distributions\": []\\n      },\\n      \"constraints\": {\\n        \"min_cash_buffer\": 1,\\n        \"rebalance_frequency\": \"quarterly\"\\n      }\\n    },\\n    \"expected\": {\\n      \"reserve_balance\": 15,\\n      \"allocations_by_cohort\": [\\n        {\\n          \"cohort\": \"2024\",\\n          \"amount\": 10\\n        }\\n      ],\\n      \"violations\": []\\n    },\\n    \"notes\": \"Reserve capped at 15% (15M); excess 10M allocated to cohort\",\\n    \"schemaVersion\": \"1.0.0\"\\n  },\\n  {\\n    \"id\": \"CA-004\",\\n    \"module\": \"CapitalAllocation\",\\n    \"category\": \"reserve_engine\",\\n    \"description\": \"Reserve floor binding with zero contributions quarter (adversarial)\",\\n    \"inputs\": {\\n      \"fund\": {\\n        \"commitment\": 100,\\n        \"target_reserve_pct\": 0.2,\\n        \"reserve_policy\": \"static_pct\",\\n        \"pacing_window_months\": 24,\\n        \"vintage_year\": 2024\\n      },\\n      \"timeline\": {\\n        \"start_date\": \"2024-01-01\",\\n        \"end_date\": \"2024-03-31\"\\n      },\\n      \"flows\": {\\n        \"contributions\": [],\\n        \"distributions\": []\\n      },\\n      \"constraints\": {\\n        \"min_cash_buffer\": 5,\\n        \"rebalance_frequency\": \"quarterly\"\\n      }\\n    },\\n    \"expected\": {\\n      \"reserve_balance\": 0,\\n      \"allocations_by_cohort\": [\\n        {\\n          \"cohort\": \"2024\",\\n          \"amount\": 0\\n        }\\n      ],\\n      \"violations\": [\"reserve_below_minimum\"]\\n    },\\n    \"notes\": \"Adversarial: zero inflows cannot satisfy min_cash_buffer constraint\",\\n    \"schemaVersion\": \"1.0.0\"\\n  },\\n  {\\n    \"id\": \"CA-005\",\\n    \"module\": \"CapitalAllocation\",\\n    \"category\": \"reserve_engine\",\\n    \"description\": \"Dynamic ratio tracking with NAV-dependent reserve target\",\\n    \"inputs\": {\\n      \"fund\": {\\n        \"commitment\": 100,\\n        \"target_reserve_pct\": 0.25,\\n        \"reserve_policy\": \"dynamic_ratio\",\\n        \"pacing_window_months\": 24,\\n        \"vintage_year\": 2024\\n      },\\n      \"timeline\": {\\n        \"start_date\": \"2024-01-01\",\\n        \"end_date\": \"2024-12-31\"\\n      },\\n      \"flows\": {\\n        \"contributions\": [\\n          {\\n            \"date\": \"2024-06-30\",\\n            \"amount\": 30\\n          }\\n        ],\\n        \"distributions\": [\\n          {\\n            \"date\": \"2024-09-30\",\\n            \"amount\": 10,\\n            \"recycle_eligible\": true\\n          }\\n        ]\\n      },\\n      \"constraints\": {\\n        \"min_cash_buffer\": 2,\\n        \"rebalance_frequency\": \"quarterly\"\\n      }\\n    },\\n    \"expected\": {\\n      \"reserve_balance\": 5,\\n      \"allocations_by_cohort\": [\\n        {\\n          \"cohort\": \"2024\",\\n          \"amount\": 15\\n        }\\n      ],\\n      \"violations\": []\\n    },\\n    \"notes\": \"Dynamic policy adjusts reserve based on NAV changes; distribution reduces NAV, lowering reserve target\",\\n    \"schemaVersion\": \"1.0.0\"\\n  },\\n  {\\n    \"id\": \"CA-006\",\\n    \"module\": \"CapitalAllocation\",\\n    \"category\": \"reserve_engine\",\\n    \"description\": \"Large mid-year distribution triggers reserve rebalancing\",\\n    \"inputs\": {\\n      \"fund\": {\\n        \"commitment\": 100,\\n        \"target_reserve_pct\": 0.2,\\n        \"reserve_policy\": \"static_pct\",\\n        \"pacing_window_months\": 24,\\n        \"vintage_year\": 2024\\n      },\\n      \"timeline\": {\\n        \"start_date\": \"2024-01-01\",\\n        \"end_date\": \"2024-12-31\"\\n      },\\n      \"flows\": {\\n        \"contributions\": [\\n          {\\n            \"date\": \"2024-03-31\",\\n            \"amount\": 25\\n          }\\n        ],\\n        \"distributions\": [\\n          {\\n            \"date\": \"2024-07-15\",\\n            \"amount\": 15,\\n            \"recycle_eligible\": false\\n          }\\n        ]\\n      },\\n      \"constraints\": {\\n        \"min_cash_buffer\": 2,\\n        \"rebalance_frequency\": \"quarterly\"\\n      }\\n    },\\n    \"expected\": {\\n      \"reserve_balance\": 10,\\n      \"allocations_by_cohort\": [\\n        {\\n          \"cohort\": \"2024\",\\n          \"amount\": 0\\n        }\\n      ],\\n      \"violations\": []\\n    },\\n    \"notes\": \"Large distribution depletes reserve; Q3 rebalancing restores to target (50% of remaining 20M)\",\\n    \"schemaVersion\": \"1.0.0\"\\n  }\\n]', 'schema': '{\\n  \"$id\": \"https://updog.press-on.ventures/schemas/capital-allocation-truth-case.schema.json\",\\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\\n  \"title\": \"Capital Allocation Truth Case\",\\n  \"description\": \"Canonical test scenario for capital allocation validation (ReserveEngine, PacingEngine, CohortEngine)\",\\n  \"type\": \"object\",\\n  \"required\": [\"id\", \"module\", \"category\", \"description\", \"inputs\", \"expected\"],\\n  \"properties\": {\\n    \"schemaVersion\": {\\n      \"type\": \"string\",\\n      \"pattern\": \"^\\\\\\\\d+\\\\\\\\.\\\\\\\\d+\\\\\\\\.\\\\\\\\d+$\",\\n      \"description\": \"Semantic version of truth case schema (e.g., 1.0.0)\"\\n    },\\n    \"id\": {\\n      \"type\": \"string\",\\n      \"pattern\": \"^CA-[0-9]{3}$\",\\n      \"description\": \"Unique identifier (e.g., CA-001)\"\\n    },\\n    \"module\": {\\n      \"const\": \"CapitalAllocation\",\\n      \"description\": \"Module name\"\\n    },\\n    \"category\": {\\n      \"type\": \"string\",\\n      \"enum\": [\\n        \"reserve_engine\",\\n        \"pacing_engine\",\\n        \"cohort_engine\",\\n        \"integration\"\\n      ],\\n      \"description\": \"Test category\"\\n    },\\n    \"description\": {\\n      \"type\": \"string\",\\n      \"description\": \"Human-readable test scenario description\"\\n    },\\n    \"inputs\": {\\n      \"type\": \"object\",\\n      \"required\": [\"fund\", \"timeline\"],\\n      \"properties\": {\\n        \"fund\": {\\n          \"type\": \"object\",\\n          \"required\": [\\n            \"commitment\",\\n            \"target_reserve_pct\",\\n            \"reserve_policy\",\\n            \"pacing_window_months\",\\n            \"vintage_year\"\\n          ],\\n          \"properties\": {\\n            \"commitment\": {\\n              \"type\": \"number\",\\n              \"minimum\": 0,\\n              \"description\": \"Total fund commitment in millions\"\\n            },\\n            \"target_reserve_pct\": {\\n              \"type\": \"number\",\\n              \"minimum\": 0,\\n              \"maximum\": 1,\\n              \"description\": \"Target reserve as percentage of commitment\"\\n            },\\n            \"reserve_policy\": {\\n              \"type\": \"string\",\\n              \"enum\": [\"static_pct\", \"dynamic_ratio\", \"waterfall_dependent\"],\\n              \"description\": \"Reserve allocation policy\"\\n            },\\n            \"pacing_window_months\": {\\n              \"type\": \"integer\",\\n              \"minimum\": 1,\\n              \"maximum\": 60,\\n              \"description\": \"Rolling window for pacing calculations (months)\"\\n            },\\n            \"vintage_year\": {\\n              \"type\": \"integer\",\\n              \"minimum\": 1980,\\n              \"description\": \"Fund vintage year\"\\n            }\\n          }\\n        },\\n        \"timeline\": {\\n          \"type\": \"object\",\\n          \"required\": [\"start_date\"],\\n          \"properties\": {\\n            \"start_date\": {\\n              \"type\": \"string\",\\n              \"format\": \"date\",\\n              \"description\": \"Allocation period start date\"\\n            },\\n            \"end_date\": {\\n              \"type\": \"string\",\\n              \"format\": \"date\",\\n              \"description\": \"Allocation period end date\"\\n            }\\n          }\\n        },\\n        \"flows\": {\\n          \"type\": \"object\",\\n          \"properties\": {\\n            \"contributions\": {\\n              \"type\": \"array\",\\n              \"items\": {\\n                \"type\": \"object\",\\n                \"required\": [\"date\", \"amount\"],\\n                \"properties\": {\\n                  \"date\": {\\n                    \"type\": \"string\",\\n                    \"format\": \"date\"\\n                  },\\n                  \"amount\": {\\n                    \"type\": \"number\",\\n                    \"minimum\": 0\\n                  }\\n                }\\n              }\\n            },\\n            \"distributions\": {\\n              \"type\": \"array\",\\n              \"items\": {\\n                \"type\": \"object\",\\n                \"required\": [\"date\", \"amount\"],\\n                \"properties\": {\\n                  \"date\": {\\n                    \"type\": \"string\",\\n                    \"format\": \"date\"\\n                  },\\n                  \"amount\": {\\n                    \"type\": \"number\",\\n                    \"description\": \"Distribution amount. Negative values represent capital recalls/clawbacks. See ADR-008 for rationale and downstream implications. Note: recycle_eligible should be false for recalls.\"\\n                  },\\n                  \"recycle_eligible\": {\\n                    \"type\": \"boolean\",\\n                    \"description\": \"Whether distribution can be recycled\"\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        },\\n        \"constraints\": {\\n          \"type\": \"object\",\\n          \"properties\": {\\n            \"min_cash_buffer\": {\\n              \"type\": \"number\",\\n              \"minimum\": 0,\\n              \"description\": \"Minimum cash buffer in millions\"\\n            },\\n            \"max_allocation_per_cohort\": {\\n              \"type\": \"number\",\\n              \"minimum\": 0,\\n              \"maximum\": 1,\\n              \"description\": \"Maximum allocation percentage per cohort\"\\n            },\\n            \"rebalance_frequency\": {\\n              \"type\": \"string\",\\n              \"enum\": [\"monthly\", \"quarterly\", \"annual\"],\\n              \"description\": \"Rebalancing frequency\"\\n            }\\n          }\\n        },\\n        \"cohorts\": {\\n          \"type\": \"array\",\\n          \"items\": {\\n            \"type\": \"object\",\\n            \"required\": [\"name\", \"start_date\", \"end_date\", \"weight\"],\\n            \"properties\": {\\n              \"name\": {\\n                \"type\": \"string\",\\n                \"description\": \"Cohort identifier\"\\n              },\\n              \"start_date\": {\\n                \"type\": \"string\",\\n                \"format\": \"date\"\\n              },\\n              \"end_date\": {\\n                \"type\": \"string\",\\n                \"format\": \"date\"\\n              },\\n              \"weight\": {\\n                \"type\": \"number\",\\n                \"minimum\": 0,\\n                \"description\": \"Cohort weight for allocation\"\\n              }\\n            }\\n          }\\n        }\\n      }\\n    },\\n    \"expected\": {\\n      \"type\": \"object\",\\n      \"required\": [\"reserve_balance\", \"allocations_by_cohort\"],\\n      \"properties\": {\\n        \"reserve_balance\": {\\n          \"type\": \"number\",\\n          \"description\": \"Expected reserve balance at end of period\"\\n        },\\n        \"allocations_by_cohort\": {\\n          \"type\": \"array\",\\n          \"items\": {\\n            \"type\": \"object\",\\n            \"required\": [\"cohort\", \"amount\"],\\n            \"properties\": {\\n              \"cohort\": {\\n                \"type\": \"string\"\\n              },\\n              \"amount\": {\\n                \"type\": \"number\"\\n              }\\n            }\\n          }\\n        },\\n        \"pacing_targets\": {\\n          \"type\": \"array\",\\n          \"items\": {\\n            \"type\": \"object\",\\n            \"required\": [\"period\", \"target\"],\\n            \"properties\": {\\n              \"period\": {\\n                \"type\": \"string\",\\n                \"description\": \"Period identifier (e.g., 2024-Q1)\"\\n              },\\n              \"target\": {\\n                \"type\": \"number\",\\n                \"description\": \"Target allocation for period\"\\n              }\\n            }\\n          }\\n        },\\n        \"violations\": {\\n          \"type\": \"array\",\\n          \"items\": {\\n            \"type\": \"string\"\\n          },\\n          \"description\": \"Expected constraint violations (for adversarial tests)\"\\n        }\\n      }\\n    },\\n    \"notes\": {\\n      \"type\": \"string\",\\n      \"description\": \"Additional context or boundary conditions\"\\n    }\\n  }\\n}'}, 'provider': {'id': 'anthropic:messages:claude-3-7-sonnet-20250219', 'label': 'Claude 3.7 Sonnet'}, 'config': {}}\n</document>\n",
          "label": "prompts.py:capital_allocation_prompt"
        },
        "promptId": "918ebaaaa613175d758dbd8e7c6e1defe3e805eeef13da0766eb265e18def0bd",
        "promptIdx": 0,
        "provider": {
          "id": "anthropic:messages:claude-3-7-sonnet-20250219",
          "label": "Claude 3.7 Sonnet"
        },
        "response": {
          "output": "# Capital Allocation Module Documentation Validation\n\n## Domain Summary\n\n- **Reserve Engine**: Maintains liquidity protection through a reserve target (R* = target_reserve_pct × commitment) and floor (max(R*, min_cash_buffer)) to ensure sufficient cash buffer.\n- **Pacing Engine**: Smooths capital deployment over time using a rolling window (typically 12-24 months) with carryover of shortfalls from previous periods.\n- **Cohort Engine**: Allocates capital across cohorts based on normalized weights, applying caps and deterministically reallocating excess (spill) when caps are binding.\n- **Precedence Rules**: Reserve floor takes highest precedence, followed by pacing targets, then cohort allocation (Reserve > Pacing > Cohort).\n- **Recycling Integration**: Eligible distributions (recycle_eligible: true) increase allocable capacity after reserve requirements are satisfied.\n- **Edge Behaviors**: When reserve falls below floor, allocation is reduced to restore reserve; when cohort caps bind, excess is deterministically reallocated to uncapped cohorts.\n- **Pure Functions**: All engines are stateless with explicit inputs/outputs for auditability and transparency.\n- **Prospective Application**: Rule changes apply from change date forward with no retroactive reallocation.\n\n## Key Formulas\n\n1. **Reserve Target**: R* = target_reserve_pct × commitment\n   - R*: Target reserve amount\n   - target_reserve_pct: Percentage of commitment to maintain as reserve\n\n2. **Reserve Floor**: floor = max(R*, min_cash_buffer)\n   - floor: Minimum reserve level that must be maintained\n   - min_cash_buffer: Absolute minimum cash buffer required\n\n3. **Monthly Pacing Target**: P_m = commitment / pacing_window_months\n   - P_m: Monthly pacing target\n   - pacing_window_months: Duration of deployment window in months\n\n4. **Carryover Calculation**: C_t = max(0, P_{t-1} - A_{t-1})\n   - C_t: Carryover amount for period t\n   - P_{t-1}: Pacing target for previous period\n   - A_{t-1}: Actual allocation in previous period\n\n5. **Adjusted Pacing Target**: P̃_t = P_t + C_t\n   - P̃_t: Adjusted pacing target for current period\n   - P_t: Base pacing target for current period\n   - C_t: Carryover from prior period\n\n6. **Cohort Weight Normalization**: w_i_norm = weight_i / Σ(active_weights)\n   - w_i_norm: Normalized weight for cohort i\n   - weight_i: Raw weight for cohort i\n   - Σ(active_weights): Sum of weights across all active cohorts\n\n7. **Cohort Cap Enforcement**: alloc_i_capped = min(alloc_i, max_per_cohort × A_t)\n   - alloc_i_capped: Capped allocation for cohort i\n   - alloc_i: Pre-cap allocation for cohort i\n   - max_per_cohort: Maximum percentage per cohort\n   - A_t: Total allocable amount for period t\n\n## Rules & Precedence\n\n1. **Reserve Floor Precedence**: If R_t < floor, reduce allocable amount until reserve is satisfied. This rule overrides pacing targets when binding.\n\n2. **Pacing Sequence**:\n   - Calculate base pacing target (P_t) based on commitment and window\n   - Add carryover from prior period (C_t) to get adjusted target (P̃_t)\n   - Allocable amount is bounded by pacing constraints after reserve requirements\n\n3. **Cohort Allocation Process**:\n   - Filter to active cohorts only (start_date ≤ t ≤ end_date)\n   - Normalize weights across active cohorts\n   - Apply max_allocation_per_cohort cap\n   - Reallocate spill to remaining cohorts deterministically\n   - Apply bankers' rounding with tie-break to highest remainder → lexicographic name\n\n4. **Recycling Rule**: Eligible distributions (recycle_eligible: true) increase allocable capacity, but only after reserve floor requirements are satisfied.\n\n5. **Prospective Application**: Rule changes (e.g., pacing window adjustments) apply from change date forward with no retroactive reallocation.\n\n## Traceability\n\n1. **Reserve Policy Options**: `docs/schemas/capital-allocation-truth-case.schema.json:52-60` defines the reserve_policy enum with options: static_pct, dynamic_ratio, waterfall_dependent\n\n2. **Precedence Rationale**: `docs/adr/ADR-008-capital-allocation-policy.md:45-72` explains why reserve takes precedence over pacing and cohort allocation\n\n3. **Pacing Mechanics**: `docs/adr/ADR-008-capital-allocation-policy.md:89-110` details pacing mechanics and carryover implementation\n\n4. **Cohort Definition**: `docs/schemas/capital-allocation-truth-case.schema.json:155-180` defines the cohorts array structure with name, start_date, end_date, and weight properties\n\n5. **Cohort Allocation Algorithm**: `docs/adr/ADR-008-capital-allocation-policy.md:112-145` specifies the cohort allocation algorithm including spill reallocation",
          "tokenUsage": {
            "total": 9899,
            "prompt": 8613,
            "completion": 1286
          },
          "finishReason": "stop",
          "cost": 0.045129
        },
        "score": 1,
        "success": true,
        "testCase": {
          "description": "Validate capital-allocation.md (primary documentation)",
          "vars": {
            "doc_type": "capital_allocation",
            "doc_content": "# Capital Allocation Module\n\n**Version**: 1.0.0 **Schema**:\n`docs/schemas/capital-allocation-truth-case.schema.json` **ADR**:\n`docs/adr/ADR-008-capital-allocation-policy.md`\n\n---\n\n## Domain Summary\n\nThis module implements deterministic, auditable allocation of capital across\ntime and cohorts through three coordinated engines:\n\n- **Reserve Engine**: Maintains liquidity protection via reserve target/floor\n  and cash buffer\n- **Pacing Engine**: Smooths deployment over time using rolling window with\n  carryover of shortfalls\n- **Cohort Engine**: Allocates capital across cohorts by weights with caps and\n  deterministic spill\n- **Core Precedence**: Reserve floor → Pacing target → Cohort allocation (see\n  ADR-008)\n- **Recycling Integration**: Eligible distributions increase allocable capacity\n  after reserve checks\n- **Prospective Behavior**: Rule changes (e.g., pacing window adjustments) apply\n  from change date forward with no retroactive reallocation\n- **Pure Functions**: All engines are stateless with explicit inputs/outputs for\n  auditability\n- **Schema Versioning**: Semver-tracked with breaking changes requiring major\n  version bump\n\n---\n\n## Key Formulas\n\n### Reserve Engine\n\n1. **Reserve target**: `R* = target_reserve_pct × commitment`\n2. **Reserve delta (need)**: `ΔR_t = R* - R_t`\n3. **Reserve floor**: `floor = max(R*, min_cash_buffer)`\n4. **Buffer violation check**: `R_t < floor` triggers allocation reduction\n\n### Pacing Engine\n\n5. **Monthly pacing target**: `P_m = commitment / pacing_window_months`\n6. **Carryover from prior period**: `C_t = max(0, P_{t-1} - A_{t-1})`\n7. **Adjusted pacing target**: `P̃_t = P_t + C_t`\n8. **Quarterly adjustment**: `P_q = P_m × 3` (monthly → quarterly cadence)\n\n### Cohort Engine\n\n9. **Weight normalization**: `w_i_norm = weight_i / Σ(active_weights)`\n10. **Pro-rata allocation (pre-caps)**: `alloc_i = w_i_norm × A_t`\n11. **Cap enforcement**: `alloc_i_capped = min(alloc_i, max_per_cohort × A_t)`\n12. **Spill calculation**: `spill = Σ(alloc_i - alloc_i_capped)`\n13. **Bankers' rounding**: Round to nearest even; tie-break to highest remainder\n    → lexicographic name\n\n---\n\n## Reserve Engine\n\n**Purpose**: Maintain reserve levels before allocating capital to deals.\n\n**Key Rules**:\n\n- Reserve floor **overrides** pacing targets when binding (CA-013 demonstrates\n  this precedence)\n- Cash buffer enforcement: `R_t ≥ max(R*, min_cash_buffer)` must hold at all\n  times\n- Reserve policy options: `static_pct` (default), `dynamic_ratio`,\n  `waterfall_dependent`\n\n**Truth Cases**:\n\n- CA-001: Baseline scenario with reserve at target\n- CA-002: Underfunded reserve triggers buffer top-up\n- CA-013: Reserve floor precedence over monthly pacing (conflict resolution)\n\n**Schema References**:\n\n- `docs/schemas/capital-allocation-truth-case.schema.json:52-60` (reserve_policy\n  enum)\n- `docs/adr/ADR-008-capital-allocation-policy.md:45-72` (precedence rationale)\n\n---\n\n## Pacing Engine\n\n**Purpose**: Smooth deployment across time with rolling window and carryover.\n\n**Key Rules**:\n\n- Rolling window (typically 12-24 months) distributes deployment smoothly\n- **Carryover logic**: Shortfalls from period t-1 roll forward to period t\n- Cadence options: monthly, quarterly, annual (via `rebalance_frequency`)\n- Window changes apply **prospectively** (no retroactive adjustments)\n\n**Truth Cases**:\n\n- CA-008: Monthly pacing baseline (24-month window)\n- CA-009: Quarterly pacing with Q1 shortfall carrying to Q2\n- CA-012: Comparison of 24-month vs 18-month window assumptions (separate\n  scenarios)\n\n**Schema References**:\n\n- `docs/schemas/capital-allocation-truth-case.schema.json:62-66`\n  (pacing_window_months)\n- `docs/adr/ADR-008-capital-allocation-policy.md:89-110` (pacing mechanics and\n  carryover)\n\n**Formulas in Action** (CA-009 example):\n\n- Q1 target: 6M, deployed: 4M → carryover = 2M\n- Q2 target: 6M + 2M carryover = 8M adjusted target\n\n---\n\n## Cohort Engine\n\n**Purpose**: Allocate period amount across cohorts by weights with caps and\ndeterministic spill.\n\n**Key Rules**:\n\n1. Filter to **active cohorts only** (`start_date ≤ t ≤ end_date`)\n2. Normalize weights across active cohorts\n3. Calculate pro-rata allocation for each cohort\n4. Apply `max_allocation_per_cohort` cap\n5. Reallocate spill to remaining cohorts deterministically\n6. Apply bankers' rounding with tie-break rules\n\n**Truth Cases**:\n\n- CA-014: Fixed weights with simple pro-rata split\n- CA-015: Cohort cap binding forces spill reallocation\n- CA-016: Cohort lifecycle transitions (Alpha closes 06/30, Gamma opens 07/01)\n\n**Schema References**:\n\n- `docs/schemas/capital-allocation-truth-case.schema.json:155-180` (cohorts\n  array definition)\n- `docs/adr/ADR-008-capital-allocation-policy.md:112-145` (cohort allocation\n  algorithm)\n\n**Example** (CA-015 with cap binding):\n\n- Pre-cap: Large cohort = 80%, Small cohort = 20%\n- Cap: 55% max per cohort\n- Post-cap: Large capped at 55%, spill (25%) reallocated to Small → Small = 45%\n\n---\n\n## Integration & Precedence\n\n**Decision Tree** (conflict resolution order):\n\n1. **Reserve Floor Check**\n   - If `R_t < floor`, reduce `A_t` until reserve satisfied\n   - Example: CA-013 (reserve precedence over pacing)\n\n2. **Pacing Target Application**\n   - Calculate `P̃_t = P_t + C_t` (base + carryover)\n   - Allocable amount bounded by pacing constraints\n\n3. **Cohort Allocation**\n   - Distribute `A_t` across active cohorts\n   - Apply caps and deterministic spill\n   - Example: CA-015 (cap enforcement)\n\n**Recycling Integration**:\n\n- Eligible distributions (`recycle_eligible: true`) increase allocable capacity\n- Applied **after** reserve floor satisfied\n- Example: CA-020 (integration case with recycling + reserve + pacing + caps)\n\n**Precedence Rationale** (from ADR-008):\n\n- **Why Reserve > Pacing**: Liquidity protection is non-negotiable; prevents\n  cash shortfalls\n- **Why Pacing > Cohort**: Deployment smoothness prevents vintage concentration\n  before fairness\n- **Why deterministic spill**: Audit trail requires reproducible allocations\n\n---\n\n## Adversarial & Edge Cases\n\n| Case ID | Scenario                    | Expected Behavior                                | Validation Point                   |\n| ------- | --------------------------- | ------------------------------------------------ | ---------------------------------- |\n| CA-004  | Zero contributions          | Reserve maintained; no deployment                | Handles null deployment gracefully |\n| CA-013  | Reserve overrides pacing    | Deployment deferred until reserve satisfied      | Precedence rule enforcement        |\n| CA-015  | Cohort cap binding          | Deterministic spill to remaining cohorts         | Cap enforcement + spill algorithm  |\n| CA-016  | Cohort lifecycle transition | Active cohorts only; no retroactive reallocation | Date-based filtering correctness   |\n\n---\n\n## Schema Reference\n\n**Location**: `docs/schemas/capital-allocation-truth-case.schema.json`\n**Version**: 1.0.0 (Draft-07 JSON Schema)\n\n**Core Input Structures**:\n\n- `fund`: commitment, target_reserve_pct, reserve_policy, pacing_window_months,\n  vintage_year\n- `timeline`: start_date, end_date\n- `flows`: contributions[] (non-negative), distributions[] (allows negative for\n  recalls per ADR-008)\n- `constraints`: min_cash_buffer, max_allocation_per_cohort, rebalance_frequency\n- `cohorts`: [{name, start_date, end_date, weight}]\n\n**Expected Output Structures**:\n\n- `reserve_balance`: number\n- `allocations_by_cohort`: [{cohort, amount}]\n- `pacing_targets`: [{period, target}] (optional)\n- `violations`: string[] (for adversarial test documentation)\n\n**Design Decision** (ADR-008):\n\n- Negative `distribution.amount` represents capital recalls/clawbacks\n- Trade-off: mathematical simplicity vs semantic clarity\n- Future migration: explicit `capitalRecall` transaction type in v2.0\n\n---\n\n## Truth Cases Coverage\n\n**Location**: `docs/capital-allocation.truth-cases.json` **Count**: 6 cases\n(CA-001 through CA-006) **Schema Version**: 1.0.0\n\n### Current Coverage\n\n| Category       | Case IDs                       | Focus                                                 |\n| -------------- | ------------------------------ | ----------------------------------------------------- |\n| Reserve Engine | CA-001, CA-002, CA-003, CA-004 | Baseline, underfunded, overfunded, zero contributions |\n| Pacing Engine  | CA-005                         | Dynamic ratio tracking                                |\n| Cohort Engine  | CA-006                         | Large distribution rebalancing                        |\n\n**Note**: CA-007 through CA-020 to be added in Phase 2 expansion (14 additional\ncases covering:\n\n- Pacing: monthly/quarterly cadence, carryover, window changes\n- Cohort: cap binding, lifecycle transitions, rounding tie-breaks\n- Integration: multi-engine coordination with recycling)\n\n---\n\n## Validation Framework\n\n**Config**: `scripts/validation/capital-allocation-validation.yaml` **Prompt**:\n`scripts/validation/prompts.py:capital_allocation_prompt()` **Scorer**:\n`scripts/validation/doc_domain_scorer.mjs`\n\n**Scoring Dimensions**:\n\n1. Domain Concept Coverage (30%): Capital allocation keywords (12 terms)\n2. Schema Vocabulary Alignment (25%): Schema field mentions\n3. Code Reference Completeness (25%): `file:line` anchor count\n4. Truth Case Overlap (20%): Mentions of specific test cases\n\n**Contradiction Detection**: 10% penalty for negative statements (e.g., \"reserve\ndoes not override pacing\")\n\n**Target Scores**:\n\n- Primary documentation: ≥90% (matching Phase 1B/1C standard)\n- ADR documents: ≥85% (relaxed schema vocabulary weighting)\n\n---\n\n## References\n\n### Schema & Data\n\n- **Schema**: `docs/schemas/capital-allocation-truth-case.schema.json` (v1.0.0)\n- **Truth Cases**: `docs/capital-allocation.truth-cases.json` (6 cases\n  currently, 20 planned)\n- **Validator**: `scripts/validation/capital-allocation-validation.yaml`\n\n### Architecture Decisions\n\n- **ADR-008**: Capital Allocation Policy (precedence, pacing, cohorts,\n  recycling)\n- **Related**: ADR-006 (Fee Calculation), ADR-007 (Exit Recycling)\n\n### Validation Tools\n\n- **Prompt**: `scripts/validation/prompts.py:capital_allocation_prompt()`\n- **Scorer**: `scripts/validation/doc_domain_scorer.mjs`\n- **Truth case validator**: `scripts/validate-ca-cases.mjs`\n\n---\n\n## Future Enhancements\n\n**Phase 2 Expansion** (pending checkpoint approval):\n\n- Add 14 remaining truth cases (CA-007 through CA-020)\n- Expand each engine section with pseudocode and worked examples\n- Add 15+ implementation `file:line` anchors\n- Include step-by-step walkthroughs for CA-009, CA-013, CA-015\n\n**Schema v2.0** (technical debt):\n\n- Introduce explicit `capitalRecall` transaction type\n- Replace negative distributions with semantic transaction types\n- Add `status` field to cohorts for lifecycle modeling\n- Support time-varying pacing windows\n\n**Tooling**:\n\n- Symbolic anchoring system (@doc-anchor annotations)\n- CLI tool for anchor validation and maintenance\n- Behavioral validation (code execution tests)\n\n---\n\n**Document Version**: 1.0.0 (checkpoint skeleton) **Last Updated**: 2025-10-29\n**Status**: Phase 1 checkpoint - ready for validation feedback",
            "truth_cases": "[\n  {\n    \"id\": \"CA-001\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Static % reserve at target with smooth quarterly inflows\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 5\n          },\n          {\n            \"date\": \"2024-06-30\",\n            \"amount\": 5\n          },\n          {\n            \"date\": \"2024-09-30\",\n            \"amount\": 5\n          },\n          {\n            \"date\": \"2024-12-31\",\n            \"amount\": 5\n          }\n        ],\n        \"distributions\": []\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 1,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 20,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 80\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Baseline case: reserve reaches 20% target with no violations\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-002\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Underfunded reserve triggers buffer top-up from next contribution\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-06-30\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 10\n          }\n        ],\n        \"distributions\": [\n          {\n            \"date\": \"2024-05-15\",\n            \"amount\": 8,\n            \"recycle_eligible\": false\n          }\n        ]\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 2,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 2,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 0\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Distribution depletes reserve below target; min_cash_buffer is preserved\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-003\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Overfunded reserve redeploys excess in next rebalancing period\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.15,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 25\n          }\n        ],\n        \"distributions\": []\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 1,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 15,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 10\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Reserve capped at 15% (15M); excess 10M allocated to cohort\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-004\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Reserve floor binding with zero contributions quarter (adversarial)\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-03-31\"\n      },\n      \"flows\": {\n        \"contributions\": [],\n        \"distributions\": []\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 5,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 0,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 0\n        }\n      ],\n      \"violations\": [\"reserve_below_minimum\"]\n    },\n    \"notes\": \"Adversarial: zero inflows cannot satisfy min_cash_buffer constraint\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-005\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Dynamic ratio tracking with NAV-dependent reserve target\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.25,\n        \"reserve_policy\": \"dynamic_ratio\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-06-30\",\n            \"amount\": 30\n          }\n        ],\n        \"distributions\": [\n          {\n            \"date\": \"2024-09-30\",\n            \"amount\": 10,\n            \"recycle_eligible\": true\n          }\n        ]\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 2,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 5,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 15\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Dynamic policy adjusts reserve based on NAV changes; distribution reduces NAV, lowering reserve target\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-006\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Large mid-year distribution triggers reserve rebalancing\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 25\n          }\n        ],\n        \"distributions\": [\n          {\n            \"date\": \"2024-07-15\",\n            \"amount\": 15,\n            \"recycle_eligible\": false\n          }\n        ]\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 2,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 10,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 0\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Large distribution depletes reserve; Q3 rebalancing restores to target (50% of remaining 20M)\",\n    \"schemaVersion\": \"1.0.0\"\n  }\n]",
            "schema": "{\n  \"$id\": \"https://updog.press-on.ventures/schemas/capital-allocation-truth-case.schema.json\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Capital Allocation Truth Case\",\n  \"description\": \"Canonical test scenario for capital allocation validation (ReserveEngine, PacingEngine, CohortEngine)\",\n  \"type\": \"object\",\n  \"required\": [\"id\", \"module\", \"category\", \"description\", \"inputs\", \"expected\"],\n  \"properties\": {\n    \"schemaVersion\": {\n      \"type\": \"string\",\n      \"pattern\": \"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$\",\n      \"description\": \"Semantic version of truth case schema (e.g., 1.0.0)\"\n    },\n    \"id\": {\n      \"type\": \"string\",\n      \"pattern\": \"^CA-[0-9]{3}$\",\n      \"description\": \"Unique identifier (e.g., CA-001)\"\n    },\n    \"module\": {\n      \"const\": \"CapitalAllocation\",\n      \"description\": \"Module name\"\n    },\n    \"category\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"reserve_engine\",\n        \"pacing_engine\",\n        \"cohort_engine\",\n        \"integration\"\n      ],\n      \"description\": \"Test category\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"description\": \"Human-readable test scenario description\"\n    },\n    \"inputs\": {\n      \"type\": \"object\",\n      \"required\": [\"fund\", \"timeline\"],\n      \"properties\": {\n        \"fund\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"commitment\",\n            \"target_reserve_pct\",\n            \"reserve_policy\",\n            \"pacing_window_months\",\n            \"vintage_year\"\n          ],\n          \"properties\": {\n            \"commitment\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"description\": \"Total fund commitment in millions\"\n            },\n            \"target_reserve_pct\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"maximum\": 1,\n              \"description\": \"Target reserve as percentage of commitment\"\n            },\n            \"reserve_policy\": {\n              \"type\": \"string\",\n              \"enum\": [\"static_pct\", \"dynamic_ratio\", \"waterfall_dependent\"],\n              \"description\": \"Reserve allocation policy\"\n            },\n            \"pacing_window_months\": {\n              \"type\": \"integer\",\n              \"minimum\": 1,\n              \"maximum\": 60,\n              \"description\": \"Rolling window for pacing calculations (months)\"\n            },\n            \"vintage_year\": {\n              \"type\": \"integer\",\n              \"minimum\": 1980,\n              \"description\": \"Fund vintage year\"\n            }\n          }\n        },\n        \"timeline\": {\n          \"type\": \"object\",\n          \"required\": [\"start_date\"],\n          \"properties\": {\n            \"start_date\": {\n              \"type\": \"string\",\n              \"format\": \"date\",\n              \"description\": \"Allocation period start date\"\n            },\n            \"end_date\": {\n              \"type\": \"string\",\n              \"format\": \"date\",\n              \"description\": \"Allocation period end date\"\n            }\n          }\n        },\n        \"flows\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"contributions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [\"date\", \"amount\"],\n                \"properties\": {\n                  \"date\": {\n                    \"type\": \"string\",\n                    \"format\": \"date\"\n                  },\n                  \"amount\": {\n                    \"type\": \"number\",\n                    \"minimum\": 0\n                  }\n                }\n              }\n            },\n            \"distributions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [\"date\", \"amount\"],\n                \"properties\": {\n                  \"date\": {\n                    \"type\": \"string\",\n                    \"format\": \"date\"\n                  },\n                  \"amount\": {\n                    \"type\": \"number\",\n                    \"description\": \"Distribution amount. Negative values represent capital recalls/clawbacks. See ADR-008 for rationale and downstream implications. Note: recycle_eligible should be false for recalls.\"\n                  },\n                  \"recycle_eligible\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Whether distribution can be recycled\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"constraints\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"min_cash_buffer\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"description\": \"Minimum cash buffer in millions\"\n            },\n            \"max_allocation_per_cohort\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"maximum\": 1,\n              \"description\": \"Maximum allocation percentage per cohort\"\n            },\n            \"rebalance_frequency\": {\n              \"type\": \"string\",\n              \"enum\": [\"monthly\", \"quarterly\", \"annual\"],\n              \"description\": \"Rebalancing frequency\"\n            }\n          }\n        },\n        \"cohorts\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\"name\", \"start_date\", \"end_date\", \"weight\"],\n            \"properties\": {\n              \"name\": {\n                \"type\": \"string\",\n                \"description\": \"Cohort identifier\"\n              },\n              \"start_date\": {\n                \"type\": \"string\",\n                \"format\": \"date\"\n              },\n              \"end_date\": {\n                \"type\": \"string\",\n                \"format\": \"date\"\n              },\n              \"weight\": {\n                \"type\": \"number\",\n                \"minimum\": 0,\n                \"description\": \"Cohort weight for allocation\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"expected\": {\n      \"type\": \"object\",\n      \"required\": [\"reserve_balance\", \"allocations_by_cohort\"],\n      \"properties\": {\n        \"reserve_balance\": {\n          \"type\": \"number\",\n          \"description\": \"Expected reserve balance at end of period\"\n        },\n        \"allocations_by_cohort\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\"cohort\", \"amount\"],\n            \"properties\": {\n              \"cohort\": {\n                \"type\": \"string\"\n              },\n              \"amount\": {\n                \"type\": \"number\"\n              }\n            }\n          }\n        },\n        \"pacing_targets\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\"period\", \"target\"],\n            \"properties\": {\n              \"period\": {\n                \"type\": \"string\",\n                \"description\": \"Period identifier (e.g., 2024-Q1)\"\n              },\n              \"target\": {\n                \"type\": \"number\",\n                \"description\": \"Target allocation for period\"\n              }\n            }\n          }\n        },\n        \"violations\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"Expected constraint violations (for adversarial tests)\"\n        }\n      }\n    },\n    \"notes\": {\n      \"type\": \"string\",\n      \"description\": \"Additional context or boundary conditions\"\n    }\n  }\n}"
          },
          "assert": [],
          "options": {},
          "metadata": {}
        },
        "testIdx": 0,
        "vars": {
          "doc_type": "capital_allocation",
          "doc_content": "# Capital Allocation Module\n\n**Version**: 1.0.0 **Schema**:\n`docs/schemas/capital-allocation-truth-case.schema.json` **ADR**:\n`docs/adr/ADR-008-capital-allocation-policy.md`\n\n---\n\n## Domain Summary\n\nThis module implements deterministic, auditable allocation of capital across\ntime and cohorts through three coordinated engines:\n\n- **Reserve Engine**: Maintains liquidity protection via reserve target/floor\n  and cash buffer\n- **Pacing Engine**: Smooths deployment over time using rolling window with\n  carryover of shortfalls\n- **Cohort Engine**: Allocates capital across cohorts by weights with caps and\n  deterministic spill\n- **Core Precedence**: Reserve floor → Pacing target → Cohort allocation (see\n  ADR-008)\n- **Recycling Integration**: Eligible distributions increase allocable capacity\n  after reserve checks\n- **Prospective Behavior**: Rule changes (e.g., pacing window adjustments) apply\n  from change date forward with no retroactive reallocation\n- **Pure Functions**: All engines are stateless with explicit inputs/outputs for\n  auditability\n- **Schema Versioning**: Semver-tracked with breaking changes requiring major\n  version bump\n\n---\n\n## Key Formulas\n\n### Reserve Engine\n\n1. **Reserve target**: `R* = target_reserve_pct × commitment`\n2. **Reserve delta (need)**: `ΔR_t = R* - R_t`\n3. **Reserve floor**: `floor = max(R*, min_cash_buffer)`\n4. **Buffer violation check**: `R_t < floor` triggers allocation reduction\n\n### Pacing Engine\n\n5. **Monthly pacing target**: `P_m = commitment / pacing_window_months`\n6. **Carryover from prior period**: `C_t = max(0, P_{t-1} - A_{t-1})`\n7. **Adjusted pacing target**: `P̃_t = P_t + C_t`\n8. **Quarterly adjustment**: `P_q = P_m × 3` (monthly → quarterly cadence)\n\n### Cohort Engine\n\n9. **Weight normalization**: `w_i_norm = weight_i / Σ(active_weights)`\n10. **Pro-rata allocation (pre-caps)**: `alloc_i = w_i_norm × A_t`\n11. **Cap enforcement**: `alloc_i_capped = min(alloc_i, max_per_cohort × A_t)`\n12. **Spill calculation**: `spill = Σ(alloc_i - alloc_i_capped)`\n13. **Bankers' rounding**: Round to nearest even; tie-break to highest remainder\n    → lexicographic name\n\n---\n\n## Reserve Engine\n\n**Purpose**: Maintain reserve levels before allocating capital to deals.\n\n**Key Rules**:\n\n- Reserve floor **overrides** pacing targets when binding (CA-013 demonstrates\n  this precedence)\n- Cash buffer enforcement: `R_t ≥ max(R*, min_cash_buffer)` must hold at all\n  times\n- Reserve policy options: `static_pct` (default), `dynamic_ratio`,\n  `waterfall_dependent`\n\n**Truth Cases**:\n\n- CA-001: Baseline scenario with reserve at target\n- CA-002: Underfunded reserve triggers buffer top-up\n- CA-013: Reserve floor precedence over monthly pacing (conflict resolution)\n\n**Schema References**:\n\n- `docs/schemas/capital-allocation-truth-case.schema.json:52-60` (reserve_policy\n  enum)\n- `docs/adr/ADR-008-capital-allocation-policy.md:45-72` (precedence rationale)\n\n---\n\n## Pacing Engine\n\n**Purpose**: Smooth deployment across time with rolling window and carryover.\n\n**Key Rules**:\n\n- Rolling window (typically 12-24 months) distributes deployment smoothly\n- **Carryover logic**: Shortfalls from period t-1 roll forward to period t\n- Cadence options: monthly, quarterly, annual (via `rebalance_frequency`)\n- Window changes apply **prospectively** (no retroactive adjustments)\n\n**Truth Cases**:\n\n- CA-008: Monthly pacing baseline (24-month window)\n- CA-009: Quarterly pacing with Q1 shortfall carrying to Q2\n- CA-012: Comparison of 24-month vs 18-month window assumptions (separate\n  scenarios)\n\n**Schema References**:\n\n- `docs/schemas/capital-allocation-truth-case.schema.json:62-66`\n  (pacing_window_months)\n- `docs/adr/ADR-008-capital-allocation-policy.md:89-110` (pacing mechanics and\n  carryover)\n\n**Formulas in Action** (CA-009 example):\n\n- Q1 target: 6M, deployed: 4M → carryover = 2M\n- Q2 target: 6M + 2M carryover = 8M adjusted target\n\n---\n\n## Cohort Engine\n\n**Purpose**: Allocate period amount across cohorts by weights with caps and\ndeterministic spill.\n\n**Key Rules**:\n\n1. Filter to **active cohorts only** (`start_date ≤ t ≤ end_date`)\n2. Normalize weights across active cohorts\n3. Calculate pro-rata allocation for each cohort\n4. Apply `max_allocation_per_cohort` cap\n5. Reallocate spill to remaining cohorts deterministically\n6. Apply bankers' rounding with tie-break rules\n\n**Truth Cases**:\n\n- CA-014: Fixed weights with simple pro-rata split\n- CA-015: Cohort cap binding forces spill reallocation\n- CA-016: Cohort lifecycle transitions (Alpha closes 06/30, Gamma opens 07/01)\n\n**Schema References**:\n\n- `docs/schemas/capital-allocation-truth-case.schema.json:155-180` (cohorts\n  array definition)\n- `docs/adr/ADR-008-capital-allocation-policy.md:112-145` (cohort allocation\n  algorithm)\n\n**Example** (CA-015 with cap binding):\n\n- Pre-cap: Large cohort = 80%, Small cohort = 20%\n- Cap: 55% max per cohort\n- Post-cap: Large capped at 55%, spill (25%) reallocated to Small → Small = 45%\n\n---\n\n## Integration & Precedence\n\n**Decision Tree** (conflict resolution order):\n\n1. **Reserve Floor Check**\n   - If `R_t < floor`, reduce `A_t` until reserve satisfied\n   - Example: CA-013 (reserve precedence over pacing)\n\n2. **Pacing Target Application**\n   - Calculate `P̃_t = P_t + C_t` (base + carryover)\n   - Allocable amount bounded by pacing constraints\n\n3. **Cohort Allocation**\n   - Distribute `A_t` across active cohorts\n   - Apply caps and deterministic spill\n   - Example: CA-015 (cap enforcement)\n\n**Recycling Integration**:\n\n- Eligible distributions (`recycle_eligible: true`) increase allocable capacity\n- Applied **after** reserve floor satisfied\n- Example: CA-020 (integration case with recycling + reserve + pacing + caps)\n\n**Precedence Rationale** (from ADR-008):\n\n- **Why Reserve > Pacing**: Liquidity protection is non-negotiable; prevents\n  cash shortfalls\n- **Why Pacing > Cohort**: Deployment smoothness prevents vintage concentration\n  before fairness\n- **Why deterministic spill**: Audit trail requires reproducible allocations\n\n---\n\n## Adversarial & Edge Cases\n\n| Case ID | Scenario                    | Expected Behavior                                | Validation Point                   |\n| ------- | --------------------------- | ------------------------------------------------ | ---------------------------------- |\n| CA-004  | Zero contributions          | Reserve maintained; no deployment                | Handles null deployment gracefully |\n| CA-013  | Reserve overrides pacing    | Deployment deferred until reserve satisfied      | Precedence rule enforcement        |\n| CA-015  | Cohort cap binding          | Deterministic spill to remaining cohorts         | Cap enforcement + spill algorithm  |\n| CA-016  | Cohort lifecycle transition | Active cohorts only; no retroactive reallocation | Date-based filtering correctness   |\n\n---\n\n## Schema Reference\n\n**Location**: `docs/schemas/capital-allocation-truth-case.schema.json`\n**Version**: 1.0.0 (Draft-07 JSON Schema)\n\n**Core Input Structures**:\n\n- `fund`: commitment, target_reserve_pct, reserve_policy, pacing_window_months,\n  vintage_year\n- `timeline`: start_date, end_date\n- `flows`: contributions[] (non-negative), distributions[] (allows negative for\n  recalls per ADR-008)\n- `constraints`: min_cash_buffer, max_allocation_per_cohort, rebalance_frequency\n- `cohorts`: [{name, start_date, end_date, weight}]\n\n**Expected Output Structures**:\n\n- `reserve_balance`: number\n- `allocations_by_cohort`: [{cohort, amount}]\n- `pacing_targets`: [{period, target}] (optional)\n- `violations`: string[] (for adversarial test documentation)\n\n**Design Decision** (ADR-008):\n\n- Negative `distribution.amount` represents capital recalls/clawbacks\n- Trade-off: mathematical simplicity vs semantic clarity\n- Future migration: explicit `capitalRecall` transaction type in v2.0\n\n---\n\n## Truth Cases Coverage\n\n**Location**: `docs/capital-allocation.truth-cases.json` **Count**: 6 cases\n(CA-001 through CA-006) **Schema Version**: 1.0.0\n\n### Current Coverage\n\n| Category       | Case IDs                       | Focus                                                 |\n| -------------- | ------------------------------ | ----------------------------------------------------- |\n| Reserve Engine | CA-001, CA-002, CA-003, CA-004 | Baseline, underfunded, overfunded, zero contributions |\n| Pacing Engine  | CA-005                         | Dynamic ratio tracking                                |\n| Cohort Engine  | CA-006                         | Large distribution rebalancing                        |\n\n**Note**: CA-007 through CA-020 to be added in Phase 2 expansion (14 additional\ncases covering:\n\n- Pacing: monthly/quarterly cadence, carryover, window changes\n- Cohort: cap binding, lifecycle transitions, rounding tie-breaks\n- Integration: multi-engine coordination with recycling)\n\n---\n\n## Validation Framework\n\n**Config**: `scripts/validation/capital-allocation-validation.yaml` **Prompt**:\n`scripts/validation/prompts.py:capital_allocation_prompt()` **Scorer**:\n`scripts/validation/doc_domain_scorer.mjs`\n\n**Scoring Dimensions**:\n\n1. Domain Concept Coverage (30%): Capital allocation keywords (12 terms)\n2. Schema Vocabulary Alignment (25%): Schema field mentions\n3. Code Reference Completeness (25%): `file:line` anchor count\n4. Truth Case Overlap (20%): Mentions of specific test cases\n\n**Contradiction Detection**: 10% penalty for negative statements (e.g., \"reserve\ndoes not override pacing\")\n\n**Target Scores**:\n\n- Primary documentation: ≥90% (matching Phase 1B/1C standard)\n- ADR documents: ≥85% (relaxed schema vocabulary weighting)\n\n---\n\n## References\n\n### Schema & Data\n\n- **Schema**: `docs/schemas/capital-allocation-truth-case.schema.json` (v1.0.0)\n- **Truth Cases**: `docs/capital-allocation.truth-cases.json` (6 cases\n  currently, 20 planned)\n- **Validator**: `scripts/validation/capital-allocation-validation.yaml`\n\n### Architecture Decisions\n\n- **ADR-008**: Capital Allocation Policy (precedence, pacing, cohorts,\n  recycling)\n- **Related**: ADR-006 (Fee Calculation), ADR-007 (Exit Recycling)\n\n### Validation Tools\n\n- **Prompt**: `scripts/validation/prompts.py:capital_allocation_prompt()`\n- **Scorer**: `scripts/validation/doc_domain_scorer.mjs`\n- **Truth case validator**: `scripts/validate-ca-cases.mjs`\n\n---\n\n## Future Enhancements\n\n**Phase 2 Expansion** (pending checkpoint approval):\n\n- Add 14 remaining truth cases (CA-007 through CA-020)\n- Expand each engine section with pseudocode and worked examples\n- Add 15+ implementation `file:line` anchors\n- Include step-by-step walkthroughs for CA-009, CA-013, CA-015\n\n**Schema v2.0** (technical debt):\n\n- Introduce explicit `capitalRecall` transaction type\n- Replace negative distributions with semantic transaction types\n- Add `status` field to cohorts for lifecycle modeling\n- Support time-varying pacing windows\n\n**Tooling**:\n\n- Symbolic anchoring system (@doc-anchor annotations)\n- CLI tool for anchor validation and maintenance\n- Behavioral validation (code execution tests)\n\n---\n\n**Document Version**: 1.0.0 (checkpoint skeleton) **Last Updated**: 2025-10-29\n**Status**: Phase 1 checkpoint - ready for validation feedback",
          "truth_cases": "[\n  {\n    \"id\": \"CA-001\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Static % reserve at target with smooth quarterly inflows\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 5\n          },\n          {\n            \"date\": \"2024-06-30\",\n            \"amount\": 5\n          },\n          {\n            \"date\": \"2024-09-30\",\n            \"amount\": 5\n          },\n          {\n            \"date\": \"2024-12-31\",\n            \"amount\": 5\n          }\n        ],\n        \"distributions\": []\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 1,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 20,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 80\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Baseline case: reserve reaches 20% target with no violations\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-002\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Underfunded reserve triggers buffer top-up from next contribution\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-06-30\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 10\n          }\n        ],\n        \"distributions\": [\n          {\n            \"date\": \"2024-05-15\",\n            \"amount\": 8,\n            \"recycle_eligible\": false\n          }\n        ]\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 2,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 2,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 0\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Distribution depletes reserve below target; min_cash_buffer is preserved\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-003\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Overfunded reserve redeploys excess in next rebalancing period\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.15,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 25\n          }\n        ],\n        \"distributions\": []\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 1,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 15,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 10\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Reserve capped at 15% (15M); excess 10M allocated to cohort\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-004\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Reserve floor binding with zero contributions quarter (adversarial)\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-03-31\"\n      },\n      \"flows\": {\n        \"contributions\": [],\n        \"distributions\": []\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 5,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 0,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 0\n        }\n      ],\n      \"violations\": [\"reserve_below_minimum\"]\n    },\n    \"notes\": \"Adversarial: zero inflows cannot satisfy min_cash_buffer constraint\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-005\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Dynamic ratio tracking with NAV-dependent reserve target\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.25,\n        \"reserve_policy\": \"dynamic_ratio\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-06-30\",\n            \"amount\": 30\n          }\n        ],\n        \"distributions\": [\n          {\n            \"date\": \"2024-09-30\",\n            \"amount\": 10,\n            \"recycle_eligible\": true\n          }\n        ]\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 2,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 5,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 15\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Dynamic policy adjusts reserve based on NAV changes; distribution reduces NAV, lowering reserve target\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-006\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Large mid-year distribution triggers reserve rebalancing\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 25\n          }\n        ],\n        \"distributions\": [\n          {\n            \"date\": \"2024-07-15\",\n            \"amount\": 15,\n            \"recycle_eligible\": false\n          }\n        ]\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 2,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 10,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 0\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Large distribution depletes reserve; Q3 rebalancing restores to target (50% of remaining 20M)\",\n    \"schemaVersion\": \"1.0.0\"\n  }\n]",
          "schema": "{\n  \"$id\": \"https://updog.press-on.ventures/schemas/capital-allocation-truth-case.schema.json\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Capital Allocation Truth Case\",\n  \"description\": \"Canonical test scenario for capital allocation validation (ReserveEngine, PacingEngine, CohortEngine)\",\n  \"type\": \"object\",\n  \"required\": [\"id\", \"module\", \"category\", \"description\", \"inputs\", \"expected\"],\n  \"properties\": {\n    \"schemaVersion\": {\n      \"type\": \"string\",\n      \"pattern\": \"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$\",\n      \"description\": \"Semantic version of truth case schema (e.g., 1.0.0)\"\n    },\n    \"id\": {\n      \"type\": \"string\",\n      \"pattern\": \"^CA-[0-9]{3}$\",\n      \"description\": \"Unique identifier (e.g., CA-001)\"\n    },\n    \"module\": {\n      \"const\": \"CapitalAllocation\",\n      \"description\": \"Module name\"\n    },\n    \"category\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"reserve_engine\",\n        \"pacing_engine\",\n        \"cohort_engine\",\n        \"integration\"\n      ],\n      \"description\": \"Test category\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"description\": \"Human-readable test scenario description\"\n    },\n    \"inputs\": {\n      \"type\": \"object\",\n      \"required\": [\"fund\", \"timeline\"],\n      \"properties\": {\n        \"fund\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"commitment\",\n            \"target_reserve_pct\",\n            \"reserve_policy\",\n            \"pacing_window_months\",\n            \"vintage_year\"\n          ],\n          \"properties\": {\n            \"commitment\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"description\": \"Total fund commitment in millions\"\n            },\n            \"target_reserve_pct\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"maximum\": 1,\n              \"description\": \"Target reserve as percentage of commitment\"\n            },\n            \"reserve_policy\": {\n              \"type\": \"string\",\n              \"enum\": [\"static_pct\", \"dynamic_ratio\", \"waterfall_dependent\"],\n              \"description\": \"Reserve allocation policy\"\n            },\n            \"pacing_window_months\": {\n              \"type\": \"integer\",\n              \"minimum\": 1,\n              \"maximum\": 60,\n              \"description\": \"Rolling window for pacing calculations (months)\"\n            },\n            \"vintage_year\": {\n              \"type\": \"integer\",\n              \"minimum\": 1980,\n              \"description\": \"Fund vintage year\"\n            }\n          }\n        },\n        \"timeline\": {\n          \"type\": \"object\",\n          \"required\": [\"start_date\"],\n          \"properties\": {\n            \"start_date\": {\n              \"type\": \"string\",\n              \"format\": \"date\",\n              \"description\": \"Allocation period start date\"\n            },\n            \"end_date\": {\n              \"type\": \"string\",\n              \"format\": \"date\",\n              \"description\": \"Allocation period end date\"\n            }\n          }\n        },\n        \"flows\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"contributions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [\"date\", \"amount\"],\n                \"properties\": {\n                  \"date\": {\n                    \"type\": \"string\",\n                    \"format\": \"date\"\n                  },\n                  \"amount\": {\n                    \"type\": \"number\",\n                    \"minimum\": 0\n                  }\n                }\n              }\n            },\n            \"distributions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [\"date\", \"amount\"],\n                \"properties\": {\n                  \"date\": {\n                    \"type\": \"string\",\n                    \"format\": \"date\"\n                  },\n                  \"amount\": {\n                    \"type\": \"number\",\n                    \"description\": \"Distribution amount. Negative values represent capital recalls/clawbacks. See ADR-008 for rationale and downstream implications. Note: recycle_eligible should be false for recalls.\"\n                  },\n                  \"recycle_eligible\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Whether distribution can be recycled\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"constraints\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"min_cash_buffer\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"description\": \"Minimum cash buffer in millions\"\n            },\n            \"max_allocation_per_cohort\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"maximum\": 1,\n              \"description\": \"Maximum allocation percentage per cohort\"\n            },\n            \"rebalance_frequency\": {\n              \"type\": \"string\",\n              \"enum\": [\"monthly\", \"quarterly\", \"annual\"],\n              \"description\": \"Rebalancing frequency\"\n            }\n          }\n        },\n        \"cohorts\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\"name\", \"start_date\", \"end_date\", \"weight\"],\n            \"properties\": {\n              \"name\": {\n                \"type\": \"string\",\n                \"description\": \"Cohort identifier\"\n              },\n              \"start_date\": {\n                \"type\": \"string\",\n                \"format\": \"date\"\n              },\n              \"end_date\": {\n                \"type\": \"string\",\n                \"format\": \"date\"\n              },\n              \"weight\": {\n                \"type\": \"number\",\n                \"minimum\": 0,\n                \"description\": \"Cohort weight for allocation\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"expected\": {\n      \"type\": \"object\",\n      \"required\": [\"reserve_balance\", \"allocations_by_cohort\"],\n      \"properties\": {\n        \"reserve_balance\": {\n          \"type\": \"number\",\n          \"description\": \"Expected reserve balance at end of period\"\n        },\n        \"allocations_by_cohort\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\"cohort\", \"amount\"],\n            \"properties\": {\n              \"cohort\": {\n                \"type\": \"string\"\n              },\n              \"amount\": {\n                \"type\": \"number\"\n              }\n            }\n          }\n        },\n        \"pacing_targets\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\"period\", \"target\"],\n            \"properties\": {\n              \"period\": {\n                \"type\": \"string\",\n                \"description\": \"Period identifier (e.g., 2024-Q1)\"\n              },\n              \"target\": {\n                \"type\": \"number\",\n                \"description\": \"Target allocation for period\"\n              }\n            }\n          }\n        },\n        \"violations\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"Expected constraint violations (for adversarial tests)\"\n        }\n      }\n    },\n    \"notes\": {\n      \"type\": \"string\",\n      \"description\": \"Additional context or boundary conditions\"\n    }\n  }\n}"
        },
        "metadata": {
          "_promptfooFileMetadata": {}
        },
        "failureReason": 0
      },
      {
        "cost": 0.048255,
        "gradingResult": {
          "pass": true,
          "score": 1,
          "reason": "No assertions",
          "tokensUsed": {
            "total": 0,
            "prompt": 0,
            "completion": 0,
            "cached": 0,
            "numRequests": 0
          }
        },
        "id": "ba4ffa48-e423-4399-a744-882d8c38ae7d",
        "latencyMs": 20435,
        "namedScores": {},
        "prompt": {
          "raw": "\nYou are a meticulous documentation validator for the **Capital Allocation** module.\n\nGoals:\n1) Summarize three engines: Reserve, Pacing, Cohort\n2) Explain key formulas (reserve target/floor, pacing with carryover, cohort caps/rounding)\n3) State precedence rules (Reserve > Pacing > Cohort) and recycling interaction\n4) Reference code/docs with ≥3 trace anchors (file:line style)\n5) Demonstrate understanding via ≥1 boundary behavior (cap binds, reserve precedence, carryover)\n\nOutput structure:\n- **Domain Summary** (6-10 bullets covering engines, precedence, edge cases)\n- **Key Formulas** (≥5 formulas with variable definitions)\n- **Rules & Precedence** (clear, testable statements)\n- **Traceability** (≥3 file:line anchors to code/schema/docs)\n\nOnly use information from the document below. Do not invent APIs not present in it.\n\n<document>\n{'vars': {'doc_type': 'architectural_decision', 'doc_content': '# ADR-008: Capital Allocation Policy (Reserve, Pacing, Cohort)\\n\\n**Status**: Proposed **Date**: 2025-10-29 **Owners**: Capital Allocation WG\\n\\n## 1. Context\\n\\nThe allocation layer must deploy capital predictably across time and cohorts\\nwhile honoring liquidity protection and fairness. Inputs arrive from upstream\\nmodules (Waterfall: realized cash; Fees: fee schedules; Exit Recycling:\\neligibility). Downstream consumers need auditable, deterministic outputs with\\nclear precedence when rules conflict.\\n\\n## 2. Decision\\n\\n### 2.1 Core Precedence\\n\\n**Reserve floor → Pacing target → Cohort allocation**\\n\\nThis precedence ensures liquidity protection takes priority over deployment\\nsmoothness, which in turn takes priority over cohort-level fairness\\nconsiderations.\\n\\n### 2.2 Reserve Policy\\n\\n- **Default**: `static_pct` (target_reserve_pct × commitment)\\n- **Extensions**: `dynamic_ratio`, `waterfall_dependent` (versioned additions)\\n- **Floor enforcement**: `max(reserve_target, min_cash_buffer)`\\n\\nThe reserve engine must satisfy its target before any capital is allocated to\\ndeals. If the reserve balance falls below the floor (which is the maximum of the\\ncalculated reserve target and the minimum cash buffer), allocations are reduced\\nuntil the reserve is replenished.\\n\\n### 2.3 Pacing\\n\\n- **Rolling window with carryover**: C*t = max(0, P*{t-1} - A\\\\_{t-1})\\n- **Cadence**: monthly | quarterly | annual\\n- **Changes apply prospectively** (no retroactive reallocation)\\n\\nPacing smooths deployment over time using a rolling window (typically 12-24\\nmonths). If a period under-deploys relative to its target, the shortfall carries\\nforward to the next period. Changes to the pacing window (e.g., from 24 to 18\\nmonths) apply from the change date forward and do not trigger retroactive\\nadjustments.\\n\\n### 2.4 Cohort Allocation\\n\\n- **Pro-rata by normalized weights**: Each cohort receives allocation\\n  proportional to its weight relative to the sum of all active cohort weights\\n- **Enforce `max_allocation_per_cohort` cap**: No single cohort can receive more\\n  than this percentage of the period\\'s total allocation\\n- **Spill deterministically to remaining cohorts**: If a cohort hits its cap,\\n  the residual amount is reallocated to other cohorts in a deterministic order\\n- **Rounding**: Bankers\\' rounding (round to nearest even); tie-break to highest\\n  remainder → lexicographic name order\\n\\n### 2.5 Recycling Integration\\n\\n- **Eligible distributions increase allocable capacity after reserve checks**:\\n  When an exit generates proceeds that are eligible for recycling, these funds\\n  are added to the allocable capacity, but only after the reserve engine has\\n  verified that reserve requirements are met\\n- **Capital recalls (negative distributions) are NOT recycle-eligible**: When\\n  LPs are required to return capital (capital recall/clawback), this is modeled\\n  as a negative distribution amount, but these amounts cannot be recycled back\\n  into new deals\\n\\n### 2.6 Versioning\\n\\n- **Schema + policy**: Semantic versioning (semver)\\n- **Breaking changes bump major version**: Any change that would cause existing\\n  truth cases to fail validation requires a major version increment\\n\\n## 3. Design Decision: Negative Distributions as Capital Recalls\\n\\n### 3.1 Context\\n\\nVenture capital funds occasionally need to \"recall\" capital from Limited\\nPartners (LPs) when previously distributed proceeds must be returned. This can\\noccur due to LP defaults, escrow releases, or claw-back provisions in fund\\ndocuments. We needed to decide how to model these events in our data schema.\\n\\n### 3.2 Trade-offs Analysis\\n\\n**Chosen Approach**: Model capital recalls as negative distribution amounts\\n\\n#### Pros (Mathematical Simplicity)\\n\\n1. **Unified ledger**: A single `distributions` array captures all cash flows\\n   to/from LPs\\n   - Net Asset Value (NAV) calculation becomes:\\n     `NAV = Σ(contributions) - Σ(distributions)`\\n   - No need to track separate \"recall\" vs \"distribution\" transaction types\\n\\n2. **Simplified queries**: Calculating net cash flow to LPs is a simple sum\\n\\n   ```sql\\n   SELECT SUM(amount) as net_distributions\\n   FROM distributions\\n   WHERE fund_id = ?\\n   ```\\n\\n3. **Reduced data duplication**: One transaction type instead of two related\\n   types that must be kept synchronized\\n\\n#### Cons (Semantic Ambiguity)\\n\\n1. **Legal semantic mismatch**: A \"distribution\" has a specific legal meaning in\\n   fund documents - it represents capital returning TO the LP. A \"recall\" is the\\n   opposite - capital returning FROM the LP. Conflating these under one field\\n   name creates ambiguity.\\n\\n2. **Reporting confusion**: User-facing reports must clarify terminology:\\n   - \"Gross Distributions\" (sum of positive amounts only)\\n   - \"Net Distributions\" (algebraic sum including recalls)\\n   - Teams unfamiliar with the convention may misinterpret \"Total Distributions\"\\n\\n3. **Integration brittleness**: External systems integrating with our API may\\n   reasonably assume all `distribution.amount` values are non-negative. This can\\n   lead to:\\n   - Validation errors in downstream systems\\n   - Incorrect calculations if systems don\\'t expect negative values\\n   - Need for extensive API documentation and integration guides\\n\\n4. **Lost query granularity**: To specifically find capital recalls requires\\n   filtering:\\n\\n   ```sql\\n   SELECT * FROM distributions WHERE amount < 0  -- All recalls\\n   ```\\n\\n   Instead of:\\n\\n   ```sql\\n   SELECT * FROM capital_recalls  -- Semantic table/type\\n   ```\\n\\n5. **Recycling eligibility ambiguity**: The rule \"recalls are not\\n   recycle-eligible\" must be enforced through application logic checking for\\n   negative amounts, rather than through type system guarantees\\n\\n### 3.3 Mitigation Strategy\\n\\nTo address the semantic concerns while maintaining the chosen approach:\\n\\n1. **Schema documentation**:\\n   - Explicit `description` field in JSON schema explaining negative\\n     distribution semantic\\n   - Reference to this ADR for detailed rationale\\n\\n2. **API layer abstraction**:\\n\\n   ```typescript\\n   // Provide semantic methods that abstract the storage representation\\n   interface FundAPI {\\n     getDistributions(): Distribution[]; // Positive amounts only\\n     getRecalls(): CapitalRecall[]; // Negative amounts, inverted\\n     getNetDistributions(): number; // Algebraic sum\\n   }\\n   ```\\n\\n3. **Reporting layer clarity**:\\n   - All user-facing reports explicitly label \"Gross\" vs \"Net\" distributions\\n   - LP statements include separate line items for distributions and recalls\\n   - Help text explains the distinction\\n\\n4. **Integration contracts**:\\n   - API documentation prominently features this design decision\\n   - Client library examples show correct handling of negative amounts\\n   - Integration test suite includes recall scenarios\\n\\n5. **Validation rules**:\\n   ```typescript\\n   // Application-level validation\\n   if (distribution.amount < 0 && distribution.recycle_eligible === true) {\\n     throw new ValidationError(\\'Capital recalls cannot be recycle-eligible\\');\\n   }\\n   ```\\n\\n### 3.4 Future Migration Path\\n\\nIf semantic clarity becomes a critical issue (e.g., due to regulatory\\nrequirements or persistent integration problems), we can migrate to an explicit\\ntransaction type system:\\n\\n**Schema v2.0 (Future)**:\\n\\n```json\\n{\\n  \"transaction_type\": \"capitalRecall\",\\n  \"amount\": 200000, // Positive value; type indicates direction\\n  \"reason\": \"LP_default\",\\n  \"related_distribution_id\": \"dist-123\", // Links back to original distribution\\n  \"recycle_eligible\": false // Explicitly false by type\\n}\\n```\\n\\n**Migration strategy**:\\n\\n1. Introduce new `transaction_type` field with default value \"distribution\"\\n2. Create `capital_recall` type alongside existing distributions\\n3. Migrate negative distributions to new type via backfill script\\n4. Deprecate negative distribution amounts in schema v2.0\\n5. Remove support in schema v3.0 (breaking change)\\n\\n**Technical debt ticket**: [Create backlog item for schema v2.0 planning]\\n\\n## 4. Rationale\\n\\n### 4.1 Liquidity Protection (Reserve Precedence)\\n\\nThe reserve precedence rule is critical for fund operations:\\n\\n- **Prevents under-reserving**: Without reserve precedence, aggressive pacing\\n  targets could deplete cash reserves below safe levels, creating liquidity risk\\n- **Supports commitments**: Adequate reserves ensure the fund can meet its\\n  obligations to portfolio companies for follow-on investments\\n- **Risk management**: Maintains cash buffer for unforeseen expenses, down-round\\n  protection, or portfolio support\\n\\n**Example (CA-013)**: When monthly pacing targets would deplete reserves below\\nthe floor, the allocation is reduced to preserve liquidity, even if this causes\\nunder-deployment relative to the pacing target.\\n\\n### 4.2 Deployment Smoothness (Pacing with Carryover)\\n\\nPacing prevents both over- and under-deployment:\\n\\n- **Avoids vintage risk**: Deploying too quickly in a single vintage year\\n  concentrates risk\\n- **Reduces J-curve**: Smooth deployment spreads the initial loss period\\n  (J-curve) over multiple years\\n- **Market timing flexibility**: Carryover allows tactical pausing during\\n  overheated markets without losing deployment capacity\\n\\n**Example (CA-009)**: Quarterly pacing with a shortfall in Q1 carries that\\ncapacity to Q2, allowing the fund to take advantage of better deal flow later\\nwithout falling behind on total deployment.\\n\\n### 4.3 Fairness and Diversification (Cohort Allocation)\\n\\nCohort weights and caps ensure portfolio balance:\\n\\n- **Diversification**: Prevents concentration in a single cohort (sector,\\n  geography, stage)\\n- **Strategy alignment**: Cohort weights encode fund strategy (e.g., 60% Core,\\n  40% Growth)\\n- **Risk limits**: Maximum per-cohort caps enforce hard limits on concentration\\n  risk\\n\\n**Deterministic spill** is critical for auditability:\\n\\n- Same inputs always produce same outputs\\n- Auditors can verify allocation logic\\n- No \"black box\" optimization that\\'s hard to explain\\n\\n### 4.4 Explainability and Audit\\n\\nPure functions enable reproducibility:\\n\\n- **No hidden state**: Engines are stateless functions taking explicit inputs\\n- **Testable**: Truth cases provide complete input-output examples\\n- **Debuggable**: Logs show exact decision points (reserve binding, caps\\n  applied, spill amounts)\\n\\n## 5. Alternatives Considered\\n\\n### 5.1 Pacing Precedence Over Reserve\\n\\n**Description**: Invert the precedence to prioritize deployment targets over\\nreserve maintenance.\\n\\n**Rejected because**:\\n\\n- Violates liquidity protection, creating risk of cash shortfalls\\n- Could trigger breach of fund covenants requiring minimum reserves\\n- Makes fund vulnerable to portfolio support needs during market downturns\\n\\n### 5.2 Single Global Optimizer\\n\\n**Description**: Use a mathematical optimization algorithm to find the \"optimal\"\\nallocation across all constraints simultaneously.\\n\\n**Rejected because**:\\n\\n- **Opacity**: Optimization solvers are black boxes; stakeholders can\\'t verify\\n  correctness\\n- **Non-determinism**: Tie-breaking in solvers may be non-deterministic or\\n  poorly documented\\n- **Fragility**: Small input changes can cause large output swings due to\\n  constraint binding/unbinding\\n- **Audit complexity**: Auditors require explainable, step-by-step logic\\n\\n### 5.3 Heuristic Rounding\\n\\n**Description**: Use ad-hoc rounding rules (e.g., \"always round up for Core\\ncohort\") instead of deterministic bankers\\' rounding.\\n\\n**Rejected because**:\\n\\n- **Non-deterministic**: Different runs could produce different results\\n- **Audit failure**: Auditors cannot verify allocation correctness\\n- **Favoritism concerns**: Cohort-specific rules create appearance of unfair\\n  preference\\n\\n### 5.4 Separate Capital Recall Transaction Type (v1.0)\\n\\n**Description**: Introduce `capitalRecall` as a distinct transaction type\\nalongside distributions in the initial schema version.\\n\\n**Deferred to v2.0 because**:\\n\\n- **Complexity**: Adds implementation overhead for MVP\\n- **Time to market**: Negative distribution approach allows faster delivery\\n- **Uncertain need**: May not be required if integration partners adapt to\\n  documented convention\\n- **Reversible**: Can migrate to explicit type in v2.0 without data loss\\n\\n**Condition for revisiting**: If 3+ integration partners report issues with\\nnegative distributions, or if regulatory review requires explicit transaction\\ntypes, escalate to schema v2.0 planning.\\n\\n## 6. Consequences\\n\\n### 6.1 Positive Consequences\\n\\n- **Predictable outputs**: Same inputs always produce same results, suitable for\\n  audit and compliance\\n- **Modular design**: Three independent engines (Reserve, Pacing, Cohort) enable\\n  separate testing and evolution\\n- **Clear conflict resolution**: Precedence rules provide unambiguous answers\\n  when constraints conflict\\n- **Audit trail**: Structured logs capture every decision point with\\n  justification\\n\\n### 6.2 Negative Consequences\\n\\n- **Under-deployment risk**: Reserve precedence can delay capital deployment\\n  when reserves bind, potentially under-deploying relative to fund strategy\\n- **Complexity**: Cap enforcement and spill reallocation add implementation\\n  complexity vs. simple pro-rata allocation\\n- **Semantic debt**: Negative distribution modeling creates documentation and\\n  integration burden\\n\\n### 6.3 Mitigation Plans\\n\\n**For under-deployment**:\\n\\n- Monitor reserve binding frequency via metrics\\n- Alert fund managers when reserve precedence triggers\\n- Dashboard shows \"foregone allocations\" due to reserve constraints\\n\\n**For complexity**:\\n\\n- Comprehensive truth cases validate edge cases (CA-015: cap binding, CA-018:\\n  rounding tie-breaks)\\n- Unit tests for each engine independently\\n- Integration tests for multi-engine coordination (CA-020)\\n\\n**For semantic debt**:\\n\\n- ADR-008 documents design rationale (this document)\\n- Schema descriptions reference this ADR\\n- API documentation includes \"Capital Recall Handling\" section\\n- Client libraries provide semantic helper methods\\n\\n## 7. Implementation Notes\\n\\n### 7.1 Engine Architecture\\n\\nAll engines are **pure functions**:\\n\\n```typescript\\n// Reserve Engine\\ninterface ReserveState {\\n  target: number;\\n  floor: number;\\n  balance: number;\\n  needs: number;\\n}\\nfunction computeReserveState(inputs: Inputs, timestamp: Date): ReserveState;\\n\\n// Pacing Engine\\ninterface PacingTargets {\\n  period: string;\\n  base: number;\\n  carryover: number;\\n  target: number;\\n}\\nfunction computePacingTargets(\\n  inputs: Inputs,\\n  calendar: Calendar\\n): Map<Period, PacingTargets>;\\n\\n// Cohort Engine\\ninterface CohortAllocation {\\n  cohort: string;\\n  preCapAmount: number;\\n  capApplied: boolean;\\n  finalAmount: number;\\n}\\nfunction allocateToCohorts(\\n  amount: number,\\n  cohorts: Cohort[],\\n  maxPerCohort: number\\n): CohortAllocation[];\\n```\\n\\n**No hidden state**: All inputs explicit; no global variables or mutable state.\\n\\n### 7.2 Time Handling\\n\\n- **Normalization**: All timestamps converted to fund timezone before processing\\n- **Period boundaries**: Calculated via `Calendar` abstraction (handles\\n  month-end, quarter-end, year-end consistently)\\n- **Cadence alignment**: Monthly/quarterly/annual rebalancing snaps to calendar\\n  boundaries\\n\\n### 7.3 Idempotency\\n\\nSpill and carryover calculations are **order-stable**:\\n\\n- Sorting cohorts lexicographically before spill reallocation\\n- Carryover applied in chronological order\\n- Rounding tie-breaks follow highest-remainder → lexicographic rule\\n\\nThis ensures that running the same calculation multiple times produces identical\\nresults.\\n\\n### 7.4 Observability\\n\\nEmit structured JSON per period:\\n\\n```json\\n{\\n  \"period\": \"2025-05\",\\n  \"reserve\": {\\n    \"target\": 8000000,\\n    \"balance\": 10000000,\\n    \"needs\": 0,\\n    \"precedence_applied\": false\\n  },\\n  \"pacing\": {\\n    \"base\": 1666667,\\n    \"carryover\": 0,\\n    \"target\": 1666667\\n  },\\n  \"cohorts_pre_caps\": [\\n    { \"name\": \"A\", \"amount\": 900000 },\\n    { \"name\": \"B\", \"amount\": 900000 }\\n  ],\\n  \"caps\": {\\n    \"max_per_cohort\": 0.5,\\n    \"cohorts_capped\": [],\\n    \"spilled\": 0\\n  },\\n  \"allocations\": [\\n    { \"name\": \"A\", \"amount\": 900000 },\\n    { \"name\": \"B\", \"amount\": 900000 }\\n  ]\\n}\\n```\\n\\nThis log format enables:\\n\\n- Debugging allocation decisions\\n- Audit trail reconstruction\\n- Performance metrics (how often caps bind, reserve precedence triggers, etc.)\\n\\n## 8. Test Strategy\\n\\n### 8.1 Coverage Plan\\n\\n**20 truth cases** covering:\\n\\n- **Reserve Engine**: 8 cases\\n  - CA-001: Baseline (reserve satisfied)\\n  - CA-002: Underfunded (reserve needs > 0)\\n  - CA-003: Overfunded (reserve > target)\\n  - CA-004: Zero contributions (adversarial)\\n  - CA-005: Dynamic ratio tracking\\n  - CA-006: Large distribution rebalancing\\n  - CA-007: Year-end cutoff handling\\n  - CA-013: **Reserve precedence over pacing** (conflict resolution)\\n\\n- **Pacing Engine**: 5 cases\\n  - CA-008: Monthly pacing baseline\\n  - CA-009: **Quarterly pacing with carryover**\\n  - CA-010: Front-loaded pipeline constrained\\n  - CA-011: Pipeline drought (pacing floor triggered)\\n  - CA-012: Window comparison (24-month vs 18-month scenarios)\\n\\n- **Cohort Engine**: 6 cases\\n  - CA-014: Fixed weights (simple pro-rata)\\n  - CA-015: **Cohort cap binding with spill**\\n  - CA-016: **Cohort lifecycle transitions** (cohort closes mid-year)\\n  - CA-017: Quarterly rebalance vs monthly\\n  - CA-018: **Rounding with tie-break** (three equal-weight cohorts)\\n  - CA-019: **Capital recall** (negative distribution handling)\\n\\n- **Integration**: 1 case\\n  - CA-020: **Multi-engine coordination** (reserve + pacing + caps + recycling)\\n\\n### 8.2 Adversarial Cases\\n\\nMinimum 6 adversarial/edge cases included:\\n\\n- CA-004: Zero contributions (no deployment)\\n- CA-011: Pipeline drought (pacing floor, no deals)\\n- CA-013: Reserve overrides pacing (conflict)\\n- CA-015: Cohort cap forces spill\\n- CA-019: Capital recall (negative distribution)\\n- CA-020: All policies interact simultaneously\\n\\n### 8.3 Validation Approach\\n\\n1. **JSON Schema validation**: All truth cases must pass `ajv` schema validation\\n2. **Domain scoring**: Custom scorer evaluates documentation against:\\n   - Domain keyword coverage (30%)\\n   - Schema vocabulary alignment (25%)\\n   - Code reference completeness (25%)\\n   - Truth case overlap (20%)\\n3. **Target**: ≥90% domain score (matching Phase 1B/1C quality standard)\\n\\n## 9. References\\n\\n### 9.1 Schema and Data\\n\\n- **Schema**: `docs/schemas/capital-allocation-truth-case.schema.json`\\n- **Truth cases**: `docs/capital-allocation.truth-cases.json` (20 cases, CA-001\\n  through CA-020)\\n- **Validator**: `scripts/validation/capital-allocation-validation.yaml`\\n\\n### 9.2 Related ADRs\\n\\n- **ADR-006**: Fee Calculation Standards (upstream: provides fee schedules)\\n- **ADR-007**: Exit Recycling Policy (upstream: provides eligibility flags)\\n\\n### 9.3 Implementation\\n\\n- **Reserve Engine**: `client/src/core/reserves/ReserveEngine.ts` (planned)\\n- **Pacing Engine**: `client/src/core/pacing/PacingEngine.ts` (planned)\\n- **Cohort Engine**: `client/src/core/cohorts/CohortEngine.ts` (planned)\\n\\n## 10. Approval and Review\\n\\n**Review required from**:\\n\\n- Capital Allocation Working Group\\n- Finance team (reserve policy implications)\\n- Legal/Compliance (capital recall handling)\\n- Integration partners (negative distribution convention)\\n\\n**Status**: Awaiting review **Next review date**: TBD\\n\\n---\\n\\n**Document version**: 1.0.0 **Last updated**: 2025-10-29', 'truth_cases': '[\\n  {\\n    \"id\": \"CA-001\",\\n    \"module\": \"CapitalAllocation\",\\n    \"category\": \"reserve_engine\",\\n    \"description\": \"Static % reserve at target with smooth quarterly inflows\",\\n    \"inputs\": {\\n      \"fund\": {\\n        \"commitment\": 100,\\n        \"target_reserve_pct\": 0.2,\\n        \"reserve_policy\": \"static_pct\",\\n        \"pacing_window_months\": 24,\\n        \"vintage_year\": 2024\\n      },\\n      \"timeline\": {\\n        \"start_date\": \"2024-01-01\",\\n        \"end_date\": \"2024-12-31\"\\n      },\\n      \"flows\": {\\n        \"contributions\": [\\n          {\\n            \"date\": \"2024-03-31\",\\n            \"amount\": 5\\n          },\\n          {\\n            \"date\": \"2024-06-30\",\\n            \"amount\": 5\\n          },\\n          {\\n            \"date\": \"2024-09-30\",\\n            \"amount\": 5\\n          },\\n          {\\n            \"date\": \"2024-12-31\",\\n            \"amount\": 5\\n          }\\n        ],\\n        \"distributions\": []\\n      },\\n      \"constraints\": {\\n        \"min_cash_buffer\": 1,\\n        \"rebalance_frequency\": \"quarterly\"\\n      }\\n    },\\n    \"expected\": {\\n      \"reserve_balance\": 20,\\n      \"allocations_by_cohort\": [\\n        {\\n          \"cohort\": \"2024\",\\n          \"amount\": 80\\n        }\\n      ],\\n      \"violations\": []\\n    },\\n    \"notes\": \"Baseline case: reserve reaches 20% target with no violations\",\\n    \"schemaVersion\": \"1.0.0\"\\n  },\\n  {\\n    \"id\": \"CA-002\",\\n    \"module\": \"CapitalAllocation\",\\n    \"category\": \"reserve_engine\",\\n    \"description\": \"Underfunded reserve triggers buffer top-up from next contribution\",\\n    \"inputs\": {\\n      \"fund\": {\\n        \"commitment\": 100,\\n        \"target_reserve_pct\": 0.2,\\n        \"reserve_policy\": \"static_pct\",\\n        \"pacing_window_months\": 24,\\n        \"vintage_year\": 2024\\n      },\\n      \"timeline\": {\\n        \"start_date\": \"2024-01-01\",\\n        \"end_date\": \"2024-06-30\"\\n      },\\n      \"flows\": {\\n        \"contributions\": [\\n          {\\n            \"date\": \"2024-03-31\",\\n            \"amount\": 10\\n          }\\n        ],\\n        \"distributions\": [\\n          {\\n            \"date\": \"2024-05-15\",\\n            \"amount\": 8,\\n            \"recycle_eligible\": false\\n          }\\n        ]\\n      },\\n      \"constraints\": {\\n        \"min_cash_buffer\": 2,\\n        \"rebalance_frequency\": \"quarterly\"\\n      }\\n    },\\n    \"expected\": {\\n      \"reserve_balance\": 2,\\n      \"allocations_by_cohort\": [\\n        {\\n          \"cohort\": \"2024\",\\n          \"amount\": 0\\n        }\\n      ],\\n      \"violations\": []\\n    },\\n    \"notes\": \"Distribution depletes reserve below target; min_cash_buffer is preserved\",\\n    \"schemaVersion\": \"1.0.0\"\\n  },\\n  {\\n    \"id\": \"CA-003\",\\n    \"module\": \"CapitalAllocation\",\\n    \"category\": \"reserve_engine\",\\n    \"description\": \"Overfunded reserve redeploys excess in next rebalancing period\",\\n    \"inputs\": {\\n      \"fund\": {\\n        \"commitment\": 100,\\n        \"target_reserve_pct\": 0.15,\\n        \"reserve_policy\": \"static_pct\",\\n        \"pacing_window_months\": 24,\\n        \"vintage_year\": 2024\\n      },\\n      \"timeline\": {\\n        \"start_date\": \"2024-01-01\",\\n        \"end_date\": \"2024-12-31\"\\n      },\\n      \"flows\": {\\n        \"contributions\": [\\n          {\\n            \"date\": \"2024-03-31\",\\n            \"amount\": 25\\n          }\\n        ],\\n        \"distributions\": []\\n      },\\n      \"constraints\": {\\n        \"min_cash_buffer\": 1,\\n        \"rebalance_frequency\": \"quarterly\"\\n      }\\n    },\\n    \"expected\": {\\n      \"reserve_balance\": 15,\\n      \"allocations_by_cohort\": [\\n        {\\n          \"cohort\": \"2024\",\\n          \"amount\": 10\\n        }\\n      ],\\n      \"violations\": []\\n    },\\n    \"notes\": \"Reserve capped at 15% (15M); excess 10M allocated to cohort\",\\n    \"schemaVersion\": \"1.0.0\"\\n  },\\n  {\\n    \"id\": \"CA-004\",\\n    \"module\": \"CapitalAllocation\",\\n    \"category\": \"reserve_engine\",\\n    \"description\": \"Reserve floor binding with zero contributions quarter (adversarial)\",\\n    \"inputs\": {\\n      \"fund\": {\\n        \"commitment\": 100,\\n        \"target_reserve_pct\": 0.2,\\n        \"reserve_policy\": \"static_pct\",\\n        \"pacing_window_months\": 24,\\n        \"vintage_year\": 2024\\n      },\\n      \"timeline\": {\\n        \"start_date\": \"2024-01-01\",\\n        \"end_date\": \"2024-03-31\"\\n      },\\n      \"flows\": {\\n        \"contributions\": [],\\n        \"distributions\": []\\n      },\\n      \"constraints\": {\\n        \"min_cash_buffer\": 5,\\n        \"rebalance_frequency\": \"quarterly\"\\n      }\\n    },\\n    \"expected\": {\\n      \"reserve_balance\": 0,\\n      \"allocations_by_cohort\": [\\n        {\\n          \"cohort\": \"2024\",\\n          \"amount\": 0\\n        }\\n      ],\\n      \"violations\": [\"reserve_below_minimum\"]\\n    },\\n    \"notes\": \"Adversarial: zero inflows cannot satisfy min_cash_buffer constraint\",\\n    \"schemaVersion\": \"1.0.0\"\\n  },\\n  {\\n    \"id\": \"CA-005\",\\n    \"module\": \"CapitalAllocation\",\\n    \"category\": \"reserve_engine\",\\n    \"description\": \"Dynamic ratio tracking with NAV-dependent reserve target\",\\n    \"inputs\": {\\n      \"fund\": {\\n        \"commitment\": 100,\\n        \"target_reserve_pct\": 0.25,\\n        \"reserve_policy\": \"dynamic_ratio\",\\n        \"pacing_window_months\": 24,\\n        \"vintage_year\": 2024\\n      },\\n      \"timeline\": {\\n        \"start_date\": \"2024-01-01\",\\n        \"end_date\": \"2024-12-31\"\\n      },\\n      \"flows\": {\\n        \"contributions\": [\\n          {\\n            \"date\": \"2024-06-30\",\\n            \"amount\": 30\\n          }\\n        ],\\n        \"distributions\": [\\n          {\\n            \"date\": \"2024-09-30\",\\n            \"amount\": 10,\\n            \"recycle_eligible\": true\\n          }\\n        ]\\n      },\\n      \"constraints\": {\\n        \"min_cash_buffer\": 2,\\n        \"rebalance_frequency\": \"quarterly\"\\n      }\\n    },\\n    \"expected\": {\\n      \"reserve_balance\": 5,\\n      \"allocations_by_cohort\": [\\n        {\\n          \"cohort\": \"2024\",\\n          \"amount\": 15\\n        }\\n      ],\\n      \"violations\": []\\n    },\\n    \"notes\": \"Dynamic policy adjusts reserve based on NAV changes; distribution reduces NAV, lowering reserve target\",\\n    \"schemaVersion\": \"1.0.0\"\\n  },\\n  {\\n    \"id\": \"CA-006\",\\n    \"module\": \"CapitalAllocation\",\\n    \"category\": \"reserve_engine\",\\n    \"description\": \"Large mid-year distribution triggers reserve rebalancing\",\\n    \"inputs\": {\\n      \"fund\": {\\n        \"commitment\": 100,\\n        \"target_reserve_pct\": 0.2,\\n        \"reserve_policy\": \"static_pct\",\\n        \"pacing_window_months\": 24,\\n        \"vintage_year\": 2024\\n      },\\n      \"timeline\": {\\n        \"start_date\": \"2024-01-01\",\\n        \"end_date\": \"2024-12-31\"\\n      },\\n      \"flows\": {\\n        \"contributions\": [\\n          {\\n            \"date\": \"2024-03-31\",\\n            \"amount\": 25\\n          }\\n        ],\\n        \"distributions\": [\\n          {\\n            \"date\": \"2024-07-15\",\\n            \"amount\": 15,\\n            \"recycle_eligible\": false\\n          }\\n        ]\\n      },\\n      \"constraints\": {\\n        \"min_cash_buffer\": 2,\\n        \"rebalance_frequency\": \"quarterly\"\\n      }\\n    },\\n    \"expected\": {\\n      \"reserve_balance\": 10,\\n      \"allocations_by_cohort\": [\\n        {\\n          \"cohort\": \"2024\",\\n          \"amount\": 0\\n        }\\n      ],\\n      \"violations\": []\\n    },\\n    \"notes\": \"Large distribution depletes reserve; Q3 rebalancing restores to target (50% of remaining 20M)\",\\n    \"schemaVersion\": \"1.0.0\"\\n  }\\n]', 'schema': '{\\n  \"$id\": \"https://updog.press-on.ventures/schemas/capital-allocation-truth-case.schema.json\",\\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\\n  \"title\": \"Capital Allocation Truth Case\",\\n  \"description\": \"Canonical test scenario for capital allocation validation (ReserveEngine, PacingEngine, CohortEngine)\",\\n  \"type\": \"object\",\\n  \"required\": [\"id\", \"module\", \"category\", \"description\", \"inputs\", \"expected\"],\\n  \"properties\": {\\n    \"schemaVersion\": {\\n      \"type\": \"string\",\\n      \"pattern\": \"^\\\\\\\\d+\\\\\\\\.\\\\\\\\d+\\\\\\\\.\\\\\\\\d+$\",\\n      \"description\": \"Semantic version of truth case schema (e.g., 1.0.0)\"\\n    },\\n    \"id\": {\\n      \"type\": \"string\",\\n      \"pattern\": \"^CA-[0-9]{3}$\",\\n      \"description\": \"Unique identifier (e.g., CA-001)\"\\n    },\\n    \"module\": {\\n      \"const\": \"CapitalAllocation\",\\n      \"description\": \"Module name\"\\n    },\\n    \"category\": {\\n      \"type\": \"string\",\\n      \"enum\": [\\n        \"reserve_engine\",\\n        \"pacing_engine\",\\n        \"cohort_engine\",\\n        \"integration\"\\n      ],\\n      \"description\": \"Test category\"\\n    },\\n    \"description\": {\\n      \"type\": \"string\",\\n      \"description\": \"Human-readable test scenario description\"\\n    },\\n    \"inputs\": {\\n      \"type\": \"object\",\\n      \"required\": [\"fund\", \"timeline\"],\\n      \"properties\": {\\n        \"fund\": {\\n          \"type\": \"object\",\\n          \"required\": [\\n            \"commitment\",\\n            \"target_reserve_pct\",\\n            \"reserve_policy\",\\n            \"pacing_window_months\",\\n            \"vintage_year\"\\n          ],\\n          \"properties\": {\\n            \"commitment\": {\\n              \"type\": \"number\",\\n              \"minimum\": 0,\\n              \"description\": \"Total fund commitment in millions\"\\n            },\\n            \"target_reserve_pct\": {\\n              \"type\": \"number\",\\n              \"minimum\": 0,\\n              \"maximum\": 1,\\n              \"description\": \"Target reserve as percentage of commitment\"\\n            },\\n            \"reserve_policy\": {\\n              \"type\": \"string\",\\n              \"enum\": [\"static_pct\", \"dynamic_ratio\", \"waterfall_dependent\"],\\n              \"description\": \"Reserve allocation policy\"\\n            },\\n            \"pacing_window_months\": {\\n              \"type\": \"integer\",\\n              \"minimum\": 1,\\n              \"maximum\": 60,\\n              \"description\": \"Rolling window for pacing calculations (months)\"\\n            },\\n            \"vintage_year\": {\\n              \"type\": \"integer\",\\n              \"minimum\": 1980,\\n              \"description\": \"Fund vintage year\"\\n            }\\n          }\\n        },\\n        \"timeline\": {\\n          \"type\": \"object\",\\n          \"required\": [\"start_date\"],\\n          \"properties\": {\\n            \"start_date\": {\\n              \"type\": \"string\",\\n              \"format\": \"date\",\\n              \"description\": \"Allocation period start date\"\\n            },\\n            \"end_date\": {\\n              \"type\": \"string\",\\n              \"format\": \"date\",\\n              \"description\": \"Allocation period end date\"\\n            }\\n          }\\n        },\\n        \"flows\": {\\n          \"type\": \"object\",\\n          \"properties\": {\\n            \"contributions\": {\\n              \"type\": \"array\",\\n              \"items\": {\\n                \"type\": \"object\",\\n                \"required\": [\"date\", \"amount\"],\\n                \"properties\": {\\n                  \"date\": {\\n                    \"type\": \"string\",\\n                    \"format\": \"date\"\\n                  },\\n                  \"amount\": {\\n                    \"type\": \"number\",\\n                    \"minimum\": 0\\n                  }\\n                }\\n              }\\n            },\\n            \"distributions\": {\\n              \"type\": \"array\",\\n              \"items\": {\\n                \"type\": \"object\",\\n                \"required\": [\"date\", \"amount\"],\\n                \"properties\": {\\n                  \"date\": {\\n                    \"type\": \"string\",\\n                    \"format\": \"date\"\\n                  },\\n                  \"amount\": {\\n                    \"type\": \"number\",\\n                    \"description\": \"Distribution amount. Negative values represent capital recalls/clawbacks. See ADR-008 for rationale and downstream implications. Note: recycle_eligible should be false for recalls.\"\\n                  },\\n                  \"recycle_eligible\": {\\n                    \"type\": \"boolean\",\\n                    \"description\": \"Whether distribution can be recycled\"\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        },\\n        \"constraints\": {\\n          \"type\": \"object\",\\n          \"properties\": {\\n            \"min_cash_buffer\": {\\n              \"type\": \"number\",\\n              \"minimum\": 0,\\n              \"description\": \"Minimum cash buffer in millions\"\\n            },\\n            \"max_allocation_per_cohort\": {\\n              \"type\": \"number\",\\n              \"minimum\": 0,\\n              \"maximum\": 1,\\n              \"description\": \"Maximum allocation percentage per cohort\"\\n            },\\n            \"rebalance_frequency\": {\\n              \"type\": \"string\",\\n              \"enum\": [\"monthly\", \"quarterly\", \"annual\"],\\n              \"description\": \"Rebalancing frequency\"\\n            }\\n          }\\n        },\\n        \"cohorts\": {\\n          \"type\": \"array\",\\n          \"items\": {\\n            \"type\": \"object\",\\n            \"required\": [\"name\", \"start_date\", \"end_date\", \"weight\"],\\n            \"properties\": {\\n              \"name\": {\\n                \"type\": \"string\",\\n                \"description\": \"Cohort identifier\"\\n              },\\n              \"start_date\": {\\n                \"type\": \"string\",\\n                \"format\": \"date\"\\n              },\\n              \"end_date\": {\\n                \"type\": \"string\",\\n                \"format\": \"date\"\\n              },\\n              \"weight\": {\\n                \"type\": \"number\",\\n                \"minimum\": 0,\\n                \"description\": \"Cohort weight for allocation\"\\n              }\\n            }\\n          }\\n        }\\n      }\\n    },\\n    \"expected\": {\\n      \"type\": \"object\",\\n      \"required\": [\"reserve_balance\", \"allocations_by_cohort\"],\\n      \"properties\": {\\n        \"reserve_balance\": {\\n          \"type\": \"number\",\\n          \"description\": \"Expected reserve balance at end of period\"\\n        },\\n        \"allocations_by_cohort\": {\\n          \"type\": \"array\",\\n          \"items\": {\\n            \"type\": \"object\",\\n            \"required\": [\"cohort\", \"amount\"],\\n            \"properties\": {\\n              \"cohort\": {\\n                \"type\": \"string\"\\n              },\\n              \"amount\": {\\n                \"type\": \"number\"\\n              }\\n            }\\n          }\\n        },\\n        \"pacing_targets\": {\\n          \"type\": \"array\",\\n          \"items\": {\\n            \"type\": \"object\",\\n            \"required\": [\"period\", \"target\"],\\n            \"properties\": {\\n              \"period\": {\\n                \"type\": \"string\",\\n                \"description\": \"Period identifier (e.g., 2024-Q1)\"\\n              },\\n              \"target\": {\\n                \"type\": \"number\",\\n                \"description\": \"Target allocation for period\"\\n              }\\n            }\\n          }\\n        },\\n        \"violations\": {\\n          \"type\": \"array\",\\n          \"items\": {\\n            \"type\": \"string\"\\n          },\\n          \"description\": \"Expected constraint violations (for adversarial tests)\"\\n        }\\n      }\\n    },\\n    \"notes\": {\\n      \"type\": \"string\",\\n      \"description\": \"Additional context or boundary conditions\"\\n    }\\n  }\\n}'}, 'provider': {'id': 'anthropic:messages:claude-3-7-sonnet-20250219', 'label': 'Claude 3.7 Sonnet'}, 'config': {}}\n</document>\n",
          "label": "prompts.py:capital_allocation_prompt"
        },
        "promptId": "918ebaaaa613175d758dbd8e7c6e1defe3e805eeef13da0766eb265e18def0bd",
        "promptIdx": 0,
        "provider": {
          "id": "anthropic:messages:claude-3-7-sonnet-20250219",
          "label": "Claude 3.7 Sonnet"
        },
        "response": {
          "output": "# Capital Allocation Module Documentation\n\n## Domain Summary\n\n- **Capital Allocation** consists of three engines with strict precedence: **Reserve Engine** (highest priority), **Pacing Engine** (middle priority), and **Cohort Engine** (lowest priority).\n- The **Reserve Engine** ensures liquidity protection by maintaining a target reserve level calculated as `max(reserve_target, min_cash_buffer)`, where reserve_target is typically a percentage of fund commitment.\n- The **Pacing Engine** smooths deployment over time using a rolling window (typically 12-24 months) with carryover of shortfalls from previous periods: `Carryover_t = max(0, PacingTarget_{t-1} - ActualAllocation_{t-1})`.\n- The **Cohort Engine** allocates capital to cohorts based on normalized weights, enforcing a maximum allocation cap per cohort with deterministic spill to remaining cohorts.\n- When a cohort hits its cap, excess allocation spills to other cohorts in deterministic order (lexicographically by name).\n- Recycling-eligible distributions increase allocable capacity after reserve requirements are met, but capital recalls (modeled as negative distributions) are not recycle-eligible.\n- Boundary behaviors include: reserve precedence reducing allocations when reserve is below floor, pacing carryover allowing tactical flexibility, and cohort caps preventing concentration risk.\n\n## Key Formulas\n\n1. **Reserve Target Calculation**:\n   - `reserve_floor = max(reserve_target, min_cash_buffer)`\n   - `reserve_target = target_reserve_pct × commitment` (for static_pct policy)\n\n2. **Pacing with Carryover**:\n   - `Carryover_t = max(0, PacingTarget_{t-1} - ActualAllocation_{t-1})`\n   - `CurrentPacingTarget_t = BasePacingTarget_t + Carryover_t`\n\n3. **Cohort Allocation (Pro-rata)**:\n   - `cohort_allocation = (cohort_weight / sum_of_active_weights) × total_allocation`\n\n4. **Cohort Cap Enforcement**:\n   - `capped_allocation = min(cohort_allocation, max_allocation_per_cohort × total_allocation)`\n   - `spill_amount = cohort_allocation - capped_allocation` (redistributed to other cohorts)\n\n5. **Rounding Rule**:\n   - Banker's rounding (round to nearest even)\n   - Tie-break: highest remainder → lexicographic name order\n\n## Rules & Precedence\n\n1. **Reserve takes precedence over all other engines**:\n   - If reserve balance < reserve floor, allocations are reduced until reserve is replenished\n   - Reserve must be satisfied before any capital is allocated to deals\n\n2. **Pacing takes precedence over Cohort allocation**:\n   - Pacing targets (with carryover) determine period allocation amount\n   - Changes to pacing window apply prospectively, not retroactively\n\n3. **Cohort allocation occurs after Reserve and Pacing constraints are satisfied**:\n   - Pro-rata allocation by normalized weights\n   - No cohort can receive more than `max_allocation_per_cohort` of total allocation\n   - Excess from capped cohorts spills deterministically to remaining cohorts\n\n4. **Recycling Integration**:\n   - Eligible distributions increase allocable capacity only after reserve requirements are met\n   - Capital recalls (negative distributions) are never recycle-eligible\n\n5. **Deterministic Outputs**:\n   - Same inputs always produce same outputs (critical for audit)\n   - Spill and carryover calculations are order-stable\n\n## Traceability\n\n1. **Reserve Engine**: `client/src/core/reserves/ReserveEngine.ts` (planned implementation)\n   - Truth case CA-013 demonstrates reserve precedence over pacing\n\n2. **Pacing Engine**: `client/src/core/pacing/PacingEngine.ts` (planned implementation)\n   - Truth case CA-009 demonstrates quarterly pacing with carryover\n\n3. **Cohort Engine**: `client/src/core/cohorts/CohortEngine.ts` (planned implementation)\n   - Truth case CA-015 demonstrates cohort cap binding with spill\n\n4. **Schema Definition**: `docs/schemas/capital-allocation-truth-case.schema.json`\n   - Defines the structure for all capital allocation truth cases\n\n5. **Truth Cases**: `docs/capital-allocation.truth-cases.json`\n   - Contains 20 test cases (CA-001 through CA-020) covering various scenarios",
          "tokenUsage": {
            "total": 11761,
            "prompt": 10680,
            "completion": 1081
          },
          "finishReason": "stop",
          "cost": 0.048255
        },
        "score": 1,
        "success": true,
        "testCase": {
          "description": "Validate ADR-008 (architectural decision record)",
          "vars": {
            "doc_type": "architectural_decision",
            "doc_content": "# ADR-008: Capital Allocation Policy (Reserve, Pacing, Cohort)\n\n**Status**: Proposed **Date**: 2025-10-29 **Owners**: Capital Allocation WG\n\n## 1. Context\n\nThe allocation layer must deploy capital predictably across time and cohorts\nwhile honoring liquidity protection and fairness. Inputs arrive from upstream\nmodules (Waterfall: realized cash; Fees: fee schedules; Exit Recycling:\neligibility). Downstream consumers need auditable, deterministic outputs with\nclear precedence when rules conflict.\n\n## 2. Decision\n\n### 2.1 Core Precedence\n\n**Reserve floor → Pacing target → Cohort allocation**\n\nThis precedence ensures liquidity protection takes priority over deployment\nsmoothness, which in turn takes priority over cohort-level fairness\nconsiderations.\n\n### 2.2 Reserve Policy\n\n- **Default**: `static_pct` (target_reserve_pct × commitment)\n- **Extensions**: `dynamic_ratio`, `waterfall_dependent` (versioned additions)\n- **Floor enforcement**: `max(reserve_target, min_cash_buffer)`\n\nThe reserve engine must satisfy its target before any capital is allocated to\ndeals. If the reserve balance falls below the floor (which is the maximum of the\ncalculated reserve target and the minimum cash buffer), allocations are reduced\nuntil the reserve is replenished.\n\n### 2.3 Pacing\n\n- **Rolling window with carryover**: C*t = max(0, P*{t-1} - A\\_{t-1})\n- **Cadence**: monthly | quarterly | annual\n- **Changes apply prospectively** (no retroactive reallocation)\n\nPacing smooths deployment over time using a rolling window (typically 12-24\nmonths). If a period under-deploys relative to its target, the shortfall carries\nforward to the next period. Changes to the pacing window (e.g., from 24 to 18\nmonths) apply from the change date forward and do not trigger retroactive\nadjustments.\n\n### 2.4 Cohort Allocation\n\n- **Pro-rata by normalized weights**: Each cohort receives allocation\n  proportional to its weight relative to the sum of all active cohort weights\n- **Enforce `max_allocation_per_cohort` cap**: No single cohort can receive more\n  than this percentage of the period's total allocation\n- **Spill deterministically to remaining cohorts**: If a cohort hits its cap,\n  the residual amount is reallocated to other cohorts in a deterministic order\n- **Rounding**: Bankers' rounding (round to nearest even); tie-break to highest\n  remainder → lexicographic name order\n\n### 2.5 Recycling Integration\n\n- **Eligible distributions increase allocable capacity after reserve checks**:\n  When an exit generates proceeds that are eligible for recycling, these funds\n  are added to the allocable capacity, but only after the reserve engine has\n  verified that reserve requirements are met\n- **Capital recalls (negative distributions) are NOT recycle-eligible**: When\n  LPs are required to return capital (capital recall/clawback), this is modeled\n  as a negative distribution amount, but these amounts cannot be recycled back\n  into new deals\n\n### 2.6 Versioning\n\n- **Schema + policy**: Semantic versioning (semver)\n- **Breaking changes bump major version**: Any change that would cause existing\n  truth cases to fail validation requires a major version increment\n\n## 3. Design Decision: Negative Distributions as Capital Recalls\n\n### 3.1 Context\n\nVenture capital funds occasionally need to \"recall\" capital from Limited\nPartners (LPs) when previously distributed proceeds must be returned. This can\noccur due to LP defaults, escrow releases, or claw-back provisions in fund\ndocuments. We needed to decide how to model these events in our data schema.\n\n### 3.2 Trade-offs Analysis\n\n**Chosen Approach**: Model capital recalls as negative distribution amounts\n\n#### Pros (Mathematical Simplicity)\n\n1. **Unified ledger**: A single `distributions` array captures all cash flows\n   to/from LPs\n   - Net Asset Value (NAV) calculation becomes:\n     `NAV = Σ(contributions) - Σ(distributions)`\n   - No need to track separate \"recall\" vs \"distribution\" transaction types\n\n2. **Simplified queries**: Calculating net cash flow to LPs is a simple sum\n\n   ```sql\n   SELECT SUM(amount) as net_distributions\n   FROM distributions\n   WHERE fund_id = ?\n   ```\n\n3. **Reduced data duplication**: One transaction type instead of two related\n   types that must be kept synchronized\n\n#### Cons (Semantic Ambiguity)\n\n1. **Legal semantic mismatch**: A \"distribution\" has a specific legal meaning in\n   fund documents - it represents capital returning TO the LP. A \"recall\" is the\n   opposite - capital returning FROM the LP. Conflating these under one field\n   name creates ambiguity.\n\n2. **Reporting confusion**: User-facing reports must clarify terminology:\n   - \"Gross Distributions\" (sum of positive amounts only)\n   - \"Net Distributions\" (algebraic sum including recalls)\n   - Teams unfamiliar with the convention may misinterpret \"Total Distributions\"\n\n3. **Integration brittleness**: External systems integrating with our API may\n   reasonably assume all `distribution.amount` values are non-negative. This can\n   lead to:\n   - Validation errors in downstream systems\n   - Incorrect calculations if systems don't expect negative values\n   - Need for extensive API documentation and integration guides\n\n4. **Lost query granularity**: To specifically find capital recalls requires\n   filtering:\n\n   ```sql\n   SELECT * FROM distributions WHERE amount < 0  -- All recalls\n   ```\n\n   Instead of:\n\n   ```sql\n   SELECT * FROM capital_recalls  -- Semantic table/type\n   ```\n\n5. **Recycling eligibility ambiguity**: The rule \"recalls are not\n   recycle-eligible\" must be enforced through application logic checking for\n   negative amounts, rather than through type system guarantees\n\n### 3.3 Mitigation Strategy\n\nTo address the semantic concerns while maintaining the chosen approach:\n\n1. **Schema documentation**:\n   - Explicit `description` field in JSON schema explaining negative\n     distribution semantic\n   - Reference to this ADR for detailed rationale\n\n2. **API layer abstraction**:\n\n   ```typescript\n   // Provide semantic methods that abstract the storage representation\n   interface FundAPI {\n     getDistributions(): Distribution[]; // Positive amounts only\n     getRecalls(): CapitalRecall[]; // Negative amounts, inverted\n     getNetDistributions(): number; // Algebraic sum\n   }\n   ```\n\n3. **Reporting layer clarity**:\n   - All user-facing reports explicitly label \"Gross\" vs \"Net\" distributions\n   - LP statements include separate line items for distributions and recalls\n   - Help text explains the distinction\n\n4. **Integration contracts**:\n   - API documentation prominently features this design decision\n   - Client library examples show correct handling of negative amounts\n   - Integration test suite includes recall scenarios\n\n5. **Validation rules**:\n   ```typescript\n   // Application-level validation\n   if (distribution.amount < 0 && distribution.recycle_eligible === true) {\n     throw new ValidationError('Capital recalls cannot be recycle-eligible');\n   }\n   ```\n\n### 3.4 Future Migration Path\n\nIf semantic clarity becomes a critical issue (e.g., due to regulatory\nrequirements or persistent integration problems), we can migrate to an explicit\ntransaction type system:\n\n**Schema v2.0 (Future)**:\n\n```json\n{\n  \"transaction_type\": \"capitalRecall\",\n  \"amount\": 200000, // Positive value; type indicates direction\n  \"reason\": \"LP_default\",\n  \"related_distribution_id\": \"dist-123\", // Links back to original distribution\n  \"recycle_eligible\": false // Explicitly false by type\n}\n```\n\n**Migration strategy**:\n\n1. Introduce new `transaction_type` field with default value \"distribution\"\n2. Create `capital_recall` type alongside existing distributions\n3. Migrate negative distributions to new type via backfill script\n4. Deprecate negative distribution amounts in schema v2.0\n5. Remove support in schema v3.0 (breaking change)\n\n**Technical debt ticket**: [Create backlog item for schema v2.0 planning]\n\n## 4. Rationale\n\n### 4.1 Liquidity Protection (Reserve Precedence)\n\nThe reserve precedence rule is critical for fund operations:\n\n- **Prevents under-reserving**: Without reserve precedence, aggressive pacing\n  targets could deplete cash reserves below safe levels, creating liquidity risk\n- **Supports commitments**: Adequate reserves ensure the fund can meet its\n  obligations to portfolio companies for follow-on investments\n- **Risk management**: Maintains cash buffer for unforeseen expenses, down-round\n  protection, or portfolio support\n\n**Example (CA-013)**: When monthly pacing targets would deplete reserves below\nthe floor, the allocation is reduced to preserve liquidity, even if this causes\nunder-deployment relative to the pacing target.\n\n### 4.2 Deployment Smoothness (Pacing with Carryover)\n\nPacing prevents both over- and under-deployment:\n\n- **Avoids vintage risk**: Deploying too quickly in a single vintage year\n  concentrates risk\n- **Reduces J-curve**: Smooth deployment spreads the initial loss period\n  (J-curve) over multiple years\n- **Market timing flexibility**: Carryover allows tactical pausing during\n  overheated markets without losing deployment capacity\n\n**Example (CA-009)**: Quarterly pacing with a shortfall in Q1 carries that\ncapacity to Q2, allowing the fund to take advantage of better deal flow later\nwithout falling behind on total deployment.\n\n### 4.3 Fairness and Diversification (Cohort Allocation)\n\nCohort weights and caps ensure portfolio balance:\n\n- **Diversification**: Prevents concentration in a single cohort (sector,\n  geography, stage)\n- **Strategy alignment**: Cohort weights encode fund strategy (e.g., 60% Core,\n  40% Growth)\n- **Risk limits**: Maximum per-cohort caps enforce hard limits on concentration\n  risk\n\n**Deterministic spill** is critical for auditability:\n\n- Same inputs always produce same outputs\n- Auditors can verify allocation logic\n- No \"black box\" optimization that's hard to explain\n\n### 4.4 Explainability and Audit\n\nPure functions enable reproducibility:\n\n- **No hidden state**: Engines are stateless functions taking explicit inputs\n- **Testable**: Truth cases provide complete input-output examples\n- **Debuggable**: Logs show exact decision points (reserve binding, caps\n  applied, spill amounts)\n\n## 5. Alternatives Considered\n\n### 5.1 Pacing Precedence Over Reserve\n\n**Description**: Invert the precedence to prioritize deployment targets over\nreserve maintenance.\n\n**Rejected because**:\n\n- Violates liquidity protection, creating risk of cash shortfalls\n- Could trigger breach of fund covenants requiring minimum reserves\n- Makes fund vulnerable to portfolio support needs during market downturns\n\n### 5.2 Single Global Optimizer\n\n**Description**: Use a mathematical optimization algorithm to find the \"optimal\"\nallocation across all constraints simultaneously.\n\n**Rejected because**:\n\n- **Opacity**: Optimization solvers are black boxes; stakeholders can't verify\n  correctness\n- **Non-determinism**: Tie-breaking in solvers may be non-deterministic or\n  poorly documented\n- **Fragility**: Small input changes can cause large output swings due to\n  constraint binding/unbinding\n- **Audit complexity**: Auditors require explainable, step-by-step logic\n\n### 5.3 Heuristic Rounding\n\n**Description**: Use ad-hoc rounding rules (e.g., \"always round up for Core\ncohort\") instead of deterministic bankers' rounding.\n\n**Rejected because**:\n\n- **Non-deterministic**: Different runs could produce different results\n- **Audit failure**: Auditors cannot verify allocation correctness\n- **Favoritism concerns**: Cohort-specific rules create appearance of unfair\n  preference\n\n### 5.4 Separate Capital Recall Transaction Type (v1.0)\n\n**Description**: Introduce `capitalRecall` as a distinct transaction type\nalongside distributions in the initial schema version.\n\n**Deferred to v2.0 because**:\n\n- **Complexity**: Adds implementation overhead for MVP\n- **Time to market**: Negative distribution approach allows faster delivery\n- **Uncertain need**: May not be required if integration partners adapt to\n  documented convention\n- **Reversible**: Can migrate to explicit type in v2.0 without data loss\n\n**Condition for revisiting**: If 3+ integration partners report issues with\nnegative distributions, or if regulatory review requires explicit transaction\ntypes, escalate to schema v2.0 planning.\n\n## 6. Consequences\n\n### 6.1 Positive Consequences\n\n- **Predictable outputs**: Same inputs always produce same results, suitable for\n  audit and compliance\n- **Modular design**: Three independent engines (Reserve, Pacing, Cohort) enable\n  separate testing and evolution\n- **Clear conflict resolution**: Precedence rules provide unambiguous answers\n  when constraints conflict\n- **Audit trail**: Structured logs capture every decision point with\n  justification\n\n### 6.2 Negative Consequences\n\n- **Under-deployment risk**: Reserve precedence can delay capital deployment\n  when reserves bind, potentially under-deploying relative to fund strategy\n- **Complexity**: Cap enforcement and spill reallocation add implementation\n  complexity vs. simple pro-rata allocation\n- **Semantic debt**: Negative distribution modeling creates documentation and\n  integration burden\n\n### 6.3 Mitigation Plans\n\n**For under-deployment**:\n\n- Monitor reserve binding frequency via metrics\n- Alert fund managers when reserve precedence triggers\n- Dashboard shows \"foregone allocations\" due to reserve constraints\n\n**For complexity**:\n\n- Comprehensive truth cases validate edge cases (CA-015: cap binding, CA-018:\n  rounding tie-breaks)\n- Unit tests for each engine independently\n- Integration tests for multi-engine coordination (CA-020)\n\n**For semantic debt**:\n\n- ADR-008 documents design rationale (this document)\n- Schema descriptions reference this ADR\n- API documentation includes \"Capital Recall Handling\" section\n- Client libraries provide semantic helper methods\n\n## 7. Implementation Notes\n\n### 7.1 Engine Architecture\n\nAll engines are **pure functions**:\n\n```typescript\n// Reserve Engine\ninterface ReserveState {\n  target: number;\n  floor: number;\n  balance: number;\n  needs: number;\n}\nfunction computeReserveState(inputs: Inputs, timestamp: Date): ReserveState;\n\n// Pacing Engine\ninterface PacingTargets {\n  period: string;\n  base: number;\n  carryover: number;\n  target: number;\n}\nfunction computePacingTargets(\n  inputs: Inputs,\n  calendar: Calendar\n): Map<Period, PacingTargets>;\n\n// Cohort Engine\ninterface CohortAllocation {\n  cohort: string;\n  preCapAmount: number;\n  capApplied: boolean;\n  finalAmount: number;\n}\nfunction allocateToCohorts(\n  amount: number,\n  cohorts: Cohort[],\n  maxPerCohort: number\n): CohortAllocation[];\n```\n\n**No hidden state**: All inputs explicit; no global variables or mutable state.\n\n### 7.2 Time Handling\n\n- **Normalization**: All timestamps converted to fund timezone before processing\n- **Period boundaries**: Calculated via `Calendar` abstraction (handles\n  month-end, quarter-end, year-end consistently)\n- **Cadence alignment**: Monthly/quarterly/annual rebalancing snaps to calendar\n  boundaries\n\n### 7.3 Idempotency\n\nSpill and carryover calculations are **order-stable**:\n\n- Sorting cohorts lexicographically before spill reallocation\n- Carryover applied in chronological order\n- Rounding tie-breaks follow highest-remainder → lexicographic rule\n\nThis ensures that running the same calculation multiple times produces identical\nresults.\n\n### 7.4 Observability\n\nEmit structured JSON per period:\n\n```json\n{\n  \"period\": \"2025-05\",\n  \"reserve\": {\n    \"target\": 8000000,\n    \"balance\": 10000000,\n    \"needs\": 0,\n    \"precedence_applied\": false\n  },\n  \"pacing\": {\n    \"base\": 1666667,\n    \"carryover\": 0,\n    \"target\": 1666667\n  },\n  \"cohorts_pre_caps\": [\n    { \"name\": \"A\", \"amount\": 900000 },\n    { \"name\": \"B\", \"amount\": 900000 }\n  ],\n  \"caps\": {\n    \"max_per_cohort\": 0.5,\n    \"cohorts_capped\": [],\n    \"spilled\": 0\n  },\n  \"allocations\": [\n    { \"name\": \"A\", \"amount\": 900000 },\n    { \"name\": \"B\", \"amount\": 900000 }\n  ]\n}\n```\n\nThis log format enables:\n\n- Debugging allocation decisions\n- Audit trail reconstruction\n- Performance metrics (how often caps bind, reserve precedence triggers, etc.)\n\n## 8. Test Strategy\n\n### 8.1 Coverage Plan\n\n**20 truth cases** covering:\n\n- **Reserve Engine**: 8 cases\n  - CA-001: Baseline (reserve satisfied)\n  - CA-002: Underfunded (reserve needs > 0)\n  - CA-003: Overfunded (reserve > target)\n  - CA-004: Zero contributions (adversarial)\n  - CA-005: Dynamic ratio tracking\n  - CA-006: Large distribution rebalancing\n  - CA-007: Year-end cutoff handling\n  - CA-013: **Reserve precedence over pacing** (conflict resolution)\n\n- **Pacing Engine**: 5 cases\n  - CA-008: Monthly pacing baseline\n  - CA-009: **Quarterly pacing with carryover**\n  - CA-010: Front-loaded pipeline constrained\n  - CA-011: Pipeline drought (pacing floor triggered)\n  - CA-012: Window comparison (24-month vs 18-month scenarios)\n\n- **Cohort Engine**: 6 cases\n  - CA-014: Fixed weights (simple pro-rata)\n  - CA-015: **Cohort cap binding with spill**\n  - CA-016: **Cohort lifecycle transitions** (cohort closes mid-year)\n  - CA-017: Quarterly rebalance vs monthly\n  - CA-018: **Rounding with tie-break** (three equal-weight cohorts)\n  - CA-019: **Capital recall** (negative distribution handling)\n\n- **Integration**: 1 case\n  - CA-020: **Multi-engine coordination** (reserve + pacing + caps + recycling)\n\n### 8.2 Adversarial Cases\n\nMinimum 6 adversarial/edge cases included:\n\n- CA-004: Zero contributions (no deployment)\n- CA-011: Pipeline drought (pacing floor, no deals)\n- CA-013: Reserve overrides pacing (conflict)\n- CA-015: Cohort cap forces spill\n- CA-019: Capital recall (negative distribution)\n- CA-020: All policies interact simultaneously\n\n### 8.3 Validation Approach\n\n1. **JSON Schema validation**: All truth cases must pass `ajv` schema validation\n2. **Domain scoring**: Custom scorer evaluates documentation against:\n   - Domain keyword coverage (30%)\n   - Schema vocabulary alignment (25%)\n   - Code reference completeness (25%)\n   - Truth case overlap (20%)\n3. **Target**: ≥90% domain score (matching Phase 1B/1C quality standard)\n\n## 9. References\n\n### 9.1 Schema and Data\n\n- **Schema**: `docs/schemas/capital-allocation-truth-case.schema.json`\n- **Truth cases**: `docs/capital-allocation.truth-cases.json` (20 cases, CA-001\n  through CA-020)\n- **Validator**: `scripts/validation/capital-allocation-validation.yaml`\n\n### 9.2 Related ADRs\n\n- **ADR-006**: Fee Calculation Standards (upstream: provides fee schedules)\n- **ADR-007**: Exit Recycling Policy (upstream: provides eligibility flags)\n\n### 9.3 Implementation\n\n- **Reserve Engine**: `client/src/core/reserves/ReserveEngine.ts` (planned)\n- **Pacing Engine**: `client/src/core/pacing/PacingEngine.ts` (planned)\n- **Cohort Engine**: `client/src/core/cohorts/CohortEngine.ts` (planned)\n\n## 10. Approval and Review\n\n**Review required from**:\n\n- Capital Allocation Working Group\n- Finance team (reserve policy implications)\n- Legal/Compliance (capital recall handling)\n- Integration partners (negative distribution convention)\n\n**Status**: Awaiting review **Next review date**: TBD\n\n---\n\n**Document version**: 1.0.0 **Last updated**: 2025-10-29",
            "truth_cases": "[\n  {\n    \"id\": \"CA-001\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Static % reserve at target with smooth quarterly inflows\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 5\n          },\n          {\n            \"date\": \"2024-06-30\",\n            \"amount\": 5\n          },\n          {\n            \"date\": \"2024-09-30\",\n            \"amount\": 5\n          },\n          {\n            \"date\": \"2024-12-31\",\n            \"amount\": 5\n          }\n        ],\n        \"distributions\": []\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 1,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 20,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 80\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Baseline case: reserve reaches 20% target with no violations\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-002\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Underfunded reserve triggers buffer top-up from next contribution\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-06-30\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 10\n          }\n        ],\n        \"distributions\": [\n          {\n            \"date\": \"2024-05-15\",\n            \"amount\": 8,\n            \"recycle_eligible\": false\n          }\n        ]\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 2,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 2,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 0\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Distribution depletes reserve below target; min_cash_buffer is preserved\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-003\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Overfunded reserve redeploys excess in next rebalancing period\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.15,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 25\n          }\n        ],\n        \"distributions\": []\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 1,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 15,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 10\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Reserve capped at 15% (15M); excess 10M allocated to cohort\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-004\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Reserve floor binding with zero contributions quarter (adversarial)\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-03-31\"\n      },\n      \"flows\": {\n        \"contributions\": [],\n        \"distributions\": []\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 5,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 0,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 0\n        }\n      ],\n      \"violations\": [\"reserve_below_minimum\"]\n    },\n    \"notes\": \"Adversarial: zero inflows cannot satisfy min_cash_buffer constraint\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-005\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Dynamic ratio tracking with NAV-dependent reserve target\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.25,\n        \"reserve_policy\": \"dynamic_ratio\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-06-30\",\n            \"amount\": 30\n          }\n        ],\n        \"distributions\": [\n          {\n            \"date\": \"2024-09-30\",\n            \"amount\": 10,\n            \"recycle_eligible\": true\n          }\n        ]\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 2,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 5,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 15\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Dynamic policy adjusts reserve based on NAV changes; distribution reduces NAV, lowering reserve target\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-006\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Large mid-year distribution triggers reserve rebalancing\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 25\n          }\n        ],\n        \"distributions\": [\n          {\n            \"date\": \"2024-07-15\",\n            \"amount\": 15,\n            \"recycle_eligible\": false\n          }\n        ]\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 2,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 10,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 0\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Large distribution depletes reserve; Q3 rebalancing restores to target (50% of remaining 20M)\",\n    \"schemaVersion\": \"1.0.0\"\n  }\n]",
            "schema": "{\n  \"$id\": \"https://updog.press-on.ventures/schemas/capital-allocation-truth-case.schema.json\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Capital Allocation Truth Case\",\n  \"description\": \"Canonical test scenario for capital allocation validation (ReserveEngine, PacingEngine, CohortEngine)\",\n  \"type\": \"object\",\n  \"required\": [\"id\", \"module\", \"category\", \"description\", \"inputs\", \"expected\"],\n  \"properties\": {\n    \"schemaVersion\": {\n      \"type\": \"string\",\n      \"pattern\": \"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$\",\n      \"description\": \"Semantic version of truth case schema (e.g., 1.0.0)\"\n    },\n    \"id\": {\n      \"type\": \"string\",\n      \"pattern\": \"^CA-[0-9]{3}$\",\n      \"description\": \"Unique identifier (e.g., CA-001)\"\n    },\n    \"module\": {\n      \"const\": \"CapitalAllocation\",\n      \"description\": \"Module name\"\n    },\n    \"category\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"reserve_engine\",\n        \"pacing_engine\",\n        \"cohort_engine\",\n        \"integration\"\n      ],\n      \"description\": \"Test category\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"description\": \"Human-readable test scenario description\"\n    },\n    \"inputs\": {\n      \"type\": \"object\",\n      \"required\": [\"fund\", \"timeline\"],\n      \"properties\": {\n        \"fund\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"commitment\",\n            \"target_reserve_pct\",\n            \"reserve_policy\",\n            \"pacing_window_months\",\n            \"vintage_year\"\n          ],\n          \"properties\": {\n            \"commitment\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"description\": \"Total fund commitment in millions\"\n            },\n            \"target_reserve_pct\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"maximum\": 1,\n              \"description\": \"Target reserve as percentage of commitment\"\n            },\n            \"reserve_policy\": {\n              \"type\": \"string\",\n              \"enum\": [\"static_pct\", \"dynamic_ratio\", \"waterfall_dependent\"],\n              \"description\": \"Reserve allocation policy\"\n            },\n            \"pacing_window_months\": {\n              \"type\": \"integer\",\n              \"minimum\": 1,\n              \"maximum\": 60,\n              \"description\": \"Rolling window for pacing calculations (months)\"\n            },\n            \"vintage_year\": {\n              \"type\": \"integer\",\n              \"minimum\": 1980,\n              \"description\": \"Fund vintage year\"\n            }\n          }\n        },\n        \"timeline\": {\n          \"type\": \"object\",\n          \"required\": [\"start_date\"],\n          \"properties\": {\n            \"start_date\": {\n              \"type\": \"string\",\n              \"format\": \"date\",\n              \"description\": \"Allocation period start date\"\n            },\n            \"end_date\": {\n              \"type\": \"string\",\n              \"format\": \"date\",\n              \"description\": \"Allocation period end date\"\n            }\n          }\n        },\n        \"flows\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"contributions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [\"date\", \"amount\"],\n                \"properties\": {\n                  \"date\": {\n                    \"type\": \"string\",\n                    \"format\": \"date\"\n                  },\n                  \"amount\": {\n                    \"type\": \"number\",\n                    \"minimum\": 0\n                  }\n                }\n              }\n            },\n            \"distributions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [\"date\", \"amount\"],\n                \"properties\": {\n                  \"date\": {\n                    \"type\": \"string\",\n                    \"format\": \"date\"\n                  },\n                  \"amount\": {\n                    \"type\": \"number\",\n                    \"description\": \"Distribution amount. Negative values represent capital recalls/clawbacks. See ADR-008 for rationale and downstream implications. Note: recycle_eligible should be false for recalls.\"\n                  },\n                  \"recycle_eligible\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Whether distribution can be recycled\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"constraints\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"min_cash_buffer\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"description\": \"Minimum cash buffer in millions\"\n            },\n            \"max_allocation_per_cohort\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"maximum\": 1,\n              \"description\": \"Maximum allocation percentage per cohort\"\n            },\n            \"rebalance_frequency\": {\n              \"type\": \"string\",\n              \"enum\": [\"monthly\", \"quarterly\", \"annual\"],\n              \"description\": \"Rebalancing frequency\"\n            }\n          }\n        },\n        \"cohorts\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\"name\", \"start_date\", \"end_date\", \"weight\"],\n            \"properties\": {\n              \"name\": {\n                \"type\": \"string\",\n                \"description\": \"Cohort identifier\"\n              },\n              \"start_date\": {\n                \"type\": \"string\",\n                \"format\": \"date\"\n              },\n              \"end_date\": {\n                \"type\": \"string\",\n                \"format\": \"date\"\n              },\n              \"weight\": {\n                \"type\": \"number\",\n                \"minimum\": 0,\n                \"description\": \"Cohort weight for allocation\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"expected\": {\n      \"type\": \"object\",\n      \"required\": [\"reserve_balance\", \"allocations_by_cohort\"],\n      \"properties\": {\n        \"reserve_balance\": {\n          \"type\": \"number\",\n          \"description\": \"Expected reserve balance at end of period\"\n        },\n        \"allocations_by_cohort\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\"cohort\", \"amount\"],\n            \"properties\": {\n              \"cohort\": {\n                \"type\": \"string\"\n              },\n              \"amount\": {\n                \"type\": \"number\"\n              }\n            }\n          }\n        },\n        \"pacing_targets\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\"period\", \"target\"],\n            \"properties\": {\n              \"period\": {\n                \"type\": \"string\",\n                \"description\": \"Period identifier (e.g., 2024-Q1)\"\n              },\n              \"target\": {\n                \"type\": \"number\",\n                \"description\": \"Target allocation for period\"\n              }\n            }\n          }\n        },\n        \"violations\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"Expected constraint violations (for adversarial tests)\"\n        }\n      }\n    },\n    \"notes\": {\n      \"type\": \"string\",\n      \"description\": \"Additional context or boundary conditions\"\n    }\n  }\n}"
          },
          "assert": [],
          "options": {},
          "metadata": {}
        },
        "testIdx": 1,
        "vars": {
          "doc_type": "architectural_decision",
          "doc_content": "# ADR-008: Capital Allocation Policy (Reserve, Pacing, Cohort)\n\n**Status**: Proposed **Date**: 2025-10-29 **Owners**: Capital Allocation WG\n\n## 1. Context\n\nThe allocation layer must deploy capital predictably across time and cohorts\nwhile honoring liquidity protection and fairness. Inputs arrive from upstream\nmodules (Waterfall: realized cash; Fees: fee schedules; Exit Recycling:\neligibility). Downstream consumers need auditable, deterministic outputs with\nclear precedence when rules conflict.\n\n## 2. Decision\n\n### 2.1 Core Precedence\n\n**Reserve floor → Pacing target → Cohort allocation**\n\nThis precedence ensures liquidity protection takes priority over deployment\nsmoothness, which in turn takes priority over cohort-level fairness\nconsiderations.\n\n### 2.2 Reserve Policy\n\n- **Default**: `static_pct` (target_reserve_pct × commitment)\n- **Extensions**: `dynamic_ratio`, `waterfall_dependent` (versioned additions)\n- **Floor enforcement**: `max(reserve_target, min_cash_buffer)`\n\nThe reserve engine must satisfy its target before any capital is allocated to\ndeals. If the reserve balance falls below the floor (which is the maximum of the\ncalculated reserve target and the minimum cash buffer), allocations are reduced\nuntil the reserve is replenished.\n\n### 2.3 Pacing\n\n- **Rolling window with carryover**: C*t = max(0, P*{t-1} - A\\_{t-1})\n- **Cadence**: monthly | quarterly | annual\n- **Changes apply prospectively** (no retroactive reallocation)\n\nPacing smooths deployment over time using a rolling window (typically 12-24\nmonths). If a period under-deploys relative to its target, the shortfall carries\nforward to the next period. Changes to the pacing window (e.g., from 24 to 18\nmonths) apply from the change date forward and do not trigger retroactive\nadjustments.\n\n### 2.4 Cohort Allocation\n\n- **Pro-rata by normalized weights**: Each cohort receives allocation\n  proportional to its weight relative to the sum of all active cohort weights\n- **Enforce `max_allocation_per_cohort` cap**: No single cohort can receive more\n  than this percentage of the period's total allocation\n- **Spill deterministically to remaining cohorts**: If a cohort hits its cap,\n  the residual amount is reallocated to other cohorts in a deterministic order\n- **Rounding**: Bankers' rounding (round to nearest even); tie-break to highest\n  remainder → lexicographic name order\n\n### 2.5 Recycling Integration\n\n- **Eligible distributions increase allocable capacity after reserve checks**:\n  When an exit generates proceeds that are eligible for recycling, these funds\n  are added to the allocable capacity, but only after the reserve engine has\n  verified that reserve requirements are met\n- **Capital recalls (negative distributions) are NOT recycle-eligible**: When\n  LPs are required to return capital (capital recall/clawback), this is modeled\n  as a negative distribution amount, but these amounts cannot be recycled back\n  into new deals\n\n### 2.6 Versioning\n\n- **Schema + policy**: Semantic versioning (semver)\n- **Breaking changes bump major version**: Any change that would cause existing\n  truth cases to fail validation requires a major version increment\n\n## 3. Design Decision: Negative Distributions as Capital Recalls\n\n### 3.1 Context\n\nVenture capital funds occasionally need to \"recall\" capital from Limited\nPartners (LPs) when previously distributed proceeds must be returned. This can\noccur due to LP defaults, escrow releases, or claw-back provisions in fund\ndocuments. We needed to decide how to model these events in our data schema.\n\n### 3.2 Trade-offs Analysis\n\n**Chosen Approach**: Model capital recalls as negative distribution amounts\n\n#### Pros (Mathematical Simplicity)\n\n1. **Unified ledger**: A single `distributions` array captures all cash flows\n   to/from LPs\n   - Net Asset Value (NAV) calculation becomes:\n     `NAV = Σ(contributions) - Σ(distributions)`\n   - No need to track separate \"recall\" vs \"distribution\" transaction types\n\n2. **Simplified queries**: Calculating net cash flow to LPs is a simple sum\n\n   ```sql\n   SELECT SUM(amount) as net_distributions\n   FROM distributions\n   WHERE fund_id = ?\n   ```\n\n3. **Reduced data duplication**: One transaction type instead of two related\n   types that must be kept synchronized\n\n#### Cons (Semantic Ambiguity)\n\n1. **Legal semantic mismatch**: A \"distribution\" has a specific legal meaning in\n   fund documents - it represents capital returning TO the LP. A \"recall\" is the\n   opposite - capital returning FROM the LP. Conflating these under one field\n   name creates ambiguity.\n\n2. **Reporting confusion**: User-facing reports must clarify terminology:\n   - \"Gross Distributions\" (sum of positive amounts only)\n   - \"Net Distributions\" (algebraic sum including recalls)\n   - Teams unfamiliar with the convention may misinterpret \"Total Distributions\"\n\n3. **Integration brittleness**: External systems integrating with our API may\n   reasonably assume all `distribution.amount` values are non-negative. This can\n   lead to:\n   - Validation errors in downstream systems\n   - Incorrect calculations if systems don't expect negative values\n   - Need for extensive API documentation and integration guides\n\n4. **Lost query granularity**: To specifically find capital recalls requires\n   filtering:\n\n   ```sql\n   SELECT * FROM distributions WHERE amount < 0  -- All recalls\n   ```\n\n   Instead of:\n\n   ```sql\n   SELECT * FROM capital_recalls  -- Semantic table/type\n   ```\n\n5. **Recycling eligibility ambiguity**: The rule \"recalls are not\n   recycle-eligible\" must be enforced through application logic checking for\n   negative amounts, rather than through type system guarantees\n\n### 3.3 Mitigation Strategy\n\nTo address the semantic concerns while maintaining the chosen approach:\n\n1. **Schema documentation**:\n   - Explicit `description` field in JSON schema explaining negative\n     distribution semantic\n   - Reference to this ADR for detailed rationale\n\n2. **API layer abstraction**:\n\n   ```typescript\n   // Provide semantic methods that abstract the storage representation\n   interface FundAPI {\n     getDistributions(): Distribution[]; // Positive amounts only\n     getRecalls(): CapitalRecall[]; // Negative amounts, inverted\n     getNetDistributions(): number; // Algebraic sum\n   }\n   ```\n\n3. **Reporting layer clarity**:\n   - All user-facing reports explicitly label \"Gross\" vs \"Net\" distributions\n   - LP statements include separate line items for distributions and recalls\n   - Help text explains the distinction\n\n4. **Integration contracts**:\n   - API documentation prominently features this design decision\n   - Client library examples show correct handling of negative amounts\n   - Integration test suite includes recall scenarios\n\n5. **Validation rules**:\n   ```typescript\n   // Application-level validation\n   if (distribution.amount < 0 && distribution.recycle_eligible === true) {\n     throw new ValidationError('Capital recalls cannot be recycle-eligible');\n   }\n   ```\n\n### 3.4 Future Migration Path\n\nIf semantic clarity becomes a critical issue (e.g., due to regulatory\nrequirements or persistent integration problems), we can migrate to an explicit\ntransaction type system:\n\n**Schema v2.0 (Future)**:\n\n```json\n{\n  \"transaction_type\": \"capitalRecall\",\n  \"amount\": 200000, // Positive value; type indicates direction\n  \"reason\": \"LP_default\",\n  \"related_distribution_id\": \"dist-123\", // Links back to original distribution\n  \"recycle_eligible\": false // Explicitly false by type\n}\n```\n\n**Migration strategy**:\n\n1. Introduce new `transaction_type` field with default value \"distribution\"\n2. Create `capital_recall` type alongside existing distributions\n3. Migrate negative distributions to new type via backfill script\n4. Deprecate negative distribution amounts in schema v2.0\n5. Remove support in schema v3.0 (breaking change)\n\n**Technical debt ticket**: [Create backlog item for schema v2.0 planning]\n\n## 4. Rationale\n\n### 4.1 Liquidity Protection (Reserve Precedence)\n\nThe reserve precedence rule is critical for fund operations:\n\n- **Prevents under-reserving**: Without reserve precedence, aggressive pacing\n  targets could deplete cash reserves below safe levels, creating liquidity risk\n- **Supports commitments**: Adequate reserves ensure the fund can meet its\n  obligations to portfolio companies for follow-on investments\n- **Risk management**: Maintains cash buffer for unforeseen expenses, down-round\n  protection, or portfolio support\n\n**Example (CA-013)**: When monthly pacing targets would deplete reserves below\nthe floor, the allocation is reduced to preserve liquidity, even if this causes\nunder-deployment relative to the pacing target.\n\n### 4.2 Deployment Smoothness (Pacing with Carryover)\n\nPacing prevents both over- and under-deployment:\n\n- **Avoids vintage risk**: Deploying too quickly in a single vintage year\n  concentrates risk\n- **Reduces J-curve**: Smooth deployment spreads the initial loss period\n  (J-curve) over multiple years\n- **Market timing flexibility**: Carryover allows tactical pausing during\n  overheated markets without losing deployment capacity\n\n**Example (CA-009)**: Quarterly pacing with a shortfall in Q1 carries that\ncapacity to Q2, allowing the fund to take advantage of better deal flow later\nwithout falling behind on total deployment.\n\n### 4.3 Fairness and Diversification (Cohort Allocation)\n\nCohort weights and caps ensure portfolio balance:\n\n- **Diversification**: Prevents concentration in a single cohort (sector,\n  geography, stage)\n- **Strategy alignment**: Cohort weights encode fund strategy (e.g., 60% Core,\n  40% Growth)\n- **Risk limits**: Maximum per-cohort caps enforce hard limits on concentration\n  risk\n\n**Deterministic spill** is critical for auditability:\n\n- Same inputs always produce same outputs\n- Auditors can verify allocation logic\n- No \"black box\" optimization that's hard to explain\n\n### 4.4 Explainability and Audit\n\nPure functions enable reproducibility:\n\n- **No hidden state**: Engines are stateless functions taking explicit inputs\n- **Testable**: Truth cases provide complete input-output examples\n- **Debuggable**: Logs show exact decision points (reserve binding, caps\n  applied, spill amounts)\n\n## 5. Alternatives Considered\n\n### 5.1 Pacing Precedence Over Reserve\n\n**Description**: Invert the precedence to prioritize deployment targets over\nreserve maintenance.\n\n**Rejected because**:\n\n- Violates liquidity protection, creating risk of cash shortfalls\n- Could trigger breach of fund covenants requiring minimum reserves\n- Makes fund vulnerable to portfolio support needs during market downturns\n\n### 5.2 Single Global Optimizer\n\n**Description**: Use a mathematical optimization algorithm to find the \"optimal\"\nallocation across all constraints simultaneously.\n\n**Rejected because**:\n\n- **Opacity**: Optimization solvers are black boxes; stakeholders can't verify\n  correctness\n- **Non-determinism**: Tie-breaking in solvers may be non-deterministic or\n  poorly documented\n- **Fragility**: Small input changes can cause large output swings due to\n  constraint binding/unbinding\n- **Audit complexity**: Auditors require explainable, step-by-step logic\n\n### 5.3 Heuristic Rounding\n\n**Description**: Use ad-hoc rounding rules (e.g., \"always round up for Core\ncohort\") instead of deterministic bankers' rounding.\n\n**Rejected because**:\n\n- **Non-deterministic**: Different runs could produce different results\n- **Audit failure**: Auditors cannot verify allocation correctness\n- **Favoritism concerns**: Cohort-specific rules create appearance of unfair\n  preference\n\n### 5.4 Separate Capital Recall Transaction Type (v1.0)\n\n**Description**: Introduce `capitalRecall` as a distinct transaction type\nalongside distributions in the initial schema version.\n\n**Deferred to v2.0 because**:\n\n- **Complexity**: Adds implementation overhead for MVP\n- **Time to market**: Negative distribution approach allows faster delivery\n- **Uncertain need**: May not be required if integration partners adapt to\n  documented convention\n- **Reversible**: Can migrate to explicit type in v2.0 without data loss\n\n**Condition for revisiting**: If 3+ integration partners report issues with\nnegative distributions, or if regulatory review requires explicit transaction\ntypes, escalate to schema v2.0 planning.\n\n## 6. Consequences\n\n### 6.1 Positive Consequences\n\n- **Predictable outputs**: Same inputs always produce same results, suitable for\n  audit and compliance\n- **Modular design**: Three independent engines (Reserve, Pacing, Cohort) enable\n  separate testing and evolution\n- **Clear conflict resolution**: Precedence rules provide unambiguous answers\n  when constraints conflict\n- **Audit trail**: Structured logs capture every decision point with\n  justification\n\n### 6.2 Negative Consequences\n\n- **Under-deployment risk**: Reserve precedence can delay capital deployment\n  when reserves bind, potentially under-deploying relative to fund strategy\n- **Complexity**: Cap enforcement and spill reallocation add implementation\n  complexity vs. simple pro-rata allocation\n- **Semantic debt**: Negative distribution modeling creates documentation and\n  integration burden\n\n### 6.3 Mitigation Plans\n\n**For under-deployment**:\n\n- Monitor reserve binding frequency via metrics\n- Alert fund managers when reserve precedence triggers\n- Dashboard shows \"foregone allocations\" due to reserve constraints\n\n**For complexity**:\n\n- Comprehensive truth cases validate edge cases (CA-015: cap binding, CA-018:\n  rounding tie-breaks)\n- Unit tests for each engine independently\n- Integration tests for multi-engine coordination (CA-020)\n\n**For semantic debt**:\n\n- ADR-008 documents design rationale (this document)\n- Schema descriptions reference this ADR\n- API documentation includes \"Capital Recall Handling\" section\n- Client libraries provide semantic helper methods\n\n## 7. Implementation Notes\n\n### 7.1 Engine Architecture\n\nAll engines are **pure functions**:\n\n```typescript\n// Reserve Engine\ninterface ReserveState {\n  target: number;\n  floor: number;\n  balance: number;\n  needs: number;\n}\nfunction computeReserveState(inputs: Inputs, timestamp: Date): ReserveState;\n\n// Pacing Engine\ninterface PacingTargets {\n  period: string;\n  base: number;\n  carryover: number;\n  target: number;\n}\nfunction computePacingTargets(\n  inputs: Inputs,\n  calendar: Calendar\n): Map<Period, PacingTargets>;\n\n// Cohort Engine\ninterface CohortAllocation {\n  cohort: string;\n  preCapAmount: number;\n  capApplied: boolean;\n  finalAmount: number;\n}\nfunction allocateToCohorts(\n  amount: number,\n  cohorts: Cohort[],\n  maxPerCohort: number\n): CohortAllocation[];\n```\n\n**No hidden state**: All inputs explicit; no global variables or mutable state.\n\n### 7.2 Time Handling\n\n- **Normalization**: All timestamps converted to fund timezone before processing\n- **Period boundaries**: Calculated via `Calendar` abstraction (handles\n  month-end, quarter-end, year-end consistently)\n- **Cadence alignment**: Monthly/quarterly/annual rebalancing snaps to calendar\n  boundaries\n\n### 7.3 Idempotency\n\nSpill and carryover calculations are **order-stable**:\n\n- Sorting cohorts lexicographically before spill reallocation\n- Carryover applied in chronological order\n- Rounding tie-breaks follow highest-remainder → lexicographic rule\n\nThis ensures that running the same calculation multiple times produces identical\nresults.\n\n### 7.4 Observability\n\nEmit structured JSON per period:\n\n```json\n{\n  \"period\": \"2025-05\",\n  \"reserve\": {\n    \"target\": 8000000,\n    \"balance\": 10000000,\n    \"needs\": 0,\n    \"precedence_applied\": false\n  },\n  \"pacing\": {\n    \"base\": 1666667,\n    \"carryover\": 0,\n    \"target\": 1666667\n  },\n  \"cohorts_pre_caps\": [\n    { \"name\": \"A\", \"amount\": 900000 },\n    { \"name\": \"B\", \"amount\": 900000 }\n  ],\n  \"caps\": {\n    \"max_per_cohort\": 0.5,\n    \"cohorts_capped\": [],\n    \"spilled\": 0\n  },\n  \"allocations\": [\n    { \"name\": \"A\", \"amount\": 900000 },\n    { \"name\": \"B\", \"amount\": 900000 }\n  ]\n}\n```\n\nThis log format enables:\n\n- Debugging allocation decisions\n- Audit trail reconstruction\n- Performance metrics (how often caps bind, reserve precedence triggers, etc.)\n\n## 8. Test Strategy\n\n### 8.1 Coverage Plan\n\n**20 truth cases** covering:\n\n- **Reserve Engine**: 8 cases\n  - CA-001: Baseline (reserve satisfied)\n  - CA-002: Underfunded (reserve needs > 0)\n  - CA-003: Overfunded (reserve > target)\n  - CA-004: Zero contributions (adversarial)\n  - CA-005: Dynamic ratio tracking\n  - CA-006: Large distribution rebalancing\n  - CA-007: Year-end cutoff handling\n  - CA-013: **Reserve precedence over pacing** (conflict resolution)\n\n- **Pacing Engine**: 5 cases\n  - CA-008: Monthly pacing baseline\n  - CA-009: **Quarterly pacing with carryover**\n  - CA-010: Front-loaded pipeline constrained\n  - CA-011: Pipeline drought (pacing floor triggered)\n  - CA-012: Window comparison (24-month vs 18-month scenarios)\n\n- **Cohort Engine**: 6 cases\n  - CA-014: Fixed weights (simple pro-rata)\n  - CA-015: **Cohort cap binding with spill**\n  - CA-016: **Cohort lifecycle transitions** (cohort closes mid-year)\n  - CA-017: Quarterly rebalance vs monthly\n  - CA-018: **Rounding with tie-break** (three equal-weight cohorts)\n  - CA-019: **Capital recall** (negative distribution handling)\n\n- **Integration**: 1 case\n  - CA-020: **Multi-engine coordination** (reserve + pacing + caps + recycling)\n\n### 8.2 Adversarial Cases\n\nMinimum 6 adversarial/edge cases included:\n\n- CA-004: Zero contributions (no deployment)\n- CA-011: Pipeline drought (pacing floor, no deals)\n- CA-013: Reserve overrides pacing (conflict)\n- CA-015: Cohort cap forces spill\n- CA-019: Capital recall (negative distribution)\n- CA-020: All policies interact simultaneously\n\n### 8.3 Validation Approach\n\n1. **JSON Schema validation**: All truth cases must pass `ajv` schema validation\n2. **Domain scoring**: Custom scorer evaluates documentation against:\n   - Domain keyword coverage (30%)\n   - Schema vocabulary alignment (25%)\n   - Code reference completeness (25%)\n   - Truth case overlap (20%)\n3. **Target**: ≥90% domain score (matching Phase 1B/1C quality standard)\n\n## 9. References\n\n### 9.1 Schema and Data\n\n- **Schema**: `docs/schemas/capital-allocation-truth-case.schema.json`\n- **Truth cases**: `docs/capital-allocation.truth-cases.json` (20 cases, CA-001\n  through CA-020)\n- **Validator**: `scripts/validation/capital-allocation-validation.yaml`\n\n### 9.2 Related ADRs\n\n- **ADR-006**: Fee Calculation Standards (upstream: provides fee schedules)\n- **ADR-007**: Exit Recycling Policy (upstream: provides eligibility flags)\n\n### 9.3 Implementation\n\n- **Reserve Engine**: `client/src/core/reserves/ReserveEngine.ts` (planned)\n- **Pacing Engine**: `client/src/core/pacing/PacingEngine.ts` (planned)\n- **Cohort Engine**: `client/src/core/cohorts/CohortEngine.ts` (planned)\n\n## 10. Approval and Review\n\n**Review required from**:\n\n- Capital Allocation Working Group\n- Finance team (reserve policy implications)\n- Legal/Compliance (capital recall handling)\n- Integration partners (negative distribution convention)\n\n**Status**: Awaiting review **Next review date**: TBD\n\n---\n\n**Document version**: 1.0.0 **Last updated**: 2025-10-29",
          "truth_cases": "[\n  {\n    \"id\": \"CA-001\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Static % reserve at target with smooth quarterly inflows\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 5\n          },\n          {\n            \"date\": \"2024-06-30\",\n            \"amount\": 5\n          },\n          {\n            \"date\": \"2024-09-30\",\n            \"amount\": 5\n          },\n          {\n            \"date\": \"2024-12-31\",\n            \"amount\": 5\n          }\n        ],\n        \"distributions\": []\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 1,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 20,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 80\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Baseline case: reserve reaches 20% target with no violations\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-002\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Underfunded reserve triggers buffer top-up from next contribution\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-06-30\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 10\n          }\n        ],\n        \"distributions\": [\n          {\n            \"date\": \"2024-05-15\",\n            \"amount\": 8,\n            \"recycle_eligible\": false\n          }\n        ]\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 2,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 2,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 0\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Distribution depletes reserve below target; min_cash_buffer is preserved\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-003\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Overfunded reserve redeploys excess in next rebalancing period\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.15,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 25\n          }\n        ],\n        \"distributions\": []\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 1,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 15,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 10\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Reserve capped at 15% (15M); excess 10M allocated to cohort\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-004\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Reserve floor binding with zero contributions quarter (adversarial)\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-03-31\"\n      },\n      \"flows\": {\n        \"contributions\": [],\n        \"distributions\": []\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 5,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 0,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 0\n        }\n      ],\n      \"violations\": [\"reserve_below_minimum\"]\n    },\n    \"notes\": \"Adversarial: zero inflows cannot satisfy min_cash_buffer constraint\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-005\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Dynamic ratio tracking with NAV-dependent reserve target\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.25,\n        \"reserve_policy\": \"dynamic_ratio\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-06-30\",\n            \"amount\": 30\n          }\n        ],\n        \"distributions\": [\n          {\n            \"date\": \"2024-09-30\",\n            \"amount\": 10,\n            \"recycle_eligible\": true\n          }\n        ]\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 2,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 5,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 15\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Dynamic policy adjusts reserve based on NAV changes; distribution reduces NAV, lowering reserve target\",\n    \"schemaVersion\": \"1.0.0\"\n  },\n  {\n    \"id\": \"CA-006\",\n    \"module\": \"CapitalAllocation\",\n    \"category\": \"reserve_engine\",\n    \"description\": \"Large mid-year distribution triggers reserve rebalancing\",\n    \"inputs\": {\n      \"fund\": {\n        \"commitment\": 100,\n        \"target_reserve_pct\": 0.2,\n        \"reserve_policy\": \"static_pct\",\n        \"pacing_window_months\": 24,\n        \"vintage_year\": 2024\n      },\n      \"timeline\": {\n        \"start_date\": \"2024-01-01\",\n        \"end_date\": \"2024-12-31\"\n      },\n      \"flows\": {\n        \"contributions\": [\n          {\n            \"date\": \"2024-03-31\",\n            \"amount\": 25\n          }\n        ],\n        \"distributions\": [\n          {\n            \"date\": \"2024-07-15\",\n            \"amount\": 15,\n            \"recycle_eligible\": false\n          }\n        ]\n      },\n      \"constraints\": {\n        \"min_cash_buffer\": 2,\n        \"rebalance_frequency\": \"quarterly\"\n      }\n    },\n    \"expected\": {\n      \"reserve_balance\": 10,\n      \"allocations_by_cohort\": [\n        {\n          \"cohort\": \"2024\",\n          \"amount\": 0\n        }\n      ],\n      \"violations\": []\n    },\n    \"notes\": \"Large distribution depletes reserve; Q3 rebalancing restores to target (50% of remaining 20M)\",\n    \"schemaVersion\": \"1.0.0\"\n  }\n]",
          "schema": "{\n  \"$id\": \"https://updog.press-on.ventures/schemas/capital-allocation-truth-case.schema.json\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Capital Allocation Truth Case\",\n  \"description\": \"Canonical test scenario for capital allocation validation (ReserveEngine, PacingEngine, CohortEngine)\",\n  \"type\": \"object\",\n  \"required\": [\"id\", \"module\", \"category\", \"description\", \"inputs\", \"expected\"],\n  \"properties\": {\n    \"schemaVersion\": {\n      \"type\": \"string\",\n      \"pattern\": \"^\\\\d+\\\\.\\\\d+\\\\.\\\\d+$\",\n      \"description\": \"Semantic version of truth case schema (e.g., 1.0.0)\"\n    },\n    \"id\": {\n      \"type\": \"string\",\n      \"pattern\": \"^CA-[0-9]{3}$\",\n      \"description\": \"Unique identifier (e.g., CA-001)\"\n    },\n    \"module\": {\n      \"const\": \"CapitalAllocation\",\n      \"description\": \"Module name\"\n    },\n    \"category\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"reserve_engine\",\n        \"pacing_engine\",\n        \"cohort_engine\",\n        \"integration\"\n      ],\n      \"description\": \"Test category\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"description\": \"Human-readable test scenario description\"\n    },\n    \"inputs\": {\n      \"type\": \"object\",\n      \"required\": [\"fund\", \"timeline\"],\n      \"properties\": {\n        \"fund\": {\n          \"type\": \"object\",\n          \"required\": [\n            \"commitment\",\n            \"target_reserve_pct\",\n            \"reserve_policy\",\n            \"pacing_window_months\",\n            \"vintage_year\"\n          ],\n          \"properties\": {\n            \"commitment\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"description\": \"Total fund commitment in millions\"\n            },\n            \"target_reserve_pct\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"maximum\": 1,\n              \"description\": \"Target reserve as percentage of commitment\"\n            },\n            \"reserve_policy\": {\n              \"type\": \"string\",\n              \"enum\": [\"static_pct\", \"dynamic_ratio\", \"waterfall_dependent\"],\n              \"description\": \"Reserve allocation policy\"\n            },\n            \"pacing_window_months\": {\n              \"type\": \"integer\",\n              \"minimum\": 1,\n              \"maximum\": 60,\n              \"description\": \"Rolling window for pacing calculations (months)\"\n            },\n            \"vintage_year\": {\n              \"type\": \"integer\",\n              \"minimum\": 1980,\n              \"description\": \"Fund vintage year\"\n            }\n          }\n        },\n        \"timeline\": {\n          \"type\": \"object\",\n          \"required\": [\"start_date\"],\n          \"properties\": {\n            \"start_date\": {\n              \"type\": \"string\",\n              \"format\": \"date\",\n              \"description\": \"Allocation period start date\"\n            },\n            \"end_date\": {\n              \"type\": \"string\",\n              \"format\": \"date\",\n              \"description\": \"Allocation period end date\"\n            }\n          }\n        },\n        \"flows\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"contributions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [\"date\", \"amount\"],\n                \"properties\": {\n                  \"date\": {\n                    \"type\": \"string\",\n                    \"format\": \"date\"\n                  },\n                  \"amount\": {\n                    \"type\": \"number\",\n                    \"minimum\": 0\n                  }\n                }\n              }\n            },\n            \"distributions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [\"date\", \"amount\"],\n                \"properties\": {\n                  \"date\": {\n                    \"type\": \"string\",\n                    \"format\": \"date\"\n                  },\n                  \"amount\": {\n                    \"type\": \"number\",\n                    \"description\": \"Distribution amount. Negative values represent capital recalls/clawbacks. See ADR-008 for rationale and downstream implications. Note: recycle_eligible should be false for recalls.\"\n                  },\n                  \"recycle_eligible\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"Whether distribution can be recycled\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"constraints\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"min_cash_buffer\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"description\": \"Minimum cash buffer in millions\"\n            },\n            \"max_allocation_per_cohort\": {\n              \"type\": \"number\",\n              \"minimum\": 0,\n              \"maximum\": 1,\n              \"description\": \"Maximum allocation percentage per cohort\"\n            },\n            \"rebalance_frequency\": {\n              \"type\": \"string\",\n              \"enum\": [\"monthly\", \"quarterly\", \"annual\"],\n              \"description\": \"Rebalancing frequency\"\n            }\n          }\n        },\n        \"cohorts\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\"name\", \"start_date\", \"end_date\", \"weight\"],\n            \"properties\": {\n              \"name\": {\n                \"type\": \"string\",\n                \"description\": \"Cohort identifier\"\n              },\n              \"start_date\": {\n                \"type\": \"string\",\n                \"format\": \"date\"\n              },\n              \"end_date\": {\n                \"type\": \"string\",\n                \"format\": \"date\"\n              },\n              \"weight\": {\n                \"type\": \"number\",\n                \"minimum\": 0,\n                \"description\": \"Cohort weight for allocation\"\n              }\n            }\n          }\n        }\n      }\n    },\n    \"expected\": {\n      \"type\": \"object\",\n      \"required\": [\"reserve_balance\", \"allocations_by_cohort\"],\n      \"properties\": {\n        \"reserve_balance\": {\n          \"type\": \"number\",\n          \"description\": \"Expected reserve balance at end of period\"\n        },\n        \"allocations_by_cohort\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\"cohort\", \"amount\"],\n            \"properties\": {\n              \"cohort\": {\n                \"type\": \"string\"\n              },\n              \"amount\": {\n                \"type\": \"number\"\n              }\n            }\n          }\n        },\n        \"pacing_targets\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"required\": [\"period\", \"target\"],\n            \"properties\": {\n              \"period\": {\n                \"type\": \"string\",\n                \"description\": \"Period identifier (e.g., 2024-Q1)\"\n              },\n              \"target\": {\n                \"type\": \"number\",\n                \"description\": \"Target allocation for period\"\n              }\n            }\n          }\n        },\n        \"violations\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"Expected constraint violations (for adversarial tests)\"\n        }\n      }\n    },\n    \"notes\": {\n      \"type\": \"string\",\n      \"description\": \"Additional context or boundary conditions\"\n    }\n  }\n}"
        },
        "metadata": {
          "_promptfooFileMetadata": {}
        },
        "failureReason": 0
      }
    ],
    "stats": {
      "successes": 2,
      "failures": 0,
      "errors": 0,
      "tokenUsage": {
        "prompt": 19293,
        "completion": 2367,
        "cached": 0,
        "total": 21660,
        "numRequests": 2,
        "completionDetails": {
          "reasoning": 0,
          "acceptedPrediction": 0,
          "rejectedPrediction": 0
        },
        "assertions": {
          "total": 0,
          "prompt": 0,
          "completion": 0,
          "cached": 0,
          "numRequests": 0,
          "completionDetails": {
            "reasoning": 0,
            "acceptedPrediction": 0,
            "rejectedPrediction": 0
          }
        }
      }
    }
  },
  "config": {
    "tags": {},
    "description": "Phase 1D Capital Allocation Documentation Validation",
    "prompts": [
      "file://C:\\dev\\Updog_restore\\scripts\\validation\\prompts.py:capital_allocation_prompt"
    ],
    "providers": [
      {
        "id": "anthropic:messages:claude-3-7-sonnet-20250219",
        "label": "Claude 3.7 Sonnet",
        "config": {
          "max_tokens": 8192,
          "temperature": 0
        }
      }
    ],
    "tests": [
      {
        "description": "Validate capital-allocation.md (primary documentation)",
        "vars": {
          "doc_type": "capital_allocation",
          "doc_content": "file://../../docs/notebooklm-sources/capital-allocation.md",
          "truth_cases": "file://../../docs/capital-allocation.truth-cases.json",
          "schema": "file://../../docs/schemas/capital-allocation-truth-case.schema.json"
        }
      },
      {
        "description": "Validate ADR-008 (architectural decision record)",
        "vars": {
          "doc_type": "architectural_decision",
          "doc_content": "file://../../docs/adr/ADR-008-capital-allocation-policy.md",
          "truth_cases": "file://../../docs/capital-allocation.truth-cases.json",
          "schema": "file://../../docs/schemas/capital-allocation-truth-case.schema.json"
        }
      }
    ],
    "scenarios": [],
    "env": {},
    "sharing": false,
    "outputPath": [
      "../../.promptfoo/capital-allocation/results.json"
    ],
    "extensions": [],
    "metadata": {},
    "evaluateOptions": {}
  },
  "shareableUrl": null,
  "metadata": {
    "promptfooVersion": "0.119.1",
    "nodeVersion": "v20.19.0",
    "platform": "win32",
    "arch": "x64",
    "exportedAt": "2025-10-29T23:37:26.418Z",
    "evaluationCreatedAt": "2025-10-29T23:37:02.241Z"
  }
}