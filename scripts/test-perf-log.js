#!/usr/bin/env node

/**
 * Test script for performance logging functionality
 * 
 * This creates a mock performance log entry to demonstrate the output format
 * without requiring a real database connection.
 */

import { writeFileSync, existsSync, readFileSync } from 'fs';

const PERF_LOG_FILE = 'perf-log.md';

// Mock performance data
const mockMetrics = {
  timestamp: new Date().toISOString(),
  executionTime: '245.50',
  planningTime: '12.30',
  totalTime: '257.80',
  wallClockTime: 280,
  sharedHit: 1247,
  sharedRead: 23,
  bufferHitRatio: '98.19',
  totalRows: 10000,
  memoryUsage: 'N/A',
  p95Latency: '309.36'
};

function formatTestEntry(metrics) {
  const {
    timestamp,
    executionTime,
    planningTime,
    totalTime,
    wallClockTime,
    sharedHit,
    sharedRead,
    bufferHitRatio,
    totalRows,
    memoryUsage,
    p95Latency
  } = metrics;

  const throughput = (totalRows / (parseFloat(totalTime) / 1000)).toFixed(0);

  return `
## Performance Analysis - ${new Date(timestamp).toLocaleString()} (TEST RUN)

**Query:** \`SELECT * FROM mc_stats_1min LIMIT 10000\`

### Execution Metrics
- **Execution Time:** ${executionTime}ms
- **Planning Time:** ${planningTime}ms
- **Total DB Time:** ${totalTime}ms
- **Wall Clock Time:** ${wallClockTime}ms
- **P95 Latency:** ${p95Latency}ms

### Buffer Statistics
- **Shared Hit Blocks:** ${sharedHit}
- **Shared Read Blocks:** ${sharedRead}
- **Buffer Hit Ratio:** ${bufferHitRatio}%

### Resource Usage
- **Total Rows Processed:** ${totalRows}
- **Memory Usage:** ${memoryUsage}
- **Throughput:** ${throughput} rows/sec

### Performance Grade
**Grade: A** - Excellent performance! üöÄ (Test Data)

---
`;
}

function createTestLog() {
  console.log('üß™ Creating test performance log entry...');
  
  let existingContent = '';
  
  if (existsSync(PERF_LOG_FILE)) {
    existingContent = readFileSync(PERF_LOG_FILE, 'utf8');
    console.log('üìÑ Existing log file found, appending test entry');
  } else {
    existingContent = `# Performance Log

This file contains automated performance analysis results for the \`mc_stats_1min\` table queries.

Generated by: \`scripts/auto-perf-log.js\`

`;
    console.log('üìù Creating new log file with test entry');
  }

  const testEntry = formatTestEntry(mockMetrics);
  const updatedContent = existingContent + testEntry;
  
  writeFileSync(PERF_LOG_FILE, updatedContent, 'utf8');
  
  console.log(`‚úÖ Test performance entry added to ${PERF_LOG_FILE}`);
  console.log('\nüìä Test Metrics Summary:');
  console.log(`   Execution Time: ${mockMetrics.executionTime}ms`);
  console.log(`   P95 Latency: ${mockMetrics.p95Latency}ms`);
  console.log(`   Buffer Hit Ratio: ${mockMetrics.bufferHitRatio}%`);
  console.log(`   Total Rows: ${mockMetrics.totalRows}`);
}

// Run the test
createTestLog();
