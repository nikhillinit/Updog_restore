# .env.local.example
# Copy this file to .env.local and update with your actual values
# The dev-bootstrap script can auto-create .env.local from this template

# ====================
# Core Environment
# ====================
NODE_ENV=development
PORT=5000

# ====================
# Database Configuration
# ====================
# Option 1: Use Neon (serverless Postgres)
# Get your connection string from: https://console.neon.tech
DATABASE_URL=postgres://user:password@project-name.neon.tech/dbname?sslmode=require

# Option 2: Use local Postgres (Docker or installed)
# Uncomment and use this instead if you prefer local development:
# DATABASE_URL=postgres://postgres:postgres@localhost:5432/postgres

# ====================
# Cache & Redis
# ====================
# Option 1: Use Redis (recommended for full feature testing)
REDIS_URL=redis://127.0.0.1:6379

# Option 2: Use memory cache (for quick testing without Redis)
# Uncomment to bypass Redis entirely:
# REDIS_URL=memory://

# Optional: Separate Redis instances for different purposes
# RATE_LIMIT_REDIS_URL=redis://127.0.0.1:6379
# QUEUE_REDIS_URL=redis://127.0.0.1:6379
# SESSION_REDIS_URL=redis://127.0.0.1:6379

# Enable background job queues (0=disabled, 1=enabled)
ENABLE_QUEUES=0

# ====================
# Security & CORS
# ====================
# Allow requests from Vite dev server
CORS_ORIGIN=http://localhost:5173,http://localhost:5174,http://localhost:5175

# Request body size limit
BODY_LIMIT=10mb

# Session secret (generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))")
# IMPORTANT: Generate a real secret for production!
SESSION_SECRET=dev-secret-change-me-in-production-min-32-chars

# JWT secret (generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))")
JWT_SECRET=dev-jwt-secret-change-me-in-production-min-32-chars

# ====================
# Monitoring & Observability (Optional)
# ====================
# Prometheus metrics endpoint
# PROMETHEUS_URL=http://localhost:9090

# Error tracking (e.g., Sentry DSN)
# ERROR_TRACKING_DSN=

# Metrics API key (for protected metrics endpoints)
# METRICS_KEY=

# Health check API key (for protected health endpoints)
# HEALTH_KEY=

# ====================
# Circuit Breaker & Reliability
# ====================
# Number of failures before circuit opens
CIRCUIT_BREAKER_THRESHOLD=3

# Time (ms) before attempting to close circuit after opening (1 hour)
CIRCUIT_BREAKER_RESET_TIMEOUT=3600000

# ====================
# SLO Configuration
# ====================
# Error budget (0.001 = 99.9% SLO)
SLO_ERROR_BUDGET=0.001

# SLO time windows (in milliseconds)
SLO_SHORT_WINDOW=3600000    # 1 hour
SLO_MEDIUM_WINDOW=21600000  # 6 hours
SLO_LONG_WINDOW=86400000    # 24 hours

# ====================
# Deployment Thresholds
# ====================
# Maximum acceptable error rate (1% = 0.01)
DEPLOY_ERROR_THRESHOLD=0.01

# Maximum acceptable P99 latency (milliseconds)
DEPLOY_P99_THRESHOLD=1000

# Maximum memory usage threshold (80% = 0.8)
DEPLOY_MEMORY_THRESHOLD=0.8

# Maximum CPU usage threshold (70% = 0.7)
DEPLOY_CPU_THRESHOLD=0.7

# ====================
# Graceful Shutdown
# ====================
# Seconds to wait before forceful shutdown
SHUTDOWN_RETRY_AFTER_SECONDS=30

# ====================
# Optional Services
# ====================
# NATS messaging (if using distributed messaging)
# NATS_URL=nats://localhost:4222

# Worker configuration (if running background workers)
# WORKER_TYPE=reserve  # Options: reserve, pacing, cohort, report

# Redis connection details (alternative to REDIS_URL)
# REDIS_HOST=localhost
# REDIS_PORT=6379

# ====================
# Release Information (Auto-populated in CI/CD)
# ====================
# APP_VERSION=dev
# RELEASE=local-dev
# GIT_SHA=
