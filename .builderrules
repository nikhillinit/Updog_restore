# Updawg Design System Implementation Guide

## Project Context
Transform the Updawg fund modeling platform into a premium, professional VC software experience using Press On Ventures' brand identity. Reference: Tactyc's clean data visualization approach but with superior UX.

## Technical Setup
```
Platform: React + TypeScript + Vite + Tailwind CSS
Components: /client/src/components/
Styles: Tailwind utility classes (no custom CSS)
State: Zustand for global state management
```

## Design System Implementation

### Color Tokens (Add to tailwind.config.js)
```javascript
colors: {
  'pov': {
    'charcoal': '#292929',    // Primary - headers, CTAs
    'white': '#FFFFFF',       // Backgrounds
    'gray': '#F2F2F2',        // Subtle backgrounds
    'beige': '#E0D8D1',       // Highlights, selected
    'success': '#10B981',     // Positive values
    'error': '#EF4444',       // Negative values
    'warning': '#F59E0B',     // Warnings
  }
}
```

### Typography Classes
```css
/* Headlines */ 
.heading-1: font-inter font-bold text-4xl text-pov-charcoal
.heading-2: font-inter font-bold text-3xl text-pov-charcoal
.heading-3: font-inter font-bold text-2xl text-pov-charcoal

/* Body Text */
.body-text: font-poppins text-base text-gray-700
.label-text: font-poppins font-medium text-sm text-gray-600
.data-text: font-mono text-base text-pov-charcoal
```

### Component Patterns

#### 1. Dashboard Card Component
```tsx
// Standard card wrapper for all dashboard elements
<div className="bg-white rounded-lg shadow-sm border border-pov-gray p-6 hover:shadow-md transition-shadow duration-200">
  <h3 className="font-inter font-bold text-lg text-pov-charcoal mb-4">
    {title}
  </h3>
  <div className="font-poppins text-gray-700">
    {content}
  </div>
</div>
```

#### 2. Financial Input Component
```tsx
// Enhanced numeric input with formatting
<div className="relative">
  <span className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500">
    $
  </span>
  <input
    type="text"
    className="w-full pl-8 pr-4 py-2 border border-pov-gray rounded-md focus:ring-2 focus:ring-pov-beige focus:border-transparent font-mono"
    value={formattedValue}
    onChange={handleChange}
  />
</div>
```

#### 3. Progress Indicator
```tsx
// Wizard progress bar with brand colors
<div className="relative">
  <div className="h-2 bg-pov-gray rounded-full">
    <div 
      className="h-2 bg-gradient-to-r from-pov-beige to-pov-charcoal rounded-full transition-all duration-300"
      style={{ width: `${progress}%` }}
    />
  </div>
  <div className="mt-2 flex justify-between">
    {steps.map((step, i) => (
      <div className={`text-xs font-poppins ${i <= currentStep ? 'text-pov-charcoal font-medium' : 'text-gray-400'}`}>
        {step.label}
      </div>
    ))}
  </div>
</div>
```

#### 4. Data Table Component
```tsx
// Professional financial data table
<table className="w-full">
  <thead className="bg-pov-gray border-b border-gray-200">
    <tr>
      <th className="px-4 py-3 text-left font-inter font-bold text-sm text-pov-charcoal">
        {column}
      </th>
    </tr>
  </thead>
  <tbody>
    <tr className="hover:bg-pov-gray/50 transition-colors">
      <td className="px-4 py-3 font-mono text-sm">
        {data}
      </td>
    </tr>
  </tbody>
</table>
```

### Key UI Patterns from Tactyc

1. **Clean Data Visualization**
   - Minimal chart chrome, focus on data
   - Consistent color coding for metrics
   - Interactive tooltips with detailed breakdowns

2. **Responsive Forms**
   - Two-column layouts on desktop
   - Clear section dividers
   - Inline validation messages

3. **Navigation Structure**
   - Fixed sidebar with collapsible sections
   - Breadcrumb navigation for deep hierarchies
   - Quick actions floating button

### Implementation Guidelines

#### File Structure
```
/client/src/
  /components/
    /ui/           # Base UI components
      Card.tsx
      Input.tsx
      Button.tsx
    /dashboard/    # Dashboard-specific
      MetricCard.tsx
      FundChart.tsx
    /wizard/       # Fund construction wizard
      StepIndicator.tsx
      SectorAllocation.tsx
```

#### Responsive Breakpoints
```css
mobile: max-w-640px
tablet: 641px-1024px  
desktop: 1025px+

/* Example responsive class */
className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
```

#### Animation Standards
```css
/* Consistent transitions */
transition-all duration-200 ease-out     /* Standard */
transition-all duration-300 ease-in-out  /* Smooth */
animate-pulse                            /* Loading states */
```

#### Accessibility Requirements
- All interactive elements have focus states
- ARIA labels for complex components
- Keyboard navigation support
- Minimum WCAG AA contrast ratios

### Component Examples to Build

1. **FundMetricCard.tsx** - Display key fund metrics with trend indicators
2. **AllocationSlider.tsx** - Interactive sector allocation with constraints
3. **LPProfileCard.tsx** - Clean LP information display
4. **FinancialTable.tsx** - Sortable, filterable financial data table
5. **WizardProgress.tsx** - Multi-step form progress indicator

### Critical Success Factors

✅ **Do:**
- Use Tailwind utility classes exclusively
- Maintain 8px spacing grid (space-2, space-4, space-6, etc.)
- Include hover states on all interactive elements
- Use consistent border radius (rounded-md for most, rounded-lg for cards)
- Add loading skeletons for async data

❌ **Don't:**
- Create custom CSS files
- Use inline styles except for dynamic values
- Mix font families within components
- Use pure black (#000000) - use charcoal instead
- Forget mobile responsiveness

### Testing Your Implementation

1. **Visual Consistency**: All components use brand colors
2. **Responsive Design**: Test at 375px, 768px, 1440px widths
3. **Interaction States**: Hover, focus, active, disabled
4. **Data Handling**: Empty states, loading, errors
5. **Performance**: Smooth animations, no layout shifts

## Next Steps

1. Update `tailwind.config.js` with brand colors
2. Create base UI components with brand styling
3. Refactor existing components to use new design system
4. Add loading states and error boundaries
5. Implement responsive layouts for all views

Remember: The goal is to create a premium, trustworthy interface that makes complex financial data easy to understand and interact with, surpassing Tactyc's functionality while maintaining Press On Ventures' sophisticated brand identity.