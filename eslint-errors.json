[{"filePath":"C:\\dev\\Updog_restore\\client\\src\\App.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'currentModule' is assigned a value but never used.","line":111,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":111,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { Suspense, useState, useEffect } from 'react';\nimport { Switch, Route, Redirect, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { FundProvider, useFundContext } from \"@/contexts/FundContext\";\nimport { ErrorBoundary } from \"./components/ui/error-boundary\";\n\n// Layout components\nimport Sidebar from \"@/components/layout/sidebar\";\n// import Header from \"@/components/layout/header\"; // Unused - removed\nimport DynamicFundHeader from \"@/components/layout/dynamic-fund-header\";\n\n// Page components - Heavy routes lazy loaded for bundle optimization\nconst Dashboard = React.lazy(() => import(\"@/pages/dashboard\"));\nconst Portfolio = React.lazy(() => import(\"@/pages/portfolio\"));\nconst Investments = React.lazy(() => import(\"@/pages/investments\"));\nconst Planning = React.lazy(() => import(\"@/pages/planning\"));\n// Lazy load non-critical routes for bundle optimization\nconst FundSetup = React.lazy(() => import(\"@/pages/fund-setup\"));\nconst DesignSystem = React.lazy(() => import(\"@/pages/design-system\"));\nconst InvestmentDetail = React.lazy(() => import(\"@/pages/investment-detail\"));\nconst KPIManager = React.lazy(() => import(\"@/pages/kpi-manager\"));\nconst KPISubmission = React.lazy(() => import(\"@/pages/kpi-submission\"));\nconst ForecastingPage = React.lazy(() => import(\"@/pages/forecasting\"));\nconst ScenarioBuilderPage = React.lazy(() => import(\"@/pages/scenario-builder\"));\nconst ReservesDemo = React.lazy(() => import(\"@/pages/reserves-demo\"));\nconst MOICAnalysisPage = React.lazy(() => import(\"@/pages/moic-analysis\"));\nconst ReturnTheFundPage = React.lazy(() => import(\"@/pages/return-the-fund\"));\nconst PartialSalesPage = React.lazy(() => import(\"@/pages/partial-sales\"));\nconst FinancialModeling = React.lazy(() => import(\"@/pages/financial-modeling\"));\nconst Performance = React.lazy(() => import(\"@/pages/performance\"));\nconst Analytics = React.lazy(() => import(\"@/pages/analytics\"));\nconst Reports = React.lazy(() => import(\"@/pages/reports\"));\nconst AllocationManagerPage = React.lazy(() => import(\"@/pages/allocation-manager\"));\nconst NotFound = React.lazy(() => import(\"@/pages/not-found\"));\nconst EnhancedPortfolioAnalytics = React.lazy(() => import(\"@/components/portfolio/enhanced-portfolio-analytics\"));\nconst CustomFields = React.lazy(() => import(\"@/pages/CustomFields\"));\nconst InvestmentsTable = React.lazy(() => import(\"@/pages/investments-table\"));\nconst CapTables = React.lazy(() => import(\"@/pages/CapTables\"));\nconst CashManagement = React.lazy(() => import(\"@/pages/cash-management\"));\nconst SensitivityAnalysisPage = React.lazy(() => import(\"@/pages/sensitivity-analysis\"));\n\nconst moduleConfig = {\n  dashboard: {\n    title: \"Fund Dashboard\",\n    description: \"Comprehensive overview of fund performance and metrics\"\n  },\n  'fund-setup': {\n    title: \"Fund Setup\",\n    description: \"Configure fund parameters and investment strategy\"\n  },\n  portfolio: {\n    title: \"Portfolio Management\", \n    description: \"Manage portfolio companies and track performance\"\n  },\n  investments: {\n    title: \"Investment Tracking\",\n    description: \"Add and manage individual investments with performance modeling\"\n  },\n  'kpi-manager': {\n    title: \"KPI Manager\",\n    description: \"Monitor and track portfolio company performance metrics\"\n  },\n  'allocation-manager': {\n    title: \"Allocation Manager\",\n    description: \"Configure fund allocations with automatic reserve calculation\"\n  },\n  'financial-modeling': {\n    title: \"Financial Modeling\",\n    description: \"Cohort analysis and financial projections\"\n  },\n  performance: {\n    title: \"Performance Analysis\",\n    description: \"IRR analysis and realized returns tracking\"\n  },\n  analytics: {\n    title: \"Analytics & Insights\",\n    description: \"Advanced analytics and performance insights\"\n  },\n  'portfolio-analytics': {\n    title: \"Portfolio Analytics\",\n    description: \"Drag-and-drop data visualization with saved views\"\n  },\n  reports: {\n    title: \"Reports & Documentation\", \n    description: \"Generate comprehensive fund reports\"\n  },\n  'tear-sheets': {\n    title: \"Tear Sheets\",\n    description: \"Mobile-optimized portfolio company tear sheets with versioned commentary\"\n  }\n};\n\nfunction AppLayout({ children }: { children: React.ReactNode }) {\n  const [location] = useLocation();\n  const [activeModule, setActiveModule] = useState('fund-setup');\n\n  // Update active module based on current route\n  useEffect(() => {\n    const path = location.replace('/', '') || 'fund-setup';\n    setActiveModule(path);\n  }, [location]);\n\n  const currentModule = moduleConfig[activeModule as keyof typeof moduleConfig] || moduleConfig['fund-setup'];\n\n  return (\n    <div className=\"flex flex-col min-h-screen bg-slate-50 font-poppins text-charcoal\">\n      <DynamicFundHeader />\n      <div className=\"flex flex-1\">\n        <Sidebar\n          activeModule={activeModule}\n          onModuleChange={setActiveModule}\n        />\n        <main className=\"flex-1 overflow-auto bg-slate-50\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction HomeRoute() {\n  const { needsSetup, isLoading } = useFundContext();\n  \n  if (isLoading) {\n    return <div className=\"flex-1 flex items-center justify-center\">\n      <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n    </div>;\n  }\n  \n  return needsSetup ? <Redirect to=\"/fund-setup\" /> : <Redirect to=\"/dashboard\" />;\n}\n\nfunction ProtectedRoute({ component: Component, ...props }: any) {\n  const { needsSetup, isLoading } = useFundContext();\n  \n  if (isLoading) {\n    return <div className=\"flex-1 flex items-center justify-center\">\n      <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n    </div>;\n  }\n  \n  if (needsSetup) {\n    return <Redirect to=\"/fund-setup\" />;\n  }\n  \n  return <Component {...props} />;\n}\n\nfunction Router() {\n  return (\n    <Suspense fallback={<div>LoadingΓÇª</div>}>\n      <Switch>\n        <Route path=\"/\" component={HomeRoute} />\n        <Route path=\"/fund-setup\" component={FundSetup} />\n        <Route path=\"/design-system\" component={DesignSystem} />\n        <Route path=\"/dashboard\" component={(props) => <ProtectedRoute component={Dashboard} {...props} />} />\n        <Route path=\"/portfolio\" component={(props) => <ProtectedRoute component={Portfolio} {...props} />} />\n        <Route path=\"/investments\" component={(props) => <ProtectedRoute component={Investments} {...props} />} />\n        <Route path=\"/investments/:id\" component={(props) => <ProtectedRoute component={InvestmentDetail} {...props} />} />\n        <Route path=\"/custom-fields\" component={(props) => <ProtectedRoute component={CustomFields} {...props} />} />\n        <Route path=\"/investments-table\" component={(props) => <ProtectedRoute component={InvestmentsTable} {...props} />} />\n        <Route path=\"/investments/company/:id\" component={(props) => <ProtectedRoute component={Investments} {...props} />} />\n        <Route path=\"/cap-tables\" component={(props) => <ProtectedRoute component={CapTables} {...props} />} />\n        <Route path=\"/kpi-manager\" component={(props) => <ProtectedRoute component={KPIManager} {...props} />} />\n        <Route path=\"/kpi-submission\" component={KPISubmission} />\n        <Route path=\"/allocation-manager\" component={() => <AllocationManagerPage />} />\n        <Route path=\"/planning\" component={(props) => <ProtectedRoute component={Planning} {...props} />} />\n        <Route path=\"/forecasting\" component={(props) => <ProtectedRoute component={ForecastingPage} {...props} />} />\n        <Route path=\"/scenario-builder\" component={(props) => <ProtectedRoute component={ScenarioBuilderPage} {...props} />} />\n        <Route path=\"/reserves-demo\" component={(props) => <ProtectedRoute component={ReservesDemo} {...props} />} />\n        <Route path=\"/moic-analysis\" component={(props) => <ProtectedRoute component={MOICAnalysisPage} {...props} />} />\n        <Route path=\"/return-the-fund\" component={(props) => <ProtectedRoute component={ReturnTheFundPage} {...props} />} />\n        <Route path=\"/partial-sales\" component={(props) => <ProtectedRoute component={PartialSalesPage} {...props} />} />\n        <Route path=\"/financial-modeling\" component={(props) => <ProtectedRoute component={FinancialModeling} {...props} />} />\n        <Route path=\"/performance\" component={(props) => <ProtectedRoute component={Performance} {...props} />} />\n        <Route path=\"/analytics\" component={(props) => <ProtectedRoute component={Analytics} {...props} />} />\n        <Route path=\"/portfolio-analytics\" component={(props) => <ProtectedRoute component={EnhancedPortfolioAnalytics} {...props} />} />\n        <Route path=\"/cash-management\" component={(props) => <ProtectedRoute component={CashManagement} {...props} />} />\n        <Route path=\"/sensitivity-analysis\" component={(props) => <ProtectedRoute component={SensitivityAnalysisPage} {...props} />} />\n        <Route path=\"/reports\" component={(props) => <ProtectedRoute component={Reports} {...props} />} />\n        <Route component={NotFound} />\n      </Switch>\n    </Suspense>\n  );\n}\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <QueryClientProvider client={queryClient}>\n        <FundProvider>\n          <TooltipProvider>\n            <Toaster />\n            <AppLayout>\n              <Router />\n            </AppLayout>\n          </TooltipProvider>\n        </FundProvider>\n      </QueryClientProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\adapters\\reserves-adapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\PrivacySettings.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isSentryEnabled' is defined but never used.","line":11,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Privacy Settings Component\n * Allows users to control analytics and telemetry preferences\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Shield, Eye, Activity } from 'lucide-react';\nimport { setAnalyticsEnabled, isSentryEnabled } from '@/lib/sentry';\n\nexport function PrivacySettings() {\n  const [analyticsEnabled, setAnalyticsEnabledState] = useState(false);\n  const [rumEnabled, setRumEnabled] = useState(false);\n  \n  useEffect(() => {\n    // Check current state\n    const optedOut = localStorage.getItem('analyticsOptOut') === '1';\n    const rumOptedOut = localStorage.getItem('rumOptOut') === '1';\n    \n    setAnalyticsEnabledState(!optedOut);\n    setRumEnabled(!rumOptedOut);\n  }, []);\n  \n  const handleAnalyticsToggle = (enabled: boolean) => {\n    setAnalyticsEnabledState(enabled);\n    setAnalyticsEnabled(enabled);\n    \n    // Show notification\n    const message = enabled \n      ? 'Analytics enabled. Page will reload to apply changes.'\n      : 'Analytics disabled. Your privacy preferences have been saved.';\n    \n    if (window.confirm(message)) {\n      window.location.reload();\n    }\n  };\n  \n  const handleRumToggle = (enabled: boolean) => {\n    setRumEnabled(enabled);\n    \n    if (enabled) {\n      localStorage.removeItem('rumOptOut');\n    } else {\n      localStorage.setItem('rumOptOut', '1');\n    }\n    \n    // RUM changes take effect on next page load\n    const message = enabled \n      ? 'Performance monitoring enabled for next session.'\n      : 'Performance monitoring disabled.';\n    \n    console.log(message);\n  };\n  \n  return (\n    <Card className=\"w-full max-w-2xl\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Shield className=\"h-5 w-5\" />\n          Privacy Settings\n        </CardTitle>\n        <CardDescription>\n          Control how we collect and use your data\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Analytics Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"analytics\" className=\"flex items-center gap-2\">\n                <Activity className=\"h-4 w-4\" />\n                Error Tracking & Analytics\n              </Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Help us improve by sending anonymous error reports and usage analytics\n              </p>\n            </div>\n            <Switch\n              id=\"analytics\"\n              checked={analyticsEnabled}\n              onCheckedChange={handleAnalyticsToggle}\n            />\n          </div>\n          \n          {analyticsEnabled && (\n            <div className=\"ml-6 p-3 bg-muted rounded-md text-sm\">\n              <ul className=\"space-y-1\">\n                <li>ΓÇó Anonymous error reports via Sentry</li>\n                <li>ΓÇó No personally identifiable information</li>\n                <li>ΓÇó Helps us fix bugs faster</li>\n              </ul>\n            </div>\n          )}\n        </div>\n        \n        {/* RUM Section */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"rum\" className=\"flex items-center gap-2\">\n                <Eye className=\"h-4 w-4\" />\n                Performance Monitoring\n              </Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Share page load and interaction metrics to help us optimize performance\n              </p>\n            </div>\n            <Switch\n              id=\"rum\"\n              checked={rumEnabled}\n              onCheckedChange={handleRumToggle}\n            />\n          </div>\n          \n          {rumEnabled && (\n            <div className=\"ml-6 p-3 bg-muted rounded-md text-sm\">\n              <ul className=\"space-y-1\">\n                <li>ΓÇó Web Vitals (LCP, INP, CLS)</li>\n                <li>ΓÇó Page routes only, no user data</li>\n                <li>ΓÇó Helps us make the app faster</li>\n              </ul>\n            </div>\n          )}\n        </div>\n        \n        {/* Privacy Notice */}\n        <div className=\"mt-6 p-4 border rounded-lg bg-background\">\n          <p className=\"text-sm text-muted-foreground\">\n            <strong>Your privacy matters.</strong> We respect Do Not Track (DNT) browser settings. \n            All telemetry is anonymous and never includes personal or financial data. \n            You can change these settings at any time.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default PrivacySettings;","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\allocation\\sector-profile-builder.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Label' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'Separator' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'Calculator' is defined but never used.","line":13,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'formatCurrency' is assigned a value but never used.","line":127,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":127,"endColumn":23}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Info, TrendingUp, Calculator } from \"lucide-react\";\n\ninterface RoundData {\n  round: string;\n  roundSize: number;\n  valuation: number;\n  esop: number;\n  graduationRate: number;\n  exitRate: number;\n  failureRate: number;\n  exitValuation: number;\n  timeToGraduate: number; // months\n}\n\ninterface SectorProfileData {\n  name: string;\n  rounds: RoundData[];\n}\n\nexport default function SectorProfileBuilder() {\n  const [sectorProfile, setSectorProfile] = useState<SectorProfileData>({\n    name: \"Default\",\n    rounds: [\n      {\n        round: \"Pre-Seed\",\n        roundSize: 625000,\n        valuation: 6750000,\n        esop: 10.00,\n        graduationRate: 70.00,\n        exitRate: 0.00,\n        failureRate: 30.00,\n        exitValuation: 15000000,\n        timeToGraduate: 18\n      },\n      {\n        round: \"Seed\",\n        roundSize: 3700000,\n        valuation: 15000000,\n        esop: 10.00,\n        graduationRate: 50.00,\n        exitRate: 0.00,\n        failureRate: 50.00,\n        exitValuation: 48000000,\n        timeToGraduate: 24\n      },\n      {\n        round: \"Series A\",\n        roundSize: 10000000,\n        valuation: 48000000,\n        esop: 7.50,\n        graduationRate: 50.00,\n        exitRate: 10.00,\n        failureRate: 40.00,\n        exitValuation: 125000000,\n        timeToGraduate: 30\n      },\n      {\n        round: \"Series B\",\n        roundSize: 22500000,\n        valuation: 125000000,\n        esop: 6.50,\n        graduationRate: 65.00,\n        exitRate: 15.00,\n        failureRate: 20.00,\n        exitValuation: 277000000,\n        timeToGraduate: 36\n      },\n      {\n        round: \"Series C\",\n        roundSize: 35000000,\n        valuation: 277000000,\n        esop: 5.40,\n        graduationRate: 70.00,\n        exitRate: 20.00,\n        failureRate: 10.00,\n        exitValuation: 474000000,\n        timeToGraduate: 42\n      },\n      {\n        round: \"Series D\",\n        roundSize: 57500000,\n        valuation: 474000000,\n        esop: 4.80,\n        graduationRate: 75.00,\n        exitRate: 20.00,\n        failureRate: 5.00,\n        exitValuation: 1654000000,\n        timeToGraduate: 48\n      },\n      {\n        round: \"Series E+\",\n        roundSize: 60000000,\n        valuation: 1654000000,\n        esop: 2.50,\n        graduationRate: 0.00,\n        exitRate: 100.00,\n        failureRate: 0.00,\n        exitValuation: 2000000000,\n        timeToGraduate: 60\n      }\n    ]\n  });\n\n  const updateRoundData = (roundIndex: number, field: keyof RoundData, value: number) => {\n    setSectorProfile(prev => ({\n      ...prev,\n      rounds: prev.rounds.map((round, index) => \n        index === roundIndex \n          ? { ...round, [field]: value }\n          : round\n      )\n    }));\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number) => {\n    return `${value.toFixed(2)}%`;\n  };\n\n  const getRoundColor = (round: string) => {\n    const colors: Record<string, string> = {\n      \"Pre-Seed\": \"bg-green-100 text-green-800\",\n      \"Seed\": \"bg-blue-100 text-blue-800\",\n      \"Series A\": \"bg-purple-100 text-purple-800\",\n      \"Series B\": \"bg-orange-100 text-orange-800\",\n      \"Series C\": \"bg-red-100 text-red-800\",\n      \"Series D\": \"bg-indigo-100 text-indigo-800\",\n      \"Series E+\": \"bg-gray-100 text-gray-800\"\n    };\n    return colors[round] || \"bg-gray-100 text-gray-800\";\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-xl font-bold\">Sector Profile Builder</CardTitle>\n              <p className=\"text-gray-600 mt-1\">\n                Configure market-driven assumptions for valuations, graduation rates, and exit patterns\n              </p>\n            </div>\n            <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700\">\n              <TrendingUp className=\"w-3 h-3 mr-1\" />\n              Market Data Driven\n            </Badge>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Tactyc Methodology Info */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-start\">\n            <Info className=\"w-5 h-5 text-blue-600 mt-0.5 mr-3 flex-shrink-0\" />\n            <div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">Tactyc Market-Driven Methodology</h3>\n              <p className=\"text-sm text-gray-600 mb-3\">\n                Instead of setting fixed exit multiples, Tactyc builds up performance expectations from granular market assumptions:\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600\">\n                <div>\n                  <strong>Market Dynamics:</strong>\n                  <ul className=\"list-disc ml-6 mt-1 space-y-1\">\n                    <li>Actual valuation step-ups by sector and geography</li>\n                    <li>Probability of early exits at lower multiples</li>\n                    <li>Impact of follow-on investments on exit multiples</li>\n                  </ul>\n                </div>\n                <div>\n                  <strong>Timing Controls:</strong>\n                  <ul className=\"list-disc ml-6 mt-1 space-y-1\">\n                    <li>Initial investment pacing controlled at allocation level</li>\n                    <li>Follow-on timing driven by \"Time to Graduate\" field</li>\n                    <li>Market-driven graduation rates and exit patterns</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Rounds Configuration Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Valuations and Round Size Expectations</CardTitle>\n          <p className=\"text-sm text-gray-600\">Configure market expectations for each funding round</p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b bg-gray-50\">\n                  <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Round</th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Round Size</th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Valuation</th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">ESOP (%)</th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Graduation (%)</th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Exit (%)</th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Failure (%)</th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Exit Valuation</th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Time to Graduate (mo)</th>\n                </tr>\n              </thead>\n              <tbody>\n                {sectorProfile.rounds.map((round, index) => (\n                  <tr key={round.round} className=\"border-b hover:bg-gray-50\">\n                    <td className=\"py-3 px-4\">\n                      <Badge className={getRoundColor(round.round)}>\n                        {round.round}\n                      </Badge>\n                    </td>\n                    <td className=\"py-3 px-4 text-center\">\n                      <Input\n                        type=\"number\"\n                        value={round.roundSize}\n                        onChange={(e) => updateRoundData(index, 'roundSize', parseFloat(e.target.value) || 0)}\n                        className=\"w-24 h-8 text-center bg-yellow-50 border-yellow-200\"\n                      />\n                    </td>\n                    <td className=\"py-3 px-4 text-center\">\n                      <Input\n                        type=\"number\"\n                        value={round.valuation}\n                        onChange={(e) => updateRoundData(index, 'valuation', parseFloat(e.target.value) || 0)}\n                        className=\"w-32 h-8 text-center bg-yellow-50 border-yellow-200\"\n                      />\n                    </td>\n                    <td className=\"py-3 px-4 text-center\">\n                      <div className=\"flex items-center justify-center\">\n                        <Input\n                          type=\"number\"\n                          step=\"0.1\"\n                          value={round.esop}\n                          onChange={(e) => updateRoundData(index, 'esop', parseFloat(e.target.value) || 0)}\n                          className=\"w-16 h-8 text-center bg-yellow-50 border-yellow-200\"\n                        />\n                        <span className=\"text-xs ml-1\">%</span>\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-4 text-center\">\n                      <div className=\"flex items-center justify-center\">\n                        <Input\n                          type=\"number\"\n                          step=\"0.1\"\n                          value={round.graduationRate}\n                          onChange={(e) => updateRoundData(index, 'graduationRate', parseFloat(e.target.value) || 0)}\n                          className=\"w-16 h-8 text-center bg-yellow-50 border-yellow-200\"\n                        />\n                        <span className=\"text-xs ml-1\">%</span>\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-4 text-center\">\n                      <div className=\"flex items-center justify-center\">\n                        <Input\n                          type=\"number\"\n                          step=\"0.1\"\n                          value={round.exitRate}\n                          onChange={(e) => updateRoundData(index, 'exitRate', parseFloat(e.target.value) || 0)}\n                          className=\"w-16 h-8 text-center bg-yellow-50 border-yellow-200\"\n                        />\n                        <span className=\"text-xs ml-1\">%</span>\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-4 text-center\">\n                      <div className=\"flex items-center justify-center\">\n                        <span className=\"text-sm text-red-600 font-medium\">\n                          {formatPercentage(round.failureRate)}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-4 text-center\">\n                      <Input\n                        type=\"number\"\n                        value={round.exitValuation}\n                        onChange={(e) => updateRoundData(index, 'exitValuation', parseFloat(e.target.value) || 0)}\n                        className=\"w-32 h-8 text-center bg-yellow-50 border-yellow-200\"\n                      />\n                    </td>\n                    <td className=\"py-3 px-4 text-center\">\n                      <Input\n                        type=\"number\"\n                        value={round.timeToGraduate}\n                        onChange={(e) => updateRoundData(index, 'timeToGraduate', parseFloat(e.target.value) || 0)}\n                        className=\"w-20 h-8 text-center bg-yellow-50 border-yellow-200\"\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Performance Expectations Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Performance Expectations</CardTitle>\n          <p className=\"text-sm text-gray-600\">\n            Based on graduation rates, exit rates, and market valuations\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-green-600\">5.40x</div>\n              <div className=\"text-sm text-green-700 mt-1\">Expected MOIC</div>\n              <div className=\"text-xs text-gray-600 mt-2\">\n                Probability-weighted across all exit scenarios\n              </div>\n            </div>\n            \n            <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-blue-600\">33.33%</div>\n              <div className=\"text-sm text-blue-700 mt-1\">Reserve Ratio</div>\n              <div className=\"text-xs text-gray-600 mt-2\">\n                Auto-calculated from follow-on strategy\n              </div>\n            </div>\n            \n            <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-purple-600\">18.5%</div>\n              <div className=\"text-sm text-purple-700 mt-1\">Overall Success Rate</div>\n              <div className=\"text-xs text-gray-600 mt-2\">\n                Companies achieving meaningful exits\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-between\">\n        <Button variant=\"outline\">\n          Import Market Data\n        </Button>\n        <div className=\"space-x-2\">\n          <Button variant=\"outline\">\n            Save as Template\n          </Button>\n          <Button>\n            Apply to Allocations\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\allocation\\tactyc-allocation-ui.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":14,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Info, Calculator, Target, DollarSign, Calendar, Plus } from \"lucide-react\";\n\ninterface AllocationData {\n  id: string;\n  name: string;\n  linkedSectorProfile: string;\n  entryRound: string;\n  initialCheckSize: number;\n  impliedEntryOwnership: number;\n  numberOfDeals: number;\n  capitalAllocated: number;\n  followOnStrategy: {\n    preSeed: { maintainOwnership: number; participation: number; impliedCheck: number; graduationRate: number; graduations: number; followOns: number; capitalAllocated: number };\n    seed: { maintainOwnership: number; participation: number; impliedCheck: number; graduationRate: number; graduations: number; followOns: number; capitalAllocated: number };\n    seriesA: { maintainOwnership: number; participation: number; impliedCheck: number; graduationRate: number; graduations: number; followOns: number; capitalAllocated: number };\n    seriesB: { maintainOwnership: number; participation: number; impliedCheck: number; graduationRate: number; graduations: number; followOns: number; capitalAllocated: number };\n  };\n}\n\ninterface TactycsummaryData {\n  capitalAllocated: number;\n  expectedMOIC: number;\n  reserveRatio: number;\n}\n\nexport default function TactycAllocationUI() {\n  const [allocation, setAllocation] = useState<AllocationData>({\n    id: \"pre-seed\",\n    name: \"Pre-Seed\",\n    linkedSectorProfile: \"Default\",\n    entryRound: \"Pre-Seed\",\n    initialCheckSize: 737500,\n    impliedEntryOwnership: 10.00,\n    numberOfDeals: 10.39,\n    capitalAllocated: 7665828,\n    followOnStrategy: {\n      preSeed: { maintainOwnership: 0, participation: 0, impliedCheck: 0, graduationRate: 0, graduations: 0, followOns: 0, capitalAllocated: 0 },\n      seed: { maintainOwnership: 10, participation: 100, impliedCheck: 377778, graduationRate: 70, graduations: 7.28, followOns: 7.28, capitalAllocated: 2748726 },\n      seriesA: { maintainOwnership: 10, participation: 100, impliedCheck: 1200000, graduationRate: 50, graduations: 3.64, followOns: 3.64, capitalAllocated: 4365624 },\n      seriesB: { maintainOwnership: 0, participation: 0, impliedCheck: 0, graduationRate: 50, graduations: 1.82, followOns: 0, capitalAllocated: 0 }\n    }\n  });\n\n  const [summary, setSummary] = useState<TactycsummaryData>({\n    capitalAllocated: 14780179,\n    expectedMOIC: 7.90,\n    reserveRatio: 48.13\n  });\n\n  // Calculate derived metrics based on Tactyc methodology - deploy ALL available capital\n  const calculateMetrics = () => {\n    const totalFollowOnCapital = Object.values(allocation.followOnStrategy).reduce(\n      (sum, stage) => sum + stage.capitalAllocated, 0\n    );\n    const totalCapital = allocation.capitalAllocated + totalFollowOnCapital;\n    const reserveRatio = (totalFollowOnCapital / totalCapital) * 100;\n    \n    // Calculate precise number of deals to deploy all capital\n    const preciseNumberOfDeals = allocation.capitalAllocated / allocation.initialCheckSize;\n    \n    // Calculate Expected MOIC based on graduation rates and market valuations\n    const seedSuccessRate = allocation.followOnStrategy.seed.graduationRate / 100;\n    const seriesASuccessRate = allocation.followOnStrategy.seriesA.graduationRate / 100;\n    const overallSuccessRate = seedSuccessRate * seriesASuccessRate;\n    \n    // Market-driven MOIC calculation (not fixed exit multiple)\n    const avgExitValuation = 125000000; // Based on Series A exit valuation\n    const avgInvestment = allocation.initialCheckSize + \n      (allocation.followOnStrategy.seed.impliedCheck * seedSuccessRate) +\n      (allocation.followOnStrategy.seriesA.impliedCheck * overallSuccessRate);\n    \n    const expectedMOIC = overallSuccessRate > 0 ? (avgExitValuation * 0.034) / avgInvestment : 0; // 3.4% ownership assumption\n    \n    return {\n      reserveRatio,\n      preciseNumberOfDeals,\n      expectedMOIC,\n      totalCapital,\n      unusedCapital: 0 // Tactyc ensures no unused capital\n    };\n  };\n\n  const updateFollowOnStrategy = (stage: keyof AllocationData['followOnStrategy'], field: string, value: number) => {\n    setAllocation(prev => {\n      const updated = { ...prev };\n      \n      if (field === 'maintainOwnership' || field === 'participation') {\n        updated.followOnStrategy[stage] = {\n          ...updated.followOnStrategy[stage],\n          [field]: value\n        };\n\n        // Calculate implied check based on participation and graduation rate\n        if (field === 'participation') {\n          const participation = value / 100;\n          const graduationRate = updated.followOnStrategy[stage].graduationRate / 100;\n          const graduations = updated.numberOfDeals * graduationRate;\n          const followOns = participation * graduations;\n          \n          // Implied check calculation based on typical round sizes\n          let baseRoundCheck = 0;\n          if (stage === 'seed') baseRoundCheck = 377778;\n          if (stage === 'seriesA') baseRoundCheck = 1200000;\n          if (stage === 'seriesB') baseRoundCheck = 2000000;\n          \n          updated.followOnStrategy[stage].impliedCheck = baseRoundCheck;\n          updated.followOnStrategy[stage].graduations = graduations;\n          updated.followOnStrategy[stage].followOns = followOns;\n          updated.followOnStrategy[stage].capitalAllocated = followOns * baseRoundCheck;\n        }\n      }\n\n      if (field === 'graduationRate') {\n        updated.followOnStrategy[stage] = {\n          ...updated.followOnStrategy[stage],\n          graduationRate: value\n        };\n\n        // Recalculate graduations and follow-ons\n        const graduationRate = value / 100;\n        const graduations = updated.numberOfDeals * graduationRate;\n        const participation = updated.followOnStrategy[stage].participation / 100;\n        const followOns = participation * graduations;\n        \n        updated.followOnStrategy[stage].graduations = graduations;\n        updated.followOnStrategy[stage].followOns = followOns;\n        updated.followOnStrategy[stage].capitalAllocated = followOns * updated.followOnStrategy[stage].impliedCheck;\n      }\n\n      // Update summary with new metrics - ensure all capital is deployed\n      const metrics = calculateMetrics();\n      setSummary(prev => ({ \n        ...prev, \n        reserveRatio: metrics.reserveRatio,\n        expectedMOIC: metrics.expectedMOIC,\n        capitalAllocated: metrics.totalCapital\n      }));\n\n      return updated;\n    });\n  };\n\n  const updateInitialParameters = (field: keyof AllocationData, value: number | string) => {\n    setAllocation(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatPercentage = (value: number) => {\n    return `${value.toFixed(2)}%`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header Summary */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-xl font-bold\">{allocation.name}</CardTitle>\n              <div className=\"flex items-center gap-6 text-sm text-gray-600 mt-2\">\n                <span>Capital Allocated: {formatCurrency(summary.capitalAllocated)}</span>\n                <span>Expected MOIC: {summary.expectedMOIC.toFixed(2)}x</span>\n                <span>Reserve Ratio: {formatPercentage(summary.reserveRatio)}</span>\n              </div>\n            </div>\n            <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700 border-blue-200\">\n              <Calculator className=\"w-3 h-3 mr-1\" />\n              Auto-Calculated\n            </Badge>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Allocation Configuration */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Basic Allocation Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Allocation Configuration</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"allocationName\">Allocation Name</Label>\n              <Input\n                id=\"allocationName\"\n                value={allocation.name}\n                onChange={(e) => updateInitialParameters('name', e.target.value)}\n                className=\"bg-yellow-50 border-yellow-200\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"sectorProfile\">\n                Linked Sector Profile\n                <Info className=\"w-4 h-4 inline ml-1 text-gray-400\" />\n              </Label>\n              <Select value={allocation.linkedSectorProfile} onValueChange={(value) => updateInitialParameters('linkedSectorProfile', value)}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Default\">Default</SelectItem>\n                  <SelectItem value=\"B2B SaaS\">B2B SaaS</SelectItem>\n                  <SelectItem value=\"B2C\">B2C</SelectItem>\n                  <SelectItem value=\"Fintech\">Fintech</SelectItem>\n                  <SelectItem value=\"Healthcare\">Healthcare</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"entryRound\">Entry Round</Label>\n              <Select value={allocation.entryRound} onValueChange={(value) => updateInitialParameters('entryRound', value)}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Pre-Seed\">Pre-Seed</SelectItem>\n                  <SelectItem value=\"Seed\">Seed</SelectItem>\n                  <SelectItem value=\"Series A\">Series A</SelectItem>\n                  <SelectItem value=\"Series B\">Series B</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Initial Check Size Configuration */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">\n              Initial Check Size\n              <Info className=\"w-4 h-4 inline ml-1 text-gray-400\" />\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"checkSizeType\">Amount</Label>\n              <div className=\"flex items-center gap-2\">\n                <Select defaultValue=\"amount\">\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"amount\">Amount</SelectItem>\n                    <SelectItem value=\"ownership\">Ownership %</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Input\n                  id=\"initialCheckSize\"\n                  type=\"number\"\n                  value={allocation.initialCheckSize}\n                  onChange={(e) => updateInitialParameters('initialCheckSize', parseFloat(e.target.value))}\n                  className=\"bg-yellow-50 border-yellow-200\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2 text-sm text-gray-600\">\n              <div className=\"flex justify-between\">\n                <span>Implied Entry Ownership</span>\n                <span>{formatPercentage(allocation.impliedEntryOwnership)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Number of Deals</span>\n                <span>{calculateMetrics().preciseNumberOfDeals.toFixed(2)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Capital Allocated</span>\n                <span>{formatCurrency(allocation.capitalAllocated)}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Expected MOIC Display */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center\">\n              <Target className=\"w-5 h-5 mr-2 text-green-600\" />\n              Performance Target\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-green-600\">\n                {summary.expectedMOIC.toFixed(2)}x\n              </div>\n              <div className=\"text-sm text-gray-600 mt-1\">Expected MOIC</div>\n              <div className=\"text-xs text-gray-500 mt-2\">\n                Based on sector profile and graduation rates\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Follow-On Strategy */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">\n            Follow-On Strategy\n            <Info className=\"w-4 h-4 inline ml-1 text-gray-400\" />\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left py-3 px-2 font-medium text-gray-600\"></th>\n                  <th className=\"text-center py-3 px-2 font-medium text-gray-600\">Pre-Seed</th>\n                  <th className=\"text-center py-3 px-2 font-medium text-gray-600\">Seed</th>\n                  <th className=\"text-center py-3 px-2 font-medium text-gray-600\">Series A</th>\n                  <th className=\"text-center py-3 px-2 font-medium text-gray-600\">Series B</th>\n                </tr>\n              </thead>\n              <tbody className=\"space-y-2\">\n                <tr className=\"border-b border-gray-100\">\n                  <td className=\"py-3 px-2 font-medium\">\n                    Maintain Ownership (%) of\n                    <Info className=\"w-3 h-3 inline ml-1 text-gray-400\" />\n                  </td>\n                  <td className=\"py-3 px-2 text-center\">\n                    <Input\n                      type=\"number\"\n                      value={allocation.followOnStrategy.preSeed.maintainOwnership}\n                      onChange={(e) => updateFollowOnStrategy('preSeed', 'maintainOwnership', parseFloat(e.target.value) || 0)}\n                      className=\"w-16 h-8 text-center\"\n                      disabled\n                    />\n                    <span className=\"text-xs ml-1\">%</span>\n                  </td>\n                  <td className=\"py-3 px-2 text-center\">\n                    <Input\n                      type=\"number\"\n                      value={allocation.followOnStrategy.seed.maintainOwnership}\n                      onChange={(e) => updateFollowOnStrategy('seed', 'maintainOwnership', parseFloat(e.target.value) || 0)}\n                      className=\"w-16 h-8 text-center bg-yellow-50 border-yellow-200\"\n                    />\n                    <span className=\"text-xs ml-1\">%</span>\n                  </td>\n                  <td className=\"py-3 px-2 text-center\">\n                    <Input\n                      type=\"number\"\n                      value={allocation.followOnStrategy.seriesA.maintainOwnership}\n                      onChange={(e) => updateFollowOnStrategy('seriesA', 'maintainOwnership', parseFloat(e.target.value) || 0)}\n                      className=\"w-16 h-8 text-center bg-yellow-50 border-yellow-200\"\n                    />\n                    <span className=\"text-xs ml-1\">%</span>\n                  </td>\n                  <td className=\"py-3 px-2 text-center\">\n                    <Input\n                      type=\"number\"\n                      value={allocation.followOnStrategy.seriesB.maintainOwnership}\n                      onChange={(e) => updateFollowOnStrategy('seriesB', 'maintainOwnership', parseFloat(e.target.value) || 0)}\n                      className=\"w-16 h-8 text-center\"\n                      disabled\n                    />\n                    <span className=\"text-xs ml-1\">%</span>\n                  </td>\n                </tr>\n\n                <tr className=\"border-b border-gray-100\">\n                  <td className=\"py-3 px-2 font-medium\">\n                    Follow-on Participation (%)\n                    <Info className=\"w-3 h-3 inline ml-1 text-gray-400\" />\n                  </td>\n                  <td className=\"py-3 px-2 text-center\">\n                    <Input\n                      type=\"number\"\n                      value={allocation.followOnStrategy.preSeed.participation}\n                      className=\"w-16 h-8 text-center\"\n                      disabled\n                    />\n                    <span className=\"text-xs ml-1\">%</span>\n                  </td>\n                  <td className=\"py-3 px-2 text-center\">\n                    <Input\n                      type=\"number\"\n                      value={allocation.followOnStrategy.seed.participation}\n                      onChange={(e) => updateFollowOnStrategy('seed', 'participation', parseFloat(e.target.value) || 0)}\n                      className=\"w-16 h-8 text-center bg-yellow-50 border-yellow-200\"\n                    />\n                    <span className=\"text-xs ml-1\">%</span>\n                  </td>\n                  <td className=\"py-3 px-2 text-center\">\n                    <Input\n                      type=\"number\"\n                      value={allocation.followOnStrategy.seriesA.participation}\n                      onChange={(e) => updateFollowOnStrategy('seriesA', 'participation', parseFloat(e.target.value) || 0)}\n                      className=\"w-16 h-8 text-center bg-yellow-50 border-yellow-200\"\n                    />\n                    <span className=\"text-xs ml-1\">%</span>\n                  </td>\n                  <td className=\"py-3 px-2 text-center\">\n                    <Input\n                      type=\"number\"\n                      value={allocation.followOnStrategy.seriesB.participation}\n                      className=\"w-16 h-8 text-center\"\n                      disabled\n                    />\n                    <span className=\"text-xs ml-1\">%</span>\n                  </td>\n                </tr>\n\n                <Separator />\n\n                {/* Read-only calculated fields */}\n                <tr className=\"bg-gray-50\">\n                  <td className=\"py-3 px-2 font-medium text-gray-600\">Implied Follow-On Check</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">-</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">{formatCurrency(allocation.followOnStrategy.seed.impliedCheck)}</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">{formatCurrency(allocation.followOnStrategy.seriesA.impliedCheck)}</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">-</td>\n                </tr>\n\n                <tr className=\"bg-gray-50\">\n                  <td className=\"py-3 px-2 font-medium text-gray-600\">Graduation Rate</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">-</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">{formatPercentage(allocation.followOnStrategy.seed.graduationRate)}</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">{formatPercentage(allocation.followOnStrategy.seriesA.graduationRate)}</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">{formatPercentage(allocation.followOnStrategy.seriesB.graduationRate)}</td>\n                </tr>\n\n                <tr className=\"bg-gray-50\">\n                  <td className=\"py-3 px-2 font-medium text-gray-600\">Number of Graduations</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">-</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">{allocation.followOnStrategy.seed.graduations.toFixed(2)}</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">{allocation.followOnStrategy.seriesA.graduations.toFixed(2)}</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">{allocation.followOnStrategy.seriesB.graduations.toFixed(2)}</td>\n                </tr>\n\n                <tr className=\"bg-gray-50\">\n                  <td className=\"py-3 px-2 font-medium text-gray-600\">Number of Follow-ons</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">-</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">{allocation.followOnStrategy.seed.followOns.toFixed(2)}</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">{allocation.followOnStrategy.seriesA.followOns.toFixed(2)}</td>\n                  <td className=\"py-3 px-2 text-center text-gray-600\">-</td>\n                </tr>\n\n                <tr className=\"bg-blue-50 border-2 border-blue-200\">\n                  <td className=\"py-3 px-2 font-bold text-blue-800\">Capital Allocated</td>\n                  <td className=\"py-3 px-2 text-center font-bold text-blue-800\">-</td>\n                  <td className=\"py-3 px-2 text-center font-bold text-blue-800\">{formatCurrency(allocation.followOnStrategy.seed.capitalAllocated)}</td>\n                  <td className=\"py-3 px-2 text-center font-bold text-blue-800\">{formatCurrency(allocation.followOnStrategy.seriesA.capitalAllocated)}</td>\n                  <td className=\"py-3 px-2 text-center font-bold text-blue-800\">-</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <div className=\"mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n            <div className=\"flex items-center mb-2\">\n              <Info className=\"w-4 h-4 text-blue-600 mr-2\" />\n              <span className=\"font-medium text-blue-800\">Tactyc Capital Deployment Methodology</span>\n            </div>\n            <p className=\"text-sm text-blue-700 mb-2\">\n              <strong>All available capital is deployed</strong> - no unused capital allowed:\n            </p>\n            <ul className=\"text-sm text-blue-700 mt-2 ml-4 space-y-1\">\n              <li>ΓÇó Precise number of deals calculated to deploy 100% of available capital</li>\n              <li>ΓÇó Reserves auto-calculated from graduation rates and follow-on strategy</li>\n              <li>ΓÇó Expected MOIC built up from market data, not fixed exit multiples</li>\n              <li>ΓÇó Market-driven assumptions enable defensible LP modeling and course correction</li>\n            </ul>\n            <div className=\"mt-3 grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"text-blue-600\">Reserve Ratio:</span> \n                <span className=\"font-medium text-blue-800 ml-1\">{formatPercentage(summary.reserveRatio)}</span>\n              </div>\n              <div>\n                <span className=\"text-blue-600\">Capital Utilization:</span> \n                <span className=\"font-medium text-green-800 ml-1\">100.00%</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Initial Investment Horizon */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg flex items-center\">\n            <Calendar className=\"w-5 h-5 mr-2 text-blue-600\" />\n            Initial Investment Horizon\n            <Info className=\"w-4 h-4 ml-2 text-gray-400\" />\n          </CardTitle>\n          <p className=\"text-sm text-gray-600\">\n            Control the pacing of capital deployment for this allocation\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-4 p-4 bg-gray-50 rounded-lg\">\n              <span className=\"text-sm font-medium text-gray-700 min-w-0 flex-shrink-0\">\n                Fund will invest\n              </span>\n              <Input\n                type=\"number\"\n                defaultValue={50.00}\n                className=\"w-20 h-8 text-center bg-yellow-50 border-yellow-200\"\n              />\n              <span className=\"text-sm text-gray-600\">%</span>\n              <span className=\"text-sm text-gray-600\">of total allocated capital, from month</span>\n              <Input\n                type=\"number\"\n                defaultValue={1}\n                className=\"w-16 h-8 text-center bg-yellow-50 border-yellow-200\"\n              />\n              <span className=\"text-sm text-gray-600\">to</span>\n              <Input\n                type=\"number\"\n                defaultValue={12}\n                className=\"w-16 h-8 text-center bg-yellow-50 border-yellow-200\"\n              />\n            </div>\n\n            <div className=\"flex items-center gap-4 p-4 bg-gray-50 rounded-lg\">\n              <span className=\"text-sm font-medium text-gray-700 min-w-0 flex-shrink-0\">\n                Fund will invest\n              </span>\n              <Input\n                type=\"number\"\n                defaultValue={50.00}\n                className=\"w-20 h-8 text-center bg-yellow-50 border-yellow-200\"\n              />\n              <span className=\"text-sm text-gray-600\">%</span>\n              <span className=\"text-sm text-gray-600\">of total allocated capital, from month</span>\n              <Input\n                type=\"number\"\n                defaultValue={13}\n                className=\"w-16 h-8 text-center bg-yellow-50 border-yellow-200\"\n              />\n              <span className=\"text-sm text-gray-600\">to</span>\n              <Input\n                type=\"number\"\n                defaultValue={36}\n                className=\"w-16 h-8 text-center bg-yellow-50 border-yellow-200\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-4 pt-4\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Period\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Target className=\"w-4 h-4 mr-2\" />\n              Apply this horizon to all allocations\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-between\">\n        <Button variant=\"outline\">\n          Reset to Defaults\n        </Button>\n        <div className=\"space-x-2\">\n          <Button variant=\"outline\">\n            Save as Template\n          </Button>\n          <Button>\n            Apply Changes\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\budget\\budget-creator.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used.","line":7,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit2' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'budget' is defined but never used.","line":39,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":46},{"ruleId":"no-unused-vars","severity":2,"message":"'className' is defined but never used.","line":43,"column":79,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":88}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Plus,\n  Calculator,\n  Info,\n  Trash2,\n  Edit2\n} from \"lucide-react\";\n\ninterface ExpenseCategory {\n  id: string;\n  category: string;\n  lifetimeExpense: number;\n  expenseRatio: number;\n  term: number;\n  isCustom?: boolean;\n}\n\ninterface BudgetCreatorProps {\n  fundSize?: number;\n  onBudgetCreate?: (budget: ExpenseCategory[]) => void;\n  className?: string;\n}\n\nexport default function BudgetCreator({ fundSize = 200000000, onBudgetCreate, className }: BudgetCreatorProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [newExpenseCategory, setNewExpenseCategory] = useState(\"\");\n  const [newExpenseAmount, setNewExpenseAmount] = useState(\"\");\n  const [newExpenseRatio, setNewExpenseRatio] = useState(\"\");\n  const [newExpenseTerm, setNewExpenseTerm] = useState(\"120\");\n\n  // Standard expense categories based on common fund ratios\n  const [expenseCategories, setExpenseCategories] = useState<ExpenseCategory[]>([\n    {\n      id: \"legal\",\n      category: \"Legal\",\n      lifetimeExpense: 400000,\n      expenseRatio: 0.20,\n      term: 60\n    },\n    {\n      id: \"administration\",\n      category: \"Administration\", \n      lifetimeExpense: 1500000,\n      expenseRatio: 0.75,\n      term: 120\n    },\n    {\n      id: \"tax\",\n      category: \"Tax\",\n      lifetimeExpense: 160000,\n      expenseRatio: 0.08,\n      term: 120\n    },\n    {\n      id: \"audit\",\n      category: \"Audit\",\n      lifetimeExpense: 600000,\n      expenseRatio: 0.30,\n      term: 120\n    },\n    {\n      id: \"software\",\n      category: \"Software\",\n      lifetimeExpense: 300000,\n      expenseRatio: 0.15,\n      term: 60\n    },\n    {\n      id: \"setup\",\n      category: \"Setup\",\n      lifetimeExpense: 500000,\n      expenseRatio: 0.25,\n      term: 1\n    },\n    {\n      id: \"other\",\n      category: \"Other\",\n      lifetimeExpense: 1200000,\n      expenseRatio: 0.60,\n      term: 120\n    }\n  ]);\n\n  const totalExpense = expenseCategories.reduce((sum, cat) => sum + cat.lifetimeExpense, 0);\n  const totalRatio = expenseCategories.reduce((sum, cat) => sum + cat.expenseRatio, 0);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatPercent = (ratio: number) => `${ratio.toFixed(2)}%`;\n\n  const handleExpenseChange = (id: string, field: keyof ExpenseCategory, value: string | number) => {\n    setExpenseCategories(prev => prev.map(cat => {\n      if (cat.id === id) {\n        const updated = { ...cat, [field]: value };\n        \n        // Auto-calculate ratio when expense changes\n        if (field === 'lifetimeExpense') {\n          updated.expenseRatio = (Number(value) / fundSize) * 100;\n        }\n        // Auto-calculate expense when ratio changes\n        if (field === 'expenseRatio') {\n          updated.lifetimeExpense = (Number(value) / 100) * fundSize;\n        }\n        \n        return updated;\n      }\n      return cat;\n    }));\n  };\n\n  const handleAddCustomExpense = () => {\n    if (!newExpenseCategory || !newExpenseAmount) return;\n\n    const amount = parseFloat(newExpenseAmount);\n    const ratio = parseFloat(newExpenseRatio) || (amount / fundSize) * 100;\n    const term = parseInt(newExpenseTerm) || 120;\n\n    const newExpense: ExpenseCategory = {\n      id: `custom-${Date.now()}`,\n      category: newExpenseCategory,\n      lifetimeExpense: amount,\n      expenseRatio: ratio,\n      term: term,\n      isCustom: true\n    };\n\n    setExpenseCategories(prev => [...prev, newExpense]);\n    \n    // Reset form\n    setNewExpenseCategory(\"\");\n    setNewExpenseAmount(\"\");\n    setNewExpenseRatio(\"\");\n    setNewExpenseTerm(\"120\");\n  };\n\n  const handleRemoveExpense = (id: string) => {\n    setExpenseCategories(prev => prev.filter(cat => cat.id !== id));\n  };\n\n  const handleCreateBudget = () => {\n    if (onBudgetCreate) {\n      onBudgetCreate(expenseCategories);\n    }\n    setIsOpen(false);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button className=\"flex items-center space-x-2\">\n          <Calculator className=\"h-4 w-4\" />\n          <span>Create Budget</span>\n        </Button>\n      </DialogTrigger>\n      \n      <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Calculator className=\"h-5 w-5\" />\n            <span>Budget Creator</span>\n          </DialogTitle>\n          <DialogDescription>\n            These are estimated expense ratios based on standard funds. Your actual budget categories and estimated expenses may vary depending on the specific circumstances of your fund.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Expense Categories Table */}\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full border-collapse\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Category</th>\n                  <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Lifetime Expense</th>\n                  <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Expense Ratio (%)</th>\n                  <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Term</th>\n                  <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {expenseCategories.map((category) => (\n                  <tr key={category.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-medium\">{category.category}</span>\n                        {category.isCustom && (\n                          <Badge variant=\"outline\" className=\"text-xs\">Custom</Badge>\n                        )}\n                      </div>\n                    </td>\n                    \n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex items-center\">\n                        <span className=\"text-gray-500 mr-1\">$</span>\n                        <Input\n                          type=\"number\"\n                          value={category.lifetimeExpense}\n                          onChange={(e) => handleExpenseChange(category.id, 'lifetimeExpense', parseFloat(e.target.value) || 0)}\n                          className=\"w-32 bg-yellow-50 border-yellow-300\"\n                        />\n                      </div>\n                    </td>\n                    \n                    <td className=\"py-3 px-4\">\n                      <span className=\"font-medium\">{formatPercent(category.expenseRatio)}</span>\n                    </td>\n                    \n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Input\n                          type=\"number\"\n                          value={category.term}\n                          onChange={(e) => handleExpenseChange(category.id, 'term', parseInt(e.target.value) || 1)}\n                          className=\"w-16 bg-yellow-50 border-yellow-300\"\n                        />\n                        <span className=\"text-gray-500 text-sm\">months</span>\n                      </div>\n                    </td>\n                    \n                    <td className=\"py-3 px-4\">\n                      {category.isCustom && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleRemoveExpense(category.id)}\n                          className=\"text-red-600 hover:text-red-700\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                    </td>\n                  </tr>\n                ))}\n                \n                {/* Totals Row */}\n                <tr className=\"border-t-2 border-gray-300 bg-gray-50 font-bold\">\n                  <td className=\"py-4 px-4 font-bold text-gray-900\">Total</td>\n                  <td className=\"py-4 px-4 font-bold text-gray-900\">{formatCurrency(totalExpense)}</td>\n                  <td className=\"py-4 px-4 font-bold text-gray-900\">{formatPercent(totalRatio)}</td>\n                  <td className=\"py-4 px-4\"></td>\n                  <td className=\"py-4 px-4\"></td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          {/* Add Custom Expense */}\n          <Card className=\"border-blue-200 bg-blue-50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2 text-blue-900\">\n                <Plus className=\"h-5 w-5\" />\n                <span>Add Custom Expense Category</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div>\n                  <Label htmlFor=\"category-name\">Category Name</Label>\n                  <Input\n                    id=\"category-name\"\n                    value={newExpenseCategory}\n                    onChange={(e) => setNewExpenseCategory(e.target.value)}\n                    placeholder=\"e.g., Marketing\"\n                    className=\"mt-1\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"expense-amount\">Lifetime Expense ($)</Label>\n                  <Input\n                    id=\"expense-amount\"\n                    type=\"number\"\n                    value={newExpenseAmount}\n                    onChange={(e) => setNewExpenseAmount(e.target.value)}\n                    placeholder=\"0\"\n                    className=\"mt-1\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"expense-term\">Term (months)</Label>\n                  <Input\n                    id=\"expense-term\"\n                    type=\"number\"\n                    value={newExpenseTerm}\n                    onChange={(e) => setNewExpenseTerm(e.target.value)}\n                    placeholder=\"120\"\n                    className=\"mt-1\"\n                  />\n                </div>\n                \n                <div className=\"flex items-end\">\n                  <Button onClick={handleAddCustomExpense} className=\"w-full\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Category\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Budget Summary */}\n          <Card className=\"border-green-200 bg-green-50\">\n            <CardContent className=\"pt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-900\">{formatCurrency(totalExpense)}</div>\n                  <div className=\"text-sm text-green-700\">Total Lifetime Expenses</div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-900\">{formatPercent(totalRatio)}</div>\n                  <div className=\"text-sm text-green-700\">Total Expense Ratio</div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-900\">{expenseCategories.length}</div>\n                  <div className=\"text-sm text-green-700\">Expense Categories</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end space-x-4\">\n            <Button variant=\"outline\" onClick={() => setIsOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleCreateBudget} className=\"bg-blue-600 hover:bg-blue-700\">\n              Create Budget\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\cap-table\\cap-table-calculator.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogHeader' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":30,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'Trash2' is defined but never used.","line":30,"column":44,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'CapTableScenario' is defined but never used.","line":58,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":58,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'setCurrentCapTable' is assigned a value but never used.","line":119,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":119,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'showAddShareholder' is assigned a value but never used.","line":122,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'setShowAddShareholder' is assigned a value but never used.","line":122,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":122,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'showAddSAFE' is assigned a value but never used.","line":123,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":123,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'setShowAddSAFE' is assigned a value but never used.","line":123,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":123,"endColumn":37}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'generateProForma'. Either include it or remove the dependency array.","line":231,"column":6,"nodeType":"ArrayExpression","endLine":231,"endColumn":85,"suggestions":[{"desc":"Update the dependencies array to be: [preMoneyValuation, roundSize, optionPoolIncrease, currentCapTable, safesNotes, generateProForma]","fix":{"range":[7455,7534],"text":"[preMoneyValuation, roundSize, optionPoolIncrease, currentCapTable, safesNotes, generateProForma]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from 'react';\nimport { forEach } from '../../utils/array-safety';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Plus, Calculator, Download, Edit, Trash2, Users, TrendingUp, DollarSign, Percent } from 'lucide-react';\nimport SAFENoteEditor from './safe-note-editor';\n\ninterface Shareholder {\n  id: string;\n  name: string;\n  type: 'founder' | 'employee' | 'investor' | 'safe' | 'note' | 'option-pool';\n  shares: number;\n  percentage: number;\n  isConverted?: boolean;\n}\n\ninterface SAFENote {\n  id: string;\n  type: 'safe' | 'note';\n  principal: number;\n  valuationCap?: number;\n  discount?: number;\n  interestRate?: number;\n  maturityDate?: string;\n  conversionPrice?: number;\n  shares?: number;\n  holderName: string;\n  investmentDate: string;\n  mostFavoredNation?: boolean;\n  proRataRights?: boolean;\n}\n\ninterface CapTableScenario {\n  id: string;\n  name: string;\n  investmentId: string;\n  currentCapTable: Shareholder[];\n  safesNotes: SAFENote[];\n  nextRound: {\n    preMoneyValuation: number;\n    roundSize: number;\n    pricePerShare: number;\n    newInvestorShares: number;\n    optionPoolIncrease: number;\n  };\n  proFormaCapTable: Shareholder[];\n  createdAt: string;\n  lastModified: string;\n}\n\nconst SAMPLE_CAP_TABLE: Shareholder[] = [\n  { id: '1', name: 'Common shareholder 1', type: 'founder', shares: 8000000, percentage: 42.4875 },\n  { id: '2', name: 'Unallocated', type: 'option-pool', shares: 3910625, percentage: 20.7691 },\n  { id: '3', name: 'Common shareholder 2', type: 'founder', shares: 3000000, percentage: 15.9328 },\n  { id: '4', name: 'Common shareholder 3', type: 'founder', shares: 1000000, percentage: 5.3109 },\n  { id: '5', name: 'Tom Smith', type: 'employee', shares: 645289, percentage: 3.4271 },\n  { id: '6', name: 'John Doe', type: 'employee', shares: 430193, percentage: 2.2847 },\n  { id: '7', name: 'Jane Doe', type: 'employee', shares: 322644, percentage: 1.7135 },\n  { id: '8', name: 'Common shareholder 4', type: 'founder', shares: 14000, percentage: 0.0744 },\n  { id: '9', name: 'Common shareholder 5', type: 'founder', shares: 0, percentage: 0 },\n];\n\nconst SAMPLE_SAFES_NOTES: SAFENote[] = [\n  {\n    id: 'safe-1',\n    type: 'safe',\n    principal: 500000,\n    valuationCap: 8000000,\n    discount: 0.20,\n    holderName: 'Angel Investor 1',\n    investmentDate: '2024-01-15'\n  },\n  {\n    id: 'safe-2',\n    type: 'safe',\n    principal: 250000,\n    valuationCap: 10000000,\n    discount: 0.15,\n    holderName: 'Angel Investor 2',\n    investmentDate: '2024-02-01'\n  },\n  {\n    id: 'note-1',\n    type: 'note',\n    principal: 750000,\n    valuationCap: 12000000,\n    discount: 0.25,\n    holderName: 'Convertible Note Holder',\n    investmentDate: '2024-03-10'\n  }\n];\n\nexport default function CapTableCalculator() {\n  const [currentCapTable, setCurrentCapTable] = useState<Shareholder[]>(SAMPLE_CAP_TABLE);\n  const [safesNotes, setSafesNotes] = useState<SAFENote[]>(SAMPLE_SAFES_NOTES);\n  const [proFormaCapTable, setProFormaCapTable] = useState<Shareholder[]>([]);\n  const [showAddShareholder, setShowAddShareholder] = useState(false);\n  const [showAddSAFE, setShowAddSAFE] = useState(false);\n  const [consolidate, setConsolidate] = useState(true);\n  \n  // Next Round Parameters\n  const [preMoneyValuation, setPreMoneyValuation] = useState(15000000);\n  const [roundSize, setRoundSize] = useState(5000000);\n  const [optionPoolIncrease, setOptionPoolIncrease] = useState(500000);\n\n  // Calculate cap table metrics\n  const calculateMetrics = () => {\n    const totalShares = currentCapTable.reduce((sum, sh) => sum + sh.shares, 0);\n    const totalOptions = currentCapTable.find(sh => sh.type === 'option-pool')?.shares || 0;\n    const fullyDilutedShares = totalShares;\n    \n    // Calculate price per share for next round\n    const pricePerShare = (preMoneyValuation + optionPoolIncrease) / (fullyDilutedShares + optionPoolIncrease);\n    const newInvestorShares = roundSize / pricePerShare;\n    const postMoneyValuation = preMoneyValuation + roundSize;\n\n    return {\n      totalShares,\n      totalOptions,\n      fullyDilutedShares,\n      pricePerShare,\n      newInvestorShares,\n      postMoneyValuation\n    };\n  };\n\n  // Convert SAFEs and Notes\n  const convertSafesNotes = (pricePerShare: number) => {\n    return safesNotes.map(instrument => {\n      // Calculate cap-based price\n      const fullyDilutedShares = currentCapTable.reduce((sum, sh) => sum + sh.shares, 0);\n      const capBasedPrice = instrument.valuationCap ? \n        instrument.valuationCap / fullyDilutedShares : Infinity;\n      \n      // Calculate discount-based price\n      const discountBasedPrice = instrument.discount ? \n        pricePerShare * (1 - instrument.discount) : Infinity;\n      \n      // Take the lower of the two (better for investor)\n      const conversionPrice = Math.min(capBasedPrice, discountBasedPrice);\n      const shares = instrument.principal / conversionPrice;\n\n      return {\n        ...instrument,\n        conversionPrice,\n        shares\n      };\n    });\n  };\n\n  // Generate pro-forma cap table\n  const generateProForma = () => {\n    const metrics = calculateMetrics();\n    const convertedInstruments = convertSafesNotes(metrics.pricePerShare);\n    \n    // Start with current cap table\n    let proForma = [...currentCapTable];\n    \n    // Add new investor\n    proForma.push({\n      id: 'new-investor',\n      name: 'New Investor',\n      type: 'investor',\n      shares: metrics.newInvestorShares,\n      percentage: 0\n    });\n\n    // Add converted SAFEs/Notes\n    forEach(convertedInstruments, instrument => {\n      proForma.push({\n        id: instrument.id,\n        name: instrument.holderName,\n        type: instrument.type === 'safe' ? 'safe' : 'note',\n        shares: instrument.shares || 0,\n        percentage: 0,\n        isConverted: true\n      });\n    });\n\n    // Add option pool increase if any\n    if (optionPoolIncrease > 0) {\n      const optionPoolIndex = proForma.findIndex(sh => sh.type === 'option-pool');\n      if (optionPoolIndex >= 0 && proForma[optionPoolIndex]) {\n        proForma[optionPoolIndex].shares += optionPoolIncrease;\n      }\n    }\n\n    // Calculate new total shares\n    const newTotalShares = proForma.reduce((sum, sh) => sum + sh.shares, 0);\n\n    // Recalculate all percentages\n    proForma = proForma.map(shareholder => ({\n      ...shareholder,\n      percentage: (shareholder.shares / newTotalShares) * 100\n    }));\n\n    // Sort by percentage (descending)\n    proForma.sort((a, b) => b.percentage - a.percentage);\n\n    setProFormaCapTable(proForma);\n    setSafesNotes(convertedInstruments);\n  };\n\n  useEffect(() => {\n    generateProForma();\n  }, [preMoneyValuation, roundSize, optionPoolIncrease, currentCapTable, safesNotes]);\n\n  const metrics = calculateMetrics();\n  const totalSAFEsNotes = safesNotes.reduce((sum, inst) => sum + inst.principal, 0);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatShares = (shares: number) => {\n    return new Intl.NumberFormat('en-US').format(Math.round(shares));\n  };\n\n  const formatPercentage = (percentage: number) => {\n    return `${percentage.toFixed(4)}%`;\n  };\n\n  const getShareholderTypeColor = (type: string) => {\n    switch (type) {\n      case 'founder': return 'bg-blue-100 text-blue-800';\n      case 'employee': return 'bg-green-100 text-green-800';\n      case 'investor': return 'bg-purple-100 text-purple-800';\n      case 'safe': return 'bg-orange-100 text-orange-800';\n      case 'note': return 'bg-red-100 text-red-800';\n      case 'option-pool': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Cap Table Calculator</h1>\n          <p className=\"text-gray-600\">Model SAFE/Note conversions and next round dilution</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <Button>\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Save Scenario\n          </Button>\n        </div>\n      </div>\n\n      {/* Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Fully Diluted Shares</p>\n                <p className=\"text-lg font-bold\">{formatShares(metrics.fullyDilutedShares)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <DollarSign className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Price per Share</p>\n                <p className=\"text-lg font-bold\">{formatCurrency(metrics.pricePerShare)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"h-5 w-5 text-purple-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Post-Money Valuation</p>\n                <p className=\"text-lg font-bold\">{formatCurrency(metrics.postMoneyValuation)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Percent className=\"h-5 w-5 text-orange-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">SAFEs/Notes Total</p>\n                <p className=\"text-lg font-bold\">{formatCurrency(totalSAFEsNotes)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Next Round Parameters */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Calculator className=\"h-5 w-5\" />\n              <span>Next Round Parameters</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"pre-money\">Pre-Money Valuation</Label>\n              <Input\n                id=\"pre-money\"\n                type=\"number\"\n                value={preMoneyValuation}\n                onChange={(e) => setPreMoneyValuation(Number(e.target.value))}\n                className=\"border-yellow-300 bg-yellow-50\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"round-size\">Round Size</Label>\n              <Input\n                id=\"round-size\"\n                type=\"number\"\n                value={roundSize}\n                onChange={(e) => setRoundSize(Number(e.target.value))}\n                className=\"border-yellow-300 bg-yellow-50\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"option-pool\">Option Pool Increase</Label>\n              <Input\n                id=\"option-pool\"\n                type=\"number\"\n                value={optionPoolIncrease}\n                onChange={(e) => setOptionPoolIncrease(Number(e.target.value))}\n                className=\"border-yellow-300 bg-yellow-50\"\n              />\n            </div>\n\n            <Separator />\n\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">New Investor Shares:</span>\n                <span className=\"font-medium\">{formatShares(metrics.newInvestorShares)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Price per Share:</span>\n                <span className=\"font-medium\">{formatCurrency(metrics.pricePerShare)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Post-Money:</span>\n                <span className=\"font-medium\">{formatCurrency(metrics.postMoneyValuation)}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* SAFEs and Notes */}\n        <div className=\"lg:col-span-3\">\n          <SAFENoteEditor\n            safesNotes={safesNotes}\n            onSafesNotesChange={setSafesNotes}\n            pricePerShare={metrics.pricePerShare}\n          />\n        </div>\n      </div>\n\n      {/* Cap Table Tabs */}\n      <Tabs defaultValue=\"pro-forma\" className=\"w-full\">\n        <TabsList>\n          <TabsTrigger value=\"current\">Current Cap Table</TabsTrigger>\n          <TabsTrigger value=\"pro-forma\">Pro Forma Cap Table</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"current\" className=\"mt-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Current Cap Table</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Shareholder Name</TableHead>\n                    <TableHead className=\"text-right\">Shares</TableHead>\n                    <TableHead className=\"text-right\">Percentage</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {currentCapTable.map((shareholder) => (\n                    <TableRow key={shareholder.id}>\n                      <TableCell className=\"font-medium\">{shareholder.name}</TableCell>\n                      <TableCell className=\"text-right\">{formatShares(shareholder.shares)}</TableCell>\n                      <TableCell className=\"text-right\">{formatPercentage(shareholder.percentage)}</TableCell>\n                      <TableCell>\n                        <Badge className={getShareholderTypeColor(shareholder.type)}>\n                          {shareholder.type}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Button size=\"sm\" variant=\"ghost\">\n                          + Ownership Update\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"pro-forma\" className=\"mt-4\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle>Pro Forma Cap Table</CardTitle>\n                  <p className=\"text-sm text-gray-600\">Pro Forma Cap Table after conversions.</p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setConsolidate(!consolidate)}\n                  >\n                    Consolidate {consolidate ? 'Γ£ô' : ''}\n                  </Button>\n                  <Button size=\"sm\">\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Download\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Shareholder Name</TableHead>\n                    <TableHead className=\"text-right\">Fully Diluted Total</TableHead>\n                    <TableHead className=\"text-right\">Fully Diluted %</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {proFormaCapTable.map((shareholder) => (\n                    <TableRow key={shareholder.id}>\n                      <TableCell className=\"font-medium\">{shareholder.name}</TableCell>\n                      <TableCell className=\"text-right\">{formatShares(shareholder.shares)}</TableCell>\n                      <TableCell className=\"text-right\">{formatPercentage(shareholder.percentage)}</TableCell>\n                      <TableCell>\n                        <Button size=\"sm\" variant=\"ghost\">\n                          + Ownership Update\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  \n                  {/* Summary Rows */}\n                  <TableRow className=\"border-t-2 border-gray-300\">\n                    <TableCell className=\"font-bold\">Total Shares Excluding Options</TableCell>\n                    <TableCell className=\"text-right font-bold\">\n                      {formatShares(proFormaCapTable.filter(sh => sh.type !== 'option-pool').reduce((sum, sh) => sum + sh.shares, 0))}\n                    </TableCell>\n                    <TableCell className=\"text-right font-bold\">\n                      {formatPercentage(proFormaCapTable.filter(sh => sh.type !== 'option-pool').reduce((sum, sh) => sum + sh.percentage, 0))}\n                    </TableCell>\n                    <TableCell></TableCell>\n                  </TableRow>\n                  \n                  <TableRow>\n                    <TableCell>Unallocated Options</TableCell>\n                    <TableCell className=\"text-right\">\n                      {formatShares(proFormaCapTable.find(sh => sh.type === 'option-pool')?.shares || 0)}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      {formatPercentage(proFormaCapTable.find(sh => sh.type === 'option-pool')?.percentage || 0)}\n                    </TableCell>\n                    <TableCell></TableCell>\n                  </TableRow>\n                  \n                  <TableRow className=\"border-t border-gray-300\">\n                    <TableCell className=\"font-bold\">Total</TableCell>\n                    <TableCell className=\"text-right font-bold\">\n                      {formatShares(proFormaCapTable.reduce((sum, sh) => sum + sh.shares, 0))}\n                    </TableCell>\n                    <TableCell className=\"text-right font-bold\">100.0000%</TableCell>\n                    <TableCell></TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\cap-table\\safe-note-editor.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used.","line":7,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectContent' is defined but never used.","line":12,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectItem' is defined but never used.","line":12,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectTrigger' is defined but never used.","line":12,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":58},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectValue' is defined but never used.","line":12,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":71},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":21,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":52},{"ruleId":"no-unused-vars","severity":2,"message":"'Percent' is defined but never used.","line":21,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":61},{"ruleId":"no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used.","line":21,"column":63,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":74},{"ruleId":"no-unused-vars","severity":2,"message":"'safesNotes' is defined but never used.","line":41,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":46}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Plus, Edit, Trash2, Calculator, DollarSign, Percent, AlertCircle } from 'lucide-react';\n\ninterface SAFENote {\n  id: string;\n  type: 'safe' | 'note';\n  principal: number;\n  valuationCap?: number;\n  discount?: number;\n  interestRate?: number;\n  maturityDate?: string;\n  conversionPrice?: number;\n  shares?: number;\n  holderName: string;\n  investmentDate: string;\n  mostFavoredNation?: boolean;\n  proRataRights?: boolean;\n}\n\ninterface SAFENoteEditorProps {\n  safesNotes: SAFENote[];\n  onSafesNotesChange: (safesNotes: SAFENote[]) => void;\n  pricePerShare?: number;\n}\n\nexport default function SAFENoteEditor({ safesNotes, onSafesNotesChange, pricePerShare }: SAFENoteEditorProps) {\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [editingInstrument, setEditingInstrument] = useState<SAFENote | null>(null);\n  const defaultDate = new Date().toISOString().split('T')[0];\n  const [formData, setFormData] = useState<Partial<SAFENote>>({\n    type: 'safe',\n    principal: 0,\n    valuationCap: 0,\n    discount: 0.20,\n    holderName: '',\n    ...(defaultDate && { investmentDate: defaultDate }),\n    mostFavoredNation: true,\n    proRataRights: true,\n  });\n\n  const handleAdd = () => {\n    if (!formData.principal || !formData.holderName) return;\n\n    const newInstrument: SAFENote = {\n      id: `${formData.type}-${Date.now()}`,\n      type: formData.type as 'safe' | 'note',\n      principal: formData.principal,\n      valuationCap: formData.valuationCap,\n      discount: formData.discount,\n      interestRate: formData.interestRate,\n      maturityDate: formData.maturityDate,\n      holderName: formData.holderName!,\n      investmentDate: formData.investmentDate!,\n      mostFavoredNation: formData.mostFavoredNation,\n      proRataRights: formData.proRataRights,\n    };\n\n    onSafesNotesChange([...safesNotes, newInstrument]);\n    setShowAddDialog(false);\n    const resetDate = new Date().toISOString().split('T')[0];\n    setFormData({\n      type: 'safe',\n      principal: 0,\n      valuationCap: 0,\n      discount: 0.20,\n      holderName: '',\n      ...(resetDate && { investmentDate: resetDate }),\n      mostFavoredNation: true,\n      proRataRights: true,\n    });\n  };\n\n  const handleEdit = (instrument: SAFENote) => {\n    setEditingInstrument(instrument);\n    setFormData(instrument);\n    setShowAddDialog(true);\n  };\n\n  const handleUpdate = () => {\n    if (!editingInstrument || !formData.principal || !formData.holderName) return;\n\n    const updatedInstruments = safesNotes.map(inst => \n      inst.id === editingInstrument.id \n        ? { ...inst, ...formData } as SAFENote\n        : inst\n    );\n\n    onSafesNotesChange(updatedInstruments);\n    setShowAddDialog(false);\n    setEditingInstrument(null);\n    const resetDate = new Date().toISOString().split('T')[0];\n    setFormData({\n      type: 'safe',\n      principal: 0,\n      valuationCap: 0,\n      discount: 0.20,\n      holderName: '',\n      ...(resetDate && { investmentDate: resetDate }),\n      mostFavoredNation: true,\n      proRataRights: true,\n    });\n  };\n\n  const handleDelete = (id: string) => {\n    onSafesNotesChange(safesNotes.filter(inst => inst.id !== id));\n  };\n\n  const calculateConversion = (instrument: SAFENote, pricePerShare: number) => {\n    // Calculate cap-based price\n    const capBasedPrice = instrument.valuationCap ? \n      instrument.valuationCap / 10000000 : Infinity; // Assuming 10M fully diluted shares\n\n    // Calculate discount-based price  \n    const discountBasedPrice = instrument.discount ? \n      pricePerShare * (1 - instrument.discount) : Infinity;\n\n    // Take the lower of the two (better for investor)\n    const conversionPrice = Math.min(capBasedPrice, discountBasedPrice);\n    const shares = instrument.principal / conversionPrice;\n\n    return {\n      conversionPrice,\n      shares,\n      usedCap: conversionPrice === capBasedPrice,\n      usedDiscount: conversionPrice === discountBasedPrice\n    };\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatShares = (shares: number) => {\n    return new Intl.NumberFormat('en-US').format(Math.round(shares));\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">SAFEs & Convertible Notes</h3>\n          <p className=\"text-sm text-gray-600\">\n            Manage securities that will convert in the next funding round\n          </p>\n        </div>\n        <Button onClick={() => setShowAddDialog(true)}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add SAFE/Note\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {safesNotes.map((instrument) => {\n          const conversion = pricePerShare ? calculateConversion(instrument, pricePerShare) : null;\n          \n          return (\n            <Card key={instrument.id} className=\"relative\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className={instrument.type === 'safe' ? 'bg-orange-100 text-orange-800' : 'bg-red-100 text-red-800'}>\n                      {instrument.type.toUpperCase()}\n                    </Badge>\n                    <span className=\"font-medium\">{instrument.holderName}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Button size=\"sm\" variant=\"ghost\" onClick={() => handleEdit(instrument)}>\n                      <Edit className=\"h-3 w-3\" />\n                    </Button>\n                    <Button size=\"sm\" variant=\"ghost\" onClick={() => handleDelete(instrument.id)}>\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                  <div>\n                    <span className=\"text-gray-500\">Principal:</span>\n                    <div className=\"font-medium\">{formatCurrency(instrument.principal)}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">Investment Date:</span>\n                    <div className=\"font-medium\">{new Date(instrument.investmentDate).toLocaleDateString()}</div>\n                  </div>\n                </div>\n\n                {instrument.valuationCap && (\n                  <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                    <div>\n                      <span className=\"text-gray-500\">Valuation Cap:</span>\n                      <div className=\"font-medium\">{formatCurrency(instrument.valuationCap)}</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Discount:</span>\n                      <div className=\"font-medium\">{instrument.discount ? `${(instrument.discount * 100).toFixed(0)}%` : 'None'}</div>\n                    </div>\n                  </div>\n                )}\n\n                {instrument.interestRate && (\n                  <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                    <div>\n                      <span className=\"text-gray-500\">Interest Rate:</span>\n                      <div className=\"font-medium\">{(instrument.interestRate * 100).toFixed(1)}%</div>\n                    </div>\n                    {instrument.maturityDate && (\n                      <div>\n                        <span className=\"text-gray-500\">Maturity:</span>\n                        <div className=\"font-medium\">{new Date(instrument.maturityDate).toLocaleDateString()}</div>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {conversion && (\n                  <div className=\"border-t pt-3 space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Calculator className=\"h-4 w-4 text-blue-600\" />\n                      <span className=\"text-sm font-medium text-blue-600\">Conversion Preview</span>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                      <div>\n                        <span className=\"text-gray-500\">Conversion Price:</span>\n                        <div className=\"font-medium\">{formatCurrency(conversion.conversionPrice)}</div>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-500\">Shares:</span>\n                        <div className=\"font-medium\">{formatShares(conversion.shares)}</div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2 text-xs\">\n                      {conversion.usedCap && (\n                        <Badge variant=\"outline\" className=\"text-green-700 border-green-300\">\n                          Uses Cap\n                        </Badge>\n                      )}\n                      {conversion.usedDiscount && (\n                        <Badge variant=\"outline\" className=\"text-blue-700 border-blue-300\">\n                          Uses Discount\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n                  {instrument.mostFavoredNation && <span>MFN</span>}\n                  {instrument.proRataRights && <span>Pro Rata</span>}\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Add/Edit Dialog */}\n      <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n        <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingInstrument ? 'Edit' : 'Add'} {formData.type?.toUpperCase()}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-6\">\n            <Tabs value={formData.type ?? 'safe'} onValueChange={(value) => setFormData({ ...formData, type: value as 'safe' | 'note' })}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"safe\">SAFE</TabsTrigger>\n                <TabsTrigger value=\"note\">Convertible Note</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"safe\" className=\"mt-4 space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"holder-name\">Investor Name</Label>\n                    <Input\n                      id=\"holder-name\"\n                      value={formData.holderName}\n                      onChange={(e) => setFormData({ ...formData, holderName: e.target.value })}\n                      placeholder=\"Angel Investor\"\n                      className=\"border-yellow-300 bg-yellow-50\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"principal\">Investment Amount</Label>\n                    <Input\n                      id=\"principal\"\n                      type=\"number\"\n                      value={formData.principal}\n                      onChange={(e) => setFormData({ ...formData, principal: Number(e.target.value) })}\n                      placeholder=\"500000\"\n                      className=\"border-yellow-300 bg-yellow-50\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"valuation-cap\">Valuation Cap</Label>\n                    <Input\n                      id=\"valuation-cap\"\n                      type=\"number\"\n                      value={formData.valuationCap}\n                      onChange={(e) => setFormData({ ...formData, valuationCap: Number(e.target.value) })}\n                      placeholder=\"8000000\"\n                      className=\"border-yellow-300 bg-yellow-50\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"discount\">Discount (%)</Label>\n                    <Input\n                      id=\"discount\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      max=\"1\"\n                      value={formData.discount ? formData.discount * 100 : ''}\n                      onChange={(e) => setFormData({ ...formData, discount: Number(e.target.value) / 100 })}\n                      placeholder=\"20\"\n                      className=\"border-yellow-300 bg-yellow-50\"\n                    />\n                  </div>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"note\" className=\"mt-4 space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"note-holder-name\">Investor Name</Label>\n                    <Input\n                      id=\"note-holder-name\"\n                      value={formData.holderName}\n                      onChange={(e) => setFormData({ ...formData, holderName: e.target.value })}\n                      placeholder=\"Note Holder\"\n                      className=\"border-yellow-300 bg-yellow-50\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"note-principal\">Principal Amount</Label>\n                    <Input\n                      id=\"note-principal\"\n                      type=\"number\"\n                      value={formData.principal}\n                      onChange={(e) => setFormData({ ...formData, principal: Number(e.target.value) })}\n                      placeholder=\"750000\"\n                      className=\"border-yellow-300 bg-yellow-50\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"interest-rate\">Interest Rate (%)</Label>\n                    <Input\n                      id=\"interest-rate\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.interestRate ? formData.interestRate * 100 : ''}\n                      onChange={(e) => setFormData({ ...formData, interestRate: Number(e.target.value) / 100 })}\n                      placeholder=\"8\"\n                      className=\"border-yellow-300 bg-yellow-50\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"note-discount\">Discount (%)</Label>\n                    <Input\n                      id=\"note-discount\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.discount ? formData.discount * 100 : ''}\n                      onChange={(e) => setFormData({ ...formData, discount: Number(e.target.value) / 100 })}\n                      placeholder=\"25\"\n                      className=\"border-yellow-300 bg-yellow-50\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"maturity-date\">Maturity Date</Label>\n                    <Input\n                      id=\"maturity-date\"\n                      type=\"date\"\n                      value={formData.maturityDate}\n                      onChange={(e) => setFormData({ ...formData, maturityDate: e.target.value })}\n                      className=\"border-yellow-300 bg-yellow-50\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"note-cap\">Valuation Cap</Label>\n                    <Input\n                      id=\"note-cap\"\n                      type=\"number\"\n                      value={formData.valuationCap}\n                      onChange={(e) => setFormData({ ...formData, valuationCap: Number(e.target.value) })}\n                      placeholder=\"12000000\"\n                      className=\"border-yellow-300 bg-yellow-50\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"investment-date\">Investment Date</Label>\n                    <Input\n                      id=\"investment-date\"\n                      type=\"date\"\n                      value={formData.investmentDate}\n                      onChange={(e) => setFormData({ ...formData, investmentDate: e.target.value })}\n                      className=\"border-yellow-300 bg-yellow-50\"\n                    />\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"flex justify-end space-x-2 pt-4 border-t\">\n              <Button variant=\"outline\" onClick={() => setShowAddDialog(false)}>\n                Cancel\n              </Button>\n              <Button onClick={editingInstrument ? handleUpdate : handleAdd}>\n                {editingInstrument ? 'Update' : 'Add'} {formData.type?.toUpperCase()}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\cap-table\\scenario-manager.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":19,"column":74,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":84},{"ruleId":"no-unused-vars","severity":2,"message":"'scenarios' is defined but never used.","line":39,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":52},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedScenario' is assigned a value but never used.","line":45,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'setSelectedScenario' is assigned a value but never used.","line":45,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":47}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Plus, Edit, Trash2, Copy, Download, Calendar, User, Calculator, TrendingUp } from 'lucide-react';\n\ninterface CapTableScenario {\n  id: string;\n  name: string;\n  investmentCompany: string;\n  investmentId: string;\n  status: 'draft' | 'active' | 'archived';\n  lastModified: string;\n  createdBy: string;\n  preMoneyValuation: number;\n  roundSize: number;\n  totalSAFEs: number;\n  totalNotes: number;\n  dilution: number;\n  description?: string;\n}\n\ninterface ScenarioManagerProps {\n  scenarios: CapTableScenario[];\n  onScenariosChange: (scenarios: CapTableScenario[]) => void;\n  investmentId?: string;\n}\n\nexport default function ScenarioManager({ scenarios, onScenariosChange, investmentId }: ScenarioManagerProps) {\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [selectedScenario, setSelectedScenario] = useState<CapTableScenario | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n\n  const filteredScenarios = scenarios.filter(scenario => {\n    const matchesSearch = scenario.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         scenario.investmentCompany.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = filterStatus === 'all' || scenario.status === filterStatus;\n    const matchesInvestment = !investmentId || scenario.investmentId === investmentId;\n    return matchesSearch && matchesStatus && matchesInvestment;\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'draft': return 'bg-yellow-100 text-yellow-800';\n      case 'archived': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const handleCreateScenario = (data: Partial<CapTableScenario>) => {\n    const newScenario: CapTableScenario = {\n      id: `scenario-${Date.now()}`,\n      name: data.name || 'New Scenario',\n      investmentCompany: data.investmentCompany || 'Unknown',\n      investmentId: data.investmentId || investmentId || '',\n      status: 'draft',\n      lastModified: new Date().toISOString(),\n      createdBy: 'Current User',\n      preMoneyValuation: data.preMoneyValuation || 0,\n      roundSize: data.roundSize || 0,\n      totalSAFEs: data.totalSAFEs || 0,\n      totalNotes: data.totalNotes || 0,\n      dilution: data.dilution || 0,\n      ...(data.description !== undefined && { description: data.description })\n    };\n\n    onScenariosChange([...scenarios, newScenario]);\n    setShowCreateDialog(false);\n  };\n\n  const handleDuplicateScenario = (scenario: CapTableScenario) => {\n    const duplicated: CapTableScenario = {\n      ...scenario,\n      id: `scenario-${Date.now()}`,\n      name: `${scenario.name} (Copy)`,\n      status: 'draft',\n      lastModified: new Date().toISOString(),\n      createdBy: 'Current User'\n    };\n\n    onScenariosChange([...scenarios, duplicated]);\n  };\n\n  const handleDeleteScenario = (scenarioId: string) => {\n    onScenariosChange(scenarios.filter(s => s.id !== scenarioId));\n  };\n\n  const handleStatusChange = (scenarioId: string, newStatus: CapTableScenario['status']) => {\n    onScenariosChange(scenarios.map(s => \n      s.id === scenarioId \n        ? { ...s, status: newStatus, lastModified: new Date().toISOString() }\n        : s\n    ));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-xl font-semibold\">Cap Table Scenarios</h2>\n          <p className=\"text-gray-600\">Manage and compare different cap table modeling scenarios</p>\n        </div>\n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Scenario\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create New Cap Table Scenario</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Scenario Name</label>\n                <Input placeholder=\"e.g., Series A Modeling\" />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Investment Company</label>\n                <Select>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose a portfolio company\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"airchair\">AirChair</SelectItem>\n                    <SelectItem value=\"dataflow\">DataFlow Systems</SelectItem>\n                    <SelectItem value=\"techflow\">TechFlow</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Pre-Money Valuation</label>\n                  <Input type=\"number\" placeholder=\"15000000\" />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Round Size</label>\n                  <Input type=\"number\" placeholder=\"5000000\" />\n                </div>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium\">Description (Optional)</label>\n                <Input placeholder=\"Brief description of the scenario\" />\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setShowCreateDialog(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={() => handleCreateScenario({\n                  name: 'New Scenario',\n                  investmentCompany: 'Selected Company',\n                  preMoneyValuation: 15000000,\n                  roundSize: 5000000\n                })}>\n                  Create Scenario\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"flex items-center space-x-4\">\n        <Input\n          placeholder=\"Search scenarios...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"max-w-sm\"\n        />\n        <Select value={filterStatus} onValueChange={setFilterStatus}>\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"Filter by status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Statuses</SelectItem>\n            <SelectItem value=\"active\">Active</SelectItem>\n            <SelectItem value=\"draft\">Draft</SelectItem>\n            <SelectItem value=\"archived\">Archived</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Scenarios Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredScenarios.map((scenario) => (\n          <Card key={scenario.id} className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-start justify-between\">\n                <div>\n                  <CardTitle className=\"text-lg\">{scenario.name}</CardTitle>\n                  <p className=\"text-sm text-gray-600\">{scenario.investmentCompany}</p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Badge className={getStatusColor(scenario.status)}>\n                    {scenario.status}\n                  </Badge>\n                  <Select\n                    value={scenario.status}\n                    onValueChange={(value) => handleStatusChange(scenario.id, value as CapTableScenario['status'])}\n                  >\n                    <SelectTrigger className=\"w-24 h-6 text-xs\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"draft\">Draft</SelectItem>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"archived\">Archived</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <p className=\"text-gray-500\">Pre-Money</p>\n                  <p className=\"font-medium\">{formatCurrency(scenario.preMoneyValuation)}</p>\n                </div>\n                <div>\n                  <p className=\"text-gray-500\">Round Size</p>\n                  <p className=\"font-medium\">{formatCurrency(scenario.roundSize)}</p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <p className=\"text-gray-500\">SAFEs/Notes</p>\n                  <p className=\"font-medium\">{formatCurrency(scenario.totalSAFEs + scenario.totalNotes)}</p>\n                </div>\n                <div>\n                  <p className=\"text-gray-500\">Dilution</p>\n                  <p className=\"font-medium\">{scenario.dilution.toFixed(1)}%</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n                <User className=\"h-3 w-3\" />\n                <span>{scenario.createdBy}</span>\n                <Calendar className=\"h-3 w-3 ml-2\" />\n                <span>{new Date(scenario.lastModified).toLocaleDateString()}</span>\n              </div>\n\n              {scenario.description && (\n                <p className=\"text-sm text-gray-600 border-t pt-3\">{scenario.description}</p>\n              )}\n\n              <div className=\"flex items-center justify-between pt-3 border-t\">\n                <div className=\"flex items-center space-x-1\">\n                  <Button size=\"sm\" variant=\"ghost\" onClick={() => handleDuplicateScenario(scenario)}>\n                    <Copy className=\"h-3 w-3\" />\n                  </Button>\n                  <Button size=\"sm\" variant=\"ghost\">\n                    <Edit className=\"h-3 w-3\" />\n                  </Button>\n                  <Button size=\"sm\" variant=\"ghost\" onClick={() => handleDeleteScenario(scenario.id)}>\n                    <Trash2 className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <Button size=\"sm\" variant=\"outline\">\n                    <Calculator className=\"h-3 w-3 mr-1\" />\n                    Open\n                  </Button>\n                  <Button size=\"sm\" variant=\"ghost\">\n                    <Download className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredScenarios.length === 0 && (\n        <Card className=\"text-center py-16\">\n          <CardContent>\n            <Calculator className=\"mx-auto h-16 w-16 text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No Scenarios Found</h3>\n            <p className=\"text-gray-600 mb-6\">\n              {searchTerm || filterStatus !== 'all' \n                ? 'No scenarios match your current filters.'\n                : 'Create your first cap table scenario to get started.'\n              }\n            </p>\n            <Button onClick={() => setShowCreateDialog(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Scenario\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\cash-management\\cash-management-dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":12,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":73},{"ruleId":"no-unused-vars","severity":2,"message":"'Separator' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Separator } from '@/components/ui/separator';\nimport { Calendar, Plus, Download, Filter, Search, Trash2, Edit3, DollarSign, TrendingUp, TrendingDown } from 'lucide-react';\n\ninterface CashCategory {\n  category: string;\n  previousBalance: number;\n  weightedRequirements: number;\n  currentBalance: number;\n}\n\ninterface CashTransaction {\n  id: string;\n  date: string;\n  category: string;\n  description: string;\n  amount: number;\n  type: 'inflow' | 'outflow';\n  status: 'completed' | 'pending' | 'scheduled';\n}\n\nconst CASH_CATEGORIES: CashCategory[] = [\n  {\n    category: 'Fund Capital Reserves',\n    previousBalance: 37795000,\n    weightedRequirements: 42450000,\n    currentBalance: 45710000\n  },\n  {\n    category: 'Management Fees',\n    previousBalance: 2450000,\n    weightedRequirements: 2680000,\n    currentBalance: 2890000\n  },\n  {\n    category: 'Follow-On Commitments',\n    previousBalance: 15840000,\n    weightedRequirements: 18200000,\n    currentBalance: 19560000\n  },\n  {\n    category: 'Operating Expenses',\n    previousBalance: 1250000,\n    weightedRequirements: 1350000,\n    currentBalance: 1180000\n  },\n  {\n    category: 'Distributions',\n    previousBalance: 850000,\n    weightedRequirements: 920000,\n    currentBalance: 1250000\n  }\n];\n\nconst SAMPLE_TRANSACTIONS: CashTransaction[] = [\n  {\n    id: '1',\n    date: '2024-01-15',\n    category: 'Fund Capital Reserves',\n    description: 'LP Capital Call - Q1 2024',\n    amount: 5000000,\n    type: 'inflow',\n    status: 'completed'\n  },\n  {\n    id: '2',\n    date: '2024-01-12',\n    category: 'Follow-On Commitments',\n    description: 'TechCorp Series B Follow-On',\n    amount: 2500000,\n    type: 'outflow',\n    status: 'completed'\n  },\n  {\n    id: '3',\n    date: '2024-01-10',\n    category: 'Management Fees',\n    description: 'Q1 Management Fee Payment',\n    amount: 450000,\n    type: 'outflow',\n    status: 'completed'\n  },\n  {\n    id: '4',\n    date: '2024-01-20',\n    category: 'Operating Expenses',\n    description: 'Legal and Administrative Costs',\n    amount: 75000,\n    type: 'outflow',\n    status: 'pending'\n  },\n  {\n    id: '5',\n    date: '2024-01-25',\n    category: 'Distributions',\n    description: 'LP Distribution - DataFlow Exit',\n    amount: 1200000,\n    type: 'outflow',\n    status: 'scheduled'\n  }\n];\n\nconst formatCurrency = (amount: number) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n};\n\nconst formatCurrencyShort = (amount: number) => {\n  if (amount >= 1000000) {\n    return `$${(amount / 1000000).toFixed(1)}M`;\n  }\n  return formatCurrency(amount);\n};\n\nexport default function CashManagementDashboard() {\n  const [selectedPeriod, setSelectedPeriod] = useState('current');\n  const [transactions, setTransactions] = useState<CashTransaction[]>(SAMPLE_TRANSACTIONS);\n  const [filterCategory, setFilterCategory] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showAddTransaction, setShowAddTransaction] = useState(false);\n\n  const totalCurrentBalance = CASH_CATEGORIES.reduce((sum, cat) => sum + cat.currentBalance, 0);\n  const totalWeightedRequirements = CASH_CATEGORIES.reduce((sum, cat) => sum + cat.weightedRequirements, 0);\n  const totalPreviousBalance = CASH_CATEGORIES.reduce((sum, cat) => sum + cat.previousBalance, 0);\n  \n  const balanceChange = totalCurrentBalance - totalPreviousBalance;\n  const balanceChangePercent = ((balanceChange / totalPreviousBalance) * 100);\n\n  const filteredTransactions = transactions.filter(transaction => {\n    const matchesCategory = filterCategory === 'all' || transaction.category === filterCategory;\n    const matchesSearch = transaction.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         transaction.category.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesCategory && matchesSearch;\n  });\n\n  const AddTransactionDialog = () => {\n    const [newTransaction, setNewTransaction] = useState({\n      category: '',\n      description: '',\n      amount: '',\n      type: 'outflow' as 'inflow' | 'outflow',\n      date: new Date().toISOString().split('T')[0]\n    });\n\n    const handleSubmit = () => {\n      const transaction: CashTransaction = {\n        id: Math.random().toString(36).substr(2, 9),\n        ...newTransaction,\n        amount: parseFloat(newTransaction.amount),\n        status: 'pending'\n      };\n      setTransactions([transaction, ...transactions]);\n      setShowAddTransaction(false);\n      setNewTransaction({\n        category: '',\n        description: '',\n        amount: '',\n        type: 'outflow',\n        date: new Date().toISOString().split('T')[0]\n      });\n    };\n\n    return (\n      <Dialog open={showAddTransaction} onOpenChange={setShowAddTransaction}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Add Cash Transaction</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"type\">Transaction Type</Label>\n                <Select value={newTransaction.type} onValueChange={(value: 'inflow' | 'outflow') => \n                  setNewTransaction({...newTransaction, type: value})}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"inflow\">Cash Inflow</SelectItem>\n                    <SelectItem value=\"outflow\">Cash Outflow</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"date\">Date</Label>\n                <Input\n                  type=\"date\"\n                  value={newTransaction.date}\n                  onChange={(e) => setNewTransaction({...newTransaction, date: e.target.value})}\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"category\">Category</Label>\n              <Select value={newTransaction.category} onValueChange={(value) => \n                setNewTransaction({...newTransaction, category: value})}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {CASH_CATEGORIES.map((cat) => (\n                    <SelectItem key={cat.category} value={cat.category}>\n                      {cat.category}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Input\n                placeholder=\"Transaction description\"\n                value={newTransaction.description}\n                onChange={(e) => setNewTransaction({...newTransaction, description: e.target.value})}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"amount\">Amount ($)</Label>\n              <Input\n                type=\"number\"\n                placeholder=\"0.00\"\n                value={newTransaction.amount}\n                onChange={(e) => setNewTransaction({...newTransaction, amount: e.target.value})}\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={() => setShowAddTransaction(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleSubmit} disabled={!newTransaction.category || !newTransaction.description || !newTransaction.amount}>\n                Add Transaction\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Cash Management</h1>\n          <p className=\"text-gray-600 mt-1\">Monitor fund cash flows, track balances, and manage liquidity requirements</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n            <SelectTrigger className=\"w-[140px]\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"current\">Current</SelectItem>\n              <SelectItem value=\"ytd\">Year to Date</SelectItem>\n              <SelectItem value=\"q1\">Q1 2024</SelectItem>\n              <SelectItem value=\"q4\">Q4 2023</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <Button onClick={() => setShowAddTransaction(true)}>\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Transaction\n          </Button>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Cash Balance</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{formatCurrencyShort(totalCurrentBalance)}</p>\n                <div className=\"flex items-center mt-1\">\n                  {balanceChange >= 0 ? (\n                    <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                  ) : (\n                    <TrendingDown className=\"h-4 w-4 text-red-500 mr-1\" />\n                  )}\n                  <span className={`text-sm ${balanceChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                    {balanceChangePercent >= 0 ? '+' : ''}{balanceChangePercent.toFixed(1)}% from last period\n                  </span>\n                </div>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center\">\n                <DollarSign className=\"h-6 w-6 text-blue-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Weighted Requirements</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{formatCurrencyShort(totalWeightedRequirements)}</p>\n                <p className=\"text-sm text-gray-500 mt-1\">Target liquidity needs</p>\n              </div>\n              <div className=\"w-12 h-12 bg-orange-50 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"h-6 w-6 text-orange-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Excess/(Deficit)</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {formatCurrencyShort(totalCurrentBalance - totalWeightedRequirements)}\n                </p>\n                <p className=\"text-sm text-gray-500 mt-1\">vs. requirements</p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"h-6 w-6 text-green-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Active Categories</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{CASH_CATEGORIES.length}</p>\n                <p className=\"text-sm text-gray-500 mt-1\">Cash categories</p>\n              </div>\n              <div className=\"w-12 h-12 bg-purple-50 rounded-lg flex items-center justify-center\">\n                <Calendar className=\"h-6 w-6 text-purple-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"overview\">Cash Overview</TabsTrigger>\n          <TabsTrigger value=\"transactions\">Transaction History</TabsTrigger>\n          <TabsTrigger value=\"projections\">Cash Projections</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Cash Categories Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Cash Categories Analysis</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b\">\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Category</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">Previous Balance</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">Weighted Requirements</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">Current Balance</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">Variance</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {CASH_CATEGORIES.map((category, index) => {\n                      const variance = category.currentBalance - category.weightedRequirements;\n                      return (\n                        <tr key={index} className=\"border-b hover:bg-gray-50\">\n                          <td className=\"py-3 px-4 font-medium\">{category.category}</td>\n                          <td className=\"py-3 px-4 text-right text-gray-600\">\n                            {formatCurrency(category.previousBalance)}\n                          </td>\n                          <td className=\"py-3 px-4 text-right text-gray-600\">\n                            {formatCurrency(category.weightedRequirements)}\n                          </td>\n                          <td className=\"py-3 px-4 text-right font-medium\">\n                            {formatCurrency(category.currentBalance)}\n                          </td>\n                          <td className=\"py-3 px-4 text-right\">\n                            <span className={`${variance >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                              {variance >= 0 ? '+' : ''}{formatCurrency(variance)}\n                            </span>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                  <tfoot>\n                    <tr className=\"border-t-2 font-semibold\">\n                      <td className=\"py-3 px-4\">Total</td>\n                      <td className=\"py-3 px-4 text-right\">{formatCurrency(totalPreviousBalance)}</td>\n                      <td className=\"py-3 px-4 text-right\">{formatCurrency(totalWeightedRequirements)}</td>\n                      <td className=\"py-3 px-4 text-right\">{formatCurrency(totalCurrentBalance)}</td>\n                      <td className=\"py-3 px-4 text-right\">\n                        <span className={`${(totalCurrentBalance - totalWeightedRequirements) >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          {(totalCurrentBalance - totalWeightedRequirements) >= 0 ? '+' : ''}\n                          {formatCurrency(totalCurrentBalance - totalWeightedRequirements)}\n                        </span>\n                      </td>\n                    </tr>\n                  </tfoot>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"transactions\" className=\"space-y-6\">\n          {/* Transaction Filters */}\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Search className=\"h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search transactions...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"w-64\"\n                  />\n                </div>\n                <Select value={filterCategory} onValueChange={setFilterCategory}>\n                  <SelectTrigger className=\"w-[200px]\">\n                    <Filter className=\"h-4 w-4 mr-2\" />\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {CASH_CATEGORIES.map((cat) => (\n                      <SelectItem key={cat.category} value={cat.category}>\n                        {cat.category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Transaction List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Transactions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {filteredTransactions.map((transaction) => (\n                  <div key={transaction.id} className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-3 h-3 rounded-full ${\n                        transaction.type === 'inflow' ? 'bg-green-500' : 'bg-red-500'\n                      }`}></div>\n                      <div>\n                        <p className=\"font-medium\">{transaction.description}</p>\n                        <p className=\"text-sm text-gray-600\">{transaction.category} ΓÇó {transaction.date}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge \n                        variant={transaction.status === 'completed' ? 'default' : \n                                transaction.status === 'pending' ? 'secondary' : 'outline'}\n                      >\n                        {transaction.status}\n                      </Badge>\n                      <span className={`font-medium ${\n                        transaction.type === 'inflow' ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {transaction.type === 'inflow' ? '+' : '-'}{formatCurrency(transaction.amount)}\n                      </span>\n                      <div className=\"flex items-center space-x-1\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Edit3 className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"projections\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Cash Flow Projections</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-500\">Cash flow projection modeling and scenario analysis coming soon...</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <AddTransactionDialog />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\EnhancedDashboardChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\chart-container.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\chart-gallery.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\cohort-analysis-chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\enhanced-dashboard-charts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\enhanced-performance-chart.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { LineChart } from 'recharts/es6/chart/LineChart';\nimport { Line } from 'recharts/es6/cartesian/Line';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { Legend } from 'recharts/es6/component/Legend';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { Area } from 'recharts/es6/cartesian/Area';\nimport { AreaChart } from 'recharts/es6/chart/AreaChart';\nimport ChartContainer from './chart-container';\n\ninterface PerformanceData {\n  date: string;\n  irr: number;\n  multiple: number;\n  dpi: number;\n  tvpi: number;\n}\n\ninterface EnhancedPerformanceChartProps {\n  data: PerformanceData[];\n  title?: string;\n  height?: number;\n}\n\nconst formatTooltipValue = (value: any, name: string) => {\n  if (typeof value !== 'number') return [value, name];\n  \n  switch (name) {\n    case 'IRR':\n      return [`${(value * 100).toFixed(1)}%`, 'Internal Rate of Return'];\n    case 'Multiple':\n      return [`${value.toFixed(2)}x`, 'Cash-on-Cash Multiple'];\n    case 'DPI':\n      return [`${value.toFixed(2)}x`, 'Distributions to Paid-In'];\n    case 'TVPI':\n      return [`${value.toFixed(2)}x`, 'Total Value to Paid-In'];\n    default:\n      return [value.toFixed(2), name];\n  }\n};\n\nexport default function EnhancedPerformanceChart({ \n  data, \n  title = \"Fund Performance Metrics\", \n  height = 400 \n}: EnhancedPerformanceChartProps) {\n  if (!data || data.length === 0) {\n    return (\n      <ChartContainer \n        title={title} \n        description=\"Track IRR, multiple, DPI, and TVPI performance over time\"\n        height={height}\n      >\n        <div className=\"flex items-center justify-center h-full text-gray-500\">\n          No performance data available\n        </div>\n      </ChartContainer>\n    );\n  }\n\n  return (\n    <ChartContainer \n      title={title} \n      description=\"Track IRR, multiple, DPI, and TVPI performance over time\"\n      height={height}\n    >\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <AreaChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n          <XAxis \n            dataKey=\"date\" \n            axisLine={false}\n            tickLine={false}\n            tick={{ fontSize: 12, fill: '#666' }}\n          />\n          <YAxis \n            axisLine={false}\n            tickLine={false}\n            tick={{ fontSize: 12, fill: '#666' }}\n          />\n          <Tooltip \n            formatter={formatTooltipValue}\n            labelStyle={{ color: '#333', fontWeight: 'bold' }}\n            contentStyle={{ \n              backgroundColor: '#fff', \n              border: '1px solid #e0e0e0', \n              borderRadius: '8px',\n              boxShadow: '0 4px 12px rgba(0,0,0,0.1)'\n            }}\n          />\n          <Legend \n            wrapperStyle={{ paddingTop: '20px' }}\n            iconType=\"line\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"irr\"\n            stroke=\"#3b82f6\"\n            fill=\"#3b82f6\"\n            fillOpacity={0.1}\n            strokeWidth={2}\n            name=\"IRR\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"multiple\"\n            stroke=\"#10b981\"\n            fill=\"#10b981\"\n            fillOpacity={0.1}\n            strokeWidth={2}\n            name=\"Multiple\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"dpi\"\n            stroke=\"#f59e0b\"\n            strokeWidth={2}\n            name=\"DPI\"\n            dot={{ r: 4, fill: '#f59e0b' }}\n            activeDot={{ r: 6, fill: '#f59e0b' }}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"tvpi\"\n            stroke=\"#ef4444\"\n            strokeWidth={2}\n            name=\"TVPI\"\n            dot={{ r: 4, fill: '#ef4444' }}\n            activeDot={{ r: 6, fill: '#ef4444' }}\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </ChartContainer>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\fund-expense-charts.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Legend' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":18,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":15}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { AreaChart } from 'recharts/es6/chart/AreaChart';\nimport { Area } from 'recharts/es6/cartesian/Area';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { Legend } from 'recharts/es6/component/Legend';\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Download,\n  Info,\n  DollarSign,\n  Percent,\n  TrendingUp\n} from \"lucide-react\";\n\ninterface ExpenseData {\n  date: string;\n  legal: number;\n  administration: number;\n  tax: number;\n  audit: number;\n  software: number;\n  setup: number;\n  other: number;\n  total: number;\n}\n\ninterface ExpenseRatioData {\n  date: string;\n  legalRatio: number;\n  administrationRatio: number;\n  taxRatio: number;\n  auditRatio: number;\n  softwareRatio: number;\n  setupRatio: number;\n  otherRatio: number;\n  totalRatio: number;\n}\n\ninterface FundExpenseChartsProps {\n  className?: string;\n}\n\nexport default function FundExpenseCharts({ className }: FundExpenseChartsProps) {\n  const [activeTab, setActiveTab] = useState('cumulative');\n  const [viewType, setViewType] = useState<'expenses' | 'ratios'>('expenses');\n\n  // Generate sample expense data over time (monthly progression)\n  const generateExpenseData = (): ExpenseData[] => {\n    const data: ExpenseData[] = [];\n    const startDate = new Date(2021, 0, 1); // January 2021\n    const categories = {\n      legal: { monthly: 6667, setup: 0 }, // $400k over 60 months\n      administration: { monthly: 12500, setup: 0 }, // $1.5M over 120 months\n      tax: { monthly: 1333, setup: 0 }, // $160k over 120 months\n      audit: { monthly: 5000, setup: 0 }, // $600k over 120 months\n      software: { monthly: 5000, setup: 0 }, // $300k over 60 months\n      setup: { monthly: 0, setup: 500000 }, // $500k upfront\n      other: { monthly: 10000, setup: 0 } // $1.2M over 120 months\n    };\n\n    let cumulativeTotals = {\n      legal: 0,\n      administration: 0,\n      tax: 0,\n      audit: 0,\n      software: 0,\n      setup: 500000, // Setup paid upfront\n      other: 0\n    };\n\n    for (let month = 0; month < 120; month++) {\n      const currentDate = new Date(startDate);\n      currentDate.setMonth(startDate.getMonth() + month);\n      \n      // Add monthly expenses\n      if (month < 60) { // Legal and Software only for 60 months\n        cumulativeTotals.legal += categories.legal.monthly;\n        cumulativeTotals.software += categories.software.monthly;\n      }\n      \n      cumulativeTotals.administration += categories.administration.monthly;\n      cumulativeTotals.tax += categories.tax.monthly;\n      cumulativeTotals.audit += categories.audit.monthly;\n      cumulativeTotals.other += categories.other.monthly;\n\n      const total = Object.values(cumulativeTotals).reduce((sum, val) => sum + val, 0);\n\n      data.push({\n        date: currentDate.toISOString().slice(0, 7), // YYYY-MM format\n        legal: cumulativeTotals.legal,\n        administration: cumulativeTotals.administration,\n        tax: cumulativeTotals.tax,\n        audit: cumulativeTotals.audit,\n        software: cumulativeTotals.software,\n        setup: cumulativeTotals.setup,\n        other: cumulativeTotals.other,\n        total: total\n      });\n    }\n\n    return data;\n  };\n\n  const expenseData = generateExpenseData();\n  const fundSize = 200000000; // $200M fund\n\n  // Convert to expense ratios\n  const expenseRatioData: ExpenseRatioData[] = expenseData.map(item => ({\n    date: item.date,\n    legalRatio: (item.legal / fundSize) * 100,\n    administrationRatio: (item.administration / fundSize) * 100,\n    taxRatio: (item.tax / fundSize) * 100,\n    auditRatio: (item.audit / fundSize) * 100,\n    softwareRatio: (item.software / fundSize) * 100,\n    setupRatio: (item.setup / fundSize) * 100,\n    otherRatio: (item.other / fundSize) * 100,\n    totalRatio: (item.total / fundSize) * 100\n  }));\n\n  // Color scheme for expense categories\n  const expenseColors = {\n    legal: '#60a5fa', // Blue\n    administration: '#1e293b', // Dark slate\n    tax: '#94a3b8', // Light slate\n    audit: '#fb923c', // Orange\n    software: '#22c55e', // Green\n    setup: '#a855f7', // Purple\n    other: '#ef4444', // Red\n    total: '#fbbf24' // Yellow\n  };\n\n  const formatCurrency = (value: number) => {\n    if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;\n    if (value >= 1000) return `$${(value / 1000).toFixed(0)}K`;\n    return `$${value.toLocaleString()}`;\n  };\n\n  const formatPercent = (value: number) => `${value.toFixed(3)}%`;\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      const currentData = viewType === 'expenses' ? \n        expenseData.find(d => d.date === label) : \n        expenseRatioData.find(d => d.date === label);\n      \n      if (!currentData) return null;\n\n      const formatDate = (dateStr: string) => {\n        const date = new Date(dateStr + '-01');\n        return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });\n      };\n\n      const totalValue = viewType === 'expenses' ? \n        (currentData as ExpenseData).total : \n        (currentData as ExpenseRatioData).totalRatio;\n\n      return (\n        <div className=\"bg-white p-4 border border-gray-200 rounded-lg shadow-lg max-w-xs\">\n          <p className=\"font-medium mb-2\">{formatDate(label)}</p>\n          <p className=\"font-bold text-yellow-600 mb-2\">\n            Total: {viewType === 'expenses' ? formatCurrency(totalValue) : formatPercent(totalValue)}\n          </p>\n          <div className=\"space-y-1 text-sm\">\n            {payload\n              .filter((entry: any) => entry.dataKey !== 'total' && entry.dataKey !== 'totalRatio')\n              .sort((a: any, b: any) => b.value - a.value)\n              .map((entry: any, index: number) => (\n                <div key={index} className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div \n                      className=\"w-3 h-3 rounded\"\n                      style={{ backgroundColor: entry.color }}\n                    />\n                    <span className=\"capitalize\">\n                      {entry.dataKey.replace('Ratio', '').replace(/([A-Z])/g, ' $1').trim()}\n                    </span>\n                  </div>\n                  <span className=\"font-medium\">\n                    {viewType === 'expenses' ? formatCurrency(entry.value) : formatPercent(entry.value)}\n                  </span>\n                </div>\n              ))}\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold flex items-center space-x-2\">\n            <DollarSign className=\"h-6 w-6 text-blue-600\" />\n            <span>Fund Expenses</span>\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Actual and projected fund expenses and expense ratios by line item\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\">\n            <Info className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Toggle between Expenses and Ratios */}\n      <div className=\"flex items-center space-x-4\">\n        <Button \n          variant={viewType === 'expenses' ? 'default' : 'outline'}\n          onClick={() => setViewType('expenses')}\n          className=\"flex items-center space-x-2\"\n        >\n          <DollarSign className=\"h-4 w-4\" />\n          <span>Fund Expenses</span>\n        </Button>\n        <Button \n          variant={viewType === 'ratios' ? 'default' : 'outline'}\n          onClick={() => setViewType('ratios')}\n          className=\"flex items-center space-x-2\"\n        >\n          <Percent className=\"h-4 w-4\" />\n          <span>Expense Ratio</span>\n        </Button>\n      </div>\n\n      {/* Charts */}\n      <Card>\n        <CardHeader>\n          <CardTitle>{viewType === 'expenses' ? 'Fund Expenses' : 'Expense Ratio'}</CardTitle>\n          <CardDescription>\n            {viewType === 'expenses' ? \n              'Cumulative fund expenses over time by category' : \n              'Expense ratios as percentage of fund size over time'\n            }\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"cumulative\">Cumulative</TabsTrigger>\n              <TabsTrigger value=\"period\">Period</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"cumulative\" className=\"space-y-4\">\n              <div className=\"h-96\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart\n                    data={viewType === 'expenses' ? expenseData : expenseRatioData}\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"date\" \n                      tick={{ fontSize: 12 }}\n                      tickFormatter={(value) => {\n                        const date = new Date(value + '-01');\n                        return date.toLocaleDateString('en-US', { month: 'short', year: '2-digit' });\n                      }}\n                    />\n                    <YAxis \n                      tick={{ fontSize: 12 }}\n                      tickFormatter={(value) => \n                        viewType === 'expenses' ? formatCurrency(value) : formatPercent(value)\n                      }\n                    />\n                    <Tooltip content={<CustomTooltip />} />\n                    \n                    {/* Stacked areas for all categories */}\n                    <Area\n                      type=\"monotone\"\n                      dataKey={viewType === 'expenses' ? 'legal' : 'legalRatio'}\n                      stackId=\"1\"\n                      stroke={expenseColors.legal}\n                      fill={expenseColors.legal}\n                    />\n                    <Area\n                      type=\"monotone\"\n                      dataKey={viewType === 'expenses' ? 'administration' : 'administrationRatio'}\n                      stackId=\"1\"\n                      stroke={expenseColors.administration}\n                      fill={expenseColors.administration}\n                    />\n                    <Area\n                      type=\"monotone\"\n                      dataKey={viewType === 'expenses' ? 'tax' : 'taxRatio'}\n                      stackId=\"1\"\n                      stroke={expenseColors.tax}\n                      fill={expenseColors.tax}\n                    />\n                    <Area\n                      type=\"monotone\"\n                      dataKey={viewType === 'expenses' ? 'audit' : 'auditRatio'}\n                      stackId=\"1\"\n                      stroke={expenseColors.audit}\n                      fill={expenseColors.audit}\n                    />\n                    <Area\n                      type=\"monotone\"\n                      dataKey={viewType === 'expenses' ? 'software' : 'softwareRatio'}\n                      stackId=\"1\"\n                      stroke={expenseColors.software}\n                      fill={expenseColors.software}\n                    />\n                    <Area\n                      type=\"monotone\"\n                      dataKey={viewType === 'expenses' ? 'setup' : 'setupRatio'}\n                      stackId=\"1\"\n                      stroke={expenseColors.setup}\n                      fill={expenseColors.setup}\n                    />\n                    <Area\n                      type=\"monotone\"\n                      dataKey={viewType === 'expenses' ? 'other' : 'otherRatio'}\n                      stackId=\"1\"\n                      stroke={expenseColors.other}\n                      fill={expenseColors.other}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"period\" className=\"space-y-4\">\n              <div className=\"h-96\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={viewType === 'expenses' ? expenseData.slice(-12) : expenseRatioData.slice(-12)}\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"date\" \n                      tick={{ fontSize: 12 }}\n                      tickFormatter={(value) => {\n                        const date = new Date(value + '-01');\n                        return date.toLocaleDateString('en-US', { month: 'short' });\n                      }}\n                    />\n                    <YAxis \n                      tick={{ fontSize: 12 }}\n                      tickFormatter={(value) => \n                        viewType === 'expenses' ? formatCurrency(value) : formatPercent(value)\n                      }\n                    />\n                    <Tooltip content={<CustomTooltip />} />\n                    \n                    {/* Stacked bars for recent periods */}\n                    <Bar dataKey={viewType === 'expenses' ? 'legal' : 'legalRatio'} stackId=\"a\" fill={expenseColors.legal} />\n                    <Bar dataKey={viewType === 'expenses' ? 'administration' : 'administrationRatio'} stackId=\"a\" fill={expenseColors.administration} />\n                    <Bar dataKey={viewType === 'expenses' ? 'tax' : 'taxRatio'} stackId=\"a\" fill={expenseColors.tax} />\n                    <Bar dataKey={viewType === 'expenses' ? 'audit' : 'auditRatio'} stackId=\"a\" fill={expenseColors.audit} />\n                    <Bar dataKey={viewType === 'expenses' ? 'software' : 'softwareRatio'} stackId=\"a\" fill={expenseColors.software} />\n                    <Bar dataKey={viewType === 'expenses' ? 'setup' : 'setupRatio'} stackId=\"a\" fill={expenseColors.setup} />\n                    <Bar dataKey={viewType === 'expenses' ? 'other' : 'otherRatio'} stackId=\"a\" fill={expenseColors.other} />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </TabsContent>\n          </Tabs>\n\n          {/* Legend */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-6\">\n            {Object.entries(expenseColors).map(([category, color]) => (\n              <div key={category} className=\"flex items-center space-x-2\">\n                <div \n                  className=\"w-4 h-4 rounded\"\n                  style={{ backgroundColor: color }}\n                />\n                <span className=\"text-sm capitalize\">\n                  {category === 'total' ? 'Total' : category}\n                </span>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"border-blue-200 bg-blue-50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <DollarSign className=\"h-8 w-8 text-blue-600\" />\n              <div>\n                <div className=\"text-sm text-blue-800\">Total Expenses</div>\n                <div className=\"font-bold text-blue-900\">\n                  {formatCurrency(expenseData[expenseData.length - 1]?.total || 0)}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-green-200 bg-green-50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <Percent className=\"h-8 w-8 text-green-600\" />\n              <div>\n                <div className=\"text-sm text-green-800\">Total Expense Ratio</div>\n                <div className=\"font-bold text-green-900\">\n                  {formatPercent(expenseRatioData[expenseRatioData.length - 1]?.totalRatio || 0)}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-orange-200 bg-orange-50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <TrendingUp className=\"h-8 w-8 text-orange-600\" />\n              <div>\n                <div className=\"text-sm text-orange-800\">Largest Category</div>\n                <div className=\"font-bold text-orange-900\">Administration</div>\n                <div className=\"text-xs text-orange-700\">0.75% ratio</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-purple-200 bg-purple-50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <Info className=\"h-8 w-8 text-purple-600\" />\n              <div>\n                <div className=\"text-sm text-purple-800\">Active Categories</div>\n                <div className=\"font-bold text-purple-900\">7</div>\n                <div className=\"text-xs text-purple-700\">Expense types</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\investment-breakdown-chart.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Legend' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { PieChart } from 'recharts/es6/chart/PieChart';\nimport { Pie } from 'recharts/es6/polar/Pie';\nimport { Cell } from 'recharts/es6/component/Cell';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { Legend } from 'recharts/es6/component/Legend';\nimport ChartContainer from './chart-container';\n\ninterface SectorData {\n  name: string;\n  value: number;\n  color: string;\n  amount?: number;\n}\n\nconst sectorData: SectorData[] = [\n  { name: 'Fintech', value: 35, color: '#3b82f6', amount: 52.5 },\n  { name: 'Healthcare', value: 28, color: '#06b6d4', amount: 42.0 },\n  { name: 'SaaS', value: 22, color: '#10b981', amount: 33.0 },\n  { name: 'Other', value: 15, color: '#f59e0b', amount: 22.5 },\n];\n\ninterface InvestmentBreakdownChartProps {\n  data?: SectorData[];\n  title?: string;\n  height?: number;\n}\n\nconst formatTooltipValue = (value: number, name: string, props: any) => {\n  const amount = props.payload?.amount;\n  return [\n    `${value}% ${amount ? `($${amount}M)` : ''}`,\n    'Portfolio Allocation'\n  ];\n};\n\nexport default function InvestmentBreakdownChart({ \n  data = sectorData, \n  title = \"Portfolio Allocation by Sector\",\n  height = 320 \n}: InvestmentBreakdownChartProps) {\n  if (!data || data.length === 0) {\n    return (\n      <ChartContainer \n        title={title} \n        description=\"Investment distribution across sectors\"\n        height={height}\n      >\n        <div className=\"flex items-center justify-center h-full text-gray-500\">\n          No allocation data available\n        </div>\n      </ChartContainer>\n    );\n  }\n\n  return (\n    <ChartContainer \n      title={title} \n      description=\"Investment distribution across sectors\"\n      height={height}\n    >\n      <div className=\"flex flex-col h-full\">\n        <div className=\"flex-1 min-h-0\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <PieChart>\n              <Pie\n                data={data}\n                cx=\"50%\"\n                cy=\"50%\"\n                innerRadius={40}\n                outerRadius={80}\n                dataKey=\"value\"\n                label={({ value }) => `${value}%`}\n                labelLine={false}\n                stroke=\"#fff\"\n                strokeWidth={2}\n              >\n                {data.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.color} />\n                ))}\n              </Pie>\n              <Tooltip \n                formatter={formatTooltipValue}\n                contentStyle={{ \n                  backgroundColor: '#fff', \n                  border: '1px solid #e0e0e0', \n                  borderRadius: '8px',\n                  boxShadow: '0 4px 12px rgba(0,0,0,0.1)'\n                }}\n              />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n        \n        <div className=\"space-y-3 pt-4 border-t border-gray-100\">\n          {data.map((sector, index) => (\n            <div key={index} className=\"flex items-center justify-between text-sm\">\n              <div className=\"flex items-center space-x-3\">\n                <div \n                  className=\"w-4 h-4 rounded-full shadow-sm\"\n                  style={{ backgroundColor: sector.color }}\n                ></div>\n                <span className=\"text-gray-700 font-medium\">{sector.name}</span>\n              </div>\n              <div className=\"text-right\">\n                <span className=\"font-semibold text-gray-800\">{sector.value}%</span>\n                {sector.amount && (\n                  <div className=\"text-xs text-gray-500\">${sector.amount}M</div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </ChartContainer>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\nivo-allocation-pie.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\nivo-moic-scatter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\nivo-performance-chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\pacing-timeline-chart.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { LineChart } from 'recharts/es6/chart/LineChart';\nimport { Line } from 'recharts/es6/cartesian/Line';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { usePacingData } from '@/hooks/use-engine-data';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AlertCircle, Calendar, TrendingUp } from \"lucide-react\";\n\nexport default function PacingTimelineChart() {\n  const { data: pacingData, loading, error } = usePacingData();\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold\">Deployment Pacing</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibent\">Deployment Pacing</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center h-64 text-red-500\">\n            <AlertCircle className=\"h-6 w-6 mr-2\" />\n            <span>Error loading pacing data: {error}</span>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Transform pacing data for chart display\n  const deployments = pacingData?.deployments || [];\n  const chartData = deployments.map(item => {\n    const currentIndex = deployments.findIndex(d => d.quarter === item.quarter);\n    const cumulative = deployments\n      .slice(0, currentIndex + 1)\n      .reduce((sum, d) => sum + d.deployment, 0);\n    \n    return {\n      quarter: `Q${item.quarter}`,\n      deployment: item.deployment / 1000000, // Convert to millions\n      cumulative: cumulative / 1000000,\n      note: item.note\n    };\n  });\n\n  const fundSize = pacingData?.fundSize || 0;\n  const avgQuarterlyDeployment = pacingData?.avgQuarterlyDeployment || 0;\n  const totalQuarters = pacingData?.totalQuarters || 0;\n  const marketCondition = pacingData?.marketCondition || 'neutral';\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Main Pacing Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold\">Deployment Pacing Timeline</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-80\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={chartData}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                <XAxis dataKey=\"quarter\" stroke=\"#666\" fontSize={12} />\n                <YAxis stroke=\"#666\" fontSize={12} label={{ value: 'Deployment ($M)', angle: -90, position: 'insideLeft' }} />\n                <Tooltip \n                  formatter={(value: number, name: string) => [\n                    `$${value.toFixed(1)}M`, \n                    name === 'deployment' ? 'Quarterly Deployment' : 'Cumulative'\n                  ]}\n                  labelFormatter={(label) => `Quarter: ${label}`}\n                />\n                <Bar dataKey=\"deployment\" fill=\"#3b82f6\" name=\"deployment\" />\n                <Line type=\"monotone\" dataKey=\"cumulative\" stroke=\"#10b981\" strokeWidth={3} name=\"cumulative\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pacing Summary Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-sm font-medium\">Total Fund Size</p>\n                <p className=\"text-2xl font-bold text-gray-800 mt-1\">\n                  ${(fundSize / 1000000).toFixed(0)}M\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"h-6 w-6 text-blue-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-sm font-medium\">Avg Quarterly</p>\n                <p className=\"text-2xl font-bold text-gray-800 mt-1\">\n                  ${(avgQuarterlyDeployment / 1000000).toFixed(1)}M\n                </p>\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  {totalQuarters} quarters\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center\">\n                <Calendar className=\"h-6 w-6 text-green-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-sm font-medium\">Market Condition</p>\n                <p className=\"text-2xl font-bold text-gray-800 mt-1\">\n                  {marketCondition.charAt(0).toUpperCase() + marketCondition.slice(1)}\n                </p>\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  Baseline pacing\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-orange-50 rounded-lg flex items-center justify-center\">\n                <Calendar className=\"h-6 w-6 text-orange-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quarterly Breakdown */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold\">Quarterly Deployment Breakdown</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {chartData.map((item, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-gray-800\">{item.quarter} Deployment</p>\n                  <p className=\"text-sm text-gray-600\">{item.note}</p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-semibold text-gray-800\">\n                    ${item.deployment.toFixed(1)}M\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    Cumulative: ${item.cumulative.toFixed(1)}M\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\performance-optimizer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\portfolio-cost-value-chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\portfolio-performance-chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\charts\\reserve-allocation-chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\custom-fields\\custom-fields-editor.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'values' is defined but never used.","line":38,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":46},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":97,"column":55,"nodeType":"Identifier","messageId":"undef","endLine":97,"endColumn":60}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { Calendar } from '@/components/ui/calendar';\nimport { format } from 'date-fns/format';\nimport { CalendarIcon, Tag, X } from 'lucide-react';\nimport { CustomField } from './custom-fields-manager';\n\ninterface CustomFieldValue {\n  fieldId: string;\n  value: string | number | boolean | Date | string[];\n}\n\ninterface CustomFieldsEditorProps {\n  fields: CustomField[];\n  values: CustomFieldValue[];\n  onValuesChange: (values: CustomFieldValue[]) => void;\n  className?: string;\n}\n\nconst COLOR_PRESETS = [\n  { value: '#ef4444', label: 'Red' },\n  { value: '#f97316', label: 'Orange' },\n  { value: '#f59e0b', label: 'Amber' },\n  { value: '#eab308', label: 'Yellow' },\n  { value: '#84cc16', label: 'Lime' },\n  { value: '#22c55e', label: 'Green' },\n  { value: '#10b981', label: 'Emerald' },\n  { value: '#14b8a6', label: 'Teal' },\n  { value: '#06b6d4', label: 'Cyan' },\n  { value: '#0ea5e9', label: 'Sky' },\n  { value: '#3b82f6', label: 'Blue' },\n  { value: '#6366f1', label: 'Indigo' },\n  { value: '#8b5cf6', label: 'Violet' },\n  { value: '#a855f7', label: 'Purple' },\n  { value: '#d946ef', label: 'Fuchsia' },\n  { value: '#ec4899', label: 'Pink' },\n  { value: '#f43f5e', label: 'Rose' },\n  { value: '#64748b', label: 'Slate' },\n  { value: '#374151', label: 'Gray' },\n  { value: '#1f2937', label: 'Dark Gray' },\n];\n\nexport default function CustomFieldsEditor({ fields, values, onValuesChange, className = '' }: CustomFieldsEditorProps) {\n  const [tagInputs, setTagInputs] = useState<Record<string, string>>({});\n\n  const getFieldValue = (fieldId: string) => {\n    const fieldValue = values.find(v => v.fieldId === fieldId);\n    return fieldValue?.value;\n  };\n\n  const updateFieldValue = (fieldId: string, value: string | number | boolean | Date | string[]) => {\n    const updatedValues = values.filter(v => v.fieldId !== fieldId);\n    if (value !== undefined && value !== null && value !== '') {\n      updatedValues.push({ fieldId, value });\n    }\n    onValuesChange(updatedValues);\n  };\n\n  const addTag = (fieldId: string) => {\n    const tagInput = tagInputs[fieldId]?.trim();\n    if (!tagInput) return;\n\n    const currentTags = (getFieldValue(fieldId) as string[]) || [];\n    if (!currentTags.includes(tagInput)) {\n      updateFieldValue(fieldId, [...currentTags, tagInput]);\n    }\n    setTagInputs({ ...tagInputs, [fieldId]: '' });\n  };\n\n  const removeTag = (fieldId: string, tagToRemove: string) => {\n    const currentTags = (getFieldValue(fieldId) as string[]) || [];\n    updateFieldValue(fieldId, currentTags.filter((tag: string) => tag !== tagToRemove));\n  };\n\n  const handleTagInputKeyPress = (fieldId: string, e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      addTag(fieldId);\n    }\n  };\n\n  const renderFieldInput = (field: CustomField) => {\n    const value = getFieldValue(field.id);\n\n    switch (field.type) {\n      case 'number':\n        return (\n          <Input\n            type=\"number\"\n            value={typeof value === 'number' ? value.toString() : ''}\n            onChange={(e) => updateFieldValue(field.id, parseFloat(e.target.value) || '')}\n            placeholder=\"Enter a number\"\n          />\n        );\n\n      case 'text':\n        return (\n          <Textarea\n            value={(value as string) || ''}\n            onChange={(e) => updateFieldValue(field.id, e.target.value)}\n            placeholder=\"Enter text\"\n            rows={2}\n          />\n        );\n\n      case 'tags': {\n        const tags = (value as string[]) || [];\n        return (\n          <div className=\"space-y-2\">\n            <div className=\"flex flex-wrap gap-2\">\n              {tags.map((tag: string, index: number) => (\n                <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                  {tag}\n                  <X\n                    className=\"h-3 w-3 cursor-pointer hover:text-red-600\"\n                    onClick={() => removeTag(field.id, tag)}\n                  />\n                </Badge>\n              ))}\n            </div>\n            <div className=\"flex gap-2\">\n              <Input\n                value={tagInputs[field.id] || ''}\n                onChange={(e) => setTagInputs({ ...tagInputs, [field.id]: e.target.value })}\n                onKeyPress={(e) => handleTagInputKeyPress(field.id, e)}\n                placeholder=\"Type and press Enter to add tag\"\n                className=\"flex-1\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => addTag(field.id)}\n                disabled={!tagInputs[field.id]?.trim()}\n              >\n                <Tag className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        );\n      }\n\n      case 'color':\n        return (\n          <div className=\"space-y-2\">\n            <Select\n              value={(value as string) || ''}\n              onValueChange={(selectedColor) => updateFieldValue(field.id, selectedColor)}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select a color\">\n                  {value && typeof value === 'string' && (\n                    <div className=\"flex items-center gap-2\">\n                      <div \n                        className=\"w-4 h-4 rounded-full\" \n                        style={{ backgroundColor: value }}\n                      />\n                      {COLOR_PRESETS.find(c => c.value === value)?.label || value}\n                    </div>\n                  )}\n                </SelectValue>\n              </SelectTrigger>\n              <SelectContent>\n                {COLOR_PRESETS.map(color => (\n                  <SelectItem key={color.value} value={color.value}>\n                    <div className=\"flex items-center gap-2\">\n                      <div \n                        className=\"w-4 h-4 rounded-full\" \n                        style={{ backgroundColor: color.value }}\n                      />\n                      {color.label}\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        );\n\n      case 'date':\n        return (\n          <Popover>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                className=\"w-full justify-start text-left font-normal\"\n              >\n                <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                {value && (typeof value === 'string' || typeof value === 'number' || value instanceof Date) \n                  ? format(new Date(value), 'PPP') \n                  : 'Pick a date'}\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-auto p-0\" align=\"start\">\n              <Calendar\n                mode=\"single\"\n                selected={value && (typeof value === 'string' || typeof value === 'number' || value instanceof Date) \n                  ? new Date(value) \n                  : undefined}\n                onSelect={(date) => updateFieldValue(field.id, date?.toISOString() || '')}\n                initialFocus\n              />\n            </PopoverContent>\n          </Popover>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  if (fields.length === 0) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"p-6 text-center text-gray-500\">\n          <p>No custom fields defined.</p>\n          <p className=\"text-sm mt-1\">Define custom fields in the Custom Fields management section.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"text-base\">Custom Fields</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {fields.map((field) => (\n          <div key={field.id} className=\"space-y-2\">\n            <Label htmlFor={field.id} className=\"flex items-center gap-2\">\n              {field.name}\n              {field.required && <span className=\"text-red-500\">*</span>}\n            </Label>\n            {renderFieldInput(field)}\n          </div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\custom-fields\\custom-fields-manager.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'fields' is defined but never used.","line":39,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":41}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Plus, Trash2, Edit } from 'lucide-react';\n\nexport interface CustomField {\n  id: string;\n  name: string;\n  type: 'number' | 'tags' | 'text' | 'color' | 'date';\n  required?: boolean;\n  options?: string[]; // For tags and color options\n  defaultValue?: any;\n}\n\ninterface CustomFieldsManagerProps {\n  fields: CustomField[];\n  onFieldsChange: (fields: CustomField[]) => void;\n  className?: string;\n}\n\nconst FIELD_TYPE_OPTIONS = [\n  { value: 'number', label: 'Number' },\n  { value: 'tags', label: 'Tags' },\n  { value: 'text', label: 'Text' },\n  { value: 'color', label: 'Color Codes' },\n  { value: 'date', label: 'Dates' },\n];\n\nconst COLOR_PRESETS = [\n  '#ef4444', '#f97316', '#f59e0b', '#eab308', '#84cc16',\n  '#22c55e', '#10b981', '#14b8a6', '#06b6d4', '#0ea5e9',\n  '#3b82f6', '#6366f1', '#8b5cf6', '#a855f7', '#d946ef',\n  '#ec4899', '#f43f5e', '#64748b', '#374151', '#1f2937'\n];\n\nexport default function CustomFieldsManager({ fields, onFieldsChange, className = '' }: CustomFieldsManagerProps) {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingField, setEditingField] = useState<CustomField | null>(null);\n  const [newField, setNewField] = useState<Partial<CustomField>>({\n    name: '',\n    type: 'text',\n    required: false,\n  });\n\n  const handleAddField = () => {\n    if (!newField.name || !newField.type) return;\n\n    const field: CustomField = {\n      id: `field-${Date.now()}`,\n      name: newField.name,\n      type: newField.type as CustomField['type'],\n      required: newField.required || false,\n      options: newField.type === 'color' ? COLOR_PRESETS : undefined,\n    };\n\n    onFieldsChange([...fields, field]);\n    setNewField({ name: '', type: 'text', required: false });\n    setIsAddDialogOpen(false);\n  };\n\n  const handleEditField = (field: CustomField) => {\n    setEditingField(field);\n    setNewField({ ...field });\n    setIsAddDialogOpen(true);\n  };\n\n  const handleUpdateField = () => {\n    if (!editingField || !newField.name || !newField.type) return;\n\n    const updatedFields = fields.map(f => \n      f.id === editingField.id \n        ? { ...f, name: newField.name!, type: newField.type as CustomField['type'], required: newField.required || false }\n        : f\n    );\n\n    onFieldsChange(updatedFields);\n    setNewField({ name: '', type: 'text', required: false });\n    setEditingField(null);\n    setIsAddDialogOpen(false);\n  };\n\n  const handleDeleteField = (fieldId: string) => {\n    onFieldsChange(fields.filter(f => f.id !== fieldId));\n  };\n\n  const getFieldTypeColor = (type: string) => {\n    switch (type) {\n      case 'number': return 'bg-blue-100 text-blue-800';\n      case 'tags': return 'bg-green-100 text-green-800';\n      case 'text': return 'bg-gray-100 text-gray-800';\n      case 'color': return 'bg-purple-100 text-purple-800';\n      case 'date': return 'bg-orange-100 text-orange-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-xl font-semibold\">Custom Fields Definitions</h2>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Custom Fields are used to add additional information to an investment. For example, you may want to add additional tags to an investment to help you filter and sort your investments, or create a color field to help you visually identify investments.\n          </p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Field\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingField ? 'Edit Custom Field' : 'Add Custom Field'}\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"field-name\">Field Name</Label>\n                <Input\n                  id=\"field-name\"\n                  value={newField.name || ''}\n                  onChange={(e) => setNewField({ ...newField, name: e.target.value })}\n                  placeholder=\"e.g., Internal Status\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"field-type\">Field Type</Label>\n                <Select\n                  value={newField.type || 'text'}\n                  onValueChange={(value) => setNewField({ ...newField, type: value as CustomField['type'] })}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {FIELD_TYPE_OPTIONS.map(option => (\n                      <SelectItem key={option.value} value={option.value}>\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => {\n                  setIsAddDialogOpen(false);\n                  setEditingField(null);\n                  setNewField({ name: '', type: 'text', required: false });\n                }}>\n                  Cancel\n                </Button>\n                <Button onClick={editingField ? handleUpdateField : handleAddField}>\n                  {editingField ? 'Update' : 'Add Field'}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Fields List */}\n      <Card>\n        <CardContent className=\"p-6\">\n          {fields.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <p>No custom fields defined yet.</p>\n              <p className=\"text-sm\">Click \"Add Field\" to create your first custom field.</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {fields.map((field) => (\n                <div key={field.id} className=\"flex items-center justify-between p-4 border rounded-lg bg-gray-50\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <div className=\"font-medium text-gray-900\">{field.name}</div>\n                      <Badge className={getFieldTypeColor(field.type)}>\n                        {FIELD_TYPE_OPTIONS.find(opt => opt.value === field.type)?.label}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleEditField(field)}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDeleteField(field.id)}\n                      className=\"text-red-600 hover:text-red-800\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Preview */}\n      {fields.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Preview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <p className=\"text-sm text-gray-600\">\n                These fields will appear in the Custom Fields section when editing investments:\n              </p>\n              <div className=\"border rounded-lg p-4 bg-gray-50\">\n                <h4 className=\"font-medium mb-3\">Custom Fields</h4>\n                <div className=\"space-y-3\">\n                  {fields.map((field) => (\n                    <div key={field.id} className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium text-gray-700\">{field.name}</span>\n                      <div className=\"flex items-center space-x-2\">\n                        {field.type === 'color' && (\n                          <div className=\"w-4 h-4 bg-green-500 rounded-full\"></div>\n                        )}\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {FIELD_TYPE_OPTIONS.find(opt => opt.value === field.type)?.label}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\dashboard\\DashboardCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\dashboard\\dual-forecast-dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'fundMetrics' is assigned a value but never used.","line":36,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { LineChart } from 'recharts/es6/chart/LineChart';\nimport { Line } from 'recharts/es6/cartesian/Line';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { Legend } from 'recharts/es6/component/Legend';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { AreaChart } from 'recharts/es6/chart/AreaChart';\nimport { Area } from 'recharts/es6/cartesian/Area';\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { TrendingUp, DollarSign, Target, PieChart } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\n\ninterface DualForecastData {\n  fund: any;\n  portfolioCompanies: any[];\n  metrics: any;\n  summary: any;\n}\n\nexport default function DualForecastDashboard() {\n  const { data: dashboardData, isLoading, error } = useQuery<DualForecastData>({\n    queryKey: ['/api/dashboard-summary/1'],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const { data: fundMetrics } = useQuery({\n    queryKey: ['/api/fund-metrics/1'],\n    refetchInterval: 60000, // Refresh every minute\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"animate-pulse\">\n          <CardHeader>\n            <div className=\"h-6 bg-gray-200 rounded w-3/4\"></div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-48 bg-gray-200 rounded\"></div>\n          </CardContent>\n        </Card>\n        <Card className=\"animate-pulse\">\n          <CardHeader>\n            <div className=\"h-6 bg-gray-200 rounded w-3/4\"></div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-48 bg-gray-200 rounded\"></div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error || !dashboardData) {\n    return (\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center py-8\">\n            <p className=\"text-red-600 font-medium\">Unable to load forecast data</p>\n            <p className=\"text-muted-foreground mt-2\">Please check API connectivity</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Transform real data for forecasting charts\n  const currentMetrics = dashboardData.metrics;\n  const baseValue = parseFloat(currentMetrics?.totalValue || '0');\n  const currentIRR = parseFloat(currentMetrics?.irr || '0');\n\n  // Generate forecast scenarios\n  const generateForecastData = () => {\n    const months = Array.from({ length: 24 }, (_, i) => {\n      const date = new Date();\n      date.setMonth(date.getMonth() + i);\n      return date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n    });\n\n    return months.map((month, i) => {\n      const growthFactor = Math.pow(1 + currentIRR / 12, i);\n      const conservativeGrowth = Math.pow(1.15, i / 12); // 15% annual\n      const aggressiveGrowth = Math.pow(1.35, i / 12); // 35% annual\n      \n      return {\n        month,\n        conservative: Math.round(baseValue * conservativeGrowth / 1000000), // In millions\n        realistic: Math.round(baseValue * growthFactor / 1000000),\n        aggressive: Math.round(baseValue * aggressiveGrowth / 1000000),\n        deployed: Math.round((parseFloat(dashboardData.fund.deployedCapital) + i * 2000000) / 1000000)\n      };\n    });\n  };\n\n  const forecastData = generateForecastData();\n\n  // Portfolio allocation data from real API\n  const portfolioData = dashboardData.portfolioCompanies.map(company => ({\n    name: company.name,\n    value: Math.round(parseFloat(company.currentValuation) / 1000000),\n    investment: Math.round(parseFloat(company.investmentAmount) / 1000000),\n    sector: company.sector,\n    stage: company.stage\n  }));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Live Metrics Header */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Current AUM</p>\n                <p className=\"text-2xl font-bold\">${(baseValue / 1000000).toFixed(1)}M</p>\n              </div>\n              <DollarSign className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">IRR</p>\n                <p className=\"text-2xl font-bold\">{(currentIRR * 100).toFixed(1)}%</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Portfolio Cos</p>\n                <p className=\"text-2xl font-bold\">{dashboardData.portfolioCompanies.length}</p>\n              </div>\n              <PieChart className=\"h-8 w-8 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Deployment</p>\n                <p className=\"text-2xl font-bold\">{dashboardData.summary.deploymentRate.toFixed(0)}%</p>\n              </div>\n              <Target className=\"h-8 w-8 text-orange-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Dual Forecast Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Value Projection Chart */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              Fund Value Forecast\n              <Badge variant=\"outline\" className=\"text-xs\">Live Data</Badge>\n            </CardTitle>\n            <CardDescription>\n              24-month value projection based on current {(currentIRR * 100).toFixed(1)}% IRR\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <AreaChart data={forecastData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"month\" />\n                <YAxis label={{ value: 'Value ($M)', angle: -90, position: 'insideLeft' }} />\n                <Tooltip formatter={(value) => [`$${value}M`, '']} />\n                <Legend />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"conservative\"\n                  stackId=\"1\"\n                  stroke=\"#10b981\"\n                  fill=\"#10b981\"\n                  fillOpacity={0.3}\n                  name=\"Conservative (15%)\"\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"realistic\"\n                  stackId=\"2\"\n                  stroke=\"#3b82f6\"\n                  fill=\"#3b82f6\"\n                  fillOpacity={0.5}\n                  name={`Realistic (${(currentIRR * 100).toFixed(1)}%)`}\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"aggressive\"\n                  stackId=\"3\"\n                  stroke=\"#f59e0b\"\n                  fill=\"#f59e0b\"\n                  fillOpacity={0.3}\n                  name=\"Aggressive (35%)\"\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Portfolio Allocation */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              Live Portfolio Allocation\n              <Badge variant=\"outline\" className=\"text-xs\">Real-time</Badge>\n            </CardTitle>\n            <CardDescription>\n              Current valuation vs investment by company\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={portfolioData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis label={{ value: 'Value ($M)', angle: -90, position: 'insideLeft' }} />\n                <Tooltip \n                  formatter={(value, name) => [`$${value}M`, name === 'value' ? 'Current Value' : 'Investment']}\n                />\n                <Legend />\n                <Bar dataKey=\"investment\" fill=\"#94a3b8\" name=\"Investment\" />\n                <Bar dataKey=\"value\" fill=\"#3b82f6\" name=\"Current Value\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Deployment Timeline */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Capital Deployment Forecast</CardTitle>\n          <CardDescription>\n            Projected deployment schedule based on current pipeline\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={200}>\n            <LineChart data={forecastData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis label={{ value: 'Deployed ($M)', angle: -90, position: 'insideLeft' }} />\n              <Tooltip formatter={(value) => [`$${value}M`, 'Deployed Capital']} />\n              <Line\n                type=\"monotone\"\n                dataKey=\"deployed\"\n                stroke=\"#ef4444\"\n                strokeWidth={3}\n                dot={{ r: 4 }}\n                name=\"Cumulative Deployment\"\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\dashboard\\fund-overview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\dashboard\\metric-cards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\dashboard\\portfolio-concentration.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Legend' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":16,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'Building2' is defined but never used.","line":16,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":47},{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":16,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":59},{"ruleId":"no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":16,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":66},{"ruleId":"no-unused-vars","severity":2,"message":"'title' is defined but never used.","line":110,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":110,"endColumn":42}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { PieChart } from 'recharts/es6/chart/PieChart';\nimport { Pie } from 'recharts/es6/polar/Pie';\nimport { Cell } from 'recharts/es6/component/Cell';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { Legend } from 'recharts/es6/component/Legend';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { MoreHorizontal, TrendingUp, Building2, DollarSign, Users } from 'lucide-react';\n\n// Sample concentration data by different metrics\nconst concentrationBySector = [\n  { name: 'SaaS', value: 18.5, companies: 8, color: '#3b82f6' },\n  { name: 'Fintech', value: 16.2, companies: 6, color: '#06b6d4' },\n  { name: 'Healthcare', value: 14.8, companies: 5, color: '#10b981' },\n  { name: 'E-commerce', value: 12.3, companies: 4, color: '#f59e0b' },\n  { name: 'AI/ML', value: 10.7, companies: 3, color: '#8b5cf6' },\n  { name: 'Marketplace', value: 9.2, companies: 3, color: '#ef4444' },\n  { name: 'Proptech', value: 8.1, companies: 2, color: '#84cc16' },\n  { name: 'Edtech', value: 6.4, companies: 2, color: '#f97316' },\n  { name: 'Other', value: 3.8, companies: 2, color: '#6b7280' }\n];\n\nconst concentrationByStage = [\n  { name: 'Seed', value: 42.3, companies: 12, color: '#3b82f6' },\n  { name: 'Series A', value: 28.7, companies: 8, color: '#06b6d4' },\n  { name: 'Series B', value: 18.9, companies: 5, color: '#10b981' },\n  { name: 'Pre-Seed', value: 6.8, companies: 3, color: '#f59e0b' },\n  { name: 'Series C+', value: 3.3, companies: 2, color: '#8b5cf6' }\n];\n\nconst concentrationByGeography = [\n  { name: 'San Francisco', value: 32.4, companies: 12, color: '#3b82f6' },\n  { name: 'New York', value: 24.1, companies: 8, color: '#06b6d4' },\n  { name: 'Los Angeles', value: 16.8, companies: 6, color: '#10b981' },\n  { name: 'Austin', value: 12.2, companies: 4, color: '#f59e0b' },\n  { name: 'Boston', value: 8.7, companies: 3, color: '#8b5cf6' },\n  { name: 'Seattle', value: 5.8, companies: 2, color: '#ef4444' }\n];\n\nconst concentrationByOwnership = [\n  { name: 'High (>15%)', value: 28.4, companies: 4, color: '#ef4444' },\n  { name: 'Medium (5-15%)', value: 45.2, companies: 12, color: '#f59e0b' },\n  { name: 'Low (<5%)', value: 26.4, companies: 14, color: '#10b981' }\n];\n\nconst concentrationByCheckSize = [\n  { name: '$2M+', value: 34.7, companies: 6, color: '#3b82f6' },\n  { name: '$1M-$2M', value: 28.3, companies: 8, color: '#06b6d4' },\n  { name: '$500K-$1M', value: 22.1, companies: 10, color: '#10b981' },\n  { name: '$250K-$500K', value: 10.4, companies: 4, color: '#f59e0b' },\n  { name: '<$250K', value: 4.5, companies: 2, color: '#8b5cf6' }\n];\n\nconst concentrationByPortfolioCompany = [\n  { name: 'TechCorp Inc.', value: 8.7, companies: 1, color: '#3b82f6' },\n  { name: 'DataFlow Solutions', value: 7.9, companies: 1, color: '#06b6d4' },\n  { name: 'AI Dynamics', value: 7.2, companies: 1, color: '#10b981' },\n  { name: 'FinanceFlow', value: 6.8, companies: 1, color: '#f59e0b' },\n  { name: 'HealthTech Pro', value: 6.1, companies: 1, color: '#8b5cf6' },\n  { name: 'EduConnect', value: 5.4, companies: 1, color: '#ef4444' },\n  { name: 'PropTech Hub', value: 4.9, companies: 1, color: '#84cc16' },\n  { name: 'RetailNext', value: 4.3, companies: 1, color: '#f97316' },\n  { name: 'CloudSecure', value: 3.8, companies: 1, color: '#6366f1' },\n  { name: 'Other (21 companies)', value: 44.9, companies: 21, color: '#6b7280' }\n];\n\ninterface ConcentrationData {\n  name: string;\n  value: number;\n  companies: number;\n  color: string;\n}\n\nconst CustomTooltip = ({ active, payload }: any) => {\n  if (active && payload && payload.length) {\n    const data = payload[0].payload;\n    return (\n      <div className=\"bg-white p-3 border border-gray-300 rounded-lg shadow-lg\">\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <div \n            className=\"w-3 h-3 rounded-full\"\n            style={{ backgroundColor: data.color }}\n          ></div>\n          <span className=\"font-medium text-gray-900\">{data.name}</span>\n        </div>\n        <div className=\"text-sm space-y-1\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Percentage:</span>\n            <span className=\"font-medium\">{data.value}%</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Companies:</span>\n            <span className=\"font-medium\">{data.companies}</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  return null;\n};\n\nconst ConcentrationChart = ({ data, title }: { data: ConcentrationData[], title: string }) => {\n  return (\n    <div className=\"w-full h-80\">\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <PieChart>\n          <Pie\n            data={data}\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius={60}\n            outerRadius={120}\n            paddingAngle={2}\n            dataKey=\"value\"\n          >\n            {data.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.color} />\n            ))}\n          </Pie>\n          <Tooltip content={<CustomTooltip />} />\n        </PieChart>\n      </ResponsiveContainer>\n      \n      {/* Custom Legend */}\n      <div className=\"mt-4 grid grid-cols-1 gap-2 max-h-32 overflow-y-auto\">\n        {data.map((entry, index) => (\n          <div key={index} className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <div \n                className=\"w-3 h-3 rounded-full flex-shrink-0\"\n                style={{ backgroundColor: entry.color }}\n              ></div>\n              <span className=\"text-gray-700 truncate\" title={entry.name}>\n                {entry.name}\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-3 text-gray-600\">\n              <span>{entry.value}%</span>\n              <span className=\"text-xs\">({entry.companies})</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default function PortfolioConcentration() {\n  const [activeTab, setActiveTab] = useState(\"sector\");\n\n  const getTabData = (tab: string) => {\n    switch (tab) {\n      case 'sector': return concentrationBySector;\n      case 'stage': return concentrationByStage;\n      case 'geography': return concentrationByGeography;\n      case 'ownership': return concentrationByOwnership;\n      case 'checksize': return concentrationByCheckSize;\n      case 'company': return concentrationByPortfolioCompany;\n      default: return concentrationBySector;\n    }\n  };\n\n  const getTabTitle = (tab: string) => {\n    switch (tab) {\n      case 'sector': return 'By Sector';\n      case 'stage': return 'By Stage';\n      case 'geography': return 'By Geography';\n      case 'ownership': return 'By Ownership %';\n      case 'checksize': return 'By Check Size';\n      case 'company': return 'By Portfolio Company';\n      default: return 'By Sector';\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-medium text-gray-900\">\n            Concentration Analysis\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"sm\">\n            <MoreHorizontal className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 lg:grid-cols-6 mb-4\">\n            <TabsTrigger value=\"sector\" className=\"text-xs\">\n              Sector\n            </TabsTrigger>\n            <TabsTrigger value=\"stage\" className=\"text-xs\">\n              Stage\n            </TabsTrigger>\n            <TabsTrigger value=\"geography\" className=\"text-xs\">\n              Geography\n            </TabsTrigger>\n            <TabsTrigger value=\"ownership\" className=\"text-xs\">\n              Ownership\n            </TabsTrigger>\n            <TabsTrigger value=\"checksize\" className=\"text-xs\">\n              Check Size\n            </TabsTrigger>\n            <TabsTrigger value=\"company\" className=\"text-xs\">\n              Company\n            </TabsTrigger>\n          </TabsList>\n\n          {['sector', 'stage', 'geography', 'ownership', 'checksize', 'company'].map((tab) => (\n            <TabsContent key={tab} value={tab} className=\"mt-0\">\n              <ConcentrationChart \n                data={getTabData(tab)} \n                title={getTabTitle(tab)}\n              />\n            </TabsContent>\n          ))}\n        </Tabs>\n\n        {/* Summary Statistics */}\n        <div className=\"mt-6 pt-4 border-t border-gray-200\">\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 text-sm\">\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-blue-600\">\n                {getTabData(activeTab).length}\n              </div>\n              <div className=\"text-gray-600\">Categories</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-blue-600\">\n                {getTabData(activeTab)[0]?.value}%\n              </div>\n              <div className=\"text-gray-600\">Top Category</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-blue-600\">\n                {getTabData(activeTab).reduce((sum, item) => sum + item.companies, 0)}\n              </div>\n              <div className=\"text-gray-600\">Total Companies</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-semibold text-blue-600\">\n                {(getTabData(activeTab).slice(0, 3).reduce((sum, item) => sum + item.value, 0)).toFixed(1)}%\n              </div>\n              <div className=\"text-gray-600\">Top 3 Concentration</div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\dashboard\\real-time-metrics.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used.","line":7,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used.","line":7,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":56},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":16,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'setIsLive' is assigned a value but never used.","line":21,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'setInterval' is not defined.","line":24,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'clearInterval' is not defined.","line":28,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":31}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { TrendingUp, TrendingDown, DollarSign, Target, PieChart, Activity } from 'lucide-react';\n\ninterface MetricItem {\n  label: string;\n  value: string;\n  change: string;\n  trend: 'up' | 'down' | 'stable';\n  icon: React.ComponentType<any>;\n}\n\nexport default function RealTimeMetrics() {\n  const [lastUpdate, setLastUpdate] = useState(new Date());\n  const [isLive, setIsLive] = useState(true);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setLastUpdate(new Date());\n    }, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const metrics: MetricItem[] = [\n    {\n      label: \"Total AUM\",\n      value: \"$100.0M\",\n      change: \"+2.4%\",\n      trend: \"up\",\n      icon: DollarSign\n    },\n    {\n      label: \"Deployed Capital\",\n      value: \"$67.5M\",\n      change: \"+5.2%\", \n      trend: \"up\",\n      icon: Target\n    },\n    {\n      label: \"Portfolio Companies\",\n      value: \"15\",\n      change: \"+2\",\n      trend: \"up\",\n      icon: PieChart\n    },\n    {\n      label: \"Current IRR\",\n      value: \"28.4%\",\n      change: \"+1.2%\",\n      trend: \"up\", \n      icon: TrendingUp\n    }\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold\">Real-Time Metrics</h3>\n        <div className=\"flex items-center space-x-2\">\n          <div className={`w-2 h-2 rounded-full ${isLive ? 'bg-green-500' : 'bg-gray-400'}`} />\n          <span className=\"text-sm text-muted-foreground\">\n            Last updated: {lastUpdate.toLocaleTimeString()}\n          </span>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {metrics.map((metric, index) => (\n          <Card key={index} className=\"hover:shadow-md transition-shadow\">\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                  {metric.label}\n                </CardTitle>\n                <metric.icon className=\"h-4 w-4 text-muted-foreground\" />\n              </div>\n              <div className=\"space-y-1\">\n                <div className=\"text-2xl font-bold\">{metric.value}</div>\n                <div className=\"flex items-center space-x-2\">\n                  <Badge \n                    variant={metric.trend === 'up' ? 'default' : metric.trend === 'down' ? 'destructive' : 'secondary'}\n                    className=\"text-xs\"\n                  >\n                    {metric.trend === 'up' ? (\n                      <TrendingUp className=\"h-3 w-3 mr-1\" />\n                    ) : metric.trend === 'down' ? (\n                      <TrendingDown className=\"h-3 w-3 mr-1\" />\n                    ) : (\n                      <Activity className=\"h-3 w-3 mr-1\" />\n                    )}\n                    {metric.change}\n                  </Badge>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\dashboard\\tactyc-dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'PieChart' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Pie' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Cell' is defined but never used.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":26,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectContent' is defined but never used.","line":26,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectItem' is defined but never used.","line":26,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectTrigger' is defined but never used.","line":26,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":58},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectValue' is defined but never used.","line":26,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":71},{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":29,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":29,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":61},{"ruleId":"no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":29,"column":63,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":68},{"ruleId":"no-unused-vars","severity":2,"message":"'ArrowUpRight' is defined but never used.","line":29,"column":70,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":82},{"ruleId":"no-unused-vars","severity":2,"message":"'ArrowDownRight' is defined but never used.","line":29,"column":84,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":98},{"ruleId":"no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":29,"column":100,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":104},{"ruleId":"no-unused-vars","severity":2,"message":"'managementFees' is assigned a value but never used.","line":51,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'fundExpenses' is assigned a value but never used.","line":52,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'exitProceedsRecycled' is assigned a value but never used.","line":53,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":29}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { LineChart } from 'recharts/es6/chart/LineChart';\nimport { Line } from 'recharts/es6/cartesian/Line';\nimport { PieChart } from 'recharts/es6/chart/PieChart';\nimport { Pie } from 'recharts/es6/polar/Pie';\nimport { Cell } from 'recharts/es6/component/Cell';\nimport { AreaChart } from 'recharts/es6/chart/AreaChart';\nimport { Area } from 'recharts/es6/cartesian/Area';\nimport { ComposedChart } from 'recharts/es6/chart/ComposedChart';\nimport { useState } from \"react\";\nimport { useFundContext } from \"@/contexts/FundContext\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { TrendingUp, Building2, DollarSign, Target, Calendar, Users, ArrowUpRight, ArrowDownRight, Info } from \"lucide-react\";\nimport PortfolioConcentration from \"./portfolio-concentration\";\n\nexport default function TactycDashboard() {\n  const { currentFund, isLoading } = useFundContext();\n  const [viewType, setViewType] = useState(\"construction\"); // construction | current\n  const [activeTab, setActiveTab] = useState(\"fund\");\n\n  if (isLoading || !currentFund) {\n    return (\n      <div className=\"flex-1 overflow-y-auto p-6 custom-scrollbar\">\n        <div className=\"animate-pulse space-y-8\">\n          <div className=\"h-20 bg-gray-200 rounded-xl\"></div>\n          <div className=\"h-96 bg-gray-200 rounded-xl\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  // Fund metrics calculation\n  const committedCapital = currentFund.size || 200000000;\n  const investableCapital = committedCapital * 1.026; // 205,311,250\n  const managementFees = committedCapital * 0.15;\n  const fundExpenses = committedCapital * 0.0171;\n  const exitProceedsRecycled = 40000000;\n  const reserveRatio = 42.5;\n  const projectedInvestments = 90;\n  const projectedFundValue = investableCapital * 5.41;\n  const grossMultiple = 5.41;\n  const tvpi = 4.48;\n\n  const initialCapital = investableCapital * 0.575;\n  const followOnCapital = investableCapital * 0.425;\n\n  // Sample data for charts\n  const investableCapitalData = [\n    { name: \"Pre-Seed\", initial: 41062250, followOn: 20531125 },\n    { name: \"Seed\", initial: 61593375, followOn: 30796688 },\n    { name: \"Series A\", initial: 82124500, followOn: 41062250 },\n    { name: \"Warrants\", initial: 0, followOn: 0 },\n  ];\n\n  const pacingData = [\n    { period: \"Jan 22\", cumulative: 15, inPeriod: 3 },\n    { period: \"Apr 22\", cumulative: 25, inPeriod: 5 },\n    { period: \"Jul 22\", cumulative: 35, inPeriod: 4 },\n    { period: \"Oct 22\", cumulative: 45, inPeriod: 6 },\n    { period: \"Jan 23\", cumulative: 55, inPeriod: 4 },\n    { period: \"Apr 23\", cumulative: 65, inPeriod: 5 },\n    { period: \"Jul 23\", cumulative: 75, inPeriod: 3 },\n    { period: \"Oct 23\", cumulative: 85, inPeriod: 4 },\n    { period: \"Jan 24\", cumulative: 90, inPeriod: 2 },\n  ];\n\n  const capitalCallsData = [\n    { period: \"Jan 22\", amount: 25000000, cumulative: 25000000 },\n    { period: \"Apr 22\", amount: 20000000, cumulative: 45000000 },\n    { period: \"Jul 22\", amount: 30000000, cumulative: 75000000 },\n    { period: \"Oct 22\", amount: 25000000, cumulative: 100000000 },\n    { period: \"Jan 23\", amount: 30000000, cumulative: 130000000 },\n    { period: \"Apr 23\", amount: 25000000, cumulative: 155000000 },\n    { period: \"Jul 23\", amount: 20000000, cumulative: 175000000 },\n    { period: \"Oct 23\", amount: 15000000, cumulative: 190000000 },\n    { period: \"Jan 24\", amount: 10000000, cumulative: 200000000 },\n  ];\n\n  const InvestableCapitalSummary = () => (\n    <div className=\"space-y-8\">\n      {/* Header Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"bg-white border-0 shadow-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-inter font-bold text-charcoal\">\n                ${(investableCapital / 1000000).toFixed(1)}M\n              </div>\n              <div className=\"text-beige/80 font-medium mt-1\">\n                {((investableCapital / committedCapital) * 100).toFixed(2)}%\n              </div>\n              <div className=\"text-sm text-charcoal/70 mt-2\">Investable Capital</div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-white border-0 shadow-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-inter font-bold text-charcoal\">\n                  ${(initialCapital / 1000000).toFixed(1)}M\n                </div>\n                <div className=\"text-beige/80 font-medium\">\n                  {((initialCapital / investableCapital) * 100).toFixed(2)}%\n                </div>\n                <div className=\"text-sm text-charcoal/70 mt-1\">Projected Initial</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-inter font-bold text-charcoal\">\n                  ${(followOnCapital / 1000000).toFixed(1)}M\n                </div>\n                <div className=\"text-beige/80 font-medium\">\n                  {((followOnCapital / investableCapital) * 100).toFixed(2)}%\n                </div>\n                <div className=\"text-sm text-charcoal/70 mt-1\">Projected Follow-On</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-white border-0 shadow-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-inter font-bold text-charcoal\">{projectedInvestments}</div>\n              <div className=\"text-charcoal/70 font-medium mt-1\">Projected</div>\n              <div className=\"text-sm text-charcoal/70 mt-2\">Number of Initial Investments</div>\n              <div className=\"flex justify-center space-x-4 mt-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-charcoal\">27</div>\n                  <div className=\"text-xs text-charcoal/50\">By Entry Round</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-bold text-charcoal\">26</div>\n                  <div className=\"text-xs text-charcoal/50\">By Allocations</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Capital Breakdown */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        <Card className=\"bg-white border-0 shadow-card\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-inter text-charcoal\">Investable Capital Breakdown</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-charcoal/70\">Committed Capital</span>\n                <span className=\"font-mono text-charcoal\">${(committedCapital / 1000000).toFixed(0)}M</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-charcoal/70\">Cashless Commit</span>\n                <span className=\"font-mono text-red-600\">($0.8M)</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-charcoal/70\">Management Fees</span>\n                <span className=\"font-mono text-red-600\">($30.5M)</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-charcoal/70\">Fund Expenses</span>\n                <span className=\"font-mono text-red-600\">($3.4M)</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-charcoal/70\">Exit Proceeds Recycled</span>\n                <span className=\"font-mono text-green-600\">$40.0M</span>\n              </div>\n              <div className=\"border-t border-charcoal/20 pt-4\">\n                <div className=\"flex justify-between items-center font-bold\">\n                  <span className=\"text-charcoal\">Total Investable</span>\n                  <span className=\"font-mono text-charcoal\">${(investableCapital / 1000000).toFixed(1)}M</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-white border-0 shadow-card\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-inter text-charcoal\">Capital Allocation by Entry Round</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={investableCapitalData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f2f2f2\" />\n                <XAxis dataKey=\"name\" tick={{ fill: '#292929' }} />\n                <YAxis tick={{ fill: '#292929' }} tickFormatter={(value) => `$${(value / 1000000).toFixed(0)}M`} />\n                <Bar dataKey=\"initial\" fill=\"#292929\" name=\"Initial Investments\" />\n                <Bar dataKey=\"followOn\" fill=\"#E0D8D1\" name=\"Follow-On Investments\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n\n  const PacingAnalysis = () => (\n    <div className=\"space-y-8\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Initial Investment Pacing</CardTitle>\n            <CardDescription>Number of deals by time period</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <ComposedChart data={pacingData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"period\" />\n                <YAxis />\n                <Bar dataKey=\"inPeriod\" fill=\"#3b82f6\" name=\"In-Period\" />\n                <Line type=\"monotone\" dataKey=\"cumulative\" stroke=\"#1d4ed8\" strokeWidth={2} name=\"Cumulative\" />\n              </ComposedChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Follow-On Investment Pacing</CardTitle>\n            <CardDescription>Monthly deal flow analysis</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <AreaChart data={pacingData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"period\" />\n                <YAxis />\n                <Area type=\"monotone\" dataKey=\"cumulative\" stackId=\"1\" stroke=\"#1d4ed8\" fill=\"#3b82f6\" />\n              </AreaChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n\n  const CapitalCalls = () => (\n    <div className=\"space-y-8\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Capital Call Schedule</CardTitle>\n          <CardDescription>Deployment projections over fund lifetime</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"mb-4\">\n            <div className=\"text-2xl font-bold text-blue-600\">$199,200,000</div>\n            <div className=\"text-gray-600\">Total Projected</div>\n          </div>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <ComposedChart data={capitalCallsData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"period\" />\n              <YAxis tickFormatter={(value) => `$${(value / 1000000).toFixed(0)}M`} />\n              <Bar dataKey=\"amount\" fill=\"#3b82f6\" name=\"In Period\" />\n              <Line type=\"monotone\" dataKey=\"cumulative\" stroke=\"#1d4ed8\" strokeWidth={3} name=\"Cumulative\" />\n            </ComposedChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6 custom-scrollbar bg-white font-poppins\">\n      {/* Fund Header */}\n      <div className=\"bg-lightGray rounded-lg shadow-card border-0 p-6 mb-8\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n          <div>\n            <h1 className=\"text-2xl font-inter font-bold text-charcoal\">{currentFund.name}</h1>\n            <div className=\"flex items-center space-x-8 mt-4\">\n              <div>\n                <div className=\"text-sm text-charcoal/70\">Capital</div>\n                <div className=\"grid grid-cols-3 gap-6 mt-2\">\n                  <div>\n                    <div className=\"text-sm font-medium text-charcoal/70\">Committed</div>\n                    <div className=\"text-lg font-bold text-charcoal\">${(committedCapital / 1000000).toFixed(0)}M</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-charcoal/70\">Investable</div>\n                    <div className=\"text-lg font-bold text-charcoal\">${(investableCapital / 1000000).toFixed(1)}M</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-charcoal/70\">Reserve Ratio</div>\n                    <div className=\"text-lg font-bold text-charcoal\">{reserveRatio}%</div>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <div className=\"text-sm text-charcoal/70\">Investments</div>\n                <div className=\"text-lg font-bold mt-2 text-charcoal\">{projectedInvestments}</div>\n              </div>\n              <div>\n                <div className=\"text-sm text-charcoal/70\">Fund Returns</div>\n                <div className=\"grid grid-cols-3 gap-4 mt-2\">\n                  <div>\n                    <div className=\"text-sm font-medium text-charcoal/70\">Projected Fund Value</div>\n                    <div className=\"text-lg font-bold text-charcoal\">${(projectedFundValue / 1000000).toFixed(0)}M</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-charcoal/70\">Gross Multiple</div>\n                    <div className=\"text-lg font-bold text-charcoal\">{grossMultiple}x</div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-charcoal/70\">TVPI</div>\n                    <div className=\"text-lg font-bold text-charcoal\">{tvpi}x</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Label htmlFor=\"view-toggle\" className=\"text-sm font-medium text-charcoal\">View Actual</Label>\n              <Switch \n                id=\"view-toggle\"\n                checked={viewType === \"current\"} \n                onCheckedChange={(checked) => setViewType(checked ? \"current\" : \"construction\")}\n              />\n            </div>\n            <div className=\"flex space-x-2\">\n              <Badge \n                variant={viewType === \"construction\" ? \"default\" : \"secondary\"}\n                className={viewType === \"construction\" ? \"bg-charcoal text-white\" : \"bg-white text-charcoal border-charcoal/20\"}\n              >\n                Construction Forecast\n              </Badge>\n              <Badge \n                variant={viewType === \"current\" ? \"default\" : \"secondary\"}\n                className={viewType === \"current\" ? \"bg-charcoal text-white\" : \"bg-white text-charcoal border-charcoal/20\"}\n              >\n                Current Forecast\n              </Badge>\n            </div>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              className=\"border-charcoal/20 text-charcoal hover:bg-charcoal hover:text-white transition-colors\"\n            >\n              Construction Parameters\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Dashboard Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-7\">\n          <TabsTrigger value=\"fund\">Fund</TabsTrigger>\n          <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n          <TabsTrigger value=\"exits\">Exits</TabsTrigger>\n          <TabsTrigger value=\"rounds\">Rounds</TabsTrigger>\n          <TabsTrigger value=\"lp\">LP</TabsTrigger>\n          <TabsTrigger value=\"insights\">Insights</TabsTrigger>\n          <TabsTrigger value=\"visualizer\">Visualizer</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"fund\" className=\"space-y-6\">\n          <Tabs defaultValue=\"investable-capital\" className=\"space-y-4\">\n            <TabsList>\n              <TabsTrigger value=\"investable-capital\">Investable Capital</TabsTrigger>\n              <TabsTrigger value=\"pacing-analysis\">Pacing Analysis</TabsTrigger>\n              <TabsTrigger value=\"capital-calls\">Capital Calls</TabsTrigger>\n              <TabsTrigger value=\"commitments\">Commitments</TabsTrigger>\n              <TabsTrigger value=\"recycling\">Recycling</TabsTrigger>\n              <TabsTrigger value=\"expenses\">Expenses</TabsTrigger>\n              <TabsTrigger value=\"line-of-credit\">Line of Credit</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"investable-capital\">\n              <InvestableCapitalSummary />\n            </TabsContent>\n            \n            <TabsContent value=\"pacing-analysis\">\n              <PacingAnalysis />\n            </TabsContent>\n            \n            <TabsContent value=\"capital-calls\">\n              <CapitalCalls />\n            </TabsContent>\n            \n            <TabsContent value=\"commitments\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Commitment Analysis</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-500\">LP commitment details and analysis coming soon...</p>\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"recycling\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Exit Proceeds Recycling</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-500\">Recycling analysis and management tools...</p>\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"expenses\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Fund Expenses</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-500\">Expense tracking and budget management...</p>\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"line-of-credit\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Line of Credit</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-500\">Credit facility management and utilization...</p>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </TabsContent>\n\n        <TabsContent value=\"performance\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Fund Performance Analytics</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-500\">Performance metrics and analysis coming soon...</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"exits\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Exit Analysis</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-500\">Exit performance and distribution analysis...</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"rounds\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Round Analysis</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-500\">Investment round tracking and analysis...</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"lp\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Limited Partner Dashboard</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-500\">LP reporting and relationship management...</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"insights\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Portfolio Concentration */}\n            <PortfolioConcentration />\n            \n            {/* Additional Insights Components */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg font-medium\">Performance Insights</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\n                    <div>\n                      <p className=\"font-medium text-blue-900\">Top Performing Sector</p>\n                      <p className=\"text-sm text-blue-700\">SaaS companies showing 3.2x average MOIC</p>\n                    </div>\n                    <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n                    <div>\n                      <p className=\"font-medium text-green-900\">Geographic Performance</p>\n                      <p className=\"text-sm text-green-700\">SF Bay Area leading with 28% portfolio value</p>\n                    </div>\n                    <Building2 className=\"h-5 w-5 text-green-600\" />\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-amber-50 rounded-lg\">\n                    <div>\n                      <p className=\"font-medium text-amber-900\">Stage Distribution</p>\n                      <p className=\"text-sm text-amber-700\">42% concentrated in Seed stage investments</p>\n                    </div>\n                    <Target className=\"h-5 w-5 text-amber-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"visualizer\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Data Visualizer</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-500\">Interactive data visualization tools...</p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\forecasting\\allocation-modeling.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsContent' is defined but never used.","line":8,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsList' is defined but never used.","line":8,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsTrigger' is defined but never used.","line":8,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":15,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'activeStep' is assigned a value but never used.","line":56,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'setActiveStep' is assigned a value but never used.","line":56,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":234,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":234,"endColumn":44}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  TrendingUp, \n  DollarSign, \n  Target, \n  Calendar,\n  BarChart3,\n  PieChart,\n  ArrowRight\n} from \"lucide-react\";\n\ninterface AllocationModelingProps {\n  fundData: {\n    id: string;\n    name: string;\n    size: number;\n    investableCapital: number;\n  };\n}\n\ninterface Allocation {\n  id: string;\n  name: string;\n  type: 'seed' | 'series-a' | 'series-b' | 'growth';\n  totalCapital: number;\n  initialCapital: number;\n  followOnCapital: number;\n  cadenceMonths: number;\n  averageCheckSize: number;\n  graduationRate: number;\n  exitRate: number;\n  averageExitMultiple: number;\n  currentDeployed: number;\n  projectedInvestments: number;\n}\n\ninterface ForecastStep {\n  step: number;\n  title: string;\n  description: string;\n  isComplete: boolean;\n}\n\nexport default function AllocationModeling({ fundData }: AllocationModelingProps) {\n  const [activeStep, setActiveStep] = useState(0);\n\n  // Sample allocation data based on Tactyc methodology\n  const allocations: Allocation[] = [\n    {\n      id: \"seed\",\n      name: \"Seed Investments\",\n      type: \"seed\",\n      totalCapital: 12000000,\n      initialCapital: 8000000,\n      followOnCapital: 4000000,\n      cadenceMonths: 3,\n      averageCheckSize: 500000,\n      graduationRate: 65,\n      exitRate: 25,\n      averageExitMultiple: 8.5,\n      currentDeployed: 3500000,\n      projectedInvestments: 16\n    },\n    {\n      id: \"series-a\",\n      name: \"Series A Investments\", \n      type: \"series-a\",\n      totalCapital: 20000000,\n      initialCapital: 15000000,\n      followOnCapital: 5000000,\n      cadenceMonths: 6,\n      averageCheckSize: 1500000,\n      graduationRate: 75,\n      exitRate: 40,\n      averageExitMultiple: 4.2,\n      currentDeployed: 6000000,\n      projectedInvestments: 10\n    },\n    {\n      id: \"series-b\",\n      name: \"Series B Investments\",\n      type: \"series-b\", \n      totalCapital: 15000000,\n      initialCapital: 12000000,\n      followOnCapital: 3000000,\n      cadenceMonths: 12,\n      averageCheckSize: 3000000,\n      graduationRate: 80,\n      exitRate: 60,\n      averageExitMultiple: 2.8,\n      currentDeployed: 3000000,\n      projectedInvestments: 4\n    },\n    {\n      id: \"growth\",\n      name: \"Growth Investments\",\n      type: \"growth\",\n      totalCapital: 8000000,\n      initialCapital: 6000000,\n      followOnCapital: 2000000,\n      cadenceMonths: 18,\n      averageCheckSize: 2000000,\n      graduationRate: 85,\n      exitRate: 75,\n      averageExitMultiple: 2.1,\n      currentDeployed: 2000000,\n      projectedInvestments: 3\n    }\n  ];\n\n  const forecastSteps: ForecastStep[] = [\n    {\n      step: 1,\n      title: \"Determine Investable Capital\",\n      description: \"Net fees and expenses from committed capital, include exit recycling proceeds\",\n      isComplete: true\n    },\n    {\n      step: 2,\n      title: \"Create Allocations\",\n      description: \"Segment investable capital into Initial and Follow-On allocations by stage\",\n      isComplete: true\n    },\n    {\n      step: 3,\n      title: \"Project Initial Investments\",\n      description: \"Monthly straight-line projections based on allocation cadence\",\n      isComplete: false\n    },\n    {\n      step: 4,\n      title: \"Project Follow-On Investments\",\n      description: \"Weight follow-on checks by graduation rates for probabilistic modeling\",\n      isComplete: false\n    },\n    {\n      step: 5,\n      title: \"Project Exits and Failures\",\n      description: \"Weight exit values by exit rates, assume failures at 0.0x multiple\",\n      isComplete: false\n    },\n    {\n      step: 6,\n      title: \"Compute Return Metrics\",\n      description: \"Calculate proceeds through waterfall to determine IRR, TVPI, and multiples\",\n      isComplete: false\n    }\n  ];\n\n  const totalAllocated = allocations.reduce((sum, alloc) => sum + alloc.totalCapital, 0);\n  const totalDeployed = allocations.reduce((sum, alloc) => sum + alloc.currentDeployed, 0);\n  const deploymentProgress = (totalDeployed / totalAllocated) * 100;\n\n  const getStageColor = (type: string) => {\n    switch (type) {\n      case 'seed': return 'bg-green-500';\n      case 'series-a': return 'bg-blue-500';\n      case 'series-b': return 'bg-purple-500';\n      case 'growth': return 'bg-orange-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const calculateProjectedReturns = (allocation: Allocation) => {\n    const totalInvestments = allocation.projectedInvestments;\n    const successfulExits = totalInvestments * (allocation.exitRate / 100);\n    const projectedExitValue = successfulExits * allocation.averageCheckSize * allocation.averageExitMultiple;\n    const projectedTVPI = projectedExitValue / allocation.totalCapital;\n    return { projectedExitValue, projectedTVPI };\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Fund Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <BarChart3 className=\"h-5 w-5\" />\n            <span>Fund Construction Methodology</span>\n          </CardTitle>\n          <CardDescription>\n            Portfolio construction based on Tactyc forecasting logic\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Fund Size</p>\n              <p className=\"text-2xl font-bold\">${(fundData.size / 1000000).toFixed(0)}M</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Investable Capital</p>\n              <p className=\"text-2xl font-bold\">${(fundData.investableCapital / 1000000).toFixed(0)}M</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Allocated</p>\n              <p className=\"text-2xl font-bold\">${(totalAllocated / 1000000).toFixed(0)}M</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Deployed</p>\n              <p className=\"text-2xl font-bold\">${(totalDeployed / 1000000).toFixed(1)}M</p>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span>Deployment Progress</span>\n              <span>{deploymentProgress.toFixed(1)}%</span>\n            </div>\n            <Progress value={deploymentProgress} className=\"h-2\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Construction Steps */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Forecasting Methodology Steps</CardTitle>\n          <CardDescription>Six-step process for portfolio construction modeling</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {forecastSteps.map((step, index) => (\n              <div key={step.step} className=\"flex items-start space-x-4\">\n                <div className={`\n                  w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium\n                  ${step.isComplete ? 'bg-green-500 text-white' : 'bg-gray-200 text-gray-600'}\n                `}>\n                  {step.step}\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-medium\">{step.title}</h4>\n                  <p className=\"text-sm text-muted-foreground\">{step.description}</p>\n                </div>\n                {step.isComplete && (\n                  <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                    Complete\n                  </Badge>\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Allocation Analysis */}\n      <div className=\"grid gap-4\">\n        {allocations.map((allocation) => {\n          const { projectedExitValue, projectedTVPI } = calculateProjectedReturns(allocation);\n          const deploymentRate = (allocation.currentDeployed / allocation.totalCapital) * 100;\n\n          return (\n            <Card key={allocation.id}>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-4 h-4 rounded ${getStageColor(allocation.type)}`} />\n                    <CardTitle className=\"text-lg\">{allocation.name}</CardTitle>\n                  </div>\n                  <Badge variant=\"outline\">\n                    {allocation.projectedInvestments} investments\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 mb-4\">\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Total Capital</p>\n                    <p className=\"font-semibold\">${(allocation.totalCapital / 1000000).toFixed(1)}M</p>\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Initial Capital</p>\n                    <p className=\"font-semibold\">${(allocation.initialCapital / 1000000).toFixed(1)}M</p>\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Follow-On Capital</p>\n                    <p className=\"font-semibold\">${(allocation.followOnCapital / 1000000).toFixed(1)}M</p>\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Avg Check Size</p>\n                    <p className=\"font-semibold\">${(allocation.averageCheckSize / 1000).toFixed(0)}k</p>\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Graduation Rate</p>\n                    <p className=\"font-semibold\">{allocation.graduationRate}%</p>\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Exit Rate</p>\n                    <p className=\"font-semibold\">{allocation.exitRate}%</p>\n                  </div>\n                </div>\n\n                <Separator className=\"my-4\" />\n\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Currently Deployed</p>\n                    <p className=\"font-semibold\">${(allocation.currentDeployed / 1000000).toFixed(1)}M</p>\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Deployment Rate</p>\n                    <p className=\"font-semibold\">{deploymentRate.toFixed(1)}%</p>\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Projected Exit Value</p>\n                    <p className=\"font-semibold\">${(projectedExitValue / 1000000).toFixed(1)}M</p>\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-muted-foreground\">Projected TVPI</p>\n                    <p className=\"font-semibold\">{projectedTVPI.toFixed(2)}x</p>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Capital Deployment</span>\n                    <span>{deploymentRate.toFixed(1)}%</span>\n                  </div>\n                  <Progress value={deploymentRate} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-center space-x-4\">\n        <Button variant=\"outline\">\n          <PieChart className=\"h-4 w-4 mr-2\" />\n          View Allocation Chart\n        </Button>\n        <Button>\n          <ArrowRight className=\"h-4 w-4 mr-2\" />\n          Run Forecast Model\n        </Button>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\forecasting\\construction-actual-comparison.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'XAxis' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'YAxis' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'CartesianGrid' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'ResponsiveContainer' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'BarChart' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Bar' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":18,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'pacingData' is assigned a value but never used.","line":152,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":152,"endColumn":19}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { LineChart } from 'recharts/es6/chart/LineChart';\nimport { Line } from 'recharts/es6/cartesian/Line';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  ArrowUp, \n  ArrowDown,\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  Users,\n  Target,\n  BarChart3,\n  Activity\n} from \"lucide-react\";\n\nexport function ConstructionActualComparison() {\n  // Sample data matching your Tactyc screenshots\n  const comparisonData = {\n    initialChecks: [\n      { \n        entryRound: \"Seed\", \n        constructionAverage: 1250000, \n        actualAverage: 1110660, \n        difference: -139340, \n        differencePercent: -11.15 \n      },\n      { \n        entryRound: \"Series A\", \n        constructionAverage: 2200000, \n        actualAverage: 1824540, \n        difference: -375460, \n        differencePercent: -17.07 \n      },\n      { \n        entryRound: \"Pre-Seed\", \n        constructionAverage: 500000, \n        actualAverage: 1500000, \n        difference: 1000000, \n        differencePercent: 200.00 \n      }\n    ],\n    followOnReserves: [\n      { \n        entryRound: \"Seed\", \n        constructionAverage: 2100000, \n        actualAverage: 1850000, \n        difference: -250000, \n        differencePercent: -11.90 \n      },\n      { \n        entryRound: \"Series A\", \n        constructionAverage: 3200000, \n        actualAverage: 2750000, \n        difference: -450000, \n        differencePercent: -14.06 \n      },\n      { \n        entryRound: \"Pre-Seed\", \n        constructionAverage: 800000, \n        actualAverage: 1200000, \n        difference: 400000, \n        differencePercent: 50.00 \n      }\n    ],\n    roundSizes: [\n      { \n        entryRound: \"Seed\", \n        constructionAverage: 8500000, \n        actualAverage: 9200000, \n        difference: 700000, \n        differencePercent: 8.24 \n      },\n      { \n        entryRound: \"Series A\", \n        constructionAverage: 15000000, \n        actualAverage: 14200000, \n        difference: -800000, \n        differencePercent: -5.33 \n      },\n      { \n        entryRound: \"Pre-Seed\", \n        constructionAverage: 3000000, \n        actualAverage: 4500000, \n        difference: 1500000, \n        differencePercent: 50.00 \n      }\n    ],\n    preMoneyValuations: [\n      { \n        entryRound: \"Seed\", \n        constructionAverage: 13500000, \n        actualAverage: 16456322, \n        difference: 2956322, \n        differencePercent: 21.90 \n      },\n      { \n        entryRound: \"Series A\", \n        constructionAverage: 39600000, \n        actualAverage: 37389960, \n        difference: -2210040, \n        differencePercent: -5.58 \n      },\n      { \n        entryRound: \"Pre-Seed\", \n        constructionAverage: 7000000, \n        actualAverage: 15000000, \n        difference: 8000000, \n        differencePercent: 114.29 \n      }\n    ],\n    postMoneyValuations: [\n      { \n        entryRound: \"Seed\", \n        constructionAverage: 22000000, \n        actualAverage: 25656322, \n        difference: 3656322, \n        differencePercent: 16.62 \n      },\n      { \n        entryRound: \"Series A\", \n        constructionAverage: 54600000, \n        actualAverage: 51589960, \n        difference: -3010040, \n        differencePercent: -5.51 \n      },\n      { \n        entryRound: \"Pre-Seed\", \n        constructionAverage: 10000000, \n        actualAverage: 19500000, \n        difference: 9500000, \n        differencePercent: 95.00 \n      }\n    ]\n  };\n\n  // Investment pacing over time data\n  const pacingData = [\n    { period: \"2021\", construction: 86, actual: 21, currentForecast: 79 },\n    { period: \"2022\", construction: 86, actual: 35, currentForecast: 79 },\n    { period: \"2023\", construction: 86, actual: 21, currentForecast: 79 },\n    { period: \"Total\", construction: 86, actual: 21, currentForecast: 79 }\n  ];\n\n  // Entry round breakdown\n  const entryRoundData = [\n    { round: \"Pre-Seed\", construction: 32, actual: 2, projected: 24, remaining: 22 },\n    { round: \"Seed\", construction: 30, actual: 14, projected: 34, remaining: 20 },\n    { round: \"Series A\", construction: 24, actual: 5, projected: 21, remaining: 16 }\n  ];\n\n  const formatCurrency = (value: number) => {\n    if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;\n    if (value >= 1000) return `$${(value / 1000).toFixed(0)}K`;\n    return `$${value.toLocaleString()}`;\n  };\n\n  const formatPercent = (value: number) => {\n    if (value > 0) return `+${value.toFixed(2)}%`;\n    return `${value.toFixed(2)}%`;\n  };\n\n  const getDifferenceIcon = (value: number) => {\n    return value > 0 ? <ArrowUp className=\"h-3 w-3 text-green-600\" /> : <ArrowDown className=\"h-3 w-3 text-red-600\" />;\n  };\n\n  const getDifferenceColor = (value: number) => {\n    return value > 0 ? \"text-green-600\" : \"text-red-600\";\n  };\n\n  const ComparisonTable = ({ data, title, description }: { data: any[], title: string, description: string }) => (\n    <Card>\n      <CardHeader>\n        <CardTitle>{title}</CardTitle>\n        <CardDescription>{description}</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full border-collapse\">\n            <thead>\n              <tr className=\"border-b\">\n                <th className=\"text-left p-3 font-medium\">Entry Round</th>\n                <th className=\"text-center p-3 font-medium\">Construction Average</th>\n                <th className=\"text-center p-3 font-medium\">Actual Average</th>\n                <th className=\"text-center p-3 font-medium\">Difference</th>\n                <th className=\"text-center p-3 font-medium\">Difference (%)</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data.map((item, index) => (\n                <tr key={index} className=\"border-b hover:bg-gray-50\">\n                  <td className=\"p-3 font-medium\">{item.entryRound}</td>\n                  <td className=\"text-center p-3\">{formatCurrency(item.constructionAverage)}</td>\n                  <td className=\"text-center p-3\">{formatCurrency(item.actualAverage)}</td>\n                  <td className=\"text-center p-3\">\n                    <div className=\"flex items-center justify-center space-x-1\">\n                      {getDifferenceIcon(item.difference)}\n                      <span className={getDifferenceColor(item.difference)}>\n                        {formatCurrency(Math.abs(item.difference))}\n                      </span>\n                    </div>\n                  </td>\n                  <td className=\"text-center p-3\">\n                    <div className=\"flex items-center justify-center space-x-1\">\n                      {getDifferenceIcon(item.differencePercent)}\n                      <span className={getDifferenceColor(item.differencePercent)}>\n                        ({formatPercent(item.differencePercent)})\n                      </span>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Deal Pacing Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <BarChart3 className=\"h-5 w-5\" />\n            <span>Number of Initial Investments, by Entry Round</span>\n          </CardTitle>\n          <CardDescription>Construction vs Actual vs Projected investment pacing</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-3 gap-4 mb-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-gray-600\">86</div>\n              <div className=\"text-sm text-muted-foreground\">Construction</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-600\">21</div>\n              <div className=\"text-sm text-muted-foreground\">Actual</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-green-600\">79</div>\n              <div className=\"text-sm text-muted-foreground\">Projected</div>\n            </div>\n          </div>\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full border-collapse\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left p-3 font-medium\">Entry Round</th>\n                  <th className=\"text-center p-3 font-medium\">Construction</th>\n                  <th className=\"text-center p-3 font-medium\">Actual</th>\n                  <th className=\"text-center p-3 font-medium\">Current Forecast</th>\n                  <th className=\"text-center p-3 font-medium\">Remaining</th>\n                </tr>\n              </thead>\n              <tbody>\n                {entryRoundData.map((item, index) => (\n                  <tr key={index} className=\"border-b hover:bg-gray-50\">\n                    <td className=\"p-3 font-medium\">{item.round}</td>\n                    <td className=\"text-center p-3\">{item.construction}</td>\n                    <td className=\"text-center p-3\">{item.actual}</td>\n                    <td className=\"text-center p-3\">{item.projected}</td>\n                    <td className=\"text-center p-3\">\n                      <div className=\"flex items-center justify-center\">\n                        <ArrowUp className=\"h-3 w-3 text-blue-600 mr-1\" />\n                        <span className=\"text-blue-600 font-medium\">{item.remaining}</span>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n                <tr className=\"border-b font-bold bg-gray-50\">\n                  <td className=\"p-3\">Total</td>\n                  <td className=\"text-center p-3\">86</td>\n                  <td className=\"text-center p-3\">21</td>\n                  <td className=\"text-center p-3\">79</td>\n                  <td className=\"text-center p-3\">58</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Detailed Comparison Analysis */}\n      <Tabs defaultValue=\"initial-checks\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"initial-checks\">Initial Checks</TabsTrigger>\n          <TabsTrigger value=\"follow-on-reserves\">Follow-On Reserves</TabsTrigger>\n          <TabsTrigger value=\"round-sizes\">Round Sizes</TabsTrigger>\n          <TabsTrigger value=\"pre-money\">Pre-Money Valuations</TabsTrigger>\n          <TabsTrigger value=\"post-money\">Post-Money Valuations</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"initial-checks\">\n          <ComparisonTable \n            data={comparisonData.initialChecks}\n            title=\"Construction vs. Actual Comparison, By Entry Stage\"\n            description=\"Average initial check size per deal in actual investments compared between construction plan and actual investments.\"\n          />\n        </TabsContent>\n\n        <TabsContent value=\"follow-on-reserves\">\n          <ComparisonTable \n            data={comparisonData.followOnReserves}\n            title=\"Follow-On Reserves Comparison\"\n            description=\"Average follow-on reserve allocation per deal comparing construction plan with actual reserve deployment.\"\n          />\n        </TabsContent>\n\n        <TabsContent value=\"round-sizes\">\n          <ComparisonTable \n            data={comparisonData.roundSizes}\n            title=\"Round Sizes Comparison\"\n            description=\"Average total round size for deals comparing construction assumptions with actual market conditions.\"\n          />\n        </TabsContent>\n\n        <TabsContent value=\"pre-money\">\n          <ComparisonTable \n            data={comparisonData.preMoneyValuations}\n            title=\"Pre-Money Valuations Comparison\"\n            description=\"Average pre-money valuation per deal of actual investments compared between construction plan and actual investments.\"\n          />\n        </TabsContent>\n\n        <TabsContent value=\"post-money\">\n          <ComparisonTable \n            data={comparisonData.postMoneyValuations}\n            title=\"Post-Money Valuations Comparison\"\n            description=\"Average post-money valuation per deal comparing construction assumptions with actual investment terms.\"\n          />\n        </TabsContent>\n      </Tabs>\n\n      {/* Key Insights */}\n      <Card className=\"border-blue-200 bg-blue-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2 text-blue-900\">\n            <Activity className=\"h-5 w-5\" />\n            <span>Course Correction Insights</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <h4 className=\"font-medium text-blue-900 mb-2\">Market Conditions</h4>\n              <ul className=\"text-sm text-blue-800 space-y-1\">\n                <li>ΓÇó Pre-Seed valuations 114% higher than construction</li>\n                <li>ΓÇó Series A check sizes 17% below target</li>\n                <li>ΓÇó Overall deployment pacing 25% of target</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-blue-900 mb-2\">Recommended Actions</h4>\n              <ul className=\"text-sm text-blue-800 space-y-1\">\n                <li>ΓÇó Increase check sizes for Series A deals</li>\n                <li>ΓÇó Accelerate deal sourcing and execution</li>\n                <li>ΓÇó Adjust valuation expectations for current market</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\forecasting\\investable-capital-summary.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":15,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":15,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":40}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DollarSign, TrendingUp, Target } from \"lucide-react\";\n\ninterface InvestableCapitalData {\n  category: string;\n  committed: number;\n  investable: number;\n  deployedPlanned: number;\n  remaining: number;\n  actual: number;\n  projected: number;\n  fundValue: number;\n}\n\nexport default function InvestableCapitalSummary() {\n  // Data based on your Tactyc screenshot\n  const capitalData: InvestableCapitalData = {\n    category: \"Fund Capital\",\n    committed: 150000000,\n    investable: 140200000,\n    deployedPlanned: 52144483,\n    remaining: 88055517,\n    actual: 24000000,\n    projected: 95000000,\n    fundValue: 97716532\n  };\n\n  const allocationData = [\n    {\n      round: \"Initial Investments\",\n      deployed: 40000000,\n      planned: 60000000,\n      total: 100000000,\n      color: \"#3b82f6\"\n    },\n    {\n      round: \"Follow-On Investments\", \n      deployed: 12000000,\n      planned: 45000000,\n      total: 57000000,\n      color: \"#10b981\"\n    },\n    {\n      round: \"Remaining\",\n      deployed: 0,\n      planned: 0,\n      total: 33000000,\n      color: \"#6b7280\"\n    }\n  ];\n\n  const deploymentStatus = [\n    {\n      category: \"Deployed\",\n      amount: capitalData.actual,\n      percentage: (capitalData.actual / capitalData.investable) * 100\n    },\n    {\n      category: \"Planned\",\n      amount: capitalData.remaining - capitalData.actual,\n      percentage: ((capitalData.remaining - capitalData.actual) / capitalData.investable) * 100\n    },\n    {\n      category: \"Remaining\",\n      amount: capitalData.investable - capitalData.remaining,\n      percentage: ((capitalData.investable - capitalData.remaining) / capitalData.investable) * 100\n    }\n  ];\n\n  const formatCurrency = (value: number) => {\n    if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;\n    if (value >= 1000) return `$${(value / 1000).toFixed(0)}K`;\n    return `$${value.toLocaleString()}`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <DollarSign className=\"h-5 w-5\" />\n            <span>Investable Capital Summary</span>\n          </CardTitle>\n          <CardDescription>\n            Summary of investable capital, net of fees and expenses. Breakdown of investable capital by strategy and rounds.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"space-y-2\">\n              <div className=\"text-sm text-muted-foreground\">Committed</div>\n              <div className=\"text-2xl font-bold\">{formatCurrency(capitalData.committed)}</div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"text-sm text-muted-foreground\">Investable</div>\n              <div className=\"text-2xl font-bold\">{formatCurrency(capitalData.investable)}</div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"text-sm text-muted-foreground\">Deployed + Planned</div>\n              <div className=\"text-2xl font-bold\">{formatCurrency(capitalData.deployedPlanned)}</div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"text-sm text-muted-foreground\">Remaining</div>\n              <div className=\"text-2xl font-bold\">{formatCurrency(capitalData.remaining)}</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Investable Capital Allocation */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Investable Capital Allocation</CardTitle>\n            <CardDescription>By Entry Round</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={allocationData} layout=\"horizontal\">\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis type=\"number\" tickFormatter={(value) => `$${(value / 1000000).toFixed(0)}M`} />\n                  <YAxis dataKey=\"round\" type=\"category\" width={100} />\n                  <Tooltip formatter={(value: number) => [formatCurrency(value), '']} />\n                  <Bar dataKey=\"total\" fill=\"#3b82f6\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Capital Deployment Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Capital Deployment Status</CardTitle>\n            <CardDescription>Current vs Future Deployment</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {deploymentStatus.map((item, index) => (\n                <div key={index} className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">{item.category}</span>\n                    <span className=\"text-sm\">{formatCurrency(item.amount)}</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className={`h-2 rounded-full ${\n                        index === 0 ? 'bg-blue-600' : \n                        index === 1 ? 'bg-green-600' : 'bg-gray-400'\n                      }`}\n                      style={{ width: `${item.percentage}%` }}\n                    />\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {item.percentage.toFixed(1)}% of investable capital\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Fund Performance */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Fund Performance</CardTitle>\n            <CardDescription>Current Fund Value</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold\">{formatCurrency(capitalData.fundValue)}</div>\n                <div className=\"text-sm text-muted-foreground\">Current Fund Value</div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                  <div className=\"text-lg font-bold\">1.04x</div>\n                  <div className=\"text-xs text-muted-foreground\">Est. Actual TVPI</div>\n                </div>\n                <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                  <div className=\"text-lg font-bold\">3.55x</div>\n                  <div className=\"text-xs text-muted-foreground\">Projected TVPI</div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span>Gross MOIC</span>\n                  <span className=\"font-medium\">2.84x</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span>IRR</span>\n                  <span className=\"font-medium\">24.5%</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span>DPI</span>\n                  <span className=\"font-medium\">0.15x</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\forecasting\\portfolio-flow-chart.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ArrowDown' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":102,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":102,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'clearTimeout' is not defined.","line":116,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":116,"endColumn":32}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'stages' array makes the dependencies of useEffect Hook (at line 120) change on every render. To fix this, wrap the initialization of 'stages' in its own useMemo() Hook.","line":56,"column":9,"nodeType":"VariableDeclarator","endLine":97,"endColumn":4,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  ArrowRight, \n  ArrowDown,\n  TrendingUp,\n  Target,\n  Play,\n  Pause,\n  RotateCcw\n} from \"lucide-react\";\n\ninterface PortfolioFlowChartProps {\n  fundData: {\n    id: string;\n    name: string;\n    totalDeals: number;\n    monthlyInvestmentRate: number;\n  };\n}\n\ninterface Stage {\n  id: string;\n  name: string;\n  color: string;\n  graduationRate: number;\n  exitRate: number;\n  currentDeals: number;\n  monthlyGraduations: number;\n  monthlyExits: number;\n}\n\ninterface FlowStep {\n  month: number;\n  preSeedInvestments: number;\n  seedGraduations: number;\n  seriesAGraduations: number;\n  seriesBGraduations: number;\n  totalExits: number;\n}\n\nexport default function PortfolioFlowChart({ fundData }: PortfolioFlowChartProps) {\n  const [currentMonth, setCurrentMonth] = useState(1);\n  const [isRunning, setIsRunning] = useState(false);\n  const [flowData, setFlowData] = useState<FlowStep[]>([]);\n\n  const stages: Stage[] = [\n    {\n      id: \"pre-seed\",\n      name: \"Pre-Seed\",\n      color: \"bg-gray-500\",\n      graduationRate: 35, // 35% graduate to Seed\n      exitRate: 0, // No exits at pre-seed\n      currentDeals: 54,\n      monthlyGraduations: 0.5,\n      monthlyExits: 0\n    },\n    {\n      id: \"seed\",\n      name: \"Seed\", \n      color: \"bg-blue-500\",\n      graduationRate: 50, // 50% graduate to Series A\n      exitRate: 5, // 5% exit at seed\n      currentDeals: 18,\n      monthlyGraduations: 0.25,\n      monthlyExits: 0.05\n    },\n    {\n      id: \"series-a\",\n      name: \"Series A\",\n      color: \"bg-green-500\", \n      graduationRate: 60, // 60% graduate to Series B\n      exitRate: 15, // 15% exit at Series A\n      currentDeals: 9,\n      monthlyGraduations: 0.15,\n      monthlyExits: 0.15\n    },\n    {\n      id: \"series-b\",\n      name: \"Series B\",\n      color: \"bg-purple-500\",\n      graduationRate: 0, // Final stage\n      exitRate: 25, // 25% exit at Series B\n      currentDeals: 5,\n      monthlyGraduations: 0,\n      monthlyExits: 0.25\n    }\n  ];\n\n  // Simulate portfolio flow over time\n  useEffect(() => {\n    if (isRunning && currentMonth <= 36) {\n      const timer = setTimeout(() => {\n        const newStep: FlowStep = {\n          month: currentMonth,\n          preSeedInvestments: fundData.monthlyInvestmentRate,\n          seedGraduations: stages[0].monthlyGraduations,\n          seriesAGraduations: stages[1].monthlyGraduations, \n          seriesBGraduations: stages[2].monthlyGraduations,\n          totalExits: stages.reduce((sum, stage) => sum + stage.monthlyExits, 0)\n        };\n        \n        setFlowData(prev => [...prev, newStep]);\n        setCurrentMonth(prev => prev + 1);\n      }, 500); // 500ms per month for demo\n\n      return () => clearTimeout(timer);\n    } else if (currentMonth > 36) {\n      setIsRunning(false);\n    }\n  }, [currentMonth, isRunning, fundData.monthlyInvestmentRate, stages]);\n\n  const resetFlow = () => {\n    setCurrentMonth(1);\n    setFlowData([]);\n    setIsRunning(false);\n  };\n\n  const toggleFlow = () => {\n    setIsRunning(!isRunning);\n  };\n\n  const calculateCumulativeStats = () => {\n    const totalInvested = flowData.reduce((sum, step) => sum + step.preSeedInvestments, 0);\n    const totalExits = flowData.reduce((sum, step) => sum + step.totalExits, 0);\n    const totalGraduations = flowData.reduce((sum, step) => \n      sum + step.seedGraduations + step.seriesAGraduations + step.seriesBGraduations, 0);\n    \n    return { totalInvested, totalExits, totalGraduations };\n  };\n\n  const { totalInvested, totalExits, totalGraduations } = calculateCumulativeStats();\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header Controls */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                <span>Portfolio Construction Flow</span>\n              </CardTitle>\n              <CardDescription>\n                Monthly investment cadence and stage progression modeling\n              </CardDescription>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={resetFlow}>\n                <RotateCcw className=\"h-4 w-4 mr-2\" />\n                Reset\n              </Button>\n              <Button onClick={toggleFlow} size=\"sm\">\n                {isRunning ? <Pause className=\"h-4 w-4 mr-2\" /> : <Play className=\"h-4 w-4 mr-2\" />}\n                {isRunning ? 'Pause' : 'Start'} Flow\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Current Month</p>\n              <p className=\"text-2xl font-bold\">{currentMonth}/36</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Invested</p>\n              <p className=\"text-2xl font-bold\">{totalInvested.toFixed(1)}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Graduations</p>\n              <p className=\"text-2xl font-bold\">{totalGraduations.toFixed(1)}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Exits</p>\n              <p className=\"text-2xl font-bold\">{totalExits.toFixed(2)}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Portfolio Flow Diagram */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Investment Flow Visualization</CardTitle>\n          <CardDescription>\n            {fundData.totalDeals} pre-seed deals ΓÇó {fundData.monthlyInvestmentRate} deals/month ΓÇó Repeated for 36 months\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-8\">\n            {/* Month Indicator */}\n            <div className=\"text-center\">\n              <Badge variant=\"outline\" className=\"text-lg px-4 py-2\">\n                Month {currentMonth} Investment\n              </Badge>\n            </div>\n\n            {/* Flow Diagram */}\n            <div className=\"relative\">\n              {/* Stages Row */}\n              <div className=\"grid grid-cols-4 gap-6\">\n                {stages.map((stage, index) => (\n                  <div key={stage.id} className=\"text-center space-y-4\">\n                    {/* Stage Header */}\n                    <div>\n                      <h3 className=\"font-semibold text-lg\">{stage.name}</h3>\n                      {index < stages.length - 1 && (\n                        <div className=\"text-sm text-muted-foreground mt-1\">\n                          <span className=\"text-blue-600\">{stage.name} Graduation %</span>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Stage Card */}\n                    <Card className=\"border-2 hover:shadow-md transition-shadow\">\n                      <CardContent className=\"p-4\">\n                        <div className={`w-full h-16 ${stage.color} rounded-lg flex items-center justify-center text-white font-bold text-lg mb-3`}>\n                          {index === 0 ? `${fundData.monthlyInvestmentRate} deals` : \n                           index === stages.length - 1 ? `${stage.monthlyExits.toFixed(2)} exits` :\n                           `${stage.monthlyGraduations.toFixed(2)} grads`}\n                        </div>\n\n                        <div className=\"space-y-2 text-sm\">\n                          {index < stages.length - 1 && (\n                            <div className=\"text-center\">\n                              <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                                {stage.graduationRate}% grad rate\n                              </Badge>\n                            </div>\n                          )}\n                          \n                          {stage.exitRate > 0 && (\n                            <div className=\"text-center\">\n                              <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                                {stage.exitRate}% exit rate\n                              </Badge>\n                            </div>\n                          )}\n\n                          <div className=\"text-center pt-2\">\n                            <p className=\"text-xs text-muted-foreground\">Current Portfolio</p>\n                            <p className=\"font-semibold\">{stage.currentDeals} companies</p>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    {/* Arrow to next stage */}\n                    {index < stages.length - 1 && (\n                      <div className=\"flex justify-center\">\n                        <ArrowRight className=\"h-6 w-6 text-muted-foreground\" />\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n\n              {/* Timeline Visualization */}\n              <div className=\"mt-8 pt-6 border-t\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h4 className=\"font-semibold\">36-Month Investment Cycle</h4>\n                  <Progress value={(currentMonth / 36) * 100} className=\"w-1/3 h-2\" />\n                </div>\n\n                <div className=\"grid grid-cols-12 gap-1\">\n                  {Array.from({ length: 36 }, (_, i) => (\n                    <div \n                      key={i}\n                      className={`h-8 rounded flex items-center justify-center text-xs font-medium ${\n                        i + 1 <= currentMonth ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-600'\n                      }`}\n                    >\n                      {i + 1}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Flow Statistics */}\n      {flowData.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Portfolio Flow Statistics</CardTitle>\n            <CardDescription>Cumulative metrics from {flowData.length} months of investments</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{totalInvested.toFixed(1)}</div>\n                <div className=\"text-sm text-muted-foreground\">Total Deals Invested</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{totalGraduations.toFixed(1)}</div>\n                <div className=\"text-sm text-muted-foreground\">Total Graduations</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">{totalExits.toFixed(2)}</div>\n                <div className=\"text-sm text-muted-foreground\">Total Exits</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-orange-600\">\n                  {totalInvested > 0 ? ((totalExits / totalInvested) * 100).toFixed(1) : 0}%\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Exit Rate</div>\n              </div>\n            </div>\n\n            <Separator className=\"my-6\" />\n\n            {/* Recent Flow Data */}\n            <div className=\"space-y-2\">\n              <h5 className=\"font-medium\">Recent Monthly Activity</h5>\n              <div className=\"max-h-32 overflow-y-auto space-y-1\">\n                {flowData.slice(-6).reverse().map((step) => (\n                  <div key={step.month} className=\"flex justify-between items-center text-sm p-2 bg-gray-50 rounded\">\n                    <span className=\"font-medium\">Month {step.month}</span>\n                    <div className=\"flex space-x-4\">\n                      <span className=\"text-blue-600\">{step.preSeedInvestments} invested</span>\n                      <span className=\"text-green-600\">{step.totalExits.toFixed(2)} exits</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\forecasting\\portfolio-insights.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'totalInvested' is assigned a value but never used.","line":85,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":85,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { PieChart } from 'recharts/es6/chart/PieChart';\nimport { Pie } from 'recharts/es6/polar/Pie';\nimport { Cell } from 'recharts/es6/component/Cell';\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Building2, TrendingUp, Users } from \"lucide-react\";\n\ninterface CoInvestorData {\n  name: string;\n  amount: number;\n  deals: number;\n  color: string;\n}\n\ninterface SectorMOIC {\n  sector: string;\n  moic: number;\n}\n\nexport default function PortfolioInsights() {\n  // Sample data based on your Tactyc screenshots\n  const coInvestorData: CoInvestorData[] = [\n    {\n      name: \"Andreessen Horowitz\",\n      amount: 4059371,\n      deals: 8,\n      color: \"#3b82f6\"\n    },\n    {\n      name: \"Sequoia Capital\",\n      amount: 10596400,\n      deals: 12,\n      color: \"#10b981\"\n    },\n    {\n      name: \"General Catalyst\",\n      amount: 7500000,\n      deals: 6,\n      color: \"#f59e0b\"\n    },\n    {\n      name: \"Benchmark Capital\",\n      amount: 4176131,\n      deals: 5,\n      color: \"#ef4444\"\n    },\n    {\n      name: \"Others\",\n      amount: 15000000,\n      deals: 25,\n      color: \"#6b7280\"\n    }\n  ];\n\n  const sectorMOICData: SectorMOIC[] = [\n    { sector: \"Enterprise Software\", moic: 2.84 },\n    { sector: \"Consumer\", moic: 2.64 },\n    { sector: \"Fintech\", moic: 1.94 },\n    { sector: \"Healthcare\", moic: 1.84 },\n    { sector: \"AI/ML\", moic: 1.68 },\n    { sector: \"Developer Tools\", moic: 1.48 },\n    { sector: \"Infrastructure\", moic: 1.30 },\n    { sector: \"Biotech\", moic: 1.26 },\n    { sector: \"Hardware\", moic: 1.24 },\n    { sector: \"Crypto\", moic: 1.06 }\n  ];\n\n  const formatCurrency = (value: number) => {\n    if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;\n    if (value >= 1000) return `$${(value / 1000).toFixed(0)}K`;\n    return `$${value.toLocaleString()}`;\n  };\n\n  const totalInvested = coInvestorData.reduce((sum, item) => sum + item.amount, 0);\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Building2 className=\"h-5 w-5\" />\n            <span>Portfolio Insights and Performance</span>\n          </CardTitle>\n          <CardDescription>\n            Analysis of co-investments and sector performance\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Co-investor Analysis */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Example: Which funds have we co-invested with the most?</h3>\n              <div className=\"text-sm text-muted-foreground mb-4\">Sum: Invested To Date</div>\n              \n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={coInvestorData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={60}\n                      outerRadius={120}\n                      paddingAngle={2}\n                      dataKey=\"amount\"\n                    >\n                      {coInvestorData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value: number) => [formatCurrency(value), 'Invested']} />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n\n              <div className=\"space-y-2\">\n                {coInvestorData.map((investor, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-2 rounded-lg bg-gray-50\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div \n                        className=\"w-3 h-3 rounded-full\"\n                        style={{ backgroundColor: investor.color }}\n                      />\n                      <span className=\"font-medium\">{investor.name}</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-bold\">{formatCurrency(investor.amount)}</div>\n                      <div className=\"text-xs text-muted-foreground\">{investor.deals} deals</div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Sector MOIC Analysis */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold\">Example: Average MOIC by sector</h3>\n              <div className=\"text-sm text-muted-foreground mb-4\">Mean Current MOIC</div>\n              \n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={sectorMOICData} layout=\"horizontal\">\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis type=\"number\" domain={[0, 3]} />\n                    <YAxis \n                      dataKey=\"sector\" \n                      type=\"category\" \n                      width={120}\n                      fontSize={12}\n                    />\n                    <Tooltip \n                      formatter={(value: number) => [`${value.toFixed(2)}x`, 'MOIC']}\n                    />\n                    <Bar \n                      dataKey=\"moic\" \n                      fill=\"#3b82f6\"\n                      radius={[0, 4, 4, 0]}\n                    />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n          </div>\n\n          {/* Key Insights */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n            <Card className=\"p-4\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <Users className=\"h-4 w-4 text-blue-600\" />\n                <span className=\"font-medium\">Top Co-investor</span>\n              </div>\n              <div className=\"text-2xl font-bold\">Sequoia Capital</div>\n              <div className=\"text-sm text-muted-foreground\">\n                {formatCurrency(coInvestorData.find(inv => inv.name === \"Sequoia Capital\")?.amount || 0)} across 12 deals\n              </div>\n            </Card>\n\n            <Card className=\"p-4\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                <span className=\"font-medium\">Best Sector</span>\n              </div>\n              <div className=\"text-2xl font-bold\">Enterprise Software</div>\n              <div className=\"text-sm text-muted-foreground\">\n                {sectorMOICData[0].moic.toFixed(2)}x average MOIC\n              </div>\n            </Card>\n\n            <Card className=\"p-4\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <Building2 className=\"h-4 w-4 text-purple-600\" />\n                <span className=\"font-medium\">Portfolio Size</span>\n              </div>\n              <div className=\"text-2xl font-bold\">45 companies</div>\n              <div className=\"text-sm text-muted-foreground\">\n                Across 10 sectors\n              </div>\n            </Card>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\forecasting\\projected-performance.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":18,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { LineChart } from 'recharts/es6/chart/LineChart';\nimport { Line } from 'recharts/es6/cartesian/Line';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { Legend } from 'recharts/es6/component/Legend';\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ConstructionActualComparison } from \"./construction-actual-comparison\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { TrendingUp, Calendar } from \"lucide-react\";\n\ninterface PerformanceData {\n  month: string;\n  date: string;\n  constructionProjection: number;\n  actual: number;\n  currentProjection: number;\n  tvpiConstruction: number;\n  tvpiActual: number;\n  tvpiCurrent: number;\n}\n\nexport default function ProjectedPerformance() {\n  const [entryRound, setEntryRound] = useState<string>(\"all-rounds\");\n  const [timePeriod, setTimePeriod] = useState<string>(\"monthly\");\n\n  // Sample data based on your Tactyc screenshots\n  const performanceData: PerformanceData[] = [\n    { month: \"Jan 2022\", date: \"2022-01\", constructionProjection: 10, actual: 8, currentProjection: 10, tvpiConstruction: 1.0, tvpiActual: 1.0, tvpiCurrent: 1.0 },\n    { month: \"Mar 2022\", date: \"2022-03\", constructionProjection: 12, actual: 11, currentProjection: 12, tvpiConstruction: 1.1, tvpiActual: 1.05, tvpiCurrent: 1.1 },\n    { month: \"Jun 2022\", date: \"2022-06\", constructionProjection: 15, actual: 14, currentProjection: 15, tvpiConstruction: 1.2, tvpiActual: 1.15, tvpiCurrent: 1.2 },\n    { month: \"Sep 2022\", date: \"2022-09\", constructionProjection: 18, actual: 16, currentProjection: 18, tvpiConstruction: 1.4, tvpiActual: 1.25, tvpiCurrent: 1.35 },\n    { month: \"Dec 2022\", date: \"2022-12\", constructionProjection: 22, actual: 19, currentProjection: 21, tvpiConstruction: 1.6, tvpiActual: 1.35, tvpiCurrent: 1.5 },\n    { month: \"Mar 2023\", date: \"2023-03\", constructionProjection: 26, actual: 22, currentProjection: 25, tvpiConstruction: 1.8, tvpiActual: 1.45, tvpiCurrent: 1.65 },\n    { month: \"Jun 2023\", date: \"2023-06\", constructionProjection: 30, actual: 25, currentProjection: 28, tvpiConstruction: 2.0, tvpiActual: 1.55, tvpiCurrent: 1.8 },\n    { month: \"Sep 2023\", date: \"2023-09\", constructionProjection: 34, actual: 28, currentProjection: 32, tvpiConstruction: 2.3, tvpiActual: 1.75, tvpiCurrent: 2.1 },\n    { month: \"Dec 2023\", date: \"2023-12\", constructionProjection: 38, actual: 32, currentProjection: 36, tvpiConstruction: 2.6, tvpiActual: 1.95, tvpiCurrent: 2.4 },\n    { month: \"Mar 2024\", date: \"2024-03\", constructionProjection: 42, actual: 35, currentProjection: 40, tvpiConstruction: 2.9, tvpiActual: 2.15, tvpiCurrent: 2.7 },\n    { month: \"Jun 2024\", date: \"2024-06\", constructionProjection: 46, actual: 38, currentProjection: 44, tvpiConstruction: 3.2, tvpiActual: 2.35, tvpiCurrent: 3.0 },\n    { month: \"Sep 2024\", date: \"2024-09\", constructionProjection: 50, actual: 42, currentProjection: 48, tvpiConstruction: 3.5, tvpiActual: 2.55, tvpiCurrent: 3.3 },\n    { month: \"Dec 2024\", date: \"2024-12\", constructionProjection: 54, actual: 45, currentProjection: 52, tvpiConstruction: 3.8, tvpiActual: 2.75, tvpiCurrent: 3.6 },\n    { month: \"Mar 2025\", date: \"2025-03\", constructionProjection: 54, actual: 45, currentProjection: 54, tvpiConstruction: 4.0, tvpiActual: 2.85, tvpiCurrent: 3.8 },\n    { month: \"Jun 2025\", date: \"2025-06\", constructionProjection: 54, actual: 45, currentProjection: 54, tvpiConstruction: 4.2, tvpiActual: 2.95, tvpiCurrent: 4.0 }\n  ];\n\n  const formatTooltip = (value: number, name: string) => {\n    if (name.includes('TVPI')) {\n      return [`${value.toFixed(2)}x`, name];\n    }\n    return [value, name];\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"h-5 w-5\" />\n            <span>Projected Fund Performance</span>\n          </CardTitle>\n          <CardDescription>\n            Track actual vs projected performance over time\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center space-x-4 mb-6\">\n            <div className=\"flex items-center space-x-2\">\n              <label className=\"text-sm font-medium\">Entry Round:</label>\n              <Select value={entryRound} onValueChange={setEntryRound}>\n                <SelectTrigger className=\"w-[150px]\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all-rounds\">All Rounds</SelectItem>\n                  <SelectItem value=\"seed\">Seed</SelectItem>\n                  <SelectItem value=\"series-a\">Series A</SelectItem>\n                  <SelectItem value=\"series-b\">Series B</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <label className=\"text-sm font-medium\">Time Period:</label>\n              <Select value={timePeriod} onValueChange={setTimePeriod}>\n                <SelectTrigger className=\"w-[150px]\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"monthly\">Monthly</SelectItem>\n                  <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                  <SelectItem value=\"annually\">Annually</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Initial Investment Pacing */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Initial investment pacing (number of deals)</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={performanceData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis \n                        dataKey=\"month\" \n                        angle={-45}\n                        textAnchor=\"end\"\n                        height={80}\n                        fontSize={10}\n                      />\n                      <YAxis />\n                      <Tooltip formatter={formatTooltip} />\n                      <Legend />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"constructionProjection\" \n                        stroke=\"#94a3b8\" \n                        strokeDasharray=\"5 5\"\n                        name=\"Construction Projection\"\n                        strokeWidth={2}\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"actual\" \n                        stroke=\"#3b82f6\" \n                        name=\"Actual\"\n                        strokeWidth={2}\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"currentProjection\" \n                        stroke=\"#10b981\" \n                        name=\"Current Projection\"\n                        strokeWidth={2}\n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* TVPI Performance */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">TVPI</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={performanceData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis \n                        dataKey=\"month\" \n                        angle={-45}\n                        textAnchor=\"end\"\n                        height={80}\n                        fontSize={10}\n                      />\n                      <YAxis />\n                      <Tooltip formatter={formatTooltip} />\n                      <Legend />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"tvpiConstruction\" \n                        stroke=\"#94a3b8\" \n                        strokeDasharray=\"5 5\"\n                        name=\"Construction Projection\"\n                        strokeWidth={2}\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"tvpiActual\" \n                        stroke=\"#3b82f6\" \n                        name=\"Actual\"\n                        strokeWidth={2}\n                      />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"tvpiCurrent\" \n                        stroke=\"#10b981\" \n                        name=\"Current Projection\"\n                        strokeWidth={2}\n                      />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Performance Summary */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-6\">\n            <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-blue-600\">1.04x</div>\n              <div className=\"text-sm text-muted-foreground\">Est. Actual TVPI</div>\n            </div>\n            <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-green-600\">3.55x</div>\n              <div className=\"text-sm text-muted-foreground\">Projected TVPI</div>\n            </div>\n            <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-purple-600\">45</div>\n              <div className=\"text-sm text-muted-foreground\">Deals to Date</div>\n            </div>\n            <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-orange-600\">9</div>\n              <div className=\"text-sm text-muted-foreground\">Remaining Deals</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Construction vs Actual Analysis */}\n      <ConstructionActualComparison />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\insights\\data-driven-insights.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'AlertTriangle' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'currentFund' is assigned a value but never used.","line":30,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":22}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  TrendingUp, \n  Target, \n  Calculator, \n  BarChart3, \n  AlertTriangle,\n  CheckCircle,\n  Activity,\n  Clock,\n  DollarSign,\n  Users,\n  ArrowUp,\n  ArrowDown\n} from \"lucide-react\";\nimport { useFundContext } from \"@/contexts/FundContext\";\n\ninterface DataDrivenInsightsProps {\n  className?: string;\n}\n\nexport function DataDrivenInsights({ className }: DataDrivenInsightsProps) {\n  const { currentFund } = useFundContext();\n\n  // Sample data for the six workflows\n  const workflowInsights = {\n    currentForecast: {\n      status: \"active\",\n      lastUpdated: \"2 days ago\",\n      tvpiProjected: 3.40,\n      tvpiActual: 1.73,\n      variance: \"+98%\"\n    },\n    pacing: {\n      dealsPaced: 21,\n      dealsProjected: 79,\n      capitalDeployed: 0.42, // 42%\n      onTrack: true\n    },\n    scenarios: {\n      portfolioCompanies: 15,\n      scenariosBuilt: 12,\n      averageCases: 4.2,\n      lastReview: \"1 week ago\"\n    },\n    reserves: {\n      totalReserves: 4902365,\n      topOpportunity: \"Metaflux\",\n      topMOIC: 3.53,\n      rankingComplete: true\n    },\n    partialSales: {\n      opportunities: 9,\n      attractiveDeals: 4,\n      avgPremium: -8.2,\n      dpiPotential: 850000\n    },\n    kpis: {\n      companiesTracked: 15,\n      metricsCollected: 47,\n      revMultiple: 12.4,\n      lastSync: \"Today\"\n    }\n  };\n\n  const workflows = [\n    {\n      id: 1,\n      title: \"Current Fund Forecast\",\n      description: \"Live forward-looking view combining actual investments and construction projections\",\n      status: workflowInsights.currentForecast.status,\n      metrics: [\n        { label: \"Projected TVPI\", value: `${workflowInsights.currentForecast.tvpiProjected}x`, trend: \"up\" },\n        { label: \"Actual TVPI\", value: `${workflowInsights.currentForecast.tvpiActual}x`, trend: \"up\" },\n        { label: \"Variance\", value: workflowInsights.currentForecast.variance, trend: \"up\" }\n      ],\n      lastUpdated: workflowInsights.currentForecast.lastUpdated,\n      icon: TrendingUp,\n      color: \"blue\",\n      route: \"/forecasting\"\n    },\n    {\n      id: 2,\n      title: \"Pacing & Course Corrections\",\n      description: \"Track deployment pacing, market conditions, and investment terms vs projections\",\n      status: workflowInsights.pacing.onTrack ? \"on-track\" : \"needs-attention\",\n      metrics: [\n        { label: \"Deals Made\", value: workflowInsights.pacing.dealsPaced.toString(), trend: \"neutral\" },\n        { label: \"Projected Total\", value: workflowInsights.pacing.dealsProjected.toString(), trend: \"neutral\" },\n        { label: \"Capital Deployed\", value: `${(workflowInsights.pacing.capitalDeployed * 100).toFixed(0)}%`, trend: \"up\" }\n      ],\n      lastUpdated: \"Real-time\",\n      icon: Target,\n      color: \"green\",\n      route: \"/forecasting\"\n    },\n    {\n      id: 3,\n      title: \"Scenario Analysis\",\n      description: \"Risk-weighted scenarios for each deal with Base/Upside/Downside cases\",\n      status: \"active\",\n      metrics: [\n        { label: \"Companies\", value: workflowInsights.scenarios.portfolioCompanies.toString(), trend: \"neutral\" },\n        { label: \"Scenarios Built\", value: workflowInsights.scenarios.scenariosBuilt.toString(), trend: \"up\" },\n        { label: \"Avg Cases/Deal\", value: workflowInsights.scenarios.averageCases.toFixed(1), trend: \"neutral\" }\n      ],\n      lastUpdated: workflowInsights.scenarios.lastReview,\n      icon: BarChart3,\n      color: \"purple\",\n      route: \"/scenario-builder\"\n    },\n    {\n      id: 4,\n      title: \"Optimal Reserves\",\n      description: \"Follow-on MOIC analysis ranking portfolio companies by expected return on next $1\",\n      status: \"optimized\",\n      metrics: [\n        { label: \"Total Reserves\", value: `$${(workflowInsights.reserves.totalReserves / 1000000).toFixed(1)}M`, trend: \"neutral\" },\n        { label: \"Top Opportunity\", value: workflowInsights.reserves.topOpportunity, trend: \"up\" },\n        { label: \"Follow-on MOIC\", value: `${workflowInsights.reserves.topMOIC}x`, trend: \"up\" }\n      ],\n      lastUpdated: \"Daily refresh\",\n      icon: Calculator,\n      color: \"orange\",\n      route: \"/planning\"\n    },\n    {\n      id: 5,\n      title: \"Partial Sales (DPI)\",\n      description: \"Convert RVPI to DPI opportunistically with minimum IRR-accretive valuations\",\n      status: \"opportunities\",\n      metrics: [\n        { label: \"Opportunities\", value: workflowInsights.partialSales.opportunities.toString(), trend: \"neutral\" },\n        { label: \"Attractive Sales\", value: workflowInsights.partialSales.attractiveDeals.toString(), trend: \"up\" },\n        { label: \"Avg Premium\", value: `${workflowInsights.partialSales.avgPremium}%`, trend: \"down\" }\n      ],\n      lastUpdated: \"Weekly analysis\",\n      icon: DollarSign,\n      color: \"emerald\",\n      route: \"/partial-sales\"\n    },\n    {\n      id: 6,\n      title: \"KPI Tracking\",\n      description: \"Portfolio company performance metrics for actionable insights and benchmarking\",\n      status: \"current\",\n      metrics: [\n        { label: \"Companies\", value: workflowInsights.kpis.companiesTracked.toString(), trend: \"neutral\" },\n        { label: \"Metrics\", value: workflowInsights.kpis.metricsCollected.toString(), trend: \"up\" },\n        { label: \"Rev Multiple\", value: `${workflowInsights.kpis.revMultiple}x`, trend: \"up\" }\n      ],\n      lastUpdated: workflowInsights.kpis.lastSync,\n      icon: Activity,\n      color: \"indigo\",\n      route: \"/analytics\"\n    }\n  ];\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n      case \"optimized\":\n      case \"current\":\n        return <Badge className=\"bg-green-100 text-green-800 border-green-200\">Active</Badge>;\n      case \"on-track\":\n        return <Badge className=\"bg-blue-100 text-blue-800 border-blue-200\">On Track</Badge>;\n      case \"opportunities\":\n        return <Badge className=\"bg-orange-100 text-orange-800 border-orange-200\">Opportunities</Badge>;\n      case \"needs-attention\":\n        return <Badge className=\"bg-red-100 text-red-800 border-red-200\">Needs Attention</Badge>;\n      default:\n        return <Badge variant=\"outline\">Unknown</Badge>;\n    }\n  };\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case \"up\":\n        return <ArrowUp className=\"h-3 w-3 text-green-600\" />;\n      case \"down\":\n        return <ArrowDown className=\"h-3 w-3 text-red-600\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold mb-2\">Data-Driven Fund Management</h2>\n        <p className=\"text-muted-foreground\">\n          Six core workflows that successful data-driven venture managers follow consistently\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {workflows.map((workflow) => {\n          const IconComponent = workflow.icon;\n          return (\n            <Card key={workflow.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`p-2 rounded-lg bg-${workflow.color}-100`}>\n                      <IconComponent className={`h-4 w-4 text-${workflow.color}-600`} />\n                    </div>\n                    <span className=\"font-semibold text-sm\">{workflow.id}</span>\n                  </div>\n                  {getStatusBadge(workflow.status)}\n                </div>\n                <CardTitle className=\"text-lg\">{workflow.title}</CardTitle>\n                <CardDescription className=\"text-sm\">\n                  {workflow.description}\n                </CardDescription>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                {/* Metrics */}\n                <div className=\"grid grid-cols-1 gap-2\">\n                  {workflow.metrics.map((metric, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">{metric.label}</span>\n                      <div className=\"flex items-center space-x-1\">\n                        <span className=\"font-medium text-sm\">{metric.value}</span>\n                        {getTrendIcon(metric.trend)}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Last Updated */}\n                <div className=\"flex items-center justify-between text-xs text-muted-foreground pt-2 border-t\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Clock className=\"h-3 w-3\" />\n                    <span>Updated {workflow.lastUpdated}</span>\n                  </div>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\" \n                    className=\"h-6 text-xs px-2\"\n                    onClick={() => window.location.href = workflow.route}\n                  >\n                    View ΓåÆ\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Summary Insights */}\n      <Card className=\"mt-6 border-blue-200 bg-blue-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2 text-blue-900\">\n            <CheckCircle className=\"h-5 w-5\" />\n            <span>Data-Driven Maturity Score</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-700\">5/6</div>\n              <div className=\"text-sm text-blue-600\">Workflows Active</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-700\">88%</div>\n              <div className=\"text-sm text-blue-600\">Data Coverage</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-700\">A-</div>\n              <div className=\"text-sm text-blue-600\">Maturity Grade</div>\n            </div>\n          </div>\n          <p className=\"text-sm text-blue-800 mt-4\">\n            Your fund demonstrates strong data-driven practices. Consider enhancing KPI automation \n            and increasing scenario review frequency to achieve full optimization.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investment\\fund-liquidation-warnings.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":11,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertTriangle, Calendar, DollarSign, TrendingDown, Info } from \"lucide-react\";\n\ninterface InvestmentRound {\n  id: string;\n  company: string;\n  round: string;\n  date: string;\n  exitValue: number;\n  moic: number;\n  irr: number;\n  afterFundDate: boolean;\n}\n\ninterface FundLiquidationWarningsProps {\n  fundEndDate?: string;\n  investments: InvestmentRound[];\n}\n\nexport default function FundLiquidationWarnings({ \n  fundEndDate, \n  investments \n}: FundLiquidationWarningsProps) {\n  const [showDetails, setShowDetails] = useState(false);\n\n  // Sample data for demonstration\n  const sampleInvestments: InvestmentRound[] = [\n    {\n      id: \"1\",\n      company: \"TechCorp\",\n      round: \"Exit\",\n      date: \"Apr 2031\",\n      exitValue: 3000000,\n      moic: 3.79,\n      irr: 16.45,\n      afterFundDate: true\n    },\n    {\n      id: \"2\", \n      company: \"DataFlow Inc\",\n      round: \"Series C\",\n      date: \"Jun 2032\",\n      exitValue: 5500000,\n      moic: 4.12,\n      irr: 18.23,\n      afterFundDate: true\n    },\n    {\n      id: \"3\",\n      company: \"AI Solutions\",\n      round: \"Exit\",\n      date: \"Dec 2030\",\n      exitValue: 2800000,\n      moic: 2.95,\n      irr: 14.67,\n      afterFundDate: false\n    }\n  ];\n\n  const investmentData = investments.length > 0 ? investments : sampleInvestments;\n  const afterFundDateInvestments = investmentData.filter(inv => inv.afterFundDate);\n  const liquidatedInvestments = investmentData.filter(inv => !inv.afterFundDate);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Fund Term Warning */}\n      {fundEndDate && afterFundDateInvestments.length > 0 && (\n        <Alert className=\"border-orange-200 bg-orange-50\">\n          <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n          <AlertDescription className=\"text-orange-800\">\n            <div className=\"font-semibold mb-2\">Fund Term Impact Warning</div>\n            <p className=\"text-sm mb-2\">\n              Your fund has a fixed term ending in <strong>{fundEndDate}</strong>. \n              {afterFundDateInvestments.length} investment(s) have expected exits after this date and will be liquidated early.\n            </p>\n            <p className=\"text-sm\">\n              This may reduce returns as investments won't reach their full exit potential. \n              Consider extending the fund term or removing the end date to allow investments to mature.\n            </p>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Fund Liquidation Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg flex items-center\">\n            <Calendar className=\"w-5 h-5 mr-2 text-blue-600\" />\n            Fund Liquidation Impact\n          </CardTitle>\n          <p className=\"text-sm text-gray-600\">\n            Overview of investments affected by fund term limitations\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-red-600\">\n                {afterFundDateInvestments.length}\n              </div>\n              <div className=\"text-sm text-red-700 mt-1\">Early Liquidations</div>\n              <div className=\"text-xs text-gray-600 mt-2\">\n                Exits after fund date\n              </div>\n            </div>\n            \n            <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                {liquidatedInvestments.length}\n              </div>\n              <div className=\"text-sm text-green-700 mt-1\">Natural Exits</div>\n              <div className=\"text-xs text-gray-600 mt-2\">\n                Exits within fund term\n              </div>\n            </div>\n            \n            <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {afterFundDateInvestments.reduce((sum, inv) => sum + inv.exitValue, 0) > 0 \n                  ? formatCurrency(afterFundDateInvestments.reduce((sum, inv) => sum + inv.exitValue, 0))\n                  : \"$0\"}\n              </div>\n              <div className=\"text-sm text-orange-700 mt-1\">Affected Value</div>\n              <div className=\"text-xs text-gray-600 mt-2\">\n                Value at early liquidation\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Detailed Investment List */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg\">Investment Details</CardTitle>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setShowDetails(!showDetails)}\n            >\n              {showDetails ? 'Hide Details' : 'Show Details'}\n            </Button>\n          </div>\n        </CardHeader>\n        {showDetails && (\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* After Fund Date Investments */}\n              {afterFundDateInvestments.length > 0 && (\n                <div>\n                  <h4 className=\"font-semibold text-red-700 mb-3 flex items-center\">\n                    <AlertTriangle className=\"w-4 h-4 mr-2\" />\n                    Early Liquidations (After Fund Date)\n                  </h4>\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full text-sm\">\n                      <thead>\n                        <tr className=\"border-b bg-red-50\">\n                          <th className=\"text-left py-2 px-3\">Company</th>\n                          <th className=\"text-left py-2 px-3\">Round</th>\n                          <th className=\"text-left py-2 px-3\">Date</th>\n                          <th className=\"text-right py-2 px-3\">Exit Value</th>\n                          <th className=\"text-right py-2 px-3\">MOIC</th>\n                          <th className=\"text-right py-2 px-3\">IRR</th>\n                          <th className=\"text-left py-2 px-3\">Status</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {afterFundDateInvestments.map((investment) => (\n                          <tr key={investment.id} className=\"border-b hover:bg-gray-50\">\n                            <td className=\"py-2 px-3 font-medium\">{investment.company}</td>\n                            <td className=\"py-2 px-3\">{investment.round}</td>\n                            <td className=\"py-2 px-3 text-red-600\">{investment.date}</td>\n                            <td className=\"py-2 px-3 text-right\">{formatCurrency(investment.exitValue)}</td>\n                            <td className=\"py-2 px-3 text-right\">{investment.moic.toFixed(2)}x</td>\n                            <td className=\"py-2 px-3 text-right\">{investment.irr.toFixed(1)}%</td>\n                            <td className=\"py-2 px-3\">\n                              <Badge variant=\"destructive\" className=\"text-xs\">\n                                After Fund Date\n                              </Badge>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n\n              {/* Natural Exits */}\n              {liquidatedInvestments.length > 0 && (\n                <div>\n                  <h4 className=\"font-semibold text-green-700 mb-3 flex items-center\">\n                    <TrendingDown className=\"w-4 h-4 mr-2\" />\n                    Natural Exits (Within Fund Term)\n                  </h4>\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full text-sm\">\n                      <thead>\n                        <tr className=\"border-b bg-green-50\">\n                          <th className=\"text-left py-2 px-3\">Company</th>\n                          <th className=\"text-left py-2 px-3\">Round</th>\n                          <th className=\"text-left py-2 px-3\">Date</th>\n                          <th className=\"text-right py-2 px-3\">Exit Value</th>\n                          <th className=\"text-right py-2 px-3\">MOIC</th>\n                          <th className=\"text-right py-2 px-3\">IRR</th>\n                          <th className=\"text-left py-2 px-3\">Status</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {liquidatedInvestments.map((investment) => (\n                          <tr key={investment.id} className=\"border-b hover:bg-gray-50\">\n                            <td className=\"py-2 px-3 font-medium\">{investment.company}</td>\n                            <td className=\"py-2 px-3\">{investment.round}</td>\n                            <td className=\"py-2 px-3\">{investment.date}</td>\n                            <td className=\"py-2 px-3 text-right\">{formatCurrency(investment.exitValue)}</td>\n                            <td className=\"py-2 px-3 text-right\">{investment.moic.toFixed(2)}x</td>\n                            <td className=\"py-2 px-3 text-right\">{investment.irr.toFixed(1)}%</td>\n                            <td className=\"py-2 px-3\">\n                              <Badge variant=\"default\" className=\"text-xs bg-green-100 text-green-800\">\n                                On Schedule\n                              </Badge>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        )}\n      </Card>\n\n      {/* Recommendations */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg flex items-center\">\n            <Info className=\"w-5 h-5 mr-2 text-blue-600\" />\n            Recommendations\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3 text-sm\">\n            <div className=\"p-3 bg-blue-50 rounded-lg\">\n              <strong>Extend Fund Term:</strong> Consider extending the fund term to allow investments to reach their full exit potential instead of early liquidation.\n            </div>\n            <div className=\"p-3 bg-purple-50 rounded-lg\">\n              <strong>Remove End Date:</strong> Remove the fund end date from Construction Wizard to let investments run to their expected exits.\n            </div>\n            <div className=\"p-3 bg-green-50 rounded-lg\">\n              <strong>Optimize Exit Strategy:</strong> Focus on accelerating exits for investments that will be liquidated early to maximize returns.\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\add-event-dropdown.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Building' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'eventType' is defined but never used.","line":23,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":36}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport OwnershipUpdateDialog from \"./ownership-update-dialog\";\nimport NewRoundDialog from \"./new-round-dialog\";\nimport ValuationUpdateDialog from \"./valuation-update-dialog\";\nimport { \n  Plus, \n  DollarSign, \n  TrendingUp, \n  Building, \n  ArrowUpDown, \n  Banknote,\n  Calculator\n} from \"lucide-react\";\n\ninterface AddEventDropdownProps {\n  onSelectEvent: (eventType: string) => void;\n  isOpen: boolean;\n  onToggle: () => void;\n  investment?: {\n    id: string;\n    company: string;\n    currentOwnership: number;\n  };\n}\n\nconst eventTypes = [\n  {\n    id: 'new-round',\n    label: 'New Round',\n    icon: Plus,\n    description: 'Add a new funding round'\n  },\n  {\n    id: 'ownership-update',\n    label: 'Ownership Update',\n    icon: ArrowUpDown,\n    description: 'Update ownership percentage'\n  },\n  {\n    id: 'valuation-update',\n    label: 'Valuation Update',\n    icon: TrendingUp,\n    description: 'Update company valuation'\n  },\n  {\n    id: 'secondary-acquisition',\n    label: 'Secondary Acquisition',\n    icon: DollarSign,\n    description: 'Secondary share purchase'\n  },\n  {\n    id: 'partial-sale',\n    label: 'Partial Sale',\n    icon: Calculator,\n    description: 'Partial exit or sale'\n  },\n  {\n    id: 'dividend',\n    label: 'Dividend, Interest or Distribution',\n    icon: Banknote,\n    description: 'Cash distributions'\n  }\n];\n\nexport default function AddEventDropdown({ \n  onSelectEvent, \n  isOpen, \n  onToggle,\n  investment \n}: AddEventDropdownProps) {\n  const [showOwnershipDialog, setShowOwnershipDialog] = useState(false);\n  const [showNewRoundDialog, setShowNewRoundDialog] = useState(false);\n  const [showValuationDialog, setShowValuationDialog] = useState(false);\n  return (\n    <div className=\"relative\">\n      <Button \n        onClick={onToggle}\n        className=\"povc-bg-primary hover:bg-blue-700\"\n      >\n        <Plus className=\"mr-2 h-4 w-4\" />\n        Add\n      </Button>\n      \n      {isOpen && (\n        <>\n          <div className=\"fixed inset-0 z-40\" onClick={onToggle} />\n          <Card className=\"absolute top-full mt-2 right-0 w-80 z-50 shadow-lg\">\n            <CardContent className=\"p-2\">\n              <div className=\"space-y-1\">\n                {eventTypes.map((event) => {\n                  const IconComponent = event.icon;\n                  return (\n                    <button\n                      key={event.id}\n                      onClick={() => {\n                        if (event.id === 'ownership-update') {\n                          setShowOwnershipDialog(true);\n                          onToggle();\n                        } else if (event.id === 'new-round') {\n                          setShowNewRoundDialog(true);\n                          onToggle();\n                        } else if (event.id === 'valuation-update') {\n                          setShowValuationDialog(true);\n                          onToggle();\n                        } else {\n                          onSelectEvent(event.id);\n                          onToggle();\n                        }\n                      }}\n                      className=\"w-full flex items-center space-x-3 p-3 rounded-md hover:bg-gray-50 transition-colors text-left\"\n                    >\n                      <div className=\"flex-shrink-0\">\n                        <IconComponent className=\"h-4 w-4 text-blue-600\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {event.label}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {event.description}\n                        </p>\n                      </div>\n                    </button>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </>\n      )}\n      \n      {/* Dialogs */}\n      <OwnershipUpdateDialog\n        isOpen={showOwnershipDialog}\n        onOpenChange={setShowOwnershipDialog}\n        investment={investment}\n      />\n      \n      <NewRoundDialog\n        isOpen={showNewRoundDialog}\n        onOpenChange={setShowNewRoundDialog}\n        investment={investment}\n      />\n      \n      <ValuationUpdateDialog\n        isOpen={showValuationDialog}\n        onOpenChange={setShowValuationDialog}\n        investment={{\n          id: investment?.id || \"\",\n          company: investment?.company || \"\",\n          currentValuation: 15000000\n        }}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\add-investment-dropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\bulk-import-dialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":9,"column":79,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":92},{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":15,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'File' is not defined.","line":19,"column":52,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":56},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":21,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'HTMLInputElement' is not defined.","line":21,"column":54,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":70}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Upload, Download, FileSpreadsheet, AlertCircle } from \"lucide-react\";\n\ninterface BulkImportDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function BulkImportDialog({ isOpen, onOpenChange }: BulkImportDialogProps) {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle>Bulk Imports & Updates</DialogTitle>\n          <DialogDescription>\n            Import multiple investments or update existing ones using Excel templates\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs defaultValue=\"import\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"import\">Import New Rounds</TabsTrigger>\n            <TabsTrigger value=\"update\">Update Existing</TabsTrigger>\n            <TabsTrigger value=\"future\">Build Future Rounds</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"import\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <FileSpreadsheet className=\"h-5 w-5\" />\n                  <span>Import New Investment Rounds</span>\n                </CardTitle>\n                <CardDescription>\n                  Upload an Excel file with investment round data to add multiple investments at once\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                  <Upload className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium\">Drop your Excel file here, or click to browse</p>\n                    <p className=\"text-xs text-muted-foreground\">Supports .xlsx, .xls files up to 10MB</p>\n                  </div>\n                  <input\n                    type=\"file\"\n                    accept=\".xlsx,.xls\"\n                    onChange={handleFileSelect}\n                    className=\"hidden\"\n                    id=\"file-upload\"\n                  />\n                  <label htmlFor=\"file-upload\">\n                    <Button variant=\"outline\" className=\"mt-3\" asChild>\n                      <span>Choose File</span>\n                    </Button>\n                  </label>\n                </div>\n\n                {selectedFile && (\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <FileSpreadsheet className=\"h-4 w-4 text-blue-600\" />\n                      <span className=\"text-sm font-medium\">{selectedFile.name}</span>\n                      <span className=\"text-xs text-muted-foreground\">\n                        ({(selectedFile.size / 1024).toFixed(1)} KB)\n                      </span>\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex items-start space-x-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <AlertCircle className=\"h-4 w-4 text-yellow-600 mt-0.5\" />\n                  <div className=\"text-sm\">\n                    <p className=\"font-medium text-yellow-800\">Before uploading:</p>\n                    <p className=\"text-yellow-700\">Download our Excel template and follow the format exactly to ensure successful import.</p>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-between pt-4\">\n                  <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n                    <Download className=\"h-4 w-4\" />\n                    <span>Download Template</span>\n                  </Button>\n                  <div className=\"space-x-2\">\n                    <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n                      Cancel\n                    </Button>\n                    <Button \n                      className=\"povc-bg-primary hover:bg-blue-700\"\n                      disabled={!selectedFile}\n                    >\n                      Import Investments\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"update\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Update Existing Investments</CardTitle>\n                <CardDescription>\n                  Bulk update valuations, ownership percentages, or other investment data\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">Select investments to update in bulk</p>\n                  <Button variant=\"outline\" className=\"mt-4\">\n                    Select Investments\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"future\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Build Future Rounds in Bulk</CardTitle>\n                <CardDescription>\n                  Automatically generate future rounds for multiple investments using sector profiles\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8\">\n                  <p className=\"text-muted-foreground\">Build future rounds quickly for each company</p>\n                  <Button variant=\"outline\" className=\"mt-4\">\n                    Configure Bulk Future Rounds\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\cap-table-integration.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'setScenarios' is assigned a value but never used.","line":30,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Calculator, ExternalLink, Plus, TrendingUp, DollarSign, Percent } from 'lucide-react';\nimport CapTableCalculator from '@/components/cap-table/cap-table-calculator';\n\ninterface Investment {\n  id: number;\n  name: string;\n  amount: number;\n  valuationAtInvestment: number;\n  ownershipPercentage: number;\n  sector: string;\n  stage: string;\n}\n\ninterface CapTableIntegrationProps {\n  investment: Investment;\n}\n\nexport default function CapTableIntegration({ investment }: CapTableIntegrationProps) {\n  const [showFullCalculator, setShowFullCalculator] = useState(false);\n  const [scenarios, setScenarios] = useState([\n    {\n      id: '1',\n      name: 'Series A Modeling',\n      status: 'active',\n      preMoneyValuation: 15000000,\n      roundSize: 5000000,\n      dilution: 23.5,\n      lastModified: new Date().toISOString()\n    },\n    {\n      id: '2',\n      name: 'Bridge Round',\n      status: 'draft',\n      preMoneyValuation: 12000000,\n      roundSize: 2000000,\n      dilution: 18.2,\n      lastModified: new Date().toISOString()\n    }\n  ]);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'draft': return 'bg-yellow-100 text-yellow-800';\n      case 'archived': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <DollarSign className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Current Valuation</p>\n                <p className=\"text-lg font-bold\">{formatCurrency(investment.valuationAtInvestment)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Percent className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Our Ownership</p>\n                <p className=\"text-lg font-bold\">{investment.ownershipPercentage}%</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"h-5 w-5 text-purple-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Investment Amount</p>\n                <p className=\"text-lg font-bold\">{formatCurrency(investment.amount)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Calculator className=\"h-5 w-5 text-orange-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Scenarios</p>\n                <p className=\"text-lg font-bold\">{scenarios.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Existing Cap Table Scenarios */}\n      <div>\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-lg font-medium\">Cap Table Scenarios</h3>\n            <p className=\"text-sm text-gray-600\">Saved scenarios for {investment.name}</p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" onClick={() => window.open('/cap-tables', '_blank')}>\n              <ExternalLink className=\"h-4 w-4 mr-2\" />\n              Manage All\n            </Button>\n            <Dialog open={showFullCalculator} onOpenChange={setShowFullCalculator}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  New Scenario\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-7xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Cap Table Calculator - {investment.name}</DialogTitle>\n                </DialogHeader>\n                <CapTableCalculator />\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {scenarios.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {scenarios.map((scenario) => (\n              <Card key={scenario.id} className=\"hover:shadow-md transition-shadow cursor-pointer\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"text-base\">{scenario.name}</CardTitle>\n                      <p className=\"text-sm text-gray-600\">{investment.name}</p>\n                    </div>\n                    <Badge className={getStatusColor(scenario.status)}>\n                      {scenario.status}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                    <div>\n                      <p className=\"text-gray-500\">Pre-Money</p>\n                      <p className=\"font-medium\">{formatCurrency(scenario.preMoneyValuation)}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-500\">Round Size</p>\n                      <p className=\"font-medium\">{formatCurrency(scenario.roundSize)}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                    <div>\n                      <p className=\"text-gray-500\">Dilution</p>\n                      <p className=\"font-medium\">{scenario.dilution.toFixed(1)}%</p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-500\">Last Modified</p>\n                      <p className=\"font-medium\">{new Date(scenario.lastModified).toLocaleDateString()}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between pt-2 border-t\">\n                    <Button variant=\"outline\" size=\"sm\" className=\"flex-1 mr-2\">\n                      Open Calculator\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <ExternalLink className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card className=\"text-center py-12\">\n            <CardContent>\n              <Calculator className=\"mx-auto h-16 w-16 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">No Cap Table Scenarios</h3>\n              <p className=\"text-gray-600 mb-6 max-w-md mx-auto\">\n                Create your first cap table scenario to model SAFE/Note conversions for {investment.name}.\n              </p>\n              <Button onClick={() => setShowFullCalculator(true)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create First Scenario\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"border rounded-lg p-6 bg-gray-50\">\n        <h4 className=\"font-medium mb-4\">Quick Actions</h4>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n          <Button variant=\"outline\" className=\"justify-start\">\n            <Calculator className=\"h-4 w-4 mr-2\" />\n            Model Next Round\n          </Button>\n          <Button variant=\"outline\" className=\"justify-start\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add SAFE/Note\n          </Button>\n          <Button variant=\"outline\" className=\"justify-start\">\n            <TrendingUp className=\"h-4 w-4 mr-2\" />\n            Analyze Dilution\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\deal-tags-editor.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":6,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'CommandInput' is defined but never used.","line":10,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":59},{"ruleId":"no-unused-vars","severity":2,"message":"'tags' is defined but never used.","line":16,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'HTMLInputElement' is not defined.","line":53,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":53,"endColumn":43},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":82,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":82,"endColumn":34}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useRef, useEffect } from 'react';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { X, Plus, Search, Tag } from 'lucide-react';\n\ninterface DealTagsEditorProps {\n  selectedTags: string[];\n  onTagsChange: (tags: string[]) => void;\n  className?: string;\n}\n\n// Predefined tags from Tactyc - matching the images provided\nconst PREDEFINED_TAGS = [\n  'Asia',\n  'CSR',\n  'Environmental',\n  'Female Founder',\n  'General',\n  'Governance',\n  'Loan',\n  'Minority Founder',\n  'Social',\n  'Warehoused',\n  'AI/ML',\n  'B2B',\n  'B2C',\n  'Payments',\n  'Digital Health',\n  'Marketplace',\n  'SaaS',\n  'FinTech',\n  'EdTech',\n  'PropTech',\n  'CleanTech',\n  'DeepTech',\n  'Hardware',\n  'Mobile',\n  'Enterprise',\n  'Consumer'\n];\n\nexport default function DealTagsEditor({ selectedTags, onTagsChange, className = '' }: DealTagsEditorProps) {\n  const [inputValue, setInputValue] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Filter available tags (exclude already selected ones)\n  const availableTags = PREDEFINED_TAGS.filter(tag => \n    !selectedTags.includes(tag) && \n    tag.toLowerCase().includes(inputValue.toLowerCase())\n  );\n\n  const handleTagSelect = (tag: string) => {\n    if (!selectedTags.includes(tag)) {\n      onTagsChange([...selectedTags, tag]);\n    }\n    setInputValue('');\n    setIsOpen(false);\n  };\n\n  const handleTagRemove = (tagToRemove: string) => {\n    onTagsChange(selectedTags.filter(tag => tag !== tagToRemove));\n  };\n\n  const handleCustomTag = () => {\n    const trimmedValue = inputValue.trim();\n    if (trimmedValue && !selectedTags.includes(trimmedValue)) {\n      onTagsChange([...selectedTags, trimmedValue]);\n      setInputValue('');\n      setIsOpen(false);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      if (availableTags.length > 0) {\n        handleTagSelect(availableTags[0]);\n      } else if (inputValue.trim()) {\n        handleCustomTag();\n      }\n    } else if (e.key === 'Escape') {\n      setIsOpen(false);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <div className={`space-y-3 ${className}`}>\n      <div className=\"flex items-center gap-2\">\n        <Tag className=\"h-4 w-4 text-gray-500\" />\n        <label className=\"text-sm font-medium text-gray-700\">Deal Tags</label>\n        <div className=\"text-xs text-gray-400\">\n          <span className=\"inline-flex items-center\">\n            <span className=\"w-3 h-3 bg-blue-100 border border-blue-200 rounded-full mr-1\"></span>\n            you can enter new tags\n          </span>\n        </div>\n      </div>\n\n      {/* Selected Tags Display */}\n      {selectedTags.length > 0 && (\n        <div className=\"flex flex-wrap gap-2\">\n          {selectedTags.map((tag) => (\n            <Badge \n              key={tag} \n              variant=\"secondary\" \n              className=\"bg-blue-50 text-blue-700 border-blue-200 hover:bg-blue-100 pr-1\"\n            >\n              {tag}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-auto p-0 ml-2 hover:bg-transparent\"\n                onClick={() => handleTagRemove(tag)}\n              >\n                <X className=\"h-3 w-3\" />\n              </Button>\n            </Badge>\n          ))}\n        </div>\n      )}\n\n      {/* Tag Input and Dropdown */}\n      <Popover open={isOpen} onOpenChange={setIsOpen}>\n        <PopoverTrigger asChild>\n          <div className=\"relative\">\n            <Input\n              ref={inputRef}\n              placeholder=\"Investment Tags (you can enter new tags)\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onFocus={() => setIsOpen(true)}\n              onKeyDown={handleKeyDown}\n              className=\"pr-8\"\n            />\n            <Search className=\"h-4 w-4 absolute right-3 top-3 text-gray-400\" />\n          </div>\n        </PopoverTrigger>\n        \n        <PopoverContent className=\"w-[var(--radix-popover-trigger-width)] p-0\" align=\"start\">\n          <Command>\n            <CommandList className=\"max-h-[200px]\">\n              {availableTags.length > 0 ? (\n                <CommandGroup>\n                  {availableTags.map((tag) => (\n                    <CommandItem\n                      key={tag}\n                      onSelect={() => handleTagSelect(tag)}\n                      className=\"cursor-pointer\"\n                    >\n                      <Tag className=\"h-4 w-4 mr-2 text-gray-400\" />\n                      {tag}\n                    </CommandItem>\n                  ))}\n                </CommandGroup>\n              ) : null}\n              \n              {inputValue.trim() && !selectedTags.includes(inputValue.trim()) && (\n                <CommandGroup>\n                  <CommandItem\n                    onSelect={handleCustomTag}\n                    className=\"cursor-pointer border-t\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2 text-green-500\" />\n                    Create \"{inputValue.trim()}\"\n                  </CommandItem>\n                </CommandGroup>\n              )}\n              \n              {availableTags.length === 0 && !inputValue.trim() && (\n                <CommandEmpty>No tags found.</CommandEmpty>\n              )}\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n\n      {/* Tag Count */}\n      {selectedTags.length > 0 && (\n        <div className=\"text-xs text-gray-500\">\n          {selectedTags.length} tag{selectedTags.length !== 1 ? 's' : ''} selected\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\enhanced-investments-table.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used.","line":7,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used.","line":7,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":50}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { \n  Search, \n  Filter, \n  Download, \n  Plus, \n  ArrowUpDown,\n  Tag,\n  MoreHorizontal,\n  Eye,\n  Edit,\n  Trash2\n} from 'lucide-react';\n\ninterface Investment {\n  id: string;\n  name: string;\n  sector: string;\n  stage: string;\n  tags: string[];\n  totalInvested: number;\n  currentValue: number;\n  moic: number;\n  irr: number;\n  ownershipPercentage: number;\n  lastRound: string;\n  status: 'Active' | 'Exited' | 'Written Off';\n  partnerLead: string;\n  dateInvested: string;\n}\n\n// Enhanced mock data with deal tags\nconst MOCK_INVESTMENTS: Investment[] = [\n  {\n    id: 'inv-1',\n    name: 'AlphaTech',\n    sector: 'SaaS',\n    stage: 'Series A',\n    tags: ['Governance', 'Warehoused'],\n    totalInvested: 1250000,\n    currentValue: 2100000,\n    moic: 1.68,\n    irr: 25.3,\n    ownershipPercentage: 8.5,\n    lastRound: 'Series A',\n    status: 'Active',\n    partnerLead: 'Jane Smith',\n    dateInvested: '2023-03-15'\n  },\n  {\n    id: 'inv-2',\n    name: 'Amplio',\n    sector: 'FinTech',\n    stage: 'Seed',\n    tags: ['Female Founder'],\n    totalInvested: 750000,\n    currentValue: 1200000,\n    moic: 1.60,\n    irr: 32.1,\n    ownershipPercentage: 12.3,\n    lastRound: 'Seed',\n    status: 'Active',\n    partnerLead: 'John Davis',\n    dateInvested: '2023-07-22'\n  },\n  {\n    id: 'inv-3',\n    name: 'CatalystLabs',\n    sector: 'AI/ML',\n    stage: 'Pre-Seed',\n    tags: ['AI/ML', 'Female Founder'],\n    totalInvested: 500000,\n    currentValue: 850000,\n    moic: 1.70,\n    irr: 45.2,\n    ownershipPercentage: 15.2,\n    lastRound: 'Pre-Seed',\n    status: 'Active',\n    partnerLead: 'Sarah Wilson',\n    dateInvested: '2024-01-10'\n  },\n  {\n    id: 'inv-4',\n    name: 'CybrosX2',\n    sector: 'Security',\n    stage: 'Series B',\n    tags: ['Environmental'],\n    totalInvested: 2000000,\n    currentValue: 3400000,\n    moic: 1.70,\n    irr: 28.9,\n    ownershipPercentage: 5.8,\n    lastRound: 'Series B',\n    status: 'Active',\n    partnerLead: 'Mike Chen',\n    dateInvested: '2022-11-05'\n  },\n  {\n    id: 'inv-5',\n    name: 'DigitalWave',\n    sector: 'Consumer',\n    stage: 'Seed',\n    tags: ['Minority Founder'],\n    totalInvested: 800000,\n    currentValue: 1000000,\n    moic: 1.25,\n    irr: 15.7,\n    ownershipPercentage: 10.1,\n    lastRound: 'Seed',\n    status: 'Active',\n    partnerLead: 'Alex Rodriguez',\n    dateInvested: '2023-09-18'\n  },\n  {\n    id: 'inv-6',\n    name: 'EchelonTech',\n    sector: 'Enterprise',\n    stage: 'Series A',\n    tags: ['Governance', 'Asia'],\n    totalInvested: 1500000,\n    currentValue: 2250000,\n    moic: 1.50,\n    irr: 22.4,\n    ownershipPercentage: 7.2,\n    lastRound: 'Series A',\n    status: 'Active',\n    partnerLead: 'Lisa Zhang',\n    dateInvested: '2023-05-30'\n  },\n  {\n    id: 'inv-7',\n    name: 'Glyphic',\n    sector: 'Design Tools',\n    stage: 'Seed',\n    tags: ['Social', 'Female Founder'],\n    totalInvested: 600000,\n    currentValue: 420000,\n    moic: 0.70,\n    irr: -12.5,\n    ownershipPercentage: 11.8,\n    lastRound: 'Seed',\n    status: 'Written Off',\n    partnerLead: 'Tom Anderson',\n    dateInvested: '2022-08-12'\n  },\n  {\n    id: 'inv-8',\n    name: 'InnovateLabs',\n    sector: 'DeepTech',\n    stage: 'Series A',\n    tags: ['AI/ML', 'Asia', 'General'],\n    totalInvested: 1800000,\n    currentValue: 4200000,\n    moic: 2.33,\n    irr: 38.6,\n    ownershipPercentage: 6.9,\n    lastRound: 'Series A',\n    status: 'Active',\n    partnerLead: 'David Kim',\n    dateInvested: '2022-12-03'\n  }\n];\n\n// All available tags from the predefined list\nconst ALL_TAGS = [\n  'Asia', 'CSR', 'Environmental', 'Female Founder', 'General', 'Governance',\n  'Loan', 'Minority Founder', 'Social', 'Warehoused', 'AI/ML', 'B2B', 'B2C',\n  'Payments', 'Digital Health', 'Marketplace', 'SaaS', 'FinTech', 'EdTech',\n  'PropTech', 'CleanTech', 'DeepTech', 'Hardware', 'Mobile', 'Enterprise', 'Consumer'\n];\n\ninterface EnhancedInvestmentsTableProps {\n  className?: string;\n}\n\nexport default function EnhancedInvestmentsTable({ className = '' }: EnhancedInvestmentsTableProps) {\n  const [investments] = useState<Investment[]>(MOCK_INVESTMENTS);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedSector, setSelectedSector] = useState('all');\n  const [selectedStage, setSelectedStage] = useState('all');\n  const [selectedStatus, setSelectedStatus] = useState('all');\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [sortField, setSortField] = useState<keyof Investment>('name');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [selectedInvestments, setSelectedInvestments] = useState<string[]>([]);\n  const [showColumnsPopover, setShowColumnsPopover] = useState(false);\n  const [visibleColumns, setVisibleColumns] = useState({\n    name: true,\n    sector: true,\n    stage: true,\n    tags: true,\n    invested: true,\n    currentValue: true,\n    moic: true,\n    irr: true,\n    ownership: true,\n    status: true,\n    partner: true,\n    actions: true\n  });\n\n  // Get unique values for filters\n  const sectors = [...new Set(investments.map(inv => inv.sector))];\n  const stages = [...new Set(investments.map(inv => inv.stage))];\n  const statuses = [...new Set(investments.map(inv => inv.status))];\n\n  // Filter and sort investments\n  const filteredInvestments = useMemo(() => {\n    let filtered = investments.filter(investment => {\n      const matchesSearch = investment.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           investment.sector.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           investment.partnerLead.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesSector = selectedSector === 'all' || investment.sector === selectedSector;\n      const matchesStage = selectedStage === 'all' || investment.stage === selectedStage;\n      const matchesStatus = selectedStatus === 'all' || investment.status === selectedStatus;\n      const matchesTags = selectedTags.length === 0 || \n                         selectedTags.some(tag => investment.tags.includes(tag));\n\n      return matchesSearch && matchesSector && matchesStage && matchesStatus && matchesTags;\n    });\n\n    // Sort investments\n    filtered.sort((a, b) => {\n      const aValue = a[sortField];\n      const bValue = b[sortField];\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortDirection === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n      \n      return 0;\n    });\n\n    return filtered;\n  }, [investments, searchTerm, selectedSector, selectedStage, selectedStatus, selectedTags, sortField, sortDirection]);\n\n  const formatCurrency = (amount: number) => {\n    if (amount >= 1000000) {\n      return `$${(amount / 1000000).toFixed(1)}M`;\n    }\n    if (amount >= 1000) {\n      return `$${(amount / 1000).toFixed(0)}K`;\n    }\n    return `$${amount.toLocaleString()}`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Active': return 'bg-green-100 text-green-800 border-green-200';\n      case 'Exited': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'Written Off': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getMOICColor = (moic: number) => {\n    if (moic >= 2.0) return 'text-green-600 font-semibold';\n    if (moic >= 1.5) return 'text-blue-600 font-semibold';\n    if (moic >= 1.0) return 'text-yellow-600 font-semibold';\n    return 'text-red-600 font-semibold';\n  };\n\n  const handleSort = (field: keyof Investment) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n\n  const handleTagToggle = (tag: string) => {\n    setSelectedTags(prev => \n      prev.includes(tag) \n        ? prev.filter(t => t !== tag)\n        : [...prev, tag]\n    );\n  };\n\n  const handleSelectAll = () => {\n    if (selectedInvestments.length === filteredInvestments.length) {\n      setSelectedInvestments([]);\n    } else {\n      setSelectedInvestments(filteredInvestments.map(inv => inv.id));\n    }\n  };\n\n  const handleSelectInvestment = (id: string) => {\n    setSelectedInvestments(prev =>\n      prev.includes(id) ? prev.filter(i => i !== id) : [...prev, id]\n    );\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-xl font-semibold\">Investments Table</h2>\n          <p className=\"text-sm text-gray-600\">\n            Showing {filteredInvestments.length} of {investments.length} investments\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <Button size=\"sm\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Investment\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            {/* Search */}\n            <div className=\"flex-1 relative\">\n              <Search className=\"h-4 w-4 absolute left-3 top-3 text-gray-400\" />\n              <Input\n                placeholder=\"Search investments, sectors, or partners...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n              />\n            </div>\n\n            {/* Filters */}\n            <div className=\"flex gap-2\">\n              <Select value={selectedSector} onValueChange={setSelectedSector}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"Sector\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Sectors</SelectItem>\n                  {sectors.map(sector => (\n                    <SelectItem key={sector} value={sector}>{sector}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={selectedStage} onValueChange={setSelectedStage}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"Stage\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Stages</SelectItem>\n                  {stages.map(stage => (\n                    <SelectItem key={stage} value={stage}>{stage}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  {statuses.map(status => (\n                    <SelectItem key={status} value={status}>{status}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* Tags Filter */}\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Tag className=\"h-4 w-4 mr-2\" />\n                    Tags\n                    {selectedTags.length > 0 && (\n                      <Badge variant=\"secondary\" className=\"ml-2 text-xs\">\n                        {selectedTags.length}\n                      </Badge>\n                    )}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-80\">\n                  <div className=\"space-y-2\">\n                    <h4 className=\"text-sm font-medium\">Filter by Tags</h4>\n                    <div className=\"max-h-60 overflow-y-auto space-y-2\">\n                      {ALL_TAGS.map(tag => (\n                        <div key={tag} className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            id={tag}\n                            checked={selectedTags.includes(tag)}\n                            onCheckedChange={() => handleTagToggle(tag)}\n                          />\n                          <label htmlFor={tag} className=\"text-sm font-medium cursor-pointer\">\n                            {tag}\n                          </label>\n                        </div>\n                      ))}\n                    </div>\n                    {selectedTags.length > 0 && (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => setSelectedTags([])}\n                        className=\"w-full\"\n                      >\n                        Clear All\n                      </Button>\n                    )}\n                  </div>\n                </PopoverContent>\n              </Popover>\n\n              {/* Columns Selector */}\n              <Popover open={showColumnsPopover} onOpenChange={setShowColumnsPopover}>\n                <PopoverTrigger asChild>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Filter className=\"h-4 w-4 mr-2\" />\n                    Columns\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-60\">\n                  <div className=\"space-y-2\">\n                    <h4 className=\"text-sm font-medium\">Show/Hide Columns</h4>\n                    {Object.entries(visibleColumns).map(([key, visible]) => (\n                      <div key={key} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={key}\n                          checked={visible}\n                          onCheckedChange={(checked) =>\n                            setVisibleColumns(prev => ({ ...prev, [key]: checked }))\n                          }\n                        />\n                        <label htmlFor={key} className=\"text-sm capitalize cursor-pointer\">\n                          {key === 'moic' ? 'MOIC' : \n                           key === 'irr' ? 'IRR' :\n                           key.replace(/([A-Z])/g, ' $1').trim()}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </PopoverContent>\n              </Popover>\n            </div>\n          </div>\n\n          {/* Active Filters */}\n          {(selectedTags.length > 0 || selectedSector !== 'all' || selectedStage !== 'all' || selectedStatus !== 'all') && (\n            <div className=\"flex flex-wrap gap-2 mt-4\">\n              {selectedTags.map(tag => (\n                <Badge key={tag} variant=\"secondary\" className=\"cursor-pointer\" onClick={() => handleTagToggle(tag)}>\n                  {tag} ├ù\n                </Badge>\n              ))}\n              {selectedSector !== 'all' && (\n                <Badge variant=\"secondary\" className=\"cursor-pointer\" onClick={() => setSelectedSector('all')}>\n                  Sector: {selectedSector} ├ù\n                </Badge>\n              )}\n              {selectedStage !== 'all' && (\n                <Badge variant=\"secondary\" className=\"cursor-pointer\" onClick={() => setSelectedStage('all')}>\n                  Stage: {selectedStage} ├ù\n                </Badge>\n              )}\n              {selectedStatus !== 'all' && (\n                <Badge variant=\"secondary\" className=\"cursor-pointer\" onClick={() => setSelectedStatus('all')}>\n                  Status: {selectedStatus} ├ù\n                </Badge>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"border-b\">\n                <tr>\n                  <th className=\"text-left py-3 px-4\">\n                    <Checkbox\n                      checked={selectedInvestments.length === filteredInvestments.length && filteredInvestments.length > 0}\n                      onCheckedChange={handleSelectAll}\n                    />\n                  </th>\n                  <th className=\"text-left py-3 px-4\">Actions</th>\n                  {visibleColumns.name && (\n                    <th className=\"text-left py-3 px-4 cursor-pointer\" onClick={() => handleSort('name')}>\n                      <div className=\"flex items-center space-x-1\">\n                        <span>Name</span>\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </div>\n                    </th>\n                  )}\n                  {visibleColumns.sector && <th className=\"text-left py-3 px-4\">Sector</th>}\n                  {visibleColumns.stage && <th className=\"text-left py-3 px-4\">Stage</th>}\n                  {visibleColumns.tags && <th className=\"text-left py-3 px-4\">Tags</th>}\n                  {visibleColumns.invested && (\n                    <th className=\"text-left py-3 px-4 cursor-pointer\" onClick={() => handleSort('totalInvested')}>\n                      <div className=\"flex items-center space-x-1\">\n                        <span>Invested</span>\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </div>\n                    </th>\n                  )}\n                  {visibleColumns.currentValue && (\n                    <th className=\"text-left py-3 px-4 cursor-pointer\" onClick={() => handleSort('currentValue')}>\n                      <div className=\"flex items-center space-x-1\">\n                        <span>Current Value</span>\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </div>\n                    </th>\n                  )}\n                  {visibleColumns.moic && (\n                    <th className=\"text-left py-3 px-4 cursor-pointer\" onClick={() => handleSort('moic')}>\n                      <div className=\"flex items-center space-x-1\">\n                        <span>MOIC</span>\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </div>\n                    </th>\n                  )}\n                  {visibleColumns.irr && (\n                    <th className=\"text-left py-3 px-4 cursor-pointer\" onClick={() => handleSort('irr')}>\n                      <div className=\"flex items-center space-x-1\">\n                        <span>IRR</span>\n                        <ArrowUpDown className=\"h-4 w-4\" />\n                      </div>\n                    </th>\n                  )}\n                  {visibleColumns.ownership && <th className=\"text-left py-3 px-4\">Ownership</th>}\n                  {visibleColumns.status && <th className=\"text-left py-3 px-4\">Status</th>}\n                  {visibleColumns.partner && <th className=\"text-left py-3 px-4\">Partner</th>}\n                </tr>\n              </thead>\n              <tbody className=\"divide-y\">\n                {filteredInvestments.map((investment) => (\n                  <tr key={investment.id} className=\"hover:bg-gray-50\">\n                    <td className=\"py-3 px-4\">\n                      <Checkbox\n                        checked={selectedInvestments.includes(investment.id)}\n                        onCheckedChange={() => handleSelectInvestment(investment.id)}\n                      />\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Plus className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </td>\n                    {visibleColumns.name && (\n                      <td className=\"py-3 px-4\">\n                        <div>\n                          <div className=\"font-medium text-blue-600 hover:text-blue-800 cursor-pointer\">\n                            {investment.name}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            {investment.dateInvested}\n                          </div>\n                        </div>\n                      </td>\n                    )}\n                    {visibleColumns.sector && (\n                      <td className=\"py-3 px-4\">\n                        <Badge variant=\"outline\">{investment.sector}</Badge>\n                      </td>\n                    )}\n                    {visibleColumns.stage && (\n                      <td className=\"py-3 px-4\">{investment.stage}</td>\n                    )}\n                    {visibleColumns.tags && (\n                      <td className=\"py-3 px-4\">\n                        <div className=\"flex flex-wrap gap-1\">\n                          {investment.tags.slice(0, 2).map((tag, idx) => (\n                            <Badge key={idx} variant=\"outline\" className=\"text-xs bg-blue-50 text-blue-700\">\n                              {tag}\n                            </Badge>\n                          ))}\n                          {investment.tags.length > 2 && (\n                            <Badge variant=\"outline\" className=\"text-xs bg-gray-50\">\n                              +{investment.tags.length - 2}\n                            </Badge>\n                          )}\n                        </div>\n                      </td>\n                    )}\n                    {visibleColumns.invested && (\n                      <td className=\"py-3 px-4 font-medium\">\n                        {formatCurrency(investment.totalInvested)}\n                      </td>\n                    )}\n                    {visibleColumns.currentValue && (\n                      <td className=\"py-3 px-4 font-medium\">\n                        {formatCurrency(investment.currentValue)}\n                      </td>\n                    )}\n                    {visibleColumns.moic && (\n                      <td className=\"py-3 px-4\">\n                        <span className={getMOICColor(investment.moic)}>\n                          {investment.moic.toFixed(2)}x\n                        </span>\n                      </td>\n                    )}\n                    {visibleColumns.irr && (\n                      <td className=\"py-3 px-4\">\n                        <span className={investment.irr >= 0 ? 'text-green-600' : 'text-red-600'}>\n                          {investment.irr.toFixed(1)}%\n                        </span>\n                      </td>\n                    )}\n                    {visibleColumns.ownership && (\n                      <td className=\"py-3 px-4\">{investment.ownershipPercentage.toFixed(1)}%</td>\n                    )}\n                    {visibleColumns.status && (\n                      <td className=\"py-3 px-4\">\n                        <Badge className={getStatusColor(investment.status)}>\n                          {investment.status}\n                        </Badge>\n                      </td>\n                    )}\n                    {visibleColumns.partner && (\n                      <td className=\"py-3 px-4 text-sm\">{investment.partnerLead}</td>\n                    )}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Bulk Actions */}\n      {selectedInvestments.length > 0 && (\n        <Card className=\"bg-blue-50 border-blue-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium\">\n                {selectedInvestments.length} investment{selectedInvestments.length > 1 ? 's' : ''} selected\n              </span>\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <Edit className=\"h-4 w-4 mr-2\" />\n                  Bulk Edit\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Selected\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"text-red-600 border-red-200 hover:bg-red-50\">\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\n                  Delete\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\exit-valuation-editor.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectContent' is defined but never used.","line":12,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectItem' is defined but never used.","line":12,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectTrigger' is defined but never used.","line":12,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":58},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectValue' is defined but never used.","line":12,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":71},{"ruleId":"no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":18,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'valuation' is defined but never used.","line":21,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'date' is defined but never used.","line":21,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":49},{"ruleId":"no-unused-vars","severity":2,"message":"'notes' is defined but never used.","line":21,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":64},{"ruleId":"no-unused-vars","severity":2,"message":"'multiple' is defined but never used.","line":21,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":82}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, Calendar, DollarSign, FileText } from \"lucide-react\";\n\ninterface ExitValuationEditorProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  currentValuation: number;\n  currentDate: string;\n  onUpdateExit: (valuation: number, date: string, notes: string, multiple: string) => void;\n}\n\nconst exitMultiples = [\n  { id: 'conservative', name: 'Conservative (3-5x)', range: '3-5x Revenue' },\n  { id: 'market', name: 'Market (5-8x)', range: '5-8x Revenue' },\n  { id: 'optimistic', name: 'Optimistic (8-12x)', range: '8-12x Revenue' },\n  { id: 'aggressive', name: 'Aggressive (12x+)', range: '12x+ Revenue' },\n  { id: 'custom', name: 'Custom Multiple', range: 'Custom' }\n];\n\nexport default function ExitValuationEditor({ \n  open, \n  onOpenChange, \n  currentValuation, \n  currentDate, \n  onUpdateExit \n}: ExitValuationEditorProps) {\n  const [exitValuation, setExitValuation] = useState(currentValuation);\n  const [exitDate, setExitDate] = useState(currentDate);\n  const [exitNotes, setExitNotes] = useState('');\n  const [selectedMultiple, setSelectedMultiple] = useState('market');\n\n  const formatCurrency = (value: number) => {\n    if (value >= 1000000000) return `$${(value / 1000000000).toFixed(1)}B`;\n    if (value >= 1000000) return `$${(value / 1000000).toFixed(0)}M`;\n    return `$${value.toLocaleString()}`;\n  };\n\n  const handleSave = () => {\n    onUpdateExit(exitValuation, exitDate, exitNotes, selectedMultiple);\n    onOpenChange(false);\n  };\n\n  const handleMultipleChange = (multipleId: string) => {\n    setSelectedMultiple(multipleId);\n    \n    // Auto-adjust valuation based on multiple selection\n    const baseRevenue = 50000000; // Assume $50M revenue for calculation\n    switch (multipleId) {\n      case 'conservative':\n        setExitValuation(baseRevenue * 4); // 4x revenue\n        break;\n      case 'market':\n        setExitValuation(baseRevenue * 6.5); // 6.5x revenue\n        break;\n      case 'optimistic':\n        setExitValuation(baseRevenue * 10); // 10x revenue\n        break;\n      case 'aggressive':\n        setExitValuation(baseRevenue * 15); // 15x revenue\n        break;\n      default:\n        // Keep current valuation for custom\n        break;\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n            <span>Update Exit Valuation</span>\n          </DialogTitle>\n          <DialogDescription>\n            Update your investment thesis and expected exit valuation for this company\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 py-4\">\n          {/* Current vs New Comparison */}\n          <div className=\"grid grid-cols-2 gap-4 p-4 bg-gray-50 rounded-lg\">\n            <div className=\"text-center\">\n              <Label className=\"text-sm text-gray-600\">Current Exit Valuation</Label>\n              <div className=\"text-2xl font-bold text-gray-900 mt-1\">\n                {formatCurrency(currentValuation)}\n              </div>\n              <div className=\"text-sm text-gray-500\">{currentDate}</div>\n            </div>\n            <div className=\"text-center\">\n              <Label className=\"text-sm text-gray-600\">New Exit Valuation</Label>\n              <div className=\"text-2xl font-bold text-blue-600 mt-1\">\n                {formatCurrency(exitValuation)}\n              </div>\n              <div className=\"text-sm text-gray-500\">{exitDate}</div>\n            </div>\n          </div>\n\n          {/* Exit Multiple Selection */}\n          <div className=\"space-y-3\">\n            <Label className=\"text-sm font-medium\">Exit Multiple Framework</Label>\n            <div className=\"grid grid-cols-2 gap-3\">\n              {exitMultiples.map((multiple) => (\n                <Button\n                  key={multiple.id}\n                  variant={selectedMultiple === multiple.id ? \"default\" : \"outline\"}\n                  className={`h-auto p-3 flex flex-col items-start space-y-1 ${\n                    selectedMultiple === multiple.id \n                      ? 'bg-blue-600 hover:bg-blue-700 text-white' \n                      : 'hover:bg-gray-50'\n                  }`}\n                  onClick={() => handleMultipleChange(multiple.id)}\n                >\n                  <span className=\"font-medium text-sm\">{multiple.name}</span>\n                  <span className=\"text-xs opacity-80\">{multiple.range}</span>\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Exit Valuation Input */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"exit-valuation\" className=\"text-sm font-medium\">\n              Exit Valuation ($)\n            </Label>\n            <div className=\"relative\">\n              <DollarSign className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"exit-valuation\"\n                type=\"number\"\n                value={exitValuation}\n                onChange={(e) => setExitValuation(Number(e.target.value))}\n                className=\"pl-10 bg-yellow-50 border-yellow-300\"\n                placeholder=\"3000000000\"\n              />\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              Enter the expected exit valuation in dollars (e.g., 3000000000 for $3B)\n            </p>\n          </div>\n\n          {/* Exit Date */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"exit-date\" className=\"text-sm font-medium\">\n              Expected Exit Date\n            </Label>\n            <div className=\"relative\">\n              <Calendar className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"exit-date\"\n                type=\"date\"\n                value={exitDate}\n                onChange={(e) => setExitDate(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n\n          {/* Investment Thesis Notes */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"exit-notes\" className=\"text-sm font-medium\">\n              Investment Thesis & Exit Notes\n            </Label>\n            <Textarea\n              id=\"exit-notes\"\n              value={exitNotes}\n              onChange={(e) => setExitNotes(e.target.value)}\n              placeholder=\"Update your investment thesis, market opportunity, competitive positioning, and rationale for this exit valuation...\"\n              rows={4}\n              className=\"resize-none\"\n            />\n          </div>\n\n          {/* Key Metrics Summary */}\n          <div className=\"p-4 border border-gray-200 rounded-lg space-y-3\">\n            <div className=\"flex items-center space-x-2\">\n              <FileText className=\"h-4 w-4 text-gray-600\" />\n              <Label className=\"text-sm font-medium\">Exit Scenario Summary</Label>\n            </div>\n            <div className=\"grid grid-cols-3 gap-4 text-sm\">\n              <div>\n                <span className=\"text-gray-600\">Valuation Change:</span>\n                <div className={`font-semibold ${\n                  exitValuation > currentValuation ? 'text-green-600' : \n                  exitValuation < currentValuation ? 'text-red-600' : 'text-gray-600'\n                }`}>\n                  {exitValuation > currentValuation ? '+' : ''}\n                  {((exitValuation - currentValuation) / currentValuation * 100).toFixed(1)}%\n                </div>\n              </div>\n              <div>\n                <span className=\"text-gray-600\">Exit Multiple:</span>\n                <div className=\"font-semibold\">\n                  {exitMultiples.find(m => m.id === selectedMultiple)?.name.split(' (')[0] || 'Custom'}\n                </div>\n              </div>\n              <div>\n                <span className=\"text-gray-600\">Time to Exit:</span>\n                <div className=\"font-semibold\">\n                  {Math.ceil((new Date(exitDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24 * 365))} years\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n          <Button \n            variant=\"outline\" \n            onClick={() => onOpenChange(false)}\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleSave}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n          >\n            Update Exit Valuation\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\future-rounds-builder.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":16,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used.","line":17,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":45}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Calendar, Info } from \"lucide-react\";\n\ninterface FutureRoundsBuilderProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onBuildRounds: (config: FutureRoundsConfig) => void;\n}\n\ninterface FutureRoundsConfig {\n  sectorProfile: string;\n  startingRound: string;\n  graduationRate: string;\n  startingDate: string;\n  nextRoundDate: string;\n}\n\nconst sectorProfiles = [\n  { id: 'default', name: 'Default' },\n  { id: 'enterprise-saas', name: 'Enterprise SaaS' },\n  { id: 'fintech', name: 'FinTech' },\n  { id: 'marketplace', name: 'Marketplace' },\n  { id: 'healthcare', name: 'Healthcare' },\n  { id: 'ai-ml', name: 'AI/ML' },\n  { id: 'biotech', name: 'Biotech' }\n];\n\nconst fundingRounds = [\n  'Pre-Seed',\n  'Seed',\n  'Series A',\n  'Series B',\n  'Series C',\n  'Series D',\n  'Series E+'\n];\n\nconst graduationRateOptions = [\n  { id: 'sector-based', name: 'Based on Sector' },\n  { id: 'custom', name: 'Custom Rate' },\n  { id: 'high', name: 'High (85%)' },\n  { id: 'medium', name: 'Medium (65%)' },\n  { id: 'low', name: 'Low (45%)' }\n];\n\nconst startingDateOptions = [\n  { id: 'sector-based', name: 'Based on Sector' },\n  { id: 'custom', name: 'Custom Date' },\n  { id: 'fund-start', name: 'Fund Start Date' },\n  { id: 'investment-date', name: 'Investment Date' }\n];\n\nexport default function FutureRoundsBuilder({ open, onOpenChange, onBuildRounds }: FutureRoundsBuilderProps) {\n  const [config, setConfig] = useState<FutureRoundsConfig>({\n    sectorProfile: 'default',\n    startingRound: 'pre-seed',\n    graduationRate: 'sector-based',\n    startingDate: 'custom',\n    nextRoundDate: '2024-06-15'\n  });\n\n  const handleBuild = () => {\n    onBuildRounds(config);\n    onOpenChange(false);\n  };\n\n  const handleConfigChange = (field: keyof FutureRoundsConfig, value: string) => {\n    setConfig(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-semibold\">Build Future Rounds</DialogTitle>\n          <DialogDescription>\n            Configure future funding rounds based on sector profiles and graduation rates\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6 py-4\">\n          {/* Sector Profile */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"sector-profile\" className=\"text-sm font-medium\">\n              Sector Profile\n            </Label>\n            <Select \n              value={config.sectorProfile} \n              onValueChange={(value) => handleConfigChange('sectorProfile', value)}\n            >\n              <SelectTrigger className=\"w-full\">\n                <SelectValue placeholder=\"Select sector profile\" />\n              </SelectTrigger>\n              <SelectContent>\n                {sectorProfiles.map((profile) => (\n                  <SelectItem key={profile.id} value={profile.id}>\n                    {profile.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Starting Round */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"starting-round\" className=\"text-sm font-medium\">\n              Starting Round\n            </Label>\n            <Select \n              value={config.startingRound} \n              onValueChange={(value) => handleConfigChange('startingRound', value)}\n            >\n              <SelectTrigger className=\"w-full\">\n                <SelectValue placeholder=\"Select starting round\" />\n              </SelectTrigger>\n              <SelectContent>\n                {fundingRounds.map((round) => (\n                  <SelectItem key={round.toLowerCase().replace(/\\s+/g, '-')} value={round.toLowerCase().replace(/\\s+/g, '-')}>\n                    {round}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Graduation Rate */}\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Label htmlFor=\"graduation-rate\" className=\"text-sm font-medium\">\n                Graduation Rate\n              </Label>\n              <Info className=\"h-4 w-4 text-gray-400\" />\n            </div>\n            <Select \n              value={config.graduationRate} \n              onValueChange={(value) => handleConfigChange('graduationRate', value)}\n            >\n              <SelectTrigger className=\"w-full\">\n                <SelectValue placeholder=\"Select graduation rate\" />\n              </SelectTrigger>\n              <SelectContent>\n                {graduationRateOptions.map((option) => (\n                  <SelectItem key={option.id} value={option.id}>\n                    {option.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Starting Date */}\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Label htmlFor=\"starting-date\" className=\"text-sm font-medium\">\n                Starting Date\n              </Label>\n              <Info className=\"h-4 w-4 text-gray-400\" />\n            </div>\n            <Select \n              value={config.startingDate} \n              onValueChange={(value) => handleConfigChange('startingDate', value)}\n            >\n              <SelectTrigger className=\"w-full\">\n                <SelectValue placeholder=\"Select starting date option\" />\n              </SelectTrigger>\n              <SelectContent>\n                {startingDateOptions.map((option) => (\n                  <SelectItem key={option.id} value={option.id}>\n                    {option.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Date of Next Round */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"next-round-date\" className=\"text-sm font-medium\">\n              Date of Next Round\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"next-round-date\"\n                type=\"date\"\n                value={config.nextRoundDate}\n                onChange={(e) => handleConfigChange('nextRoundDate', e.target.value)}\n                className=\"w-full\"\n              />\n              <Calendar className=\"absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none\" />\n            </div>\n          </div>\n\n          {/* Information Box */}\n          <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n            <div className=\"flex items-start space-x-2\">\n              <Info className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n              <div className=\"text-sm text-blue-700\">\n                <p className=\"font-medium mb-2\">Future Rounds Configuration</p>\n                <ul className=\"space-y-1 text-xs\">\n                  <li>ΓÇó Sector profiles determine default graduation rates and timing patterns</li>\n                  <li>ΓÇó Starting round sets the initial investment stage for future round generation</li>\n                  <li>ΓÇó Graduation rates control the probability of advancing to subsequent rounds</li>\n                  <li>ΓÇó Custom dates allow precise timing control for investment planning</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n          <Button \n            variant=\"outline\" \n            onClick={() => onOpenChange(false)}\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleBuild}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n          >\n            Build\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\investments-layout.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used.","line":10,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used.","line":10,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'MoreHorizontal' is defined but never used.","line":19,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":11}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { \n  Plus, \n  Search, \n  Calendar, \n  TrendingUp, \n  ChevronDown, \n  MoreHorizontal,\n  Eye,\n  BarChart3,\n  Edit2,\n  Filter,\n  Download,\n  Upload\n} from 'lucide-react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { cn } from '@/lib/utils';\n\ninterface Investment {\n  id: string;\n  name: string;\n  status: 'Active' | 'Realized' | 'Written Off';\n  stage: string;\n  currentStage: string;\n  investmentDate: string;\n  invested: number;\n  moic: number;\n  ownership: number;\n  currentValue: number;\n  irr?: number;\n}\n\nconst SAMPLE_INVESTMENTS: Investment[] = [\n  {\n    id: '1',\n    name: 'AlphaTech',\n    status: 'Active',\n    stage: 'Series A',\n    currentStage: 'Series B',\n    investmentDate: 'Jan 2021',\n    invested: 2400000,\n    moic: 1.85,\n    ownership: 4.2,\n    currentValue: 4440000,\n    irr: 42.3\n  },\n  {\n    id: '2',\n    name: 'Amplio',\n    status: 'Active',\n    stage: 'Series A',\n    currentStage: 'Series A',\n    investmentDate: 'Jan 2021',\n    invested: 2400000,\n    moic: 1.65,\n    ownership: 3.8,\n    currentValue: 3960000,\n    irr: 28.7\n  },\n  {\n    id: '3',\n    name: 'Cybros',\n    status: 'Active',\n    stage: 'Seed',\n    currentStage: 'Seed',\n    investmentDate: 'Jan 2021',\n    invested: 1200000,\n    moic: 2.15,\n    ownership: 5.2,\n    currentValue: 2580000,\n    irr: 65.4\n  },\n  {\n    id: '4',\n    name: 'DigitalWave',\n    status: 'Active',\n    stage: 'Seed',\n    currentStage: 'Seed',\n    investmentDate: 'Dec 2021',\n    invested: 1500000,\n    moic: 1.45,\n    ownership: 4.8,\n    currentValue: 2175000,\n    irr: 18.9\n  },\n  {\n    id: '5',\n    name: 'EchelonTech',\n    status: 'Realized',\n    stage: 'Seed',\n    currentStage: 'Exit',\n    investmentDate: 'Jan 2021',\n    invested: 1000000,\n    moic: 3.25,\n    ownership: 0,\n    currentValue: 3250000,\n    irr: 89.2\n  }\n];\n\nexport default function InvestmentsLayout() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState('all');\n  const [selectedStage, setSelectedStage] = useState('all');\n\n  const filteredInvestments = SAMPLE_INVESTMENTS.filter(investment => {\n    const matchesSearch = investment.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = selectedStatus === 'all' || investment.status === selectedStatus;\n    const matchesStage = selectedStage === 'all' || investment.stage === selectedStage;\n    return matchesSearch && matchesStatus && matchesStage;\n  });\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      'Active': 'bg-blue-100 text-blue-800 border-blue-200',\n      'Realized': 'bg-green-100 text-green-800 border-green-200',\n      'Written Off': 'bg-red-100 text-red-800 border-red-200'\n    };\n    return variants[status as keyof typeof variants] || 'bg-gray-100 text-gray-800';\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const formatPercent = (value: number, decimals = 1) => {\n    return `${value.toFixed(decimals)}%`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Tactyc Ventures II L.P. / Investments</h1>\n          <p className=\"text-gray-600 mt-1\">View and manage investments</p>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <Tabs defaultValue=\"direct\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2 max-w-md\">\n          <TabsTrigger value=\"direct\" className=\"text-sm\">Direct Investments</TabsTrigger>\n          <TabsTrigger value=\"fund\" className=\"text-sm\">Fund Investments</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"direct\" className=\"space-y-6\">\n          {/* Action Bar */}\n          <div className=\"flex flex-wrap items-center gap-3 pb-4 border-b border-gray-200\">\n            <Button className=\"bg-blue-600 hover:bg-blue-700 text-white\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Investment\n              <ChevronDown className=\"h-4 w-4 ml-2\" />\n            </Button>\n            \n            <Button variant=\"outline\" className=\"text-gray-700 border-gray-300\">\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Bulk Import\n              <ChevronDown className=\"h-4 w-4 ml-2\" />\n            </Button>\n\n            <div className=\"flex items-center gap-2 ml-auto\">\n              <Button variant=\"outline\" size=\"sm\" className=\"text-gray-600\">\n                <Calendar className=\"h-4 w-4 mr-1\" />\n                Upcoming Rounds\n              </Button>\n              \n              <Button variant=\"outline\" size=\"sm\" className=\"text-gray-600\">\n                <BarChart3 className=\"h-4 w-4 mr-1\" />\n                Planning View\n              </Button>\n              \n              <Button variant=\"outline\" size=\"sm\" className=\"text-gray-600\">\n                <TrendingUp className=\"h-4 w-4 mr-1\" />\n                FMV Update\n              </Button>\n            </div>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"flex items-center gap-4 py-3\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search by company name. Press Enter to search.\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 bg-white border-gray-300\"\n              />\n            </div>\n            \n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"Active\">Active</SelectItem>\n                <SelectItem value=\"Realized\">Realized</SelectItem>\n                <SelectItem value=\"Written Off\">Written Off</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedStage} onValueChange={setSelectedStage}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"Stage\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Stages</SelectItem>\n                <SelectItem value=\"Seed\">Seed</SelectItem>\n                <SelectItem value=\"Series A\">Series A</SelectItem>\n                <SelectItem value=\"Series B\">Series B</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Investments Table */}\n          <Card>\n            <Table>\n              <TableHeader>\n                <TableRow className=\"bg-gray-50\">\n                  <TableHead className=\"w-12\">Actions</TableHead>\n                  <TableHead className=\"font-medium\">Name</TableHead>\n                  <TableHead className=\"font-medium\">Status</TableHead>\n                  <TableHead className=\"font-medium\">Investment Date</TableHead>\n                  <TableHead className=\"font-medium\">Entry Stage</TableHead>\n                  <TableHead className=\"font-medium\">Current Stage</TableHead>\n                  <TableHead className=\"font-medium text-right\">Invested</TableHead>\n                  <TableHead className=\"font-medium text-right\">Current Value</TableHead>\n                  <TableHead className=\"font-medium text-right\">MOIC</TableHead>\n                  <TableHead className=\"font-medium text-right\">IRR</TableHead>\n                  <TableHead className=\"font-medium text-right\">Ownership</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredInvestments.map((investment) => (\n                  <TableRow key={investment.id} className=\"hover:bg-gray-50 cursor-pointer\">\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                          <Eye className=\"h-4 w-4 text-gray-500\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                          <BarChart3 className=\"h-4 w-4 text-gray-500\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                          <Edit2 className=\"h-4 w-4 text-gray-500\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">\n                      <a \n                        href={`/investments/company/${investment.id}`}\n                        className=\"text-blue-600 hover:text-blue-800 cursor-pointer\"\n                      >\n                        {investment.name}\n                      </a>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={cn(\"text-xs border\", getStatusBadge(investment.status))}>\n                        {investment.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-gray-600\">{investment.investmentDate}</TableCell>\n                    <TableCell className=\"text-gray-600\">{investment.stage}</TableCell>\n                    <TableCell className=\"text-gray-600\">{investment.currentStage}</TableCell>\n                    <TableCell className=\"text-right font-medium\">\n                      {formatCurrency(investment.invested)}\n                    </TableCell>\n                    <TableCell className=\"text-right font-medium\">\n                      {formatCurrency(investment.currentValue)}\n                    </TableCell>\n                    <TableCell className=\"text-right font-medium\">\n                      <span className={cn(\n                        investment.moic >= 2 ? \"text-green-600\" : \n                        investment.moic >= 1 ? \"text-blue-600\" : \"text-red-600\"\n                      )}>\n                        {investment.moic.toFixed(2)}x\n                      </span>\n                    </TableCell>\n                    <TableCell className=\"text-right font-medium\">\n                      {investment.irr ? (\n                        <span className={cn(\n                          investment.irr >= 30 ? \"text-green-600\" : \n                          investment.irr >= 15 ? \"text-blue-600\" : \"text-red-600\"\n                        )}>\n                          {formatPercent(investment.irr)}\n                        </span>\n                      ) : '-'}\n                    </TableCell>\n                    <TableCell className=\"text-right font-medium\">\n                      {formatPercent(investment.ownership)}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </Card>\n\n          {/* Summary Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 pt-4\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-2xl font-bold\">5</div>\n                <p className=\"text-sm text-gray-600\">Total Investments</p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-2xl font-bold\">{formatCurrency(8500000)}</div>\n                <p className=\"text-sm text-gray-600\">Total Invested</p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-2xl font-bold\">{formatCurrency(16405000)}</div>\n                <p className=\"text-sm text-gray-600\">Current Portfolio Value</p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-2xl font-bold text-green-600\">1.93x</div>\n                <p className=\"text-sm text-gray-600\">Average MOIC</p>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n        \n        <TabsContent value=\"fund\">\n          <div className=\"text-center py-12\">\n            <p className=\"text-gray-500\">Fund Investments will be displayed here</p>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\liquidation-preferences-dialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":20,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Info, DollarSign, TrendingDown, AlertTriangle } from \"lucide-react\";\n\ninterface LiquidationPreferencesDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  investment?: {\n    id: string;\n    company: string;\n    amount: number;\n  };\n  performanceCase?: {\n    id: string;\n    name: string;\n  };\n}\n\nexport default function LiquidationPreferencesDialog({ \n  isOpen, \n  onOpenChange, \n  investment,\n  performanceCase \n}: LiquidationPreferencesDialogProps) {\n  const [enableLiqPrefs, setEnableLiqPrefs] = useState(false);\n  const [totalLiqPrefOwned, setTotalLiqPrefOwned] = useState(\"4000000\");\n  const [liqPrefType, setLiqPrefType] = useState(\"Non-Participating\");\n  const [hasLiqPrefCap, setHasLiqPrefCap] = useState(false);\n  const [liqPrefCapAmount, setLiqPrefCapAmount] = useState(\"6000000\");\n  const [totalLiqPrefsInFront, setTotalLiqPrefsInFront] = useState(\"0\");\n  const [totalOtherLiqPrefsPariPassu, setTotalOtherLiqPrefsPariPassu] = useState(\"0\");\n  const [totalLiqPrefsSenior, setTotalLiqPrefsSenior] = useState(\"0\");\n\n  const handleSave = () => {\n    console.log(\"Saving liquidation preferences:\", {\n      enableLiqPrefs,\n      totalLiqPrefOwned: parseFloat(totalLiqPrefOwned),\n      liqPrefType,\n      hasLiqPrefCap,\n      liqPrefCapAmount: hasLiqPrefCap ? parseFloat(liqPrefCapAmount) : null,\n      totalLiqPrefsInFront: parseFloat(totalLiqPrefsInFront),\n      totalOtherLiqPrefsPariPassu: parseFloat(totalOtherLiqPrefsPariPassu),\n      totalLiqPrefsSenior: parseFloat(totalLiqPrefsSenior),\n      investmentId: investment?.id,\n      performanceCaseId: performanceCase?.id\n    });\n    onOpenChange(false);\n  };\n\n  const handleImportFromCase = () => {\n    console.log(\"Import liquidation preferences from another case\");\n    // This would open a case selection dialog\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[650px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <TrendingDown className=\"h-5 w-5\" />\n            <span>Liquidation Preferences</span>\n          </DialogTitle>\n          <DialogDescription>\n            Configure liquidation preference waterfall for {investment?.company || \"this investment\"} - {performanceCase?.name || \"Performance Case\"}\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Enable Liquidation Preferences */}\n          <div className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg bg-gray-50\">\n            <div className=\"flex items-center space-x-3\">\n              <AlertTriangle className=\"h-5 w-5 text-amber-600\" />\n              <div>\n                <div className=\"font-medium\">Enable Liquidation Preferences</div>\n                <div className=\"text-sm text-muted-foreground\">\n                  Turn on to incorporate liq pref impact in exit scenarios\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Switch \n                checked={enableLiqPrefs}\n                onCheckedChange={setEnableLiqPrefs}\n              />\n              <Badge variant={enableLiqPrefs ? \"default\" : \"secondary\"}>\n                {enableLiqPrefs ? \"Active\" : \"Inactive\"}\n              </Badge>\n            </div>\n          </div>\n\n          {enableLiqPrefs && (\n            <>\n              {/* Basic Liquidation Preference Settings */}\n              <Card className=\"border-amber-200 bg-amber-50\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm flex items-center space-x-2\">\n                    <DollarSign className=\"h-4 w-4\" />\n                    <span>Liquidation Preference Details</span>\n                  </CardTitle>\n                  <CardDescription className=\"text-xs\">\n                    Configure the basic liquidation preference parameters\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Total Liq Pref Owned */}\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm flex items-center space-x-2\">\n                      <span>Total Liq Pref Owned ($)</span>\n                      <Info className=\"h-3 w-3 text-muted-foreground\" />\n                    </Label>\n                    <div className=\"relative\">\n                      <Input\n                        value={totalLiqPrefOwned}\n                        onChange={(e) => setTotalLiqPrefOwned(e.target.value)}\n                        className=\"pl-8 bg-yellow-50 border-yellow-200 font-mono\"\n                        placeholder=\"4000000\"\n                      />\n                      <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                        $\n                      </span>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Total amount of liquidation preference owned by your fund. For a 2x Liq Pref on $2M investment, enter $4M.\n                    </p>\n                  </div>\n\n                  {/* Liq Pref Type */}\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm flex items-center space-x-2\">\n                      <span>Liq Pref Type</span>\n                      <Info className=\"h-3 w-3 text-muted-foreground\" />\n                    </Label>\n                    <Select value={liqPrefType} onValueChange={setLiqPrefType}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Non-Participating\">Non-Participating</SelectItem>\n                        <SelectItem value=\"Participating\">Participating</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Specify whether your liquidation preference is participating or non-participating.\n                    </p>\n                  </div>\n\n                  {/* Liq Pref Cap (for participating only) */}\n                  {liqPrefType === \"Participating\" && (\n                    <>\n                      <div className=\"flex items-center justify-between p-3 border border-blue-200 rounded-lg\">\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-sm font-medium\">Liq Pref Cap</span>\n                          <Info className=\"h-3 w-3 text-muted-foreground\" />\n                        </div>\n                        <Switch \n                          checked={hasLiqPrefCap}\n                          onCheckedChange={setHasLiqPrefCap}\n                        />\n                      </div>\n\n                      {hasLiqPrefCap && (\n                        <div className=\"space-y-2\">\n                          <Label className=\"text-sm\">Liq Pref Cap Amount ($)</Label>\n                          <div className=\"relative\">\n                            <Input\n                              value={liqPrefCapAmount}\n                              onChange={(e) => setLiqPrefCapAmount(e.target.value)}\n                              className=\"pl-8 bg-yellow-50 border-yellow-200 font-mono\"\n                              placeholder=\"6000000\"\n                            />\n                            <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                              $\n                            </span>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground\">\n                            For a 3x cap on $2M investment, enter $6M as the cap amount.\n                          </p>\n                        </div>\n                      )}\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Separator />\n\n              {/* Waterfall Structure */}\n              <Card className=\"border-blue-200 bg-blue-50\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-sm\">Waterfall Structure</CardTitle>\n                  <CardDescription className=\"text-xs\">\n                    Define the liquidation preference waterfall hierarchy\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Total Liq Prefs in Front */}\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm flex items-center space-x-2\">\n                      <span>Total Liq Prefs in Front ($)</span>\n                      <Info className=\"h-3 w-3 text-muted-foreground\" />\n                    </Label>\n                    <div className=\"relative\">\n                      <Input\n                        value={totalLiqPrefsInFront}\n                        onChange={(e) => setTotalLiqPrefsInFront(e.target.value)}\n                        className=\"pl-8 font-mono\"\n                        placeholder=\"0\"\n                      />\n                      <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                        $\n                      </span>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Total amount of liquidation preferences senior to your position.\n                    </p>\n                  </div>\n\n                  {/* Total Other Liq Prefs Pari Passu */}\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm flex items-center space-x-2\">\n                      <span>Total Other Liq Prefs Pari Passu ($)</span>\n                      <Info className=\"h-3 w-3 text-muted-foreground\" />\n                    </Label>\n                    <div className=\"relative\">\n                      <Input\n                        value={totalOtherLiqPrefsPariPassu}\n                        onChange={(e) => setTotalOtherLiqPrefsPariPassu(e.target.value)}\n                        className=\"pl-8 font-mono\"\n                        placeholder=\"0\"\n                      />\n                      <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                        $\n                      </span>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Amount of liquidation preferences pari passu to yours (not including your own).\n                    </p>\n                  </div>\n\n                  {/* Total Liq Prefs Senior */}\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-sm flex items-center space-x-2\">\n                      <span>Total Liq Prefs Junior ($)</span>\n                      <Info className=\"h-3 w-3 text-muted-foreground\" />\n                    </Label>\n                    <div className=\"relative\">\n                      <Input\n                        value={totalLiqPrefsSenior}\n                        onChange={(e) => setTotalLiqPrefsSenior(e.target.value)}\n                        className=\"pl-8 font-mono\"\n                        placeholder=\"0\"\n                      />\n                      <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                        $\n                      </span>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Total amount of liquidation preferences below or junior to yours in the exit waterfall.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Waterfall Summary */}\n              <div className=\"p-4 bg-gray-50 rounded-lg\">\n                <h4 className=\"text-sm font-medium mb-3\">Liquidation Waterfall Summary</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">1. Senior Liq Prefs:</span>\n                    <span className=\"font-mono\">${parseInt(totalLiqPrefsInFront).toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">2. Your Liq Pref:</span>\n                    <span className=\"font-mono\">${parseInt(totalLiqPrefOwned).toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">3. Pari Passu Liq Prefs:</span>\n                    <span className=\"font-mono\">${parseInt(totalOtherLiqPrefsPariPassu).toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">4. Junior Liq Prefs:</span>\n                    <span className=\"font-mono\">${parseInt(totalLiqPrefsSenior).toLocaleString()}</span>\n                  </div>\n                  <Separator className=\"my-2\" />\n                  <div className=\"flex justify-between font-medium\">\n                    <span>Total Liq Prefs:</span>\n                    <span className=\"font-mono\">\n                      ${(parseInt(totalLiqPrefsInFront) + parseInt(totalLiqPrefOwned) + parseInt(totalOtherLiqPrefsPariPassu) + parseInt(totalLiqPrefsSenior)).toLocaleString()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between pt-4\">\n            <Button variant=\"outline\" onClick={handleImportFromCase}>\n              Import from Another Case\n            </Button>\n            <div className=\"flex space-x-3\">\n              <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n                Cancel\n              </Button>\n              <Button \n                onClick={handleSave}\n                className=\"povc-bg-primary hover:bg-blue-700\"\n              >\n                Save Liq Prefs\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\new-round-dialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":20,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { DollarSign, Calendar, TrendingUp, Info, Plus } from \"lucide-react\";\n\ninterface NewRoundDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  investment?: {\n    id: string;\n    company: string;\n  };\n}\n\nexport default function NewRoundDialog({ \n  isOpen, \n  onOpenChange, \n  investment \n}: NewRoundDialogProps) {\n  const [securityType, setSecurityType] = useState(\"Other\");\n  const [month, setMonth] = useState(\"Jun-2024\");\n  const [roundName, setRoundName] = useState(\"Warrants\");\n  const [graduationRate, setGraduationRate] = useState(\"100\");\n  const [currency, setCurrency] = useState(\"United States Dollar ($)\");\n  const [investmentAmount, setInvestmentAmount] = useState(\"25000\");\n  const [roundSize, setRoundSize] = useState(\"25000\");\n  const [preMoneyValuation, setPreMoneyValuation] = useState(\"18700000\");\n  \n  // Advanced share data\n  const [showAdvancedShares, setShowAdvancedShares] = useState(false);\n  const [sharePrice, setSharePrice] = useState(\"1.5\");\n  const [newSharesPurchased, setNewSharesPurchased] = useState(\"16666.666667\");\n  const [totalSharesOwned, setTotalSharesOwned] = useState(\"683333.333333\");\n  const [newSharesIssued, setNewSharesIssued] = useState(\"16666.666667\");\n  const [fullyDilutedShares, setFullyDilutedShares] = useState(\"12483333.333333\");\n\n  const handleSave = () => {\n    console.log(\"Saving new round:\", {\n      securityType,\n      month,\n      roundName,\n      graduationRate: parseFloat(graduationRate),\n      currency,\n      investmentAmount: parseFloat(investmentAmount),\n      roundSize: parseFloat(roundSize),\n      preMoneyValuation: parseFloat(preMoneyValuation),\n      ...(showAdvancedShares && {\n        sharePrice: parseFloat(sharePrice),\n        newSharesPurchased: parseFloat(newSharesPurchased),\n        totalSharesOwned: parseFloat(totalSharesOwned),\n        newSharesIssued: parseFloat(newSharesIssued),\n        fullyDilutedShares: parseFloat(fullyDilutedShares)\n      })\n    });\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Plus className=\"h-5 w-5\" />\n            <span>Round</span>\n          </DialogTitle>\n          <DialogDescription>\n            Add a new investment round for {investment?.company || \"this investment\"}\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Security Type */}\n          <div className=\"space-y-2\">\n            <Label className=\"flex items-center space-x-2\">\n              <span>Security Type</span>\n              <Info className=\"h-3 w-3 text-muted-foreground\" />\n            </Label>\n            <Select value={securityType} onValueChange={setSecurityType}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Equity\">Equity</SelectItem>\n                <SelectItem value=\"Convertible Note\">Convertible Note</SelectItem>\n                <SelectItem value=\"SAFE\">SAFE</SelectItem>\n                <SelectItem value=\"Warrant\">Warrant</SelectItem>\n                <SelectItem value=\"Other\">Other</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Month */}\n          <div className=\"space-y-2\">\n            <Label className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-4 w-4\" />\n              <span>Month</span>\n              <Info className=\"h-3 w-3 text-muted-foreground\" />\n            </Label>\n            <Input\n              value={month}\n              onChange={(e) => setMonth(e.target.value)}\n              placeholder=\"Jun-2024\"\n              className=\"font-mono\"\n            />\n          </div>\n\n          {/* Round Name */}\n          <div className=\"space-y-2\">\n            <Label className=\"flex items-center space-x-2\">\n              <span>Round Name</span>\n              <Info className=\"h-3 w-3 text-muted-foreground\" />\n            </Label>\n            <Input\n              value={roundName}\n              onChange={(e) => setRoundName(e.target.value)}\n              placeholder=\"Warrants\"\n            />\n          </div>\n\n          {/* Graduation Rate */}\n          <div className=\"space-y-2\">\n            <Label className=\"flex items-center space-x-2\">\n              <span>Graduation Rate (%)</span>\n              <Info className=\"h-3 w-3 text-muted-foreground\" />\n            </Label>\n            <div className=\"relative\">\n              <Input\n                value={graduationRate}\n                onChange={(e) => setGraduationRate(e.target.value)}\n                className=\"pr-8 text-center\"\n                placeholder=\"100\"\n              />\n              <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                %\n              </span>\n            </div>\n          </div>\n\n          {/* Round Currency */}\n          <div className=\"space-y-2\">\n            <Label className=\"flex items-center space-x-2\">\n              <span>Round Currency</span>\n              <Info className=\"h-3 w-3 text-muted-foreground\" />\n            </Label>\n            <Select value={currency} onValueChange={setCurrency}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"United States Dollar ($)\">United States Dollar ($)</SelectItem>\n                <SelectItem value=\"Euro (Γé¼)\">Euro (Γé¼)</SelectItem>\n                <SelectItem value=\"British Pound (┬ú)\">British Pound (┬ú)</SelectItem>\n                <SelectItem value=\"Canadian Dollar (CAD)\">Canadian Dollar (CAD)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Investment Amount */}\n          <div className=\"space-y-2\">\n            <Label className=\"flex items-center space-x-2\">\n              <DollarSign className=\"h-4 w-4\" />\n              <span>Investment Amount ($)</span>\n              <Info className=\"h-3 w-3 text-muted-foreground\" />\n            </Label>\n            <div className=\"relative\">\n              <Input\n                value={investmentAmount}\n                onChange={(e) => setInvestmentAmount(e.target.value)}\n                className=\"pl-8 bg-yellow-50 border-yellow-200 font-mono\"\n                placeholder=\"25000\"\n              />\n              <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                $\n              </span>\n            </div>\n          </div>\n\n          {/* Round Size */}\n          <div className=\"space-y-2\">\n            <Label className=\"flex items-center space-x-2\">\n              <span>Round Size ($)</span>\n              <Info className=\"h-3 w-3 text-muted-foreground\" />\n            </Label>\n            <div className=\"relative\">\n              <Input\n                value={roundSize}\n                onChange={(e) => setRoundSize(e.target.value)}\n                className=\"pl-8 bg-yellow-50 border-yellow-200 font-mono\"\n                placeholder=\"25000\"\n              />\n              <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                $\n              </span>\n            </div>\n          </div>\n\n          {/* Pre-Money Valuation */}\n          <div className=\"space-y-2\">\n            <Label className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"h-4 w-4\" />\n              <span>Pre-Money Valuation ($)</span>\n              <Info className=\"h-3 w-3 text-muted-foreground\" />\n            </Label>\n            <div className=\"relative\">\n              <Input\n                value={preMoneyValuation}\n                onChange={(e) => setPreMoneyValuation(e.target.value)}\n                className=\"pl-8 bg-yellow-50 border-yellow-200 font-mono\"\n                placeholder=\"18700000\"\n              />\n              <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                $\n              </span>\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Advanced Share Data Toggle */}\n          <div className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n            <div className=\"flex items-center space-x-2\">\n              <Info className=\"h-4 w-4 text-blue-600\" />\n              <span className=\"text-blue-600\">Advanced Share Data</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Switch \n                checked={showAdvancedShares}\n                onCheckedChange={setShowAdvancedShares}\n              />\n              <Badge variant={showAdvancedShares ? \"default\" : \"secondary\"}>\n                {showAdvancedShares ? \"Enabled\" : \"Disabled\"}\n              </Badge>\n            </div>\n          </div>\n\n          {/* Advanced Share Data Section */}\n          {showAdvancedShares && (\n            <Card className=\"border-blue-200 bg-blue-50\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm\">Share Details</CardTitle>\n                <CardDescription className=\"text-xs\">\n                  Enter precise share information for accurate calculations\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Share Price */}\n                <div className=\"space-y-2\">\n                  <Label className=\"text-xs flex items-center space-x-1\">\n                    <span>Share Price ($)</span>\n                    <Info className=\"h-3 w-3 text-muted-foreground\" />\n                  </Label>\n                  <div className=\"relative\">\n                    <Input\n                      value={sharePrice}\n                      onChange={(e) => setSharePrice(e.target.value)}\n                      className=\"pl-6 bg-yellow-50 border-yellow-200 font-mono text-sm\"\n                      placeholder=\"1.5\"\n                    />\n                    <span className=\"absolute left-2 top-1/2 transform -translate-y-1/2 text-muted-foreground text-sm\">\n                      $\n                    </span>\n                  </div>\n                </div>\n\n                {/* New Shares Purchased */}\n                <div className=\"space-y-2\">\n                  <Label className=\"text-xs flex items-center space-x-1\">\n                    <span>New Shares Purchased</span>\n                    <Info className=\"h-3 w-3 text-muted-foreground\" />\n                  </Label>\n                  <Input\n                    value={newSharesPurchased}\n                    onChange={(e) => setNewSharesPurchased(e.target.value)}\n                    className=\"bg-yellow-50 border-yellow-200 font-mono text-sm\"\n                    placeholder=\"16666.666667\"\n                  />\n                </div>\n\n                {/* Total Shares Owned */}\n                <div className=\"space-y-2\">\n                  <Label className=\"text-xs flex items-center space-x-1\">\n                    <span>Total Shares Owned</span>\n                    <Info className=\"h-3 w-3 text-muted-foreground\" />\n                  </Label>\n                  <Input\n                    value={totalSharesOwned}\n                    onChange={(e) => setTotalSharesOwned(e.target.value)}\n                    className=\"bg-yellow-50 border-yellow-200 font-mono text-sm\"\n                    placeholder=\"683333.333333\"\n                  />\n                </div>\n\n                {/* New Shares Issued */}\n                <div className=\"space-y-2\">\n                  <Label className=\"text-xs flex items-center space-x-1\">\n                    <span>New Shares Issued</span>\n                    <Info className=\"h-3 w-3 text-muted-foreground\" />\n                  </Label>\n                  <Input\n                    value={newSharesIssued}\n                    onChange={(e) => setNewSharesIssued(e.target.value)}\n                    className=\"bg-yellow-50 border-yellow-200 font-mono text-sm\"\n                    placeholder=\"16666.666667\"\n                  />\n                </div>\n\n                {/* Fully Diluted Shares Outstanding */}\n                <div className=\"space-y-2\">\n                  <Label className=\"text-xs flex items-center space-x-1\">\n                    <span>Fully Diluted Shares Outstanding</span>\n                    <Info className=\"h-3 w-3 text-muted-foreground\" />\n                  </Label>\n                  <Input\n                    value={fullyDilutedShares}\n                    onChange={(e) => setFullyDilutedShares(e.target.value)}\n                    className=\"bg-yellow-50 border-yellow-200 font-mono text-sm\"\n                    placeholder=\"12483333.333333\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Calculated Values Display */}\n          <div className=\"grid grid-cols-3 gap-4 p-3 bg-gray-50 rounded-lg\">\n            <div className=\"text-center\">\n              <div className=\"text-xs text-muted-foreground\">Investment</div>\n              <div className=\"text-sm font-semibold\">${parseInt(investmentAmount).toLocaleString()}</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xs text-muted-foreground\">Post-Money</div>\n              <div className=\"text-sm font-semibold\">\n                ${((parseInt(preMoneyValuation) + parseInt(roundSize)) / 1000000).toFixed(2)}M\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xs text-muted-foreground\">Ownership</div>\n              <div className=\"text-sm font-semibold text-blue-600\">\n                {((parseInt(investmentAmount) / (parseInt(preMoneyValuation) + parseInt(roundSize))) * 100).toFixed(2)}%\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSave}\n              className=\"povc-bg-primary hover:bg-blue-700\"\n            >\n              Add Round\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\ownership-update-dialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":19,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Percent, Calendar, Info } from \"lucide-react\";\n\ninterface OwnershipUpdateDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  investment?: {\n    id: string;\n    company: string;\n    currentOwnership: number;\n  };\n}\n\nexport default function OwnershipUpdateDialog({ \n  isOpen, \n  onOpenChange, \n  investment \n}: OwnershipUpdateDialogProps) {\n  const [month, setMonth] = useState(\"Dec-2024\");\n  const [updatedOwnership, setUpdatedOwnership] = useState(\"2.284727\");\n  const [advancedMode, setAdvancedMode] = useState(false);\n  const [eventNotes, setEventNotes] = useState(\"\");\n  const [isDilutionMode, setIsDilutionMode] = useState(false);\n\n  const handleSave = () => {\n    console.log(\"Saving ownership update:\", {\n      month,\n      updatedOwnership: parseFloat(updatedOwnership),\n      advancedMode\n    });\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Percent className=\"h-5 w-5\" />\n            <span>Ownership Update</span>\n          </DialogTitle>\n          <DialogDescription>\n            Update ownership percentage for {investment?.company || \"this investment\"}\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Month Selection */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"month\" className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-4 w-4\" />\n              <span>Month</span>\n              <Info className=\"h-3 w-3 text-muted-foreground\" />\n            </Label>\n            <Input\n              id=\"month\"\n              value={month}\n              onChange={(e) => setMonth(e.target.value)}\n              placeholder=\"Feb-2021\"\n              className=\"font-mono\"\n            />\n          </div>\n\n          {/* Updated Ownership */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"ownership\" className=\"flex items-center space-x-2\">\n              <span>Updated ownership (%)</span>\n              <Info className=\"h-3 w-3 text-muted-foreground\" />\n              <span \n                className=\"text-blue-600 text-sm cursor-pointer hover:underline\"\n                onClick={() => setIsDilutionMode(!isDilutionMode)}\n              >\n                {isDilutionMode ? \"Enter Ownership (%)\" : \"Enter Dilution (%)\"}\n              </span>\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"ownership\"\n                value={updatedOwnership}\n                onChange={(e) => setUpdatedOwnership(e.target.value)}\n                className=\"pr-8 text-center bg-yellow-50 border-yellow-200 font-mono\"\n                placeholder={isDilutionMode ? \"5.0\" : \"2.284727\"}\n              />\n              <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                %\n              </span>\n            </div>\n          </div>\n\n          {/* Event Notes */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"event-notes\" className=\"flex items-center space-x-2\">\n              <span>Event Notes</span>\n              <Info className=\"h-3 w-3 text-muted-foreground\" />\n            </Label>\n            <Textarea\n              id=\"event-notes\"\n              value={eventNotes}\n              onChange={(e) => setEventNotes(e.target.value)}\n              placeholder=\"Enter text here\"\n              className=\"min-h-[80px] resize-none\"\n            />\n          </div>\n\n          {/* Advanced Mode Toggle */}\n          <div className=\"flex items-center space-x-3 p-3 border border-gray-200 rounded-lg\">\n            <div className=\"flex items-center space-x-2\">\n              <Info className=\"h-4 w-4 text-blue-600\" />\n              <span className=\"text-blue-600 cursor-pointer\">Enter Share Data (Advanced)</span>\n            </div>\n            <div className=\"flex items-center space-x-2 ml-auto\">\n              <Switch \n                id=\"advanced-mode\"\n                checked={advancedMode}\n                onCheckedChange={setAdvancedMode}\n              />\n              <Badge variant={advancedMode ? \"default\" : \"secondary\"}>\n                {advancedMode ? \"Yes\" : \"No\"}\n              </Badge>\n            </div>\n          </div>\n\n          {/* Advanced Share Data (when enabled) */}\n          {advancedMode && (\n            <Card className=\"border-blue-200 bg-blue-50\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm\">Advanced Share Data Entry</CardTitle>\n                <CardDescription className=\"text-xs\">\n                  Enter detailed share information for precise ownership calculation\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label className=\"text-xs\">Shares Outstanding</Label>\n                    <Input placeholder=\"1,000,000\" className=\"text-sm\" />\n                  </div>\n                  <div>\n                    <Label className=\"text-xs\">Our Shares</Label>\n                    <Input placeholder=\"100,000\" className=\"text-sm\" />\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label className=\"text-xs\">Option Pool</Label>\n                    <Input placeholder=\"150,000\" className=\"text-sm\" />\n                  </div>\n                  <div>\n                    <Label className=\"text-xs\">Fully Diluted Shares</Label>\n                    <Input placeholder=\"1,150,000\" className=\"text-sm\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Current vs New Ownership */}\n          <div className=\"grid grid-cols-2 gap-4 p-3 bg-gray-50 rounded-lg\">\n            <div className=\"text-center\">\n              <div className=\"text-xs text-muted-foreground\">Current Ownership</div>\n              <div className=\"text-lg font-semibold\">{investment?.currentOwnership || 8.5}%</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xs text-muted-foreground\">New Ownership</div>\n              <div className=\"text-lg font-semibold text-blue-600\">\n                {isDilutionMode \n                  ? `${((investment?.currentOwnership || 8.5) - parseFloat(updatedOwnership || \"0\")).toFixed(3)}%`\n                  : `${updatedOwnership}%`\n                }\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Close\n            </Button>\n            <Button \n              onClick={handleSave}\n              className=\"povc-bg-primary hover:bg-blue-700\"\n            >\n              Save Ownership Update\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\performance-case-tabs.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used.","line":7,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used.","line":7,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":56},{"ruleId":"no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used.","line":7,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":67},{"ruleId":"no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":11,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogDescription' is defined but never used.","line":11,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogHeader' is defined but never used.","line":11,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":64},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":11,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":77},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":11,"column":79,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":92},{"ruleId":"no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'Label' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectContent' is defined but never used.","line":14,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectItem' is defined but never used.","line":14,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectTrigger' is defined but never used.","line":14,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":58},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectValue' is defined but never used.","line":14,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":71},{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Percent' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":10},{"ruleId":"no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'currentCase' is assigned a value but never used.","line":217,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":217,"endColumn":20}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport LiquidationPreferencesDialog from \"./liquidation-preferences-dialog\";\nimport { \n  TrendingUp, \n  TrendingDown, \n  Target, \n  DollarSign, \n  Percent, \n  Calendar,\n  CheckCircle,\n  Plus,\n  Edit3\n} from \"lucide-react\";\n\ninterface PerformanceCaseTabsProps {\n  investment: {\n    id: string;\n    company: string;\n    amount: number;\n  };\n}\n\ninterface Round {\n  id: string;\n  name: string;\n  type: 'actual' | 'projected';\n  date: string;\n  investment: number;\n  roundSize: number;\n  reserved?: number;\n  moic: number;\n  irr: number;\n  fmv: number;\n  ownership: number;\n  graduationRate?: number;\n  hasProRata?: boolean;\n}\n\ninterface PerformanceCase {\n  id: string;\n  name: string;\n  probability: number;\n  isActive: boolean;\n  hasLiqPrefs?: boolean;\n  rounds: Round[];\n  exitValue?: number;\n  exitDate?: string;\n  exitProceeds?: number;\n}\n\nexport default function PerformanceCaseTabs({ investment }: PerformanceCaseTabsProps) {\n  const [activeCase, setActiveCase] = useState(\"base\");\n  const [showLiqPrefsDialog, setShowLiqPrefsDialog] = useState(false);\n  const [selectedCase, setSelectedCase] = useState<PerformanceCase | null>(null);\n\n  // Sample performance cases data\n  const performanceCases: PerformanceCase[] = [\n    {\n      id: \"default\",\n      name: \"Default\",\n      probability: 100,\n      isActive: true,\n      rounds: [\n        {\n          id: \"seed\",\n          name: \"Seed\",\n          type: \"actual\",\n          date: \"Nov 2020\",\n          investment: 1542000,\n          roundSize: 5000000,\n          moic: 1.00,\n          irr: 0,\n          fmv: 1542000,\n          ownership: 30.8,\n          hasProRata: false\n        },\n        {\n          id: \"series-a\",\n          name: \"Series A\",\n          type: \"projected\",\n          date: \"Jul 2024\",\n          investment: 616800,\n          roundSize: 8000000,\n          reserved: 300000,\n          moic: 1.02,\n          irr: 0.68,\n          fmv: 1800000,\n          ownership: 25.5,\n          graduationRate: 50,\n          hasProRata: true\n        }\n      ]\n    },\n    {\n      id: \"base\",\n      name: \"Base\",\n      probability: 50,\n      isActive: true,\n      rounds: [\n        {\n          id: \"series-a\",\n          name: \"Series A\",\n          type: \"actual\",\n          date: \"May 2020\",\n          investment: 2428571,\n          roundSize: 6071000,\n          moic: 1.00,\n          irr: 0,\n          fmv: 2428571,\n          ownership: 40.0,\n          hasProRata: false\n        },\n        {\n          id: \"series-b\",\n          name: \"Series B\",\n          type: \"projected\",\n          date: \"Jul 2024\",\n          investment: 0,\n          roundSize: 12800000,\n          moic: 1.65,\n          irr: 12.72,\n          fmv: 4000000,\n          ownership: 35.2,\n          hasProRata: false\n        },\n        {\n          id: \"exit\",\n          name: \"Exit\",\n          type: \"projected\",\n          date: \"Jul 2030\",\n          investment: 0,\n          roundSize: 0,\n          moic: 2.13,\n          irr: 7.72,\n          fmv: 0,\n          ownership: 0,\n          hasProRata: false\n        }\n      ],\n      exitValue: 120000000,\n      exitProceeds: 5175000\n    },\n    {\n      id: \"downside\",\n      name: \"Downside\", \n      probability: 25,\n      isActive: false,\n      rounds: [\n        {\n          id: \"series-a\",\n          name: \"Series A\",\n          type: \"actual\", \n          date: \"May 2020\",\n          investment: 2428571,\n          roundSize: 6071000,\n          moic: 1.00,\n          irr: 0,\n          fmv: 2428571,\n          ownership: 40.0,\n          hasProRata: false\n        }\n      ]\n    },\n    {\n      id: \"upside\",\n      name: \"Upside\",\n      probability: 25,\n      isActive: false,\n      hasLiqPrefs: true,\n      rounds: [\n        {\n          id: \"series-a\",\n          name: \"Series A\",\n          type: \"actual\",\n          date: \"Feb 2020\",\n          investment: 1736988,\n          roundSize: 4500000,\n          moic: 1.00,\n          irr: 0,\n          fmv: 1736988,\n          ownership: 38.6,\n          hasProRata: false\n        },\n        {\n          id: \"series-b\",\n          name: \"Series B\",\n          type: \"projected\",\n          date: \"Jan 2026\",\n          investment: 624390,\n          roundSize: 8000000,\n          reserved: 500000,\n          moic: 1.10,\n          irr: 1.99,\n          fmv: 2500000,\n          ownership: 32.1,\n          graduationRate: 50,\n          hasProRata: true\n        }\n      ]\n    }\n  ];\n\n  const currentCase = performanceCases.find(c => c.id === activeCase) || performanceCases[0];\n\n  const handleLiqPrefs = (performanceCase: PerformanceCase) => {\n    setSelectedCase(performanceCase);\n    setShowLiqPrefsDialog(true);\n  };\n\n  const getRoundIcon = (round: Round) => {\n    if (round.name === \"Exit\") return Target;\n    if (round.type === \"actual\") return CheckCircle;\n    return TrendingUp;\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Performance Case Tabs */}\n      <Tabs value={activeCase} onValueChange={setActiveCase} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          {performanceCases.map((performanceCase) => (\n            <TabsTrigger \n              key={performanceCase.id} \n              value={performanceCase.id}\n              className=\"relative\"\n            >\n              <div className=\"text-center\">\n                <div className=\"font-medium\">{performanceCase.name}</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {performanceCase.probability}%\n                </div>\n              </div>\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        {/* Tab Content for each Performance Case */}\n        {performanceCases.map((performanceCase) => (\n          <TabsContent key={performanceCase.id} value={performanceCase.id} className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <h3 className=\"text-lg font-medium\">{performanceCase.name} Case</h3>\n                <Badge variant=\"outline\">{performanceCase.probability}% probability</Badge>\n                {performanceCase.hasLiqPrefs && (\n                  <Badge variant=\"destructive\" className=\"text-xs\">Liq Prefs Active</Badge>\n                )}\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button \n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleLiqPrefs(performanceCase)}\n                >\n                  <TrendingDown className=\"h-4 w-4 mr-1\" />\n                  Liq Prefs\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Edit3 className=\"h-4 w-4 mr-1\" />\n                  Edit Case\n                </Button>\n              </div>\n            </div>\n\n            {/* Rounds Display */}\n            <div className=\"space-y-3\">\n              {performanceCase.rounds.map((round) => {\n                const IconComponent = getRoundIcon(round);\n                return (\n                  <Card key={round.id} className=\"border-l-4 border-l-blue-500\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"flex items-center space-x-2\">\n                            <IconComponent className={`h-5 w-5 ${\n                              round.type === 'actual' ? 'text-green-600' : \n                              round.name === 'Exit' ? 'text-purple-600' : 'text-blue-600'\n                            }`} />\n                            <div>\n                              <h4 className=\"font-medium\">{round.name}</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {round.date} ΓÇó {round.type === 'actual' ? 'Actual' : 'Projected'}\n                              </p>\n                            </div>\n                          </div>\n                          {round.graduationRate && (\n                            <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                              {round.graduationRate}%\n                            </Badge>\n                          )}\n                          {round.hasProRata && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              <CheckCircle className=\"h-3 w-3 mr-1\" />\n                              Pro-Rata\n                            </Badge>\n                          )}\n                        </div>\n\n                        <div className=\"text-right\">\n                          {round.name === \"Exit\" ? (\n                            <div>\n                              <p className=\"text-sm text-muted-foreground\">Exit Value</p>\n                              <p className=\"font-semibold\">${(performanceCase.exitValue! / 1000000).toFixed(0)}mm</p>\n                            </div>\n                          ) : (\n                            <div>\n                              <p className=\"text-sm text-muted-foreground\">Investment</p>\n                              <p className=\"font-semibold\">${round.investment.toLocaleString()}</p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n\n                      <Separator className=\"my-3\" />\n\n                      {/* Round Metrics */}\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 text-sm\">\n                        {round.name !== \"Exit\" && (\n                          <>\n                            {round.roundSize > 0 && (\n                              <div>\n                                <p className=\"text-muted-foreground\">Round Size</p>\n                                <p className=\"font-medium\">${(round.roundSize / 1000000).toFixed(1)}M</p>\n                              </div>\n                            )}\n                            {round.reserved && (\n                              <div>\n                                <p className=\"text-muted-foreground\">Reserved</p>\n                                <p className=\"font-medium\">${round.reserved.toLocaleString()}</p>\n                              </div>\n                            )}\n                          </>\n                        )}\n                        \n                        <div>\n                          <p className=\"text-muted-foreground\">MOIC</p>\n                          <p className=\"font-medium\">{round.moic.toFixed(2)}x</p>\n                        </div>\n                        \n                        <div>\n                          <p className=\"text-muted-foreground\">IRR</p>\n                          <p className=\"font-medium\">\n                            {round.irr > 0 ? `${round.irr.toFixed(2)}%` : '-'}\n                          </p>\n                        </div>\n                        \n                        <div>\n                          <p className=\"text-muted-foreground\">FMV</p>\n                          <p className=\"font-medium\">\n                            {round.fmv > 0 ? `$${(round.fmv / 1000000).toFixed(2)}M` : '-'}\n                          </p>\n                        </div>\n                        \n                        {round.name !== \"Exit\" && (\n                          <div>\n                            <p className=\"text-muted-foreground\">Ownership</p>\n                            <p className=\"font-medium\">{round.ownership.toFixed(1)}%</p>\n                          </div>\n                        )}\n\n                        {round.name === \"Exit\" && performanceCase.exitProceeds && (\n                          <div>\n                            <p className=\"text-muted-foreground\">Exit Proceeds</p>\n                            <p className=\"font-medium\">${(performanceCase.exitProceeds / 1000000).toFixed(2)}M</p>\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n\n            {/* Add Round Button */}\n            <div className=\"flex justify-center pt-2\">\n              <Button variant=\"outline\" size=\"sm\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Round\n              </Button>\n            </div>\n          </TabsContent>\n        ))}\n      </Tabs>\n\n      {/* Liquidation Preferences Dialog */}\n      <LiquidationPreferencesDialog\n        isOpen={showLiqPrefsDialog}\n        onOpenChange={setShowLiqPrefsDialog}\n        investment={investment}\n        performanceCase={selectedCase ? {\n          id: selectedCase.id,\n          name: selectedCase.name\n        } : undefined}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\portfolio-company-detail.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'MoreHorizontal' is defined but never used.","line":23,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'Globe' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'ProRataSettings' is defined but never used.","line":90,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'generateFinancingPath' is assigned a value but never used.","line":211,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":211,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'newShares' is assigned a value but never used.","line":264,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":264,"endColumn":20}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { LineChart } from 'recharts/es6/chart/LineChart';\nimport { Line } from 'recharts/es6/cartesian/Line';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { \n  ArrowLeft,\n  Edit, \n  Plus, \n  MoreHorizontal,\n  TrendingUp,\n  Target,\n  Calendar,\n  Building2,\n  Globe,\n  Users,\n  ChevronDown,\n  Activity\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface Round {\n  id: string;\n  name: string;\n  date: string;\n  type: 'Actual' | 'Projected';\n  investment: number;\n  reserved: number;\n  roundSize: number;\n  preMoney: number;\n  postMoney: number;\n  moic: number;\n  irr?: number;\n  fmv: number;\n  ownership: number;\n  returnTheFund: number;\n}\n\ninterface OptimalReserveAnalysis {\n  roundPercent: number;\n  investmentAmount: number;\n  resultingOwnership: number;\n  returnTheFund: number;\n  exitOwnership: number;\n  exitFMV: number;\n  exitMOIC: number;\n  totalReserves: number;\n  dealReserveRatio: number;\n  marginalReturn: number;\n  capitalEfficiency: number;\n  fundReturnThreshold: number;\n}\n\ninterface SectorProfile {\n  name: string;\n  graduationRates: {\n    seedToA: number;\n    aToB: number;\n    bToC: number;\n    cToD: number;\n  };\n  roundSizes: {\n    seed: number;\n    seriesA: number;\n    seriesB: number;\n    seriesC: number;\n    seriesD: number;\n  };\n  valuationStepUps: {\n    seedToA: number;\n    aToB: number;\n    bToC: number;\n    cToD: number;\n  };\n}\n\ninterface ProRataSettings {\n  resolveProRata: boolean;\n  customReserve?: number;\n  targetOwnership?: number;\n}\n\ninterface ReserveRanking {\n  companyName: string;\n  dealLevelTVPI: number;\n  riskAdjustedProceeds: number;\n  ownershipImprovement: number;\n  marginalReturnPer1K: number;\n  reserveRatio: number;\n  fundLevelTarget: number;\n  isOverAllocated: boolean;\n  isUnderAllocated: boolean;\n}\n\nconst SAMPLE_ROUNDS: Round[] = [\n  {\n    id: '1',\n    name: 'Capital Calls',\n    date: 'Oct 2024',\n    type: 'Actual',\n    investment: 1000000,\n    reserved: 0,\n    roundSize: 25000000,\n    preMoney: 75000000,\n    postMoney: 100000000,\n    moic: 1.00,\n    fmv: 1000000,\n    ownership: 1.00,\n    returnTheFund: 20000000\n  },\n  {\n    id: '2',\n    name: 'Capital Calls',\n    date: 'Oct 2025',\n    type: 'Projected',\n    investment: 1000000,\n    reserved: 1000000,\n    roundSize: 25000000,\n    preMoney: 100000000,\n    postMoney: 125000000,\n    moic: 1.00,\n    fmv: 2000000,\n    ownership: 1.60,\n    returnTheFund: 12500000\n  },\n  {\n    id: '3',\n    name: 'Capital Calls',\n    date: 'Oct 2026',\n    type: 'Projected',\n    investment: 1000000,\n    reserved: 1000000,\n    roundSize: 25000000,\n    preMoney: 125000000,\n    postMoney: 150000000,\n    moic: 1.00,\n    fmv: 3000000,\n    ownership: 2.00,\n    returnTheFund: 10000000\n  },\n  {\n    id: '4',\n    name: 'Capital Calls',\n    date: 'Oct 2027',\n    type: 'Projected',\n    investment: 1000000,\n    reserved: 1000000,\n    roundSize: 25000000,\n    preMoney: 150000000,\n    postMoney: 175000000,\n    moic: 1.00,\n    fmv: 4000000,\n    ownership: 2.29,\n    returnTheFund: 8750000\n  },\n  {\n    id: '5',\n    name: 'Capital Calls',\n    date: 'Oct 2028',\n    type: 'Projected',\n    investment: 1000000,\n    reserved: 1000000,\n    roundSize: 25000000,\n    preMoney: 175000000,\n    postMoney: 200000000,\n    moic: 1.00,\n    fmv: 5000000,\n    ownership: 2.50,\n    returnTheFund: 8000000\n  }\n];\n\n// B2B SaaS Sector Profile (Carmasal Fund)\nconst SECTOR_PROFILE: SectorProfile = {\n  name: 'B2B SaaS',\n  graduationRates: {\n    seedToA: 0.65,\n    aToB: 0.75,\n    bToC: 0.70,\n    cToD: 0.60\n  },\n  roundSizes: {\n    seed: 3000000,\n    seriesA: 10000000,\n    seriesB: 25000000,\n    seriesC: 50000000,\n    seriesD: 100000000\n  },\n  valuationStepUps: {\n    seedToA: 3.5,\n    aToB: 2.8,\n    bToC: 2.5,\n    cToD: 2.2\n  }\n};\n\n// Auto-generated financing path with graduation rates\nconst generateFinancingPath = (initialValuation: number, currentRound: string) => {\n  const path = [];\n  let currentVal = initialValuation;\n  \n  if (currentRound === 'Capital Calls') {\n    // Series A projection (65% graduation rate)\n    currentVal *= SECTOR_PROFILE.valuationStepUps.seedToA;\n    path.push({\n      round: 'Series A',\n      graduationRate: SECTOR_PROFILE.graduationRates.seedToA,\n      preMoney: currentVal,\n      roundSize: SECTOR_PROFILE.roundSizes.seriesA,\n      postMoney: currentVal + SECTOR_PROFILE.roundSizes.seriesA\n    });\n    \n    // Series B projection (75% graduation rate from A)\n    currentVal = (currentVal + SECTOR_PROFILE.roundSizes.seriesA) * SECTOR_PROFILE.valuationStepUps.aToB;\n    path.push({\n      round: 'Series B',\n      graduationRate: SECTOR_PROFILE.graduationRates.aToB,\n      preMoney: currentVal,\n      roundSize: SECTOR_PROFILE.roundSizes.seriesB,\n      postMoney: currentVal + SECTOR_PROFILE.roundSizes.seriesB\n    });\n    \n    // Series C projection (70% graduation rate from B)\n    currentVal = (currentVal + SECTOR_PROFILE.roundSizes.seriesB) * SECTOR_PROFILE.valuationStepUps.bToC;\n    path.push({\n      round: 'Series C',\n      graduationRate: SECTOR_PROFILE.graduationRates.bToC,\n      preMoney: currentVal,\n      roundSize: SECTOR_PROFILE.roundSizes.seriesC,\n      postMoney: currentVal + SECTOR_PROFILE.roundSizes.seriesC\n    });\n  }\n  \n  return path;\n};\n\n// Calculate optimal reserves with efficiency curve analysis\nconst calculateOptimalReserves = (\n  currentOwnership: number,\n  currentInvestment: number,\n  roundSize: number,\n  preMoney: number,\n  exitMultiple: number = 3.0\n): OptimalReserveAnalysis[] => {\n  const analysis = [];\n  const fundSize = 100000000; // $100M fund\n  \n  for (let percent = 0; percent <= 25; percent += 2.5) {\n    const investment = (percent / 100) * roundSize;\n    const postMoney = preMoney + roundSize;\n    const newShares = investment / (postMoney / (roundSize / investment));\n    const resultingOwnership = currentOwnership + (investment / postMoney) * 100;\n    \n    // Exit calculations\n    const exitValuation = postMoney * exitMultiple;\n    const exitProceeds = (resultingOwnership / 100) * exitValuation;\n    const totalInvested = currentInvestment + investment;\n    const exitMOIC = exitProceeds / totalInvested;\n    \n    // Fund return threshold calculation\n    const fundReturnThreshold = fundSize / (resultingOwnership / 100);\n    \n    // Capital efficiency calculation (diminishing returns)\n    const marginalReturn = investment > 0 ? (exitProceeds - (currentOwnership / 100) * exitValuation) / investment : 0;\n    const capitalEfficiency = investment > 0 ? marginalReturn / (investment / 1000000) : 0;\n    \n    // Deal-level reserve ratio\n    const dealReserveRatio = investment > 0 ? (investment / (currentInvestment + investment)) * 100 : 0;\n    \n    analysis.push({\n      roundPercent: percent,\n      investmentAmount: investment,\n      resultingOwnership,\n      returnTheFund: fundReturnThreshold / 1000000, // in millions\n      exitOwnership: resultingOwnership,\n      exitFMV: exitProceeds / 1000000, // in millions\n      exitMOIC,\n      totalReserves: investment,\n      dealReserveRatio,\n      marginalReturn,\n      capitalEfficiency,\n      fundReturnThreshold: fundReturnThreshold / 1000000\n    });\n  }\n  \n  return analysis;\n};\n\n// Performance-weighted reserve ranking for portfolio\nconst RESERVE_RANKING_DATA: ReserveRanking[] = [\n  {\n    companyName: 'Carmasal Fund',\n    dealLevelTVPI: 3.25,\n    riskAdjustedProceeds: 15.2,\n    ownershipImprovement: 1.8,\n    marginalReturnPer1K: 2.4,\n    reserveRatio: 37.5,\n    fundLevelTarget: 40.0,\n    isOverAllocated: false,\n    isUnderAllocated: true\n  },\n  {\n    companyName: 'AlphaTech',\n    dealLevelTVPI: 2.85,\n    riskAdjustedProceeds: 12.8,\n    ownershipImprovement: 1.2,\n    marginalReturnPer1K: 1.9,\n    reserveRatio: 45.2,\n    fundLevelTarget: 40.0,\n    isOverAllocated: true,\n    isUnderAllocated: false\n  },\n  {\n    companyName: 'Cybros',\n    dealLevelTVPI: 4.15,\n    riskAdjustedProceeds: 18.6,\n    ownershipImprovement: 2.3,\n    marginalReturnPer1K: 3.1,\n    reserveRatio: 35.8,\n    fundLevelTarget: 40.0,\n    isOverAllocated: false,\n    isUnderAllocated: true\n  }\n];\n\n// Generate optimal reserves based on Series C financing path\nconst OPTIMAL_RESERVE_DATA = calculateOptimalReserves(\n  2.5, // current ownership %\n  5000000, // current total investment\n  50000000, // Series C round size\n  350000000, // Series C pre-money valuation\n  3.0 // exit multiple\n);\n\nconst VALUATION_DATA = [\n  { date: 'Oct 2024', value: 100 },\n  { date: 'Oct 2025', value: 125 },\n  { date: 'Oct 2026', value: 150 },\n  { date: 'Oct 2027', value: 175 },\n  { date: 'Oct 2028', value: 200 },\n  { date: 'Exit', value: 300 }\n];\n\nconst RETURN_THE_FUND_DATA = [\n  { date: 'Oct 2024', value: 20000 },\n  { date: 'Oct 2025', value: 12500 },\n  { date: 'Oct 2026', value: 10000 },\n  { date: 'Oct 2027', value: 8750 },\n  { date: 'Oct 2028', value: 8000 }\n];\n\nexport default function PortfolioCompanyDetail() {\n  const [activeTab, setActiveTab] = useState('performance-cases');\n\n  const formatCurrency = (amount: number) => {\n    if (amount >= 1000000) {\n      return `$${(amount / 1000000).toFixed(1)}M`;\n    }\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(amount);\n  };\n\n  const formatPercent = (value: number, decimals = 2) => {\n    return `${value.toFixed(decimals)}%`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"sm\">\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Investments\n        </Button>\n        <div className=\"text-sm text-gray-500\">\n          Tactyc Ventures II L.P. / Investments / Carmasal Fund\n        </div>\n      </div>\n\n      {/* Company Header */}\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <div className=\"flex items-center gap-4 mb-4\">\n          <div className=\"w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center text-white font-bold text-lg\">\n            C\n          </div>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Carmasal Fund</h1>\n            <p className=\"text-gray-600\">carmasalfund.io</p>\n          </div>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4 p-4 bg-gray-50 rounded-lg\">\n          <div>\n            <div className=\"text-sm text-gray-600\">Status</div>\n            <Badge className=\"bg-blue-100 text-blue-800 border-blue-200 mt-1\">Active</Badge>\n          </div>\n          <div>\n            <div className=\"text-sm text-gray-600\">Stage</div>\n            <div className=\"font-medium\">Capital Calls</div>\n          </div>\n          <div>\n            <div className=\"text-sm text-gray-600\">Valuation</div>\n            <div className=\"font-medium\">$100,000,000</div>\n          </div>\n          <div>\n            <div className=\"text-sm text-gray-600\">Invested</div>\n            <div className=\"font-medium\">$1,000,000</div>\n          </div>\n          <div>\n            <div className=\"text-sm text-gray-600\">Planned Reserves</div>\n            <div className=\"font-medium\">$4,000,000</div>\n          </div>\n          <div>\n            <div className=\"text-sm text-gray-600\">MOIC</div>\n            <div className=\"font-medium\">1.00x</div>\n          </div>\n        </div>\n\n        {/* Return the Fund Chart */}\n        <div className=\"mt-6\">\n          <h3 className=\"text-lg font-medium mb-4\">Return the Fund</h3>\n          <div className=\"h-32\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={RETURN_THE_FUND_DATA}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip formatter={(value) => [`$${value}mm`, 'Return the Fund']} />\n                <Line type=\"monotone\" dataKey=\"value\" stroke=\"#3b82f6\" strokeWidth={2} />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"investment-info\">Investment Information</TabsTrigger>\n          <TabsTrigger value=\"performance-cases\">Performance Cases</TabsTrigger>\n          <TabsTrigger value=\"optimal-reserves\">Optimal Reserves</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        {/* Investment Information Tab */}\n        <TabsContent value=\"investment-info\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Building2 className=\"h-5 w-5\" />\n                Investment Information\n              </CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Basic information related to this investment. See adding an investment to learn more.\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Company Name</label>\n                  <div className=\"mt-1 p-2 bg-gray-50 rounded text-gray-900\">Carmasal Fund</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Web</label>\n                  <div className=\"mt-1 p-2 bg-gray-50 rounded text-blue-600\">carmasalfund.io</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Sector</label>\n                  <div className=\"mt-1 p-2 bg-gray-50 rounded text-gray-900\">B2B SaaS</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Key Management</label>\n                  <div className=\"mt-1 p-2 bg-gray-50 rounded text-gray-900\">Sarah Smith</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Geography</label>\n                  <div className=\"mt-1 p-2 bg-gray-50 rounded text-gray-900\">US</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Deal Tags</label>\n                  <div className=\"mt-1 p-2 bg-gray-50 rounded text-gray-900\">FoF</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Deal Partners</label>\n                  <div className=\"mt-1 p-2 bg-gray-50 rounded text-gray-900\">John Wick</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Board Members</label>\n                  <div className=\"mt-1 p-2 bg-gray-50 rounded text-gray-900\">-</div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Co-Investors</label>\n                  <div className=\"mt-1 p-2 bg-gray-50 rounded text-gray-900\">\n                    Northgate Capital, Centana Growth, First Close Partners\n                  </div>\n                </div>\n              </div>\n\n              {/* Custom Fields Section */}\n              <div className=\"mt-8\">\n                <h4 className=\"font-medium text-gray-900 mb-4\">Custom Fields</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {[\n                    'Internal Status', 'Lead Status', 'Strategic', 'Deal Source',\n                    'Google Drive Link', 'Formation Date', 'Source of Deal', 'BiV Director',\n                    'OIC', 'Years of Operation', 'Fund raising notes', 'Valuation Notes', 'DD notes'\n                  ].map((field) => (\n                    <div key={field}>\n                      <label className=\"text-sm font-medium text-gray-700\">{field}</label>\n                      <div className=\"mt-1 p-2 bg-gray-50 rounded text-gray-500\">-</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Performance Cases Tab */}\n        <TabsContent value=\"performance-cases\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Performance Cases\n              </CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                These are the rounds and exit this investment is expected to have. See working with performance cases, \n                managing rounds and reserves and best practices guidelines to learn more.\n              </p>\n            </CardHeader>\n            <CardContent>\n              {/* Case Tabs */}\n              <div className=\"flex items-center gap-1 mb-6\">\n                <Button variant=\"outline\" className=\"bg-blue-50 border-blue-200 text-blue-700\">\n                  Default\n                  <span className=\"ml-2 text-xs\">100%</span>\n                </Button>\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600\">\n                  <Plus className=\"h-4 w-4 mr-1\" />\n                  Add Case\n                </Button>\n                <div className=\"ml-auto\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    All Events\n                    <ChevronDown className=\"h-4 w-4 ml-1\" />\n                  </Button>\n                </div>\n              </div>\n\n              {/* Rounds Timeline */}\n              <div className=\"space-y-4\">\n                {SAMPLE_ROUNDS.map((round, index) => (\n                  <div key={round.id} className=\"flex items-start gap-4 p-4 border border-gray-200 rounded-lg\">\n                    <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                      {index + 1}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <h4 className=\"font-medium text-gray-900\">{round.name}</h4>\n                        <span className=\"text-sm text-gray-500\">{round.date}</span>\n                        {round.type === 'Projected' && (\n                          <Badge variant=\"outline\" className=\"text-xs\">Projected</Badge>\n                        )}\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-gray-600\">Investment: </span>\n                          <span className=\"font-medium text-blue-600\">{formatCurrency(round.investment)}</span>\n                          {round.reserved > 0 && (\n                            <>\n                              <span className=\"text-gray-600\"> Reserved: </span>\n                              <span className=\"font-medium text-green-600\">{formatCurrency(round.reserved)}</span>\n                            </>\n                          )}\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600\">Round: </span>\n                          <span className=\"font-medium\">{formatCurrency(round.roundSize)}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600\">Pre-Money: </span>\n                          <span className=\"font-medium\">{formatCurrency(round.preMoney)}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600\">Post-Money: </span>\n                          <span className=\"font-medium\">{formatCurrency(round.postMoney)}</span>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mt-2\">\n                        <div>\n                          <span className=\"text-gray-600\">MOIC: </span>\n                          <span className=\"font-medium\">{round.moic.toFixed(2)}x</span>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600\">IRR: </span>\n                          <span className=\"font-medium\">{round.irr ? `${round.irr.toFixed(2)}%` : '-'}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600\">FMV: </span>\n                          <span className=\"font-medium\">{formatCurrency(round.fmv)}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600\">Ownership: </span>\n                          <span className=\"font-medium\">{formatPercent(round.ownership)}</span>\n                        </div>\n                      </div>\n\n                      <div className=\"mt-2 text-sm\">\n                        <span className=\"text-gray-600\">Return the Fund: </span>\n                        <span className=\"font-medium\">{formatCurrency(round.returnTheFund * 1000)}</span>\n                      </div>\n\n                      {round.type === 'Projected' && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Edit className=\"h-3 w-3 mr-1\" />\n                            Edit\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Plus className=\"h-3 w-3 mr-1\" />\n                            Add\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n\n                {/* Exit Event */}\n                <div className=\"flex items-start gap-4 p-4 border border-gray-200 rounded-lg bg-green-50\">\n                  <div className=\"w-8 h-8 bg-green-600 rounded-full flex items-center justify-center text-white text-sm font-medium\">\n                    E\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <h4 className=\"font-medium text-gray-900\">Exit</h4>\n                      <span className=\"text-sm text-gray-500\">Jan 2030</span>\n                    </div>\n                    \n                    <div className=\"text-sm space-y-1\">\n                      <div>\n                        <span className=\"text-gray-600\">MOIC: </span>\n                        <span className=\"font-medium text-green-600\">3.00x</span>\n                        <span className=\"text-gray-600 ml-4\">IRR: </span>\n                        <span className=\"font-medium text-green-600\">14.46%</span>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Exit Proceeds: </span>\n                        <span className=\"font-medium text-green-600\">$15,000,000</span>\n                      </div>\n                      <div>\n                        <span className=\"text-gray-600\">Ownership: </span>\n                        <span className=\"font-medium\">2.50%</span>\n                        <span className=\"text-gray-600 ml-4\">Return the Fund: </span>\n                        <span className=\"font-medium\">$8,000mm</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Charts */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-8\">\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-4\">Aggregate Valuation</h4>\n                  <div className=\"h-48\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <LineChart data={VALUATION_DATA}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <Tooltip formatter={(value) => [`$${value}M`, 'Valuation']} />\n                        <Line type=\"monotone\" dataKey=\"value\" stroke=\"#3b82f6\" strokeWidth={2} />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-4\">Return the Fund</h4>\n                  <div className=\"h-48\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <LineChart data={RETURN_THE_FUND_DATA}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <Tooltip formatter={(value) => [`$${value}mm`, 'Return the Fund']} />\n                        <Line type=\"monotone\" dataKey=\"value\" stroke=\"#22c55e\" strokeWidth={2} />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n\n        {/* Optimal Reserves Tab */}\n        <TabsContent value=\"optimal-reserves\" className=\"space-y-6\">\n          {/* Step 1: Auto-Generated Financing Path */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                Step 1: Auto-Generated Financing Path\n              </CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Based on {SECTOR_PROFILE.name} sector profile with graduation rates and valuation step-ups\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                <div className=\"p-4 bg-blue-50 rounded-lg\">\n                  <h4 className=\"font-medium text-blue-900 mb-2\">Graduation Rates</h4>\n                  <div className=\"text-sm space-y-1\">\n                    <div>Seed ΓåÆ Series A: <span className=\"font-medium\">{formatPercent(SECTOR_PROFILE.graduationRates.seedToA * 100)}</span></div>\n                    <div>A ΓåÆ Series B: <span className=\"font-medium\">{formatPercent(SECTOR_PROFILE.graduationRates.aToB * 100)}</span></div>\n                    <div>B ΓåÆ Series C: <span className=\"font-medium\">{formatPercent(SECTOR_PROFILE.graduationRates.bToC * 100)}</span></div>\n                  </div>\n                </div>\n                <div className=\"p-4 bg-green-50 rounded-lg\">\n                  <h4 className=\"font-medium text-green-900 mb-2\">Round Sizes</h4>\n                  <div className=\"text-sm space-y-1\">\n                    <div>Series A: <span className=\"font-medium\">{formatCurrency(SECTOR_PROFILE.roundSizes.seriesA)}</span></div>\n                    <div>Series B: <span className=\"font-medium\">{formatCurrency(SECTOR_PROFILE.roundSizes.seriesB)}</span></div>\n                    <div>Series C: <span className=\"font-medium\">{formatCurrency(SECTOR_PROFILE.roundSizes.seriesC)}</span></div>\n                  </div>\n                </div>\n                <div className=\"p-4 bg-purple-50 rounded-lg\">\n                  <h4 className=\"font-medium text-purple-900 mb-2\">Valuation Step-Ups</h4>\n                  <div className=\"text-sm space-y-1\">\n                    <div>Seed ΓåÆ A: <span className=\"font-medium\">{SECTOR_PROFILE.valuationStepUps.seedToA}x</span></div>\n                    <div>A ΓåÆ B: <span className=\"font-medium\">{SECTOR_PROFILE.valuationStepUps.aToB}x</span></div>\n                    <div>B ΓåÆ C: <span className=\"font-medium\">{SECTOR_PROFILE.valuationStepUps.bToC}x</span></div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Step 2: Pro Rata Resolution Logic */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"h-5 w-5\" />\n                Step 2: Pro Rata Resolution Logic\n              </CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Toggle between \"Resolve Pro Rata\" (constant ownership) or \"Custom Reserve\" (manual amount)\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <div className=\"w-3 h-3 bg-blue-600 rounded-full\"></div>\n                    <h4 className=\"font-medium\">Resolve Pro Rata (Recommended)</h4>\n                  </div>\n                  <div className=\"text-sm text-gray-600 space-y-2\">\n                    <div>ΓÇó Maintains current ownership percentage: <span className=\"font-medium text-blue-600\">2.50%</span></div>\n                    <div>ΓÇó Auto-calculates required capital for each round</div>\n                    <div>ΓÇó Optimizes for ownership preservation</div>\n                    <div>ΓÇó Series C Investment Required: <span className=\"font-medium text-green-600\">$12.5M</span></div>\n                  </div>\n                </div>\n                <div className=\"p-4 border rounded-lg bg-gray-50\">\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <div className=\"w-3 h-3 bg-gray-400 rounded-full\"></div>\n                    <h4 className=\"font-medium text-gray-700\">Custom Reserve</h4>\n                  </div>\n                  <div className=\"text-sm text-gray-600 space-y-2\">\n                    <div>ΓÇó Manual dollar amount input</div>\n                    <div>ΓÇó Resulting ownership varies by round size</div>\n                    <div>ΓÇó Allows strategic over/under-participation</div>\n                    <div>ΓÇó Custom Amount: <input className=\"w-20 px-2 py-1 border rounded text-xs\" placeholder=\"$5M\" /></div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Step 3: Optimal Reserve Analysis with Efficiency Curve */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Activity className=\"h-5 w-5\" />\n                Step 3: Optimal Reserve Analysis - Series C Round\n              </CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Efficiency curve showing impact of increasing reserve levels with diminishing marginal returns\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className=\"bg-gray-50\">\n                      <TableHead>Round %</TableHead>\n                      <TableHead>Investment</TableHead>\n                      <TableHead>Resulting Ownership</TableHead>\n                      <TableHead>Fund Return Threshold</TableHead>\n                      <TableHead>Exit MOIC</TableHead>\n                      <TableHead>Marginal Return</TableHead>\n                      <TableHead>Capital Efficiency</TableHead>\n                      <TableHead>Deal Reserve Ratio</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {OPTIMAL_RESERVE_DATA.map((row, index) => {\n                      const isOptimal = row.capitalEfficiency > 0 && \n                                       row.capitalEfficiency === Math.max(...OPTIMAL_RESERVE_DATA.map(r => r.capitalEfficiency));\n                      \n                      return (\n                        <TableRow key={index} className={cn(\n                          \"hover:bg-gray-50\",\n                          isOptimal && \"bg-yellow-50 border-l-4 border-yellow-400\"\n                        )}>\n                          <TableCell className=\"font-medium\">{formatPercent(row.roundPercent)}</TableCell>\n                          <TableCell>{formatCurrency(row.investmentAmount)}</TableCell>\n                          <TableCell>{formatPercent(row.resultingOwnership)}</TableCell>\n                          <TableCell>{formatCurrency(row.fundReturnThreshold * 1000000)}</TableCell>\n                          <TableCell>\n                            <span className={cn(\n                              \"font-medium\",\n                              row.exitMOIC >= 2 ? \"text-green-600\" : \n                              row.exitMOIC >= 1.5 ? \"text-blue-600\" : \"text-orange-600\"\n                            )}>\n                              {row.exitMOIC.toFixed(2)}x\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            <span className={cn(\n                              \"font-medium\",\n                              row.marginalReturn >= 2 ? \"text-green-600\" : \n                              row.marginalReturn >= 1 ? \"text-blue-600\" : \"text-red-600\"\n                            )}>\n                              {row.marginalReturn.toFixed(2)}x\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            <span className={cn(\n                              \"font-medium\",\n                              row.capitalEfficiency >= 2 ? \"text-green-600\" : \n                              row.capitalEfficiency >= 1 ? \"text-blue-600\" : \"text-red-600\"\n                            )}>\n                              {row.capitalEfficiency.toFixed(2)}\n                            </span>\n                          </TableCell>\n                          <TableCell>{formatPercent(row.dealReserveRatio)}</TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                <h4 className=\"font-medium text-yellow-900 mb-2\">Efficiency Curve Insights</h4>\n                <div className=\"text-sm text-yellow-800 space-y-1\">\n                  <div>ΓÇó <strong>Optimal point:</strong> Highlighted row shows maximum capital efficiency</div>\n                  <div>ΓÇó <strong>Diminishing returns:</strong> Notice how marginal return decreases with higher investment</div>\n                  <div>ΓÇó <strong>Over-reserving risk:</strong> Beyond optimal point, returns per dollar decline</div>\n                  <div>ΓÇó <strong>Fund threshold:</strong> Higher ownership = lower exit valuation needed to return fund</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Step 4: Deal vs Fund Reserve Posture */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Step 4: Deal vs Fund Reserve Posture Comparison\n              </CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Comparing deal-level reserve allocation against fund-level targets with rebalancing insights\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-600\">37.5%</div>\n                  <div className=\"text-sm text-blue-800\">Current Deal Reserve Ratio</div>\n                  <div className=\"text-xs text-blue-600 mt-1\">Reserve ├╖ (Initial + Reserve)</div>\n                </div>\n                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-600\">40.0%</div>\n                  <div className=\"text-sm text-green-800\">Fund-Level Target</div>\n                  <div className=\"text-xs text-green-600 mt-1\">Portfolio Average Goal</div>\n                </div>\n                <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-orange-600\">-2.5%</div>\n                  <div className=\"text-sm text-orange-800\">Variance</div>\n                  <div className=\"text-xs text-orange-600 mt-1\">Under-allocated vs Target</div>\n                </div>\n              </div>\n\n              <div className=\"p-4 bg-orange-50 border border-orange-200 rounded-lg\">\n                <h4 className=\"font-medium text-orange-900 mb-2\">Rebalancing Alert</h4>\n                <div className=\"text-sm text-orange-800 space-y-1\">\n                  <div>ΓÇó <strong>Under-allocated:</strong> This deal has 2.5% less reserves than fund target</div>\n                  <div>ΓÇó <strong>Opportunity cost:</strong> Capital may be better deployed here vs over-allocated deals</div>\n                  <div>ΓÇó <strong>Recommendation:</strong> Consider increasing reserves to reach 40% target ratio</div>\n                  <div>ΓÇó <strong>Required additional capital:</strong> $625K to reach fund-level target</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Step 5: Performance-Weighted Reserve Ranking */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"h-5 w-5\" />\n                Step 5: Performance-Weighted Reserve Ranking\n              </CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Portfolio-wide ranking by \"Follow-on Multiple\" - projected return on next reserve dollar\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className=\"bg-gray-50\">\n                      <TableHead>Rank</TableHead>\n                      <TableHead>Company</TableHead>\n                      <TableHead>Deal-Level TVPI</TableHead>\n                      <TableHead>Follow-on Multiple</TableHead>\n                      <TableHead>Risk-Adj Proceeds ($M)</TableHead>\n                      <TableHead>Reserve Ratio</TableHead>\n                      <TableHead>vs Fund Target</TableHead>\n                      <TableHead>Allocation Status</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {RESERVE_RANKING_DATA\n                      .sort((a, b) => b.marginalReturnPer1K - a.marginalReturnPer1K)\n                      .map((company, index) => (\n                        <TableRow key={company.companyName} className={cn(\n                          \"hover:bg-gray-50\",\n                          company.companyName === 'Carmasal Fund' && \"bg-blue-50 border-l-4 border-blue-400\"\n                        )}>\n                          <TableCell className=\"font-medium\">#{index + 1}</TableCell>\n                          <TableCell className=\"font-medium text-blue-600\">{company.companyName}</TableCell>\n                          <TableCell>\n                            <span className={cn(\n                              \"font-medium\",\n                              company.dealLevelTVPI >= 3 ? \"text-green-600\" : \"text-blue-600\"\n                            )}>\n                              {company.dealLevelTVPI.toFixed(2)}x\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            <span className={cn(\n                              \"font-medium\",\n                              company.marginalReturnPer1K >= 3 ? \"text-green-600\" : \n                              company.marginalReturnPer1K >= 2 ? \"text-blue-600\" : \"text-orange-600\"\n                            )}>\n                              {company.marginalReturnPer1K.toFixed(1)}x\n                            </span>\n                          </TableCell>\n                          <TableCell>{company.riskAdjustedProceeds.toFixed(1)}</TableCell>\n                          <TableCell>{formatPercent(company.reserveRatio)}</TableCell>\n                          <TableCell>\n                            <span className={cn(\n                              \"text-sm\",\n                              Math.abs(company.reserveRatio - company.fundLevelTarget) <= 2 ? \"text-green-600\" :\n                              company.reserveRatio < company.fundLevelTarget ? \"text-orange-600\" : \"text-red-600\"\n                            )}>\n                              {company.reserveRatio > company.fundLevelTarget ? '+' : ''}\n                              {(company.reserveRatio - company.fundLevelTarget).toFixed(1)}%\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            {company.isOverAllocated && (\n                              <Badge className=\"bg-red-100 text-red-800 border-red-200\">Over-allocated</Badge>\n                            )}\n                            {company.isUnderAllocated && (\n                              <Badge className=\"bg-orange-100 text-orange-800 border-orange-200\">Under-allocated</Badge>\n                            )}\n                            {!company.isOverAllocated && !company.isUnderAllocated && (\n                              <Badge className=\"bg-green-100 text-green-800 border-green-200\">Optimal</Badge>\n                            )}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                  </TableBody>\n                </Table>\n              </div>\n\n              <div className=\"mt-6 p-4 bg-green-50 border border-green-200 rounded-lg\">\n                <h4 className=\"font-medium text-green-900 mb-2\">Strategic Capital Deployment Insights</h4>\n                <div className=\"text-sm text-green-800 space-y-1\">\n                  <div>ΓÇó <strong>Top Priority:</strong> Cybros (#1) offers highest follow-on multiple at 3.1x</div>\n                  <div>ΓÇó <strong>Current Deal:</strong> Carmasal Fund (#2) ranks second with 2.4x follow-on multiple</div>\n                  <div>ΓÇó <strong>Capital Trap Warning:</strong> AlphaTech (#3) is over-allocated with lowest returns</div>\n                  <div>ΓÇó <strong>Rebalancing Opportunity:</strong> Consider reducing AlphaTech reserves and increasing Cybros allocation</div>\n                  <div>ΓÇó <strong>Next Dollar Decision:</strong> Based on ranking, next $1M should go to Cybros for maximum portfolio impact</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Analytics Tab */}\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Investment Analytics</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-12\">\n                <p className=\"text-gray-500\">Advanced analytics and insights will be displayed here</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\tactyc-investment-editor.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectContent' is defined but never used.","line":14,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectItem' is defined but never used.","line":14,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectTrigger' is defined but never used.","line":14,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":58},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectValue' is defined but never used.","line":14,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":71},{"ruleId":"no-unused-vars","severity":2,"message":"'Dialog' is defined but never used.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogContent' is defined but never used.","line":16,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogDescription' is defined but never used.","line":16,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogHeader' is defined but never used.","line":16,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":64},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTitle' is defined but never used.","line":16,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":77},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":16,"column":79,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":92},{"ruleId":"no-unused-vars","severity":2,"message":"'CustomField' is defined but never used.","line":21,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'Tag' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":6},{"ruleId":"no-unused-vars","severity":2,"message":"'ArrowUpRight' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'ArrowDownRight' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'Percent' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":10},{"ruleId":"no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'currentFund' is assigned a value but never used.","line":93,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'editingRound' is assigned a value but never used.","line":215,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":215,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'showAddRound' is assigned a value but never used.","line":216,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":216,"endColumn":22}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { useFundContext } from \"@/contexts/FundContext\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport FutureRoundsBuilder from \"./future-rounds-builder\";\nimport ExitValuationEditor from \"./exit-valuation-editor\";\nimport DealTagsEditor from \"./deal-tags-editor\";\nimport CustomFieldsEditor from '../custom-fields/custom-fields-editor';\nimport { CustomField } from '../custom-fields/custom-fields-manager';\nimport { \n  Building2, \n  DollarSign, \n  Calendar, \n  Users, \n  Tag, \n  Globe, \n  Edit3, \n  Plus, \n  TrendingUp,\n  ArrowUpRight,\n  ArrowDownRight,\n  Percent,\n  Target,\n  BarChart3,\n  Info\n} from \"lucide-react\";\n\ninterface PerformanceCase {\n  id: string;\n  name: string;\n  probability: number;\n  exitValuation: number;\n  exitDate: string;\n  rounds: InvestmentRound[];\n}\n\ninterface InvestmentRound {\n  id: string;\n  type: string;\n  date: string;\n  amount: number;\n  preMoneyValuation: number;\n  postMoneyValuation: number;\n  ownership: number;\n  graduationRate: number;\n  proRataParticipation: boolean;\n  leadInvestor?: string;\n  coInvestors: string[];\n}\n\ninterface InvestmentData {\n  id: string;\n  name: string;\n  url: string;\n  sector: string;\n  geography: string;\n  tags: string[];\n  managementTeam: string[];\n  partners: string[];\n  boardMembers: string[];\n  coInvestors: string[];\n  performanceCases: PerformanceCase[];\n  activeCase: string;\n}\n\ninterface TactycInvestmentEditorProps {\n  profileId?: string;\n  entryRound?: string;\n  onComplete?: () => void;\n}\n\nconst sectorProfiles = [\n  { id: 'default', name: 'Default Profile' },\n  { id: 'enterprise-saas', name: 'Enterprise SaaS Profile' },\n  { id: 'fintech', name: 'FinTech Profile' },\n  { id: 'marketplace', name: 'Marketplace Profile' },\n  { id: 'healthcare', name: 'Healthcare Profile' }\n];\n\nexport default function TactycInvestmentEditor({ profileId, entryRound, onComplete }: TactycInvestmentEditorProps) {\n  const { currentFund } = useFundContext();\n  const [investment, setInvestment] = useState<InvestmentData>({\n    id: 'new-investment',\n    name: '',\n    url: '',\n    sector: profileId === 'fintech' ? 'FinTech' : profileId === 'enterprise-saas' ? 'Enterprise SaaS' : 'Technology',\n    geography: 'United States',\n    tags: [],\n    managementTeam: [],\n    partners: [],\n    boardMembers: [],\n    coInvestors: [],\n    performanceCases: [\n      {\n        id: 'base-case',\n        name: 'Base Case',\n        probability: 50,\n        exitValuation: 3000000000, // $3B exit\n        exitDate: '2030-06-15',\n        rounds: [\n          {\n            id: entryRound?.toLowerCase().replace(/\\s+/g, '-') || 'seed',\n            type: entryRound || 'Seed',\n            date: '',\n            amount: 0,\n            preMoneyValuation: 0,\n            postMoneyValuation: 0,\n            ownership: 0,\n            graduationRate: 65,\n            proRataParticipation: false,\n            leadInvestor: '',\n            coInvestors: []\n          },\n          {\n            id: 'series-a',\n            type: 'Series A',\n            date: '2025-06-15',\n            amount: 0, // Pro-rata participation\n            preMoneyValuation: 25000000,\n            postMoneyValuation: 35000000,\n            ownership: 14.3,\n            graduationRate: 70,\n            proRataParticipation: true,\n            leadInvestor: 'Growth VC',\n            coInvestors: ['Co-Investor B']\n          },\n          {\n            id: 'series-b',\n            type: 'Series B',\n            date: '2027-03-15',\n            amount: 0, // Pro-rata participation\n            preMoneyValuation: 75000000,\n            postMoneyValuation: 100000000,\n            ownership: 10.0,\n            graduationRate: 45,\n            proRataParticipation: true,\n            leadInvestor: 'Late Stage VC',\n            coInvestors: ['Co-Investor C']\n          }\n        ]\n      },\n      {\n        id: 'downside-case',\n        name: 'Downside Case',\n        probability: 10,\n        exitValuation: 0,\n        exitDate: '2025-12-31',\n        rounds: [\n          {\n            id: 'seed',\n            type: 'Seed',\n            date: '2024-01-15',\n            amount: 2000000,\n            preMoneyValuation: 8000000,\n            postMoneyValuation: 10000000,\n            ownership: 20.0,\n            graduationRate: 0, // Fails to graduate\n            proRataParticipation: false,\n            leadInvestor: 'Lead VC',\n            coInvestors: []\n          }\n        ]\n      },\n      {\n        id: 'upside-case',\n        name: 'Upside Case',\n        probability: 40,\n        exitValuation: 3000000000,\n        exitDate: '2029-12-31',\n        rounds: [\n          {\n            id: 'seed',\n            type: 'Seed',\n            date: '2024-01-15',\n            amount: 2000000,\n            preMoneyValuation: 8000000,\n            postMoneyValuation: 10000000,\n            ownership: 20.0,\n            graduationRate: 85, // Higher graduation rates\n            proRataParticipation: true,\n            leadInvestor: 'Lead VC',\n            coInvestors: ['Co-Investor A']\n          },\n          {\n            id: 'series-a',\n            type: 'Series A',\n            date: '2025-06-15',\n            amount: 0,\n            preMoneyValuation: 25000000,\n            postMoneyValuation: 35000000,\n            ownership: 14.3,\n            graduationRate: 90, // Higher graduation rates\n            proRataParticipation: true,\n            leadInvestor: 'Growth VC',\n            coInvestors: ['Co-Investor B']\n          }\n        ]\n      }\n    ],\n    activeCase: 'base-case'\n  });\n\n  const [editingRound, setEditingRound] = useState<string | null>(null);\n  const [showAddRound, setShowAddRound] = useState(false);\n  const [showFutureRounds, setShowFutureRounds] = useState(false);\n  const [showExitEditor, setShowExitEditor] = useState(false);\n  const [isEditMode, setIsEditMode] = useState(true); // Start in edit mode for new investments\n\n  const activeCase = investment.performanceCases.find(c => c.id === investment.activeCase) || investment.performanceCases[0];\n\n  const formatCurrency = (value: number) => {\n    if (value >= 1000000000) return `$${(value / 1000000000).toFixed(1)}B`;\n    if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;\n    if (value >= 1000) return `$${(value / 1000).toFixed(0)}K`;\n    return `$${value.toLocaleString()}`;\n  };\n\n  const formatOwnership = (ownership: number) => `${ownership.toFixed(1)}%`;\n\n  const handleEditRound = (roundId: string) => {\n    setEditingRound(roundId);\n  };\n\n  const handleReserveProRata = (roundId: string) => {\n    // Auto-calculate reserves needed for pro-rata participation\n    console.log(`Reserving pro-rata for round: ${roundId}`);\n  };\n\n  const handleBuildFutureRounds = (config: any) => {\n    // Generate future rounds based on sector profile and configuration\n    const newRounds = generateFutureRounds(config);\n    const updatedCases = investment.performanceCases.map(case_ => \n      case_.id === investment.activeCase \n        ? { ...case_, rounds: [...case_.rounds, ...newRounds] }\n        : case_\n    );\n    setInvestment(prev => ({ \n      ...prev, \n      performanceCases: updatedCases \n    }));\n  };\n\n  const generateFutureRounds = (config: any): InvestmentRound[] => {\n    // Sample future rounds generation based on sector profile\n    const baseGraduationRate = config.graduationRate === 'sector-based' ? 65 : \n                              config.graduationRate === 'high' ? 85 :\n                              config.graduationRate === 'medium' ? 65 : 45;\n    \n    const futureRounds: InvestmentRound[] = [];\n    const roundSequence: string[] = ['Series A', 'Series B', 'Series C', 'Series D'];\n    let currentDate = new Date(config.nextRoundDate);\n    \n    for (let i = 0; i < roundSequence.length; i++) {\n      const roundName = roundSequence[i];\n      if (!roundName) continue; // This should never happen, but satisfies TypeScript\n      \n      const dateStr = currentDate.toISOString().split('T')[0] || '';\n      \n      futureRounds.push({\n        id: roundName.toLowerCase().replace(/\\s+/g, '-'),\n        type: roundName,\n        date: dateStr,\n        amount: 0, // To be filled by pro-rata participation\n        preMoneyValuation: 25000000 * Math.pow(2.5, i), // Sample escalating valuations\n        postMoneyValuation: 35000000 * Math.pow(2.5, i),\n        ownership: 20 / Math.pow(1.4, i + 1), // Dilution over rounds\n        graduationRate: Math.max(baseGraduationRate - (i * 10), 25), // Decreasing graduation rates\n        proRataParticipation: false,\n        leadInvestor: '',\n        coInvestors: []\n      });\n      \n      // Add 18 months between rounds\n      currentDate.setMonth(currentDate.getMonth() + 18);\n    }\n    \n    return futureRounds;\n  };\n\n  const handleUpdateExitValuation = (valuation: number, date: string, notes: string, multiple: string) => {\n    const updatedCases = investment.performanceCases.map(case_ => \n      case_.id === investment.activeCase \n        ? { ...case_, exitValuation: valuation, exitDate: date, notes, multiple }\n        : case_\n    );\n    setInvestment(prev => ({ \n      ...prev, \n      performanceCases: updatedCases \n    }));\n  };\n\n  const RoundCard = ({ round }: { round: InvestmentRound }) => (\n    <Card className=\"mb-4\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-blue-50 rounded-lg\">\n              <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-lg\">{round.type} Round</CardTitle>\n              <CardDescription>{round.date}</CardDescription>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge variant={round.graduationRate > 50 ? \"default\" : \"secondary\"}>\n              {round.graduationRate}% Graduation\n            </Badge>\n            <Button \n              size=\"sm\" \n              variant=\"outline\"\n              onClick={() => handleEditRound(round.id)}\n            >\n              <Edit3 className=\"h-4 w-4 mr-1\" />\n              Edit Event\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div>\n            <Label className=\"text-sm text-gray-500\">Investment Amount</Label>\n            <div className=\"font-bold text-lg\">{formatCurrency(round.amount)}</div>\n          </div>\n          <div>\n            <Label className=\"text-sm text-gray-500\">Pre-Money Valuation</Label>\n            <div className=\"font-bold text-lg\">{formatCurrency(round.preMoneyValuation)}</div>\n          </div>\n          <div>\n            <Label className=\"text-sm text-gray-500\">Post-Money Valuation</Label>\n            <div className=\"font-bold text-lg\">{formatCurrency(round.postMoneyValuation)}</div>\n          </div>\n          <div>\n            <Label className=\"text-sm text-gray-500\">Ownership</Label>\n            <div className=\"font-bold text-lg\">{formatOwnership(round.ownership)}</div>\n          </div>\n        </div>\n        \n        {round.proRataParticipation && (\n          <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded-lg\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Target className=\"h-4 w-4 text-green-600\" />\n                <span className=\"text-sm font-medium text-green-800\">Pro-Rata Reserved</span>\n              </div>\n              <Button \n                size=\"sm\" \n                className=\"bg-green-600 hover:bg-green-700\"\n                onClick={() => handleReserveProRata(round.id)}\n              >\n                Reserve Pro-Rata\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {round.leadInvestor && (\n          <div className=\"mt-4\">\n            <Label className=\"text-sm text-gray-500\">Lead Investor</Label>\n            <div className=\"text-sm font-medium\">{round.leadInvestor}</div>\n          </div>\n        )}\n\n        {round.coInvestors.length > 0 && (\n          <div className=\"mt-2\">\n            <Label className=\"text-sm text-gray-500\">Co-Investors</Label>\n            <div className=\"flex flex-wrap gap-1 mt-1\">\n              {round.coInvestors.map((investor, index) => (\n                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                  {investor}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  const PerformanceCaseSelector = () => (\n    <div className=\"flex items-center space-x-4 mb-6\">\n      <Label className=\"text-sm font-medium\">Performance Case:</Label>\n      <div className=\"flex space-x-2\">\n        {investment.performanceCases.map((case_) => (\n          <Button\n            key={case_.id}\n            variant={investment.activeCase === case_.id ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setInvestment(prev => ({ ...prev, activeCase: case_.id }))}\n          >\n            {case_.name} ({case_.probability}%)\n          </Button>\n        ))}\n      </div>\n      <Button size=\"sm\" variant=\"outline\">\n        <Plus className=\"h-4 w-4 mr-1\" />\n        Add Case\n      </Button>\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Investment Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-3 bg-blue-50 rounded-lg\">\n                <Building2 className=\"h-6 w-6 text-blue-600\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-2xl\">{investment.name}</CardTitle>\n                <CardDescription>\n                  {investment.sector} ΓÇó {investment.geography}\n                </CardDescription>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              {!isEditMode && (\n                <Button variant=\"outline\" size=\"sm\" onClick={() => setIsEditMode(true)}>\n                  <Edit3 className=\"h-4 w-4 mr-2\" />\n                  Edit Investment\n                </Button>\n              )}\n              <Button size=\"sm\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Event\n              </Button>\n              {isEditMode && (\n                <Button size=\"sm\" onClick={() => { setIsEditMode(false); onComplete?.(); }}>\n                  Save Investment\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isEditMode ? (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"investment-name\">Investment Name *</Label>\n                  <Input\n                    id=\"investment-name\"\n                    value={investment.name}\n                    onChange={(e) => setInvestment(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Enter company name\"\n                    className=\"border-yellow-300 bg-yellow-50\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"website\">Website URL</Label>\n                  <Input\n                    id=\"website\"\n                    value={investment.url}\n                    onChange={(e) => setInvestment(prev => ({ ...prev, url: e.target.value }))}\n                    placeholder=\"https://company.com\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"sector\">Sector</Label>\n                  <Input\n                    id=\"sector\"\n                    value={investment.sector}\n                    onChange={(e) => setInvestment(prev => ({ ...prev, sector: e.target.value }))}\n                    placeholder=\"Enter sector\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"geography\">Geography</Label>\n                  <Input\n                    id=\"geography\"\n                    value={investment.geography}\n                    onChange={(e) => setInvestment(prev => ({ ...prev, geography: e.target.value }))}\n                    placeholder=\"Enter geography\"\n                  />\n                </div>\n                <div className=\"md:col-span-3\">\n                  <DealTagsEditor\n                    selectedTags={investment.tags}\n                    onTagsChange={(tags) => setInvestment(prev => ({ ...prev, tags }))}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"management\">Management Team</Label>\n                  <Textarea\n                    id=\"management\"\n                    value={investment.managementTeam.join('\\n')}\n                    onChange={(e) => setInvestment(prev => ({ \n                      ...prev, \n                      managementTeam: e.target.value.split('\\n').filter(Boolean)\n                    }))}\n                    placeholder=\"CEO: John Smith&#10;CTO: Jane Doe\"\n                    rows={3}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"partners\">Partners</Label>\n                  <Textarea\n                    id=\"partners\"\n                    value={investment.partners.join('\\n')}\n                    onChange={(e) => setInvestment(prev => ({ \n                      ...prev, \n                      partners: e.target.value.split('\\n').filter(Boolean)\n                    }))}\n                    placeholder=\"Partner A&#10;Partner B\"\n                    rows={3}\n                  />\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div>\n                <Label className=\"text-sm text-gray-500\">Website</Label>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <Globe className=\"h-4 w-4 text-gray-400\" />\n                  {investment.url ? (\n                    <a href={investment.url} className=\"text-blue-600 hover:underline text-sm\">\n                      {investment.url}\n                    </a>\n                  ) : (\n                    <span className=\"text-gray-400 text-sm\">No website provided</span>\n                  )}\n                </div>\n              </div>\n              <div>\n                <Label className=\"text-sm text-gray-500\">Tags</Label>\n                <div className=\"flex flex-wrap gap-1 mt-1\">\n                  {investment.tags.length > 0 ? investment.tags.map((tag, index) => (\n                    <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                      {tag}\n                    </Badge>\n                  )) : (\n                    <span className=\"text-gray-400 text-sm\">No tags</span>\n                  )}\n                </div>\n              </div>\n              <div>\n                <Label className=\"text-sm text-gray-500\">Management Team</Label>\n                <div className=\"text-sm mt-1\">\n                  {investment.managementTeam.length > 0 ? \n                    investment.managementTeam.join(', ') : \n                    <span className=\"text-gray-400\">Not specified</span>\n                  }\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Performance Cases */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Performance Cases</CardTitle>\n          <CardDescription>\n            Model different outcome scenarios for this investment\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {/* Performance Case Tabs */}\n          <Tabs defaultValue=\"case-notes\" className=\"w-full mb-6\">\n            <TabsList className=\"grid w-full grid-cols-8\">\n              <TabsTrigger value=\"case-notes\">Case Notes</TabsTrigger>\n              <TabsTrigger value=\"marketintel\">MarketIntel</TabsTrigger>\n              <TabsTrigger value=\"future\">Future</TabsTrigger>\n              <TabsTrigger value=\"clone\">Clone</TabsTrigger>\n              <TabsTrigger value=\"sync\">Sync</TabsTrigger>\n              <TabsTrigger value=\"liq-prefs\">Liq Prefs</TabsTrigger>\n              <TabsTrigger value=\"custom-fields\">Custom Fields</TabsTrigger>\n              <TabsTrigger value=\"results\">Results</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"case-notes\" className=\"mt-4\">\n              <div className=\"p-4 border border-gray-200 rounded-lg\">\n                <p className=\"text-sm text-gray-600\">Add notes and comments for this performance case...</p>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"marketintel\" className=\"mt-4\">\n              <div className=\"p-4 border border-gray-200 rounded-lg\">\n                <p className=\"text-sm text-gray-600\">Market intelligence and comparable company data...</p>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"future\" className=\"mt-4\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold\">Future Rounds Builder</h3>\n                    <p className=\"text-sm text-gray-600\">Generate future funding rounds based on sector profiles</p>\n                  </div>\n                  <Button \n                    onClick={() => setShowFutureRounds(true)}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                  >\n                    Build Future Rounds\n                  </Button>\n                </div>\n                \n                <div className=\"p-4 border border-gray-200 rounded-lg\">\n                  <p className=\"text-sm text-gray-600 mb-2\">Current future rounds configuration:</p>\n                  <ul className=\"text-xs text-gray-500 space-y-1\">\n                    <li>ΓÇó Sector Profile: {profileId ? sectorProfiles.find(p => p.id === profileId)?.name || 'Default' : 'Default'}</li>\n                    <li>ΓÇó Entry Round: {entryRound || 'Seed'}</li>\n                    <li>ΓÇó Total Rounds: {activeCase.rounds.length}</li>\n                    <li>ΓÇó Future Rounds: {activeCase.rounds.filter(r => new Date(r.date) > new Date()).length}</li>\n                  </ul>\n                </div>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"clone\" className=\"mt-4\">\n              <div className=\"p-4 border border-gray-200 rounded-lg\">\n                <p className=\"text-sm text-gray-600\">Clone this performance case to create variations...</p>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"sync\" className=\"mt-4\">\n              <div className=\"p-4 border border-gray-200 rounded-lg\">\n                <p className=\"text-sm text-gray-600\">Sync data with external sources...</p>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"liq-prefs\" className=\"mt-4\">\n              <div className=\"p-4 border border-gray-200 rounded-lg\">\n                <p className=\"text-sm text-gray-600\">Liquidation preferences and waterfall configuration...</p>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"custom-fields\" className=\"mt-4\">\n              <CustomFieldsEditor\n                fields={[\n                  { id: 'field-1', name: 'Internal Status', type: 'color' },\n                  { id: 'field-2', name: 'Founding Year', type: 'number' },\n                  { id: 'field-3', name: 'Strategic Tags', type: 'tags' },\n                  { id: 'field-4', name: 'Deal Source', type: 'text' },\n                  { id: 'field-5', name: 'Investment Date', type: 'date' },\n                ]}\n                values={[\n                  { fieldId: 'field-1', value: '#22c55e' },\n                  { fieldId: 'field-2', value: 2020 },\n                  { fieldId: 'field-3', value: ['High Growth', 'Strategic'] },\n                  { fieldId: 'field-4', value: 'Partner Network' },\n                ]}\n                onValuesChange={(values) => {\n                  console.log('Custom field values updated:', values);\n                }}\n              />\n            </TabsContent>\n            \n            <TabsContent value=\"results\" className=\"mt-4\">\n              <div className=\"p-4 border border-gray-200 rounded-lg\">\n                <p className=\"text-sm text-gray-600\">Performance results and calculations...</p>\n              </div>\n            </TabsContent>\n          </Tabs>\n          <PerformanceCaseSelector />\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n            <Card className=\"bg-blue-50 border-blue-200 cursor-pointer hover:bg-blue-100 transition-colors\"\n                  onClick={() => setShowExitEditor(true)}>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-blue-700\">\n                    {formatCurrency(activeCase.exitValuation)}\n                  </div>\n                  <div className=\"text-blue-600 text-sm\">Exit Valuation</div>\n                  <div className=\"text-blue-500 text-xs\">{activeCase.exitDate}</div>\n                  <div className=\"text-xs text-blue-400 mt-1\">Click to edit</div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"bg-green-50 border-green-200\">\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-700\">\n                    {activeCase.probability}%\n                  </div>\n                  <div className=\"text-green-600 text-sm\">Probability</div>\n                  <div className=\"text-green-500 text-xs\">Of This Outcome</div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"bg-purple-50 border-purple-200\">\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-purple-700\">\n                    {activeCase.rounds.length}\n                  </div>\n                  <div className=\"text-purple-600 text-sm\">Total Rounds</div>\n                  <div className=\"text-purple-500 text-xs\">Funding Events</div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Fund Date Warning */}\n          {new Date(activeCase.exitDate) > new Date('2029-12-31') && (\n            <div className=\"mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n              <div className=\"flex items-start space-x-2\">\n                <Info className=\"h-5 w-5 text-yellow-600 mt-0.5\" />\n                <div className=\"text-sm text-yellow-700\">\n                  <p className=\"font-medium\">After Fund Date</p>\n                  <p>This exit occurs after the fund end date. Consider extending fund term or adjusting exit timeline.</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Investment Rounds */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold\">Investment Rounds</h3>\n              <Button \n                size=\"sm\" \n                variant=\"outline\"\n                onClick={() => setShowAddRound(true)}\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Next Round\n              </Button>\n            </div>\n            \n            {activeCase.rounds.map((round) => (\n              <RoundCard key={round.id} round={round} />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Future Rounds Builder Dialog */}\n      <FutureRoundsBuilder\n        open={showFutureRounds}\n        onOpenChange={setShowFutureRounds}\n        onBuildRounds={handleBuildFutureRounds}\n      />\n\n      {/* Exit Valuation Editor Dialog */}\n      <ExitValuationEditor\n        open={showExitEditor}\n        onOpenChange={setShowExitEditor}\n        currentValuation={activeCase.exitValuation}\n        currentDate={activeCase.exitDate}\n        onUpdateExit={handleUpdateExitValuation}\n      />\n\n      {/* Additional Investment Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Investment Details</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700\">Partners</Label>\n              <div className=\"mt-2 space-y-1\">\n                {investment.partners.map((partner, index) => (\n                  <div key={index} className=\"flex items-center space-x-2\">\n                    <Users className=\"h-4 w-4 text-gray-400\" />\n                    <span className=\"text-sm\">{partner}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div>\n              <Label className=\"text-sm font-medium text-gray-700\">Board Members</Label>\n              <div className=\"mt-2 space-y-1\">\n                {investment.boardMembers.map((member, index) => (\n                  <div key={index} className=\"flex items-center space-x-2\">\n                    <Users className=\"h-4 w-4 text-gray-400\" />\n                    <span className=\"text-sm\">{member}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\investments\\valuation-update-dialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":15,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { TrendingUp, Calendar, Info } from \"lucide-react\";\n\ninterface ValuationUpdateDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  investment?: {\n    id: string;\n    company: string;\n    currentValuation: number;\n  };\n}\n\nexport default function ValuationUpdateDialog({ \n  isOpen, \n  onOpenChange, \n  investment \n}: ValuationUpdateDialogProps) {\n  const [month, setMonth] = useState(\"Jul-2024\");\n  const [newValuation, setNewValuation] = useState(\"20.00\");\n\n  const handleSave = () => {\n    console.log(\"Saving valuation update:\", {\n      month,\n      newValuation: parseFloat(newValuation) * 1000000\n    });\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"h-5 w-5\" />\n            <span>Valuation Update</span>\n          </DialogTitle>\n          <DialogDescription>\n            Update the valuation for {investment?.company || \"this investment\"}\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Month Selection */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"month\" className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-4 w-4\" />\n              <span>Month</span>\n              <Info className=\"h-3 w-3 text-muted-foreground\" />\n            </Label>\n            <Input\n              id=\"month\"\n              value={month}\n              onChange={(e) => setMonth(e.target.value)}\n              placeholder=\"Jul-2024\"\n              className=\"font-mono\"\n            />\n          </div>\n\n          {/* New Valuation */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"valuation\" className=\"flex items-center space-x-2\">\n              <span>New Valuation</span>\n              <Info className=\"h-3 w-3 text-muted-foreground\" />\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"valuation\"\n                value={newValuation}\n                onChange={(e) => setNewValuation(e.target.value)}\n                className=\"pl-8 text-center bg-blue-50 border-blue-200 font-mono text-lg\"\n                placeholder=\"20.00\"\n              />\n              <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                $\n              </span>\n              <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\">\n                mm\n              </span>\n            </div>\n          </div>\n\n          {/* Current vs New Valuation */}\n          <div className=\"grid grid-cols-2 gap-4 p-3 bg-gray-50 rounded-lg\">\n            <div className=\"text-center\">\n              <div className=\"text-xs text-muted-foreground\">Current Valuation</div>\n              <div className=\"text-lg font-semibold\">\n                ${((investment?.currentValuation || 15000000) / 1000000).toFixed(2)}mm\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xs text-muted-foreground\">New Valuation</div>\n              <div className=\"text-lg font-semibold text-blue-600\">${newValuation}mm</div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSave}\n              className=\"povc-bg-primary hover:bg-blue-700\"\n            >\n              Update Valuation\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\layout\\dynamic-fund-header.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used.","line":41,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":35}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useFundContext } from \"@/contexts/FundContext\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  TrendingUp, \n  TrendingDown, \n  Target, \n  DollarSign, \n  Calendar,\n  BarChart3,\n  PieChart,\n  Activity\n} from \"lucide-react\";\n\ninterface FundMetrics {\n  totalCommitted: number;\n  totalInvested: number;\n  totalValue: number;\n  irr: number;\n  moic: number;\n  dpi: number;\n  tvpi: number;\n  activeInvestments: number;\n  exited: number;\n  avgCheckSize: number;\n  deploymentRate: number;\n  remainingCapital: number;\n}\n\nexport default function DynamicFundHeader() {\n  const { currentFund } = useFundContext();\n\n  // Fetch real-time fund metrics\n  const { data: metrics, isLoading } = useQuery<FundMetrics>({\n    queryKey: ['/api/fund-metrics', currentFund?.id],\n    enabled: !!currentFund?.id,\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  // Sample metrics for demo (would be replaced by API)\n  const sampleMetrics: FundMetrics = {\n    totalCommitted: currentFund?.size || 100000000,\n    totalInvested: 65000000,\n    totalValue: 187500000,\n    irr: 28.5,\n    moic: 2.88,\n    dpi: 0.85,\n    tvpi: 2.88,\n    activeInvestments: 23,\n    exited: 4,\n    avgCheckSize: 2800000,\n    deploymentRate: 65,\n    remainingCapital: 35000000\n  };\n\n  // Ensure all values are properly defined\n  const safeMetrics: FundMetrics = {\n    totalCommitted: (metrics?.totalCommitted ?? sampleMetrics.totalCommitted) || 0,\n    totalInvested: (metrics?.totalInvested ?? sampleMetrics.totalInvested) || 0,\n    totalValue: (metrics?.totalValue ?? sampleMetrics.totalValue) || 0,\n    irr: (metrics?.irr ?? sampleMetrics.irr) || 0,\n    moic: (metrics?.moic ?? sampleMetrics.moic) || 0,\n    dpi: (metrics?.dpi ?? sampleMetrics.dpi) || 0,\n    tvpi: (metrics?.tvpi ?? sampleMetrics.tvpi) || 0,\n    activeInvestments: (metrics?.activeInvestments ?? sampleMetrics.activeInvestments) || 0,\n    exited: (metrics?.exited ?? sampleMetrics.exited) || 0,\n    avgCheckSize: (metrics?.avgCheckSize ?? sampleMetrics.avgCheckSize) || 0,\n    deploymentRate: (metrics?.deploymentRate ?? sampleMetrics.deploymentRate) || 0,\n    remainingCapital: (metrics?.remainingCapital ?? sampleMetrics.remainingCapital) || 0\n  };\n\n  const displayMetrics = safeMetrics;\n\n  const formatCurrency = (value: number | undefined) => {\n    if (!value && value !== 0) return '$0';\n    const num = Number(value);\n    if (isNaN(num)) return '$0';\n    \n    if (num >= 1000000000) return `$${(num / 1000000000).toFixed(1)}B`;\n    if (num >= 1000000) return `$${(num / 1000000).toFixed(0)}M`;\n    if (num >= 1000) return `$${(num / 1000).toFixed(0)}K`;\n    return `$${num.toLocaleString()}`;\n  };\n\n  const formatPercentage = (value: number | undefined) => {\n    if (!value && value !== 0) return '0.0%';\n    const num = Number(value);\n    if (isNaN(num)) return '0.0%';\n    return `${num.toFixed(1)}%`;\n  };\n\n  if (!currentFund) {\n    return null;\n  }\n\n  return (\n    <div className=\"sticky top-0 z-50 bg-white border-b border-gray-200 shadow-sm\">\n      <div className=\"px-6 py-3\">\n        {/* Fund Header */}\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-4\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">{currentFund.name}</h1>\n              <div className=\"flex items-center space-x-3 text-sm text-gray-600\">\n                <span>Fund Size: {formatCurrency(currentFund.size)}</span>\n                <Separator orientation=\"vertical\" className=\"h-4\" />\n                <span>Vintage: {currentFund.vintageYear}</span>\n                <Separator orientation=\"vertical\" className=\"h-4\" />\n                {currentFund.termYears && <span>Term: {currentFund.termYears} years</span>}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-300\">\n              <Activity className=\"h-3 w-3 mr-1\" />\n              Active\n            </Badge>\n            <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700 border-blue-300\">\n              {(displayMetrics.deploymentRate || 0).toFixed(0)}% Deployed\n            </Badge>\n          </div>\n        </div>\n\n        {/* Real-time Metrics Grid */}\n        <div className=\"grid grid-cols-8 gap-3\">\n          {/* Capital Metrics */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardContent className=\"p-2\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs text-blue-600 font-medium\">Total Invested</p>\n                  <p className=\"text-sm font-bold text-blue-900\">\n                    {formatCurrency(displayMetrics.totalInvested)}\n                  </p>\n                </div>\n                <DollarSign className=\"h-4 w-4 text-blue-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-green-50 border-green-200\">\n            <CardContent className=\"p-2\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs text-green-600 font-medium\">Current Value</p>\n                  <p className=\"text-sm font-bold text-green-900\">\n                    {formatCurrency(displayMetrics.totalValue)}\n                  </p>\n                </div>\n                <TrendingUp className=\"h-4 w-4 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-purple-50 border-purple-200\">\n            <CardContent className=\"p-2\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs text-purple-600 font-medium\">Net IRR</p>\n                  <p className=\"text-sm font-bold text-purple-900\">\n                    {formatPercentage(displayMetrics.irr)}\n                  </p>\n                </div>\n                <BarChart3 className=\"h-4 w-4 text-purple-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-orange-50 border-orange-200\">\n            <CardContent className=\"p-2\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs text-orange-600 font-medium\">TVPI</p>\n                  <p className=\"text-sm font-bold text-orange-900\">\n                    {(displayMetrics.tvpi || 0).toFixed(2)}x\n                  </p>\n                </div>\n                <Target className=\"h-4 w-4 text-orange-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-teal-50 border-teal-200\">\n            <CardContent className=\"p-2\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs text-teal-600 font-medium\">DPI</p>\n                  <p className=\"text-sm font-bold text-teal-900\">\n                    {(displayMetrics.dpi || 0).toFixed(2)}x\n                  </p>\n                </div>\n                <PieChart className=\"h-4 w-4 text-teal-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-indigo-50 border-indigo-200\">\n            <CardContent className=\"p-2\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs text-indigo-600 font-medium\">Active</p>\n                  <p className=\"text-sm font-bold text-indigo-900\">\n                    {displayMetrics.activeInvestments || 0}\n                  </p>\n                </div>\n                <Activity className=\"h-4 w-4 text-indigo-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-50 border-gray-200\">\n            <CardContent className=\"p-2\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs text-gray-600 font-medium\">Avg Check</p>\n                  <p className=\"text-sm font-bold text-gray-900\">\n                    {formatCurrency(displayMetrics.avgCheckSize)}\n                  </p>\n                </div>\n                <DollarSign className=\"h-4 w-4 text-gray-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-yellow-50 border-yellow-200\">\n            <CardContent className=\"p-2\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-xs text-yellow-600 font-medium\">Remaining</p>\n                  <p className=\"text-sm font-bold text-yellow-900\">\n                    {formatCurrency(displayMetrics.remainingCapital)}\n                  </p>\n                </div>\n                <Calendar className=\"h-4 w-4 text-yellow-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Real-time Status Indicators */}\n        <div className=\"flex items-center justify-between mt-3 text-xs text-gray-500\">\n          <div className=\"flex items-center space-x-4\">\n            <span>Last updated: {new Date().toLocaleTimeString()}</span>\n            <div className=\"flex items-center space-x-1\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n              <span>Real-time data</span>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <span>Portfolio Growth: +12.3% (30d)</span>\n            <span>New Investments: 2 this month</span>\n            <span>Next Close: Q2 2025</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\layout\\expandable-sidebar.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Briefcase' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'Building2' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'module' is defined but never used.","line":34,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'location' is assigned a value but never used.","line":83,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'setLocation' is assigned a value but never used.","line":83,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":83,"endColumn":31}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Link, useLocation } from \"wouter\";\nimport { useFundContext } from \"@/contexts/FundContext\";\nimport { \n  LayoutDashboard, \n  Briefcase, \n  Calculator, \n  BarChart3, \n  FileText,\n  Activity,\n  ChevronRight,\n  Building2,\n  TrendingUp,\n  Target,\n  DollarSign,\n  Settings,\n  Clock,\n  Globe,\n  Users,\n  HelpCircle\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface ExpandableSidebarProps {\n  activeModule: string;\n  onModuleChange: (module: string) => void;\n}\n\nconst NAVIGATION_STRUCTURE = {\n  fund: {\n    title: \"Fund\",\n    icon: LayoutDashboard,\n    items: [\n      { id: 'dashboard', label: 'Dashboard', icon: BarChart3 },\n      { id: 'construction', label: 'Construction', icon: Settings },\n      { id: 'investments', label: 'Investments', icon: TrendingUp },\n      { id: 'model-view', label: 'Model View', icon: Calculator }\n    ]\n  },\n  reportsAndDocuments: {\n    title: \"Reports and Documents\",\n    icon: FileText,\n    items: [\n      { id: 'reports', label: 'Reports', icon: FileText },\n      { id: 'documents', label: 'Documents', icon: FileText }\n    ]\n  },\n  tools: {\n    title: \"Tools\",\n    icon: Settings,\n    items: [\n      { id: 'kpi-manager', label: 'KPI Manager', icon: Activity },\n      { id: 'scenario-builder', label: 'Scenario Builder', icon: Target },\n      { id: 'what-if-analysis', label: 'What-If Analysis', icon: TrendingUp },\n      { id: 'cap-tables', label: 'Cap Tables', icon: Calculator }\n    ]\n  },\n  administration: {\n    title: \"Administration\",\n    icon: Settings,\n    items: [\n      { id: 'history', label: 'History', icon: Clock },\n      { id: 'publish', label: 'Publish', icon: Globe },\n      { id: 'collaborate', label: 'Collaborate', icon: Users }\n    ]\n  }\n};\n\nexport default function ExpandableSidebar({ activeModule, onModuleChange }: ExpandableSidebarProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({\n    fund: true,\n    tools: true\n  });\n  const [location, setLocation] = useLocation();\n  const { needsSetup, currentFund } = useFundContext();\n\n  const toggleSection = (sectionKey: string) => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [sectionKey]: !prev[sectionKey]\n    }));\n  };\n\n  const handleMouseEnter = () => {\n    setIsExpanded(true);\n  };\n\n  const handleMouseLeave = () => {\n    setIsExpanded(false);\n  };\n\n  return (\n    <aside \n      className={cn(\n        \"bg-gray-900 text-white shadow-lg border-r border-gray-800 flex-shrink-0 flex flex-col transition-all duration-300 ease-in-out overflow-hidden\",\n        isExpanded ? \"w-64\" : \"w-16\"\n      )}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-800\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center flex-shrink-0\">\n            <BarChart3 className=\"text-white h-5 w-5\" />\n          </div>\n          {isExpanded && (\n            <div className=\"flex-1 min-w-0\">\n              <h1 className=\"text-lg font-bold text-white\">Tactyc</h1>\n              {currentFund ? (\n                <p className=\"text-sm text-gray-300 truncate\">{currentFund.name}</p>\n              ) : (\n                <p className=\"text-sm text-gray-300\">Venture Fund</p>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-2 overflow-y-auto\">\n        {/* Quick Access Items (always visible) */}\n        <div className=\"space-y-1 mb-4\">\n          <Link href=\"/dashboard\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"w-full justify-start text-gray-300 hover:text-white hover:bg-gray-800\",\n                activeModule === 'dashboard' && \"bg-gray-800 text-white\",\n                !isExpanded && \"px-2\"\n              )}\n              onClick={() => onModuleChange('dashboard')}\n            >\n              <LayoutDashboard className=\"h-4 w-4 flex-shrink-0\" />\n              {isExpanded && <span className=\"ml-2\">Home</span>}\n            </Button>\n          </Link>\n\n          <div className=\"flex items-center space-x-2 px-2 py-1\">\n            <div className=\"w-6 h-6 bg-gray-700 rounded flex items-center justify-center flex-shrink-0\">\n              <Users className=\"h-3 w-3 text-gray-400\" />\n            </div>\n            {isExpanded && <span className=\"text-sm text-gray-400\">Account</span>}\n          </div>\n\n          <div className=\"flex items-center space-x-2 px-2 py-1\">\n            <div className=\"w-6 h-6 bg-gray-700 rounded flex items-center justify-center flex-shrink-0\">\n              <HelpCircle className=\"h-3 w-3 text-gray-400\" />\n            </div>\n            {isExpanded && <span className=\"text-sm text-gray-400\">Logout</span>}\n          </div>\n        </div>\n\n        {isExpanded && <Separator className=\"bg-gray-800 mb-4\" />}\n\n        {/* Main Navigation Sections */}\n        {Object.entries(NAVIGATION_STRUCTURE).map(([sectionKey, section]) => (\n          <div key={sectionKey} className=\"mb-4\">\n            {isExpanded && (\n              <button\n                onClick={() => toggleSection(sectionKey)}\n                className=\"w-full flex items-center justify-between px-2 py-2 text-sm font-medium text-gray-400 hover:text-white transition-colors\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <section.icon className=\"h-4 w-4\" />\n                  <span>{section.title}</span>\n                </div>\n                <ChevronRight \n                  className={cn(\n                    \"h-3 w-3 transition-transform\",\n                    expandedSections[sectionKey] && \"rotate-90\"\n                  )} \n                />\n              </button>\n            )}\n\n            {/* Section Items */}\n            {(isExpanded ? expandedSections[sectionKey] : true) && (\n              <div className={cn(\"space-y-1\", isExpanded && \"ml-2\")}>\n                {section.items.map((item) => {\n                  const isActive = activeModule === item.id;\n                  const isDisabled = needsSetup && item.id !== 'fund-setup';\n                  \n                  return (\n                    <Link key={item.id} href={`/${item.id}`}>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        disabled={isDisabled}\n                        className={cn(\n                          \"w-full justify-start text-gray-300 hover:text-white hover:bg-gray-800\",\n                          isActive && \"bg-blue-600 text-white hover:bg-blue-700\",\n                          isDisabled && \"text-gray-500 cursor-not-allowed\",\n                          !isExpanded && \"px-2\"\n                        )}\n                        onClick={() => !isDisabled && onModuleChange(item.id)}\n                      >\n                        <item.icon className=\"h-4 w-4 flex-shrink-0\" />\n                        {isExpanded && (\n                          <div className=\"flex items-center justify-between w-full ml-2\">\n                            <span className=\"text-sm\">{item.label}</span>\n                            {item.id === 'scenario-builder' && isActive && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                Active\n                              </Badge>\n                            )}\n                          </div>\n                        )}\n                      </Button>\n                    </Link>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        ))}\n\n        {/* Additional Tools */}\n        {isExpanded && (\n          <div className=\"space-y-1\">\n            <Separator className=\"bg-gray-800 mb-2\" />\n            \n            {/* Sensitivity Analysis - New Addition */}\n            <Link href=\"/sensitivity-analysis\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className={cn(\n                  \"w-full justify-start text-gray-300 hover:text-white hover:bg-gray-800\",\n                  activeModule === 'sensitivity-analysis' && \"bg-blue-600 text-white hover:bg-blue-700\"\n                )}\n                onClick={() => onModuleChange('sensitivity-analysis')}\n              >\n                <TrendingUp className=\"h-4 w-4\" />\n                <span className=\"ml-2 text-sm\">Sensitivity Analysis</span>\n                <Badge variant=\"secondary\" className=\"ml-auto text-xs\">\n                  New\n                </Badge>\n              </Button>\n            </Link>\n\n            {/* Cash Management */}\n            <Link href=\"/cash-management\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className={cn(\n                  \"w-full justify-start text-gray-300 hover:text-white hover:bg-gray-800\",\n                  activeModule === 'cash-management' && \"bg-blue-600 text-white hover:bg-blue-700\"\n                )}\n                onClick={() => onModuleChange('cash-management')}\n              >\n                <DollarSign className=\"h-4 w-4\" />\n                <span className=\"ml-2 text-sm\">Cash Management</span>\n              </Button>\n            </Link>\n\n            {/* Portfolio Analytics */}\n            <Link href=\"/portfolio-analytics\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className={cn(\n                  \"w-full justify-start text-gray-300 hover:text-white hover:bg-gray-800\",\n                  activeModule === 'portfolio-analytics' && \"bg-blue-600 text-white hover:bg-blue-700\"\n                )}\n                onClick={() => onModuleChange('portfolio-analytics')}\n              >\n                <Activity className=\"h-4 w-4\" />\n                <span className=\"ml-2 text-sm\">Portfolio Analytics</span>\n              </Button>\n            </Link>\n          </div>\n        )}\n      </nav>\n\n      {/* Footer */}\n      {isExpanded && (\n        <div className=\"p-4 border-t border-gray-800\">\n          <div className=\"flex items-center space-x-2 text-xs text-gray-400\">\n            <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n            <span>Connected</span>\n          </div>\n        </div>\n      )}\n    </aside>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\layout\\header.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'exportToExcel' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'moduleConfig' is assigned a value but never used.","line":20,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":60,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":60,"endColumn":15}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Button } from \"@/components/ui/button\";\nimport { Download, RefreshCw, DollarSign, UserCircle2, ChevronDown, Bell } from \"lucide-react\";\nimport { exportToExcel } from \"@/utils/export-excel\";\nimport { useFundContext } from \"@/contexts/FundContext\";\nimport { useState } from \"react\";\nimport { Link } from \"wouter\";\n\ninterface HeaderProps {\n  currentModule: {\n    title: string;\n    description: string;\n  };\n}\n\nconst moduleConfig = {\n  dashboard: {\n    title: \"Fund Dashboard\",\n    description: \"Comprehensive overview of fund performance and metrics\"\n  },\n  'fund-setup': {\n    title: \"Fund Setup\",\n    description: \"Configure fund parameters and investment strategy\"\n  },\n  portfolio: {\n    title: \"Portfolio Management\", \n    description: \"Manage portfolio companies and track performance\"\n  },\n  'financial-modeling': {\n    title: \"Financial Modeling\",\n    description: \"Cohort analysis and financial projections\"\n  },\n  analytics: {\n    title: \"Analytics & Insights\",\n    description: \"Advanced analytics and performance insights\"\n  },\n  reports: {\n    title: \"Reports & Documentation\", \n    description: \"Generate comprehensive fund reports\"\n  }\n};\n\nexport default function Header({ currentModule }: HeaderProps) {\n  const { currentFund } = useFundContext();\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const handleExport = () => {\n    // TODO: Fetch portfolio companies for current fund\n    console.warn('Export functionality needs portfolio companies data');\n    // exportToExcel({ portfolioCompanies: [] }, 'povc-fund-report');\n  };\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    // Add refresh logic here if needed\n    setTimeout(() => setIsRefreshing(false), 1000);\n  };\n\n  return (\n    <>\n      {/* Top Header with UpDawg branding */}\n      <header className=\"bg-charcoal text-white py-4 px-6 flex items-center justify-between font-poppins\">\n        <div className=\"flex items-center\">\n          <Link to=\"/dashboard\" className=\"flex items-center\">\n            <div className=\"font-inter font-bold text-2xl mr-2\">\n              <span className=\"text-beige\">U</span>pdawg\n            </div>\n            <span className=\"text-sm text-white/70\">by Press On Ventures</span>\n          </Link>\n        </div>\n        <div className=\"flex items-center space-x-6\">\n          {currentFund && (\n            <div className=\"relative\">\n              <button className=\"flex items-center space-x-2 bg-charcoal/30 rounded-md px-3 py-2 hover:bg-charcoal/50 transition-colors\">\n                <span>{currentFund.name}</span>\n                <ChevronDown size={16} />\n              </button>\n            </div>\n          )}\n          <div className=\"relative\">\n            <Bell size={20} className=\"text-white/70 hover:text-white cursor-pointer\" />\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <UserCircle2 size={32} className=\"text-beige\" />\n            <div className=\"flex flex-col\">\n              <span className=\"text-sm font-medium\">Fund Manager</span>\n              <span className=\"text-xs text-white/70\">Press On Ventures</span>\n            </div>\n            <ChevronDown size={16} />\n          </div>\n        </div>\n      </header>\n      \n      {/* Module Header */}\n      <div className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4 font-poppins\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-4\">\n              <div>\n                <h2 className=\"text-2xl font-inter font-bold text-charcoal\">\n                  {currentModule.title}\n                </h2>\n                <p className=\"text-charcoal/70 mt-1\">\n                  {currentModule.description}\n                </p>\n              </div>\n              {currentFund && (\n                <div className=\"flex items-center space-x-2 bg-lightGray border border-gray-300 rounded-lg px-4 py-2\">\n                  <DollarSign className=\"h-4 w-4 text-charcoal\" />\n                  <div className=\"text-sm\">\n                    <div className=\"font-semibold text-charcoal\">${(currentFund.size / 1000000).toFixed(0)}M Fund</div>\n                    <div className=\"text-charcoal/70\">Active Portfolio</div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button \n              onClick={handleExport}\n              className=\"bg-charcoal hover:bg-charcoal/90 text-white shadow-card\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className=\"border-charcoal/20 text-charcoal hover:bg-lightGray\"\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\layout\\sidebar.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'LayoutDashboard' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'module' is defined but never used.","line":31,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'location' is assigned a value but never used.","line":69,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'setLocation' is assigned a value but never used.","line":69,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":31}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Link, useLocation } from \"wouter\";\nimport { useFundContext } from \"@/contexts/FundContext\";\nimport { POVIcon } from \"@/components/ui/POVLogo\";\nimport { \n  LayoutDashboard, \n  Briefcase, \n  Calculator, \n  BarChart3, \n  FileText,\n  Activity,\n  ChevronDown,\n  ChevronRight,\n  Plus,\n  TrendingUp,\n  Building2,\n  Target,\n  Calendar,\n  Percent,\n  DollarSign\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  activeModule: string;\n  onModuleChange: (module: string) => void;\n}\n\nconst navigationItems = [\n  { id: 'dashboard', label: 'Dashboard', icon: BarChart3 },\n  { id: 'design-system', label: 'Design System', icon: Activity },\n  { id: 'portfolio', label: 'Portfolio', icon: Building2 },\n  { id: 'investments', label: 'Investments', icon: TrendingUp },\n  { id: 'investments-table', label: 'Investments Table', icon: TrendingUp },\n  { id: 'cap-tables', label: 'Cap Tables', icon: Calculator },\n  { id: 'kpi-manager', label: 'KPI Manager', icon: Activity },\n  { id: 'allocation-manager', label: 'Allocation Manager', icon: Calculator },\n  { id: 'planning', label: 'Planning', icon: Briefcase },\n  { id: 'forecasting', label: 'Forecasting', icon: TrendingUp },\n  { id: 'scenario-builder', label: 'Scenario Builder', icon: Target },\n  { id: 'moic-analysis', label: 'MOIC Analysis', icon: Calculator },\n  { id: 'return-the-fund', label: 'Return the Fund', icon: TrendingUp },\n  { id: 'partial-sales', label: 'Partial Sales', icon: Percent },\n  { id: 'financial-modeling', label: 'Financial Modeling', icon: Calculator },\n  { id: 'performance', label: 'Performance', icon: TrendingUp },\n  { id: 'analytics', label: 'Analytics', icon: BarChart3 },\n  { id: 'portfolio-analytics', label: 'Portfolio Analytics', icon: Activity },\n  { id: 'cash-management', label: 'Cash Management', icon: DollarSign },\n  { id: 'sensitivity-analysis', label: 'Sensitivity Analysis', icon: Target },\n  { id: 'reports', label: 'Reports', icon: FileText },\n];\n\nconst chartCategories = [\n  { id: 'basic', label: 'Basic Charts' },\n  { id: 'statistical', label: 'Statistical' },\n  { id: 'hierarchical', label: 'Hierarchical' },\n  { id: 'flow', label: 'Flow Charts' },\n  { id: 'advanced', label: 'Advanced' },\n];\n\nexport default function Sidebar({ activeModule, onModuleChange }: SidebarProps) {\n  const [isChartsExpanded, setIsChartsExpanded] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [location, setLocation] = useLocation();\n  const { needsSetup, currentFund } = useFundContext();\n\n  return (\n    <aside\n      className={`bg-white shadow-lg border-r border-gray-200 flex-shrink-0 flex flex-col transition-all duration-300 ease-in-out ${\n        isHovered ? 'w-64' : 'w-16'\n      }`}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      <div className=\"p-3 border-b border-gray-200 bg-slate-900\">\n        <div className=\"flex items-center mb-4\">\n          <div className=\"flex items-center justify-center w-10 h-10\">\n            <POVIcon variant=\"white\" size=\"md\" />\n          </div>\n          <div className={`ml-3 transition-opacity duration-300 ${isHovered ? 'opacity-100' : 'opacity-0 pointer-events-none'} overflow-hidden`}>\n            <h1 className=\"font-inter font-bold text-lg text-white whitespace-nowrap\">Updawg</h1>\n            <p className=\"font-poppins text-xs text-slate-300 whitespace-nowrap\">Fund Management</p>\n          </div>\n        </div>\n        {currentFund && isHovered && (\n          <div className=\"bg-slate-800 rounded-lg p-3 border border-slate-700 transition-all duration-300\">\n            <p className=\"font-poppins font-medium text-sm text-white truncate\">\n              {currentFund.name}\n            </p>\n            <p className=\"font-mono text-xs text-slate-300 mt-1\">\n              ${(currentFund.size / 1000000).toFixed(0)}M Fund\n            </p>\n          </div>\n        )}\n      </div>\n      \n      <nav className=\"flex-1 p-2 overflow-y-auto custom-scrollbar bg-slate-50\">\n        {needsSetup && isHovered && (\n          <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-3 mb-4 transition-all duration-300\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Plus className=\"h-4 w-4 text-amber-700\" />\n              <span className=\"font-poppins text-sm font-medium text-amber-800\">Setup Required</span>\n            </div>\n            <p className=\"font-poppins text-xs text-amber-600 mb-3\">Configure your fund to access all features</p>\n            <Link href=\"/fund-setup\">\n              <button className=\"w-full bg-amber-600 text-white px-3 py-2 rounded-md text-sm font-medium hover:bg-amber-700 transition-all duration-200\">\n                Start Fund Setup\n              </button>\n            </Link>\n          </div>\n        )}\n\n        <ul className=\"space-y-1\">\n          {navigationItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = activeModule === item.id;\n            const isDisabled = needsSetup && item.id !== 'fund-setup';\n\n            return (\n              <li key={item.id}>\n                <Link href={`/${item.id}`}>\n                  <button\n                    disabled={isDisabled}\n                    onClick={() => !isDisabled && onModuleChange(item.id)}\n                    title={!isHovered ? item.label : undefined}\n                    className={cn(\n                      \"w-full flex items-center rounded-lg transition-all duration-200 font-poppins relative group\",\n                      isHovered ? \"space-x-3 px-3 py-2.5\" : \"justify-center p-2.5\",\n                      isDisabled\n                        ? \"text-gray-400 cursor-not-allowed bg-gray-100\"\n                        : isActive\n                          ? \"bg-slate-900 text-white shadow-md\"\n                          : \"text-slate-700 hover:bg-white hover:text-slate-900 hover:shadow-sm\"\n                    )}\n                  >\n                    <Icon className=\"h-5 w-5 flex-shrink-0\" />\n                    {isHovered && (\n                      <span className={cn(\"text-sm whitespace-nowrap\", isActive && \"font-medium\")}>\n                        {item.label}\n                      </span>\n                    )}\n\n                    {/* Tooltip for collapsed state */}\n                    {!isHovered && (\n                      <div className=\"absolute left-full ml-2 px-2 py-1 bg-slate-900 text-white text-xs rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-50\">\n                        {item.label}\n                      </div>\n                    )}\n                  </button>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n\n        {isHovered && (\n          <div className=\"mt-6 pt-4 border-t border-gray-200\">\n            <button\n              onClick={() => setIsChartsExpanded(!isChartsExpanded)}\n              className=\"w-full flex items-center justify-between px-2 py-2 text-xs font-semibold text-gray-500 uppercase tracking-wider hover:text-gray-700 transition-colors\"\n            >\n              <span>Chart Types</span>\n              {isChartsExpanded ? (\n                <ChevronDown className=\"h-4 w-4\" />\n              ) : (\n                <ChevronRight className=\"h-4 w-4\" />\n              )}\n            </button>\n\n            {isChartsExpanded && (\n              <ul className=\"mt-3 space-y-1\">\n                {chartCategories.map((category) => (\n                  <li key={category.id}>\n                    <button className=\"w-full text-left px-2 py-1 text-sm text-gray-600 hover:text-slate-800 hover:bg-gray-50 rounded-md transition-colors\">\n                      {category.label}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        )}\n      </nav>\n    </aside>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\performance\\irr-summary.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Cell' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'calculateRealizedIRR' is assigned a value but never used.","line":54,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'realizedCashFlows' is defined but never used.","line":54,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":60},{"ruleId":"no-unused-vars","severity":2,"message":"'investmentDates' is defined but never used.","line":54,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":85},{"ruleId":"no-unused-vars","severity":2,"message":"'realizationDates' is defined but never used.","line":54,"column":87,"nodeType":"Identifier","messageId":"unusedVar","endLine":54,"endColumn":111}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { Cell } from 'recharts/es6/component/Cell';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  TrendingUp,\n  Download,\n  Info,\n  Calculator,\n  DollarSign\n} from \"lucide-react\";\n\ninterface IRRData {\n  category: string;\n  constructionForecast: number;\n  currentForecast: number;\n  realized: number;\n}\n\ninterface IRRSummaryProps {\n  className?: string;\n}\n\nexport default function IRRSummary({ className }: IRRSummaryProps) {\n  // IRR performance data based on the provided image\n  const irrData: IRRData[] = [\n    {\n      category: \"Gross IRR\",\n      constructionForecast: 20.27, // Light blue bar\n      currentForecast: 55.15, // Dark blue bar  \n      realized: 21.33 // Orange bar\n    },\n    {\n      category: \"Net LP IRR\", \n      constructionForecast: 15.02, // Light blue bar\n      currentForecast: 48.61, // Dark blue bar\n      realized: 10.98 // Orange bar\n    }\n  ];\n\n  // Calculate IRR from realized cash flows only\n  const calculateRealizedIRR = (realizedCashFlows: number[], investmentDates: Date[], realizationDates: Date[]): number => {\n    // Simplified IRR calculation for realized-only cash flows\n    // In practice, this would use a more sophisticated IRR algorithm (Newton-Raphson method)\n    \n    // Sample realized cash flow analysis\n    const totalInvested = 25000000; // $25M invested\n    const totalRealized = 28500000; // $28.5M realized\n    const avgHoldingPeriod = 3.2; // 3.2 years average\n    \n    // Simple IRR approximation: (Ending Value / Beginning Value)^(1/years) - 1\n    const simpleIRR = Math.pow(totalRealized / totalInvested, 1 / avgHoldingPeriod) - 1;\n    \n    return simpleIRR * 100; // Convert to percentage\n  };\n\n  // Sample realized cash flows for calculation demonstration\n  const realizedFlows = [\n    { company: \"TechCorp\", invested: 2000000, realized: 8500000, holdingPeriod: 4.2, irr: 42.1 },\n    { company: \"FinTech Solutions\", invested: 1500000, realized: 2800000, holdingPeriod: 2.8, irr: 23.4 },\n    { company: \"HealthTech Inc\", invested: 3000000, realized: 3600000, holdingPeriod: 3.1, irr: 6.1 },\n    { company: \"AI Startup\", invested: 2500000, realized: 4200000, holdingPeriod: 2.5, irr: 22.7 },\n    { company: \"Enterprise SaaS\", invested: 1800000, realized: 2100000, holdingPeriod: 4.0, irr: 3.9 }\n  ];\n\n  const totalRealizedInvested = realizedFlows.reduce((sum, flow) => sum + flow.invested, 0);\n  const totalRealizedValue = realizedFlows.reduce((sum, flow) => sum + flow.realized, 0);\n  const weightedAvgIRR = realizedFlows.reduce((sum, flow) => sum + (flow.irr * flow.invested), 0) / totalRealizedInvested;\n\n  const formatPercentage = (value: number) => `${value.toFixed(2)}%`;\n  const formatCurrency = (value: number) => {\n    if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;\n    if (value >= 1000) return `$${(value / 1000).toFixed(0)}K`;\n    return `$${value.toLocaleString()}`;\n  };\n\n  const getBarColor = (dataKey: string) => {\n    switch (dataKey) {\n      case 'constructionForecast': return '#38bdf8'; // Light blue\n      case 'currentForecast': return '#1e293b'; // Dark blue/slate\n      case 'realized': return '#fb923c'; // Orange\n      default: return '#6b7280';\n    }\n  };\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\">\n          <p className=\"font-medium\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} style={{ color: entry.color }}>\n              {entry.dataKey === 'constructionForecast' ? 'Construction Forecast' :\n               entry.dataKey === 'currentForecast' ? 'Current Forecast' : 'Realized'}: {formatPercentage(entry.value)}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const maxValue = Math.max(\n    ...irrData.flatMap(d => [d.constructionForecast, d.currentForecast, d.realized])\n  );\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n                <span>IRR Summary</span>\n              </CardTitle>\n              <CardDescription>\n                Internal Rate of Return analysis comparing forecasted vs realized performance\n              </CardDescription>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\">\n                <Info className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* IRR Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle>IRR Performance Comparison</CardTitle>\n          <CardDescription>\n            Construction forecast vs current forecast vs realized IRR from actual exits\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-80\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart\n                data={irrData}\n                margin={{ top: 20, right: 30, left: 20, bottom: 20 }}\n                barCategoryGap=\"30%\"\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis \n                  dataKey=\"category\" \n                  tick={{ fontSize: 12 }}\n                  axisLine={false}\n                  tickLine={false}\n                />\n                <YAxis \n                  domain={[0, Math.ceil(maxValue * 1.1)]}\n                  tick={{ fontSize: 12 }}\n                  axisLine={false}\n                  tickLine={false}\n                  tickFormatter={(value) => `${value}%`}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                \n                <Bar dataKey=\"constructionForecast\" fill={getBarColor('constructionForecast')} radius={[2, 2, 0, 0]} />\n                <Bar dataKey=\"currentForecast\" fill={getBarColor('currentForecast')} radius={[2, 2, 0, 0]} />\n                <Bar dataKey=\"realized\" fill={getBarColor('realized')} radius={[2, 2, 0, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n\n          {/* Legend */}\n          <div className=\"flex items-center justify-center space-x-8 mt-6\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: getBarColor('constructionForecast') }}></div>\n              <span className=\"text-sm\">Construction Forecast</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: getBarColor('currentForecast') }}></div>\n              <span className=\"text-sm\">Current Forecast</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: getBarColor('realized') }}></div>\n              <span className=\"text-sm\">Realized</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Realized IRR Analysis */}\n      <Card className=\"border-orange-200 bg-orange-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2 text-orange-900\">\n            <Calculator className=\"h-5 w-5\" />\n            <span>Realized IRR Analysis</span>\n          </CardTitle>\n          <CardDescription className=\"text-orange-700\">\n            IRR calculated from actual realized cash flows only\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-900\">{formatPercentage(weightedAvgIRR)}</div>\n              <div className=\"text-sm text-orange-700\">Weighted Avg Realized IRR</div>\n              <div className=\"text-xs text-orange-600\">Based on actual exits</div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-900\">{formatCurrency(totalRealizedValue)}</div>\n              <div className=\"text-sm text-orange-700\">Total Realized Value</div>\n              <div className=\"text-xs text-orange-600\">From {realizedFlows.length} exits</div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-900\">{((totalRealizedValue / totalRealizedInvested) - 1).toFixed(1)}%</div>\n              <div className=\"text-sm text-orange-700\">Realized Return Multiple</div>\n              <div className=\"text-xs text-orange-600\">{(totalRealizedValue / totalRealizedInvested).toFixed(2)}x MOIC</div>\n            </div>\n          </div>\n\n          {/* Realized Exits Table */}\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full border-collapse\">\n              <thead>\n                <tr className=\"border-b border-orange-200\">\n                  <th className=\"text-left p-3 font-medium text-orange-900\">Company</th>\n                  <th className=\"text-right p-3 font-medium text-orange-900\">Invested</th>\n                  <th className=\"text-right p-3 font-medium text-orange-900\">Realized</th>\n                  <th className=\"text-right p-3 font-medium text-orange-900\">Holding Period</th>\n                  <th className=\"text-right p-3 font-medium text-orange-900\">Realized IRR</th>\n                </tr>\n              </thead>\n              <tbody>\n                {realizedFlows.map((flow, index) => (\n                  <tr key={index} className=\"border-b border-orange-100 hover:bg-orange-100\">\n                    <td className=\"p-3 font-medium\">{flow.company}</td>\n                    <td className=\"p-3 text-right\">{formatCurrency(flow.invested)}</td>\n                    <td className=\"p-3 text-right font-medium\">{formatCurrency(flow.realized)}</td>\n                    <td className=\"p-3 text-right\">{flow.holdingPeriod.toFixed(1)} years</td>\n                    <td className=\"p-3 text-right\">\n                      <Badge variant={flow.irr > 25 ? 'default' : flow.irr > 15 ? 'secondary' : 'outline'}>\n                        {formatPercentage(flow.irr)}\n                      </Badge>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n              \n              {/* Totals Row */}\n              <tfoot>\n                <tr className=\"border-t-2 border-orange-300 bg-orange-100 font-medium\">\n                  <td className=\"p-3 font-bold text-orange-900\">Total</td>\n                  <td className=\"p-3 text-right font-bold text-orange-900\">{formatCurrency(totalRealizedInvested)}</td>\n                  <td className=\"p-3 text-right font-bold text-orange-900\">{formatCurrency(totalRealizedValue)}</td>\n                  <td className=\"p-3 text-right font-bold text-orange-900\">\n                    {(realizedFlows.reduce((sum, flow) => sum + flow.holdingPeriod, 0) / realizedFlows.length).toFixed(1)} avg\n                  </td>\n                  <td className=\"p-3 text-right\">\n                    <Badge variant=\"default\" className=\"font-bold\">\n                      {formatPercentage(weightedAvgIRR)}\n                    </Badge>\n                  </td>\n                </tr>\n              </tfoot>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* IRR Methodology */}\n      <Card className=\"border-blue-200 bg-blue-50\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-start space-x-3\">\n            <Info className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n            <div>\n              <h4 className=\"font-medium text-blue-900 mb-2\">Realized IRR Methodology</h4>\n              <p className=\"text-sm text-blue-800 mb-3\">\n                <strong>Realized IRR</strong> calculates the internal rate of return using only actual cash flows from completed exits, \n                providing a conservative measure of fund performance based on liquidity events rather than paper valuations.\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-700\">\n                <div>\n                  <strong>Includes:</strong>\n                  <ul className=\"list-disc list-inside mt-1 space-y-1\">\n                    <li>IPO proceeds</li>\n                    <li>M&A exit values</li>\n                    <li>Secondary sales</li>\n                    <li>Dividend distributions</li>\n                  </ul>\n                </div>\n                <div>\n                  <strong>Excludes:</strong>\n                  <ul className=\"list-disc list-inside mt-1 space-y-1\">\n                    <li>Unrealized valuations</li>\n                    <li>Mark-to-market gains</li>\n                    <li>Projected exit values</li>\n                    <li>Paper returns</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\planning\\exit-analysis.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Calculator' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":9}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { PieChart } from 'recharts/es6/chart/PieChart';\nimport { Pie } from 'recharts/es6/polar/Pie';\nimport { Cell } from 'recharts/es6/component/Cell';\nimport { LineChart } from 'recharts/es6/chart/LineChart';\nimport { Line } from 'recharts/es6/cartesian/Line';\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  TrendingUp,\n  Calculator,\n  Target,\n  DollarSign,\n  Percent,\n  Trophy,\n  Info\n} from \"lucide-react\";\n\ninterface ExitData {\n  stage: string;\n  companiesAtStage: number;\n  exitRate: number;\n  avgExitValue: number;\n  avgOwnership: number;\n  totalExitValue: number;\n  realizedValue: number;\n}\n\ninterface FundReturns {\n  totalInvestment: number;\n  totalRealizedValue: number;\n  netMultiple: number;\n  grossMultiple: number;\n  totalExits: number;\n}\n\nexport default function ExitAnalysis() {\n  const [fundSize, setFundSize] = useState(138000000);\n  const [portfolioSize, setPortfolioSize] = useState(40);\n  const [carryPercentage, setCarryPercentage] = useState(20);\n  const [managementFee, setManagementFee] = useState(2);\n\n  // Exit analysis data based on Tactyc methodology\n  const baseExitData: ExitData[] = [\n    {\n      stage: \"Seed\",\n      companiesAtStage: 40,\n      exitRate: 0.00, // 0% exit at seed stage\n      avgExitValue: 0,\n      avgOwnership: 10.0,\n      totalExitValue: 0,\n      realizedValue: 0\n    },\n    {\n      stage: \"Series A\",\n      companiesAtStage: 18, // 46% graduation rate from seed\n      exitRate: 0.15, // 15% exit after Series A\n      avgExitValue: 23000000, // Post-money from Series A\n      avgOwnership: 6.5, // Diluted from 10% by 35%\n      totalExitValue: 0,\n      realizedValue: 0\n    },\n    {\n      stage: \"Series B\", \n      companiesAtStage: 12, // 65% graduation from A to B\n      exitRate: 0.25, // 25% exit after Series B\n      avgExitValue: 50000000, // Post-money from Series B\n      avgOwnership: 4.6, // Further diluted by 30%\n      totalExitValue: 0,\n      realizedValue: 0\n    },\n    {\n      stage: \"Series C\",\n      companiesAtStage: 8, // 70% graduation from B to C\n      exitRate: 0.40, // 40% exit after Series C\n      avgExitValue: 100000000, // Post-money from Series C\n      avgOwnership: 3.4, // Further diluted by 25%\n      totalExitValue: 0,\n      realizedValue: 0\n    },\n    {\n      stage: \"Series D\",\n      companiesAtStage: 5, // 60% graduation from C to D\n      exitRate: 0.60, // 60% exit after Series D\n      avgExitValue: 190000000, // Post-money from Series D\n      avgOwnership: 2.7, // Further diluted by 21%\n      totalExitValue: 0,\n      realizedValue: 0\n    },\n    {\n      stage: \"Series E+\",\n      companiesAtStage: 3, // 55% graduation from D to E+\n      exitRate: 0.85, // 85% exit after Series E+\n      avgExitValue: 360000000, // Post-money from Series E+\n      avgOwnership: 2.2, // Further diluted by 17%\n      totalExitValue: 0,\n      realizedValue: 0\n    }\n  ];\n\n  // Calculate exit analysis\n  const calculateExitAnalysis = (): { exitData: ExitData[], fundReturns: FundReturns } => {\n    const calculatedExitData = baseExitData.map(stage => {\n      const exitingCompanies = Math.round(stage.companiesAtStage * stage.exitRate);\n      const totalExitValue = exitingCompanies * stage.avgExitValue;\n      const realizedValue = totalExitValue * (stage.avgOwnership / 100);\n      \n      return {\n        ...stage,\n        totalExitValue,\n        realizedValue\n      };\n    });\n\n    const totalRealizedValue = calculatedExitData.reduce((sum, stage) => sum + stage.realizedValue, 0);\n    const totalExits = calculatedExitData.reduce((sum, stage) => sum + Math.round(stage.companiesAtStage * stage.exitRate), 0);\n    \n    // Calculate fund returns\n    const managementFees = (fundSize * managementFee / 100) * 10; // 10 year fund\n    const totalInvestment = fundSize - managementFees;\n    const grossMultiple = totalRealizedValue / totalInvestment;\n    \n    // Calculate carry and net returns\n    const carriedInterest = Math.max(0, (totalRealizedValue - totalInvestment) * (carryPercentage / 100));\n    const netReturnsToLPs = totalRealizedValue - carriedInterest;\n    const netMultiple = netReturnsToLPs / totalInvestment;\n\n    const fundReturns: FundReturns = {\n      totalInvestment,\n      totalRealizedValue,\n      grossMultiple,\n      netMultiple,\n      totalExits\n    };\n\n    return { exitData: calculatedExitData, fundReturns };\n  };\n\n  const { exitData, fundReturns } = calculateExitAnalysis();\n\n  // Chart data for exit value by stage\n  const exitChartData = exitData.map(stage => ({\n    stage: stage.stage,\n    exitingCompanies: Math.round(stage.companiesAtStage * stage.exitRate),\n    realizedValue: stage.realizedValue / 1000000, // Convert to millions\n    avgOwnership: stage.avgOwnership\n  }));\n\n  // Colors for charts\n  const stageColors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'];\n\n  const formatCurrency = (amount: number) => {\n    if (amount >= 1000000) return `$${(amount / 1000000).toFixed(1)}M`;\n    if (amount >= 1000) return `$${(amount / 1000).toFixed(0)}K`;\n    return `$${amount.toLocaleString()}`;\n  };\n\n  const formatPercent = (value: number) => `${value.toFixed(1)}%`;\n  const formatMultiple = (value: number) => `${value.toFixed(2)}x`;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold flex items-center space-x-2\">\n            <Trophy className=\"h-6 w-6 text-green-600\" />\n            <span>Exit Analysis & Fund Returns</span>\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Calculate fund profitability based on exit rates and valuations\n          </p>\n        </div>\n        <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n          <Info className=\"h-4 w-4\" />\n          <span>Export Analysis</span>\n        </Button>\n      </div>\n\n      {/* Fund Performance Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"border-green-200 bg-green-50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <DollarSign className=\"h-8 w-8 text-green-600\" />\n              <div>\n                <div className=\"text-sm text-green-800\">Total Realized Value</div>\n                <div className=\"font-bold text-green-900\">\n                  {formatCurrency(fundReturns.totalRealizedValue)}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-blue-200 bg-blue-50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <TrendingUp className=\"h-8 w-8 text-blue-600\" />\n              <div>\n                <div className=\"text-sm text-blue-800\">Gross Multiple</div>\n                <div className=\"font-bold text-blue-900\">\n                  {formatMultiple(fundReturns.grossMultiple)}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-purple-200 bg-purple-50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <Percent className=\"h-8 w-8 text-purple-600\" />\n              <div>\n                <div className=\"text-sm text-purple-800\">Net Multiple (to LPs)</div>\n                <div className=\"font-bold text-purple-900\">\n                  {formatMultiple(fundReturns.netMultiple)}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-orange-200 bg-orange-50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <Trophy className=\"h-8 w-8 text-orange-600\" />\n              <div>\n                <div className=\"text-sm text-orange-800\">Total Exits</div>\n                <div className=\"font-bold text-orange-900\">\n                  {fundReturns.totalExits} companies\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Fund Parameters */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Fund Parameters</CardTitle>\n          <CardDescription>\n            Adjust fund parameters to see impact on returns\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"fund-size\">Fund Size ($)</Label>\n              <Input\n                id=\"fund-size\"\n                type=\"number\"\n                value={fundSize}\n                onChange={(e) => setFundSize(parseInt(e.target.value) || 138000000)}\n                className=\"bg-yellow-50 border-yellow-300\"\n              />\n              <p className=\"text-xs text-gray-500\">Total fund size</p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"portfolio-size-exit\">Portfolio Size</Label>\n              <Input\n                id=\"portfolio-size-exit\"\n                type=\"number\"\n                value={portfolioSize}\n                onChange={(e) => setPortfolioSize(parseInt(e.target.value) || 40)}\n                className=\"bg-yellow-50 border-yellow-300\"\n              />\n              <p className=\"text-xs text-gray-500\">Number of companies</p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"carry-percentage\">Carry (%)</Label>\n              <Input\n                id=\"carry-percentage\"\n                type=\"number\"\n                value={carryPercentage}\n                onChange={(e) => setCarryPercentage(parseFloat(e.target.value) || 20)}\n                className=\"bg-yellow-50 border-yellow-300\"\n              />\n              <p className=\"text-xs text-gray-500\">Carried interest</p>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"mgmt-fee\">Management Fee (%)</Label>\n              <Input\n                id=\"mgmt-fee\"\n                type=\"number\"\n                step=\"0.1\"\n                value={managementFee}\n                onChange={(e) => setManagementFee(parseFloat(e.target.value) || 2)}\n                className=\"bg-yellow-50 border-yellow-300\"\n              />\n              <p className=\"text-xs text-gray-500\">Annual management fee</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Exit Analysis Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Exit Analysis by Stage</CardTitle>\n          <CardDescription>\n            Exit rates, valuations, and realized returns by funding stage\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Stage</TableHead>\n                <TableHead>Companies at Stage</TableHead>\n                <TableHead>Exit Rate</TableHead>\n                <TableHead>Exiting Companies</TableHead>\n                <TableHead>Avg Exit Value</TableHead>\n                <TableHead>Avg Ownership</TableHead>\n                <TableHead>Total Exit Value</TableHead>\n                <TableHead>Realized Value</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {exitData.map((row, index) => (\n                <TableRow key={index}>\n                  <TableCell className=\"font-medium\">{row.stage}</TableCell>\n                  <TableCell>{row.companiesAtStage}</TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className=\"text-blue-600\">\n                      {formatPercent(row.exitRate * 100)}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>{Math.round(row.companiesAtStage * row.exitRate)}</TableCell>\n                  <TableCell>{formatCurrency(row.avgExitValue)}</TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className=\"text-green-600\">\n                      {formatPercent(row.avgOwnership)}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>{formatCurrency(row.totalExitValue)}</TableCell>\n                  <TableCell className=\"font-bold text-green-600\">\n                    {formatCurrency(row.realizedValue)}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Realized Value by Stage */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Realized Value by Stage</CardTitle>\n            <CardDescription>\n              Fund returns generated from exits at each stage\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={exitChartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"stage\" />\n                  <YAxis tickFormatter={(value) => `$${value}M`} />\n                  <Tooltip \n                    formatter={(value: number) => [`$${value.toFixed(1)}M`, \"Realized Value\"]}\n                    labelFormatter={(label) => `Stage: ${label}`}\n                  />\n                  <Bar dataKey=\"realizedValue\" fill=\"#10b981\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Exit Distribution */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Exit Distribution by Stage</CardTitle>\n            <CardDescription>\n              Number of companies exiting at each stage\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={exitChartData.filter(d => d.exitingCompanies > 0)}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={80}\n                    dataKey=\"exitingCompanies\"\n                    nameKey=\"stage\"\n                  >\n                    {exitChartData.filter(d => d.exitingCompanies > 0).map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={stageColors[index % stageColors.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip \n                    formatter={(value: number) => [value, \"Exiting Companies\"]}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Ownership Dilution Analysis */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Ownership Dilution Over Time</CardTitle>\n          <CardDescription>\n            How ownership percentage decreases through funding rounds\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-80\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={exitData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"stage\" />\n                <YAxis tickFormatter={(value) => `${value}%`} />\n                <Tooltip \n                  formatter={(value: number) => [`${value.toFixed(1)}%`, \"Avg Ownership\"]}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"avgOwnership\" \n                  stroke=\"#3b82f6\" \n                  strokeWidth={3}\n                  dot={{ fill: \"#3b82f6\", strokeWidth: 2, r: 6 }}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Fund Performance Analysis */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Fund Performance Analysis</CardTitle>\n          <CardDescription>\n            Detailed breakdown of fund economics and returns\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-900\">Fund Economics</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Total Fund Size:</span>\n                  <span className=\"font-medium\">{formatCurrency(fundSize)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Management Fees (10yr):</span>\n                  <span className=\"font-medium\">{formatCurrency((fundSize * managementFee / 100) * 10)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Investable Capital:</span>\n                  <span className=\"font-medium\">{formatCurrency(fundReturns.totalInvestment)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Total Realized Value:</span>\n                  <span className=\"font-medium text-green-600\">{formatCurrency(fundReturns.totalRealizedValue)}</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-900\">Returns Analysis</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Gross Multiple:</span>\n                  <span className=\"font-medium\">{formatMultiple(fundReturns.grossMultiple)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Carried Interest:</span>\n                  <span className=\"font-medium\">\n                    {formatCurrency(Math.max(0, (fundReturns.totalRealizedValue - fundReturns.totalInvestment) * (carryPercentage / 100)))}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Net Multiple (to LPs):</span>\n                  <span className=\"font-medium text-blue-600\">{formatMultiple(fundReturns.netMultiple)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Exit Success Rate:</span>\n                  <span className=\"font-medium\">{((fundReturns.totalExits / portfolioSize) * 100).toFixed(1)}%</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\planning\\graduation-rate-strategy.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'PieChart' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Pie' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Cell' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":17,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'Percent' is defined but never used.","line":42,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":10},{"ruleId":"no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":43,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":7}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { PieChart } from 'recharts/es6/chart/PieChart';\nimport { Pie } from 'recharts/es6/polar/Pie';\nimport { Cell } from 'recharts/es6/component/Cell';\nimport { LineChart } from 'recharts/es6/chart/LineChart';\nimport { Line } from 'recharts/es6/cartesian/Line';\nimport { Area } from 'recharts/es6/cartesian/Area';\nimport { AreaChart } from 'recharts/es6/chart/AreaChart';\nimport { useState } from \"react\";\nimport { forEach } from \"../../utils/array-safety\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  TrendingUp,\n  Calculator,\n  Target,\n  Users,\n  DollarSign,\n  Percent,\n  Info,\n  Shuffle\n} from \"lucide-react\";\n\ninterface GraduationRateData {\n  round: string;\n  graduationRate: number;\n  companies: number;\n  avgRoundSize: number;\n  avgPreMoney: number;\n  dilution: number;\n  proRataAmount: number;\n  followOnRate: number;\n  totalFollowOn: number;\n}\n\ninterface MonteCarloResult {\n  simulation: number;\n  followOnCapital: number;\n  optimalFundSize: number;\n  totalReturns: number;\n}\n\nexport default function GraduationRateStrategy() {\n  const [portfolioSize, setPortfolioSize] = useState(40);\n  const [initialOwnership, setInitialOwnership] = useState(10);\n  const [seedValuation, setSeedValuation] = useState(12000000);\n  const [managementFee, setManagementFee] = useState(2);\n  const [activeTab, setActiveTab] = useState(\"strategy\");\n\n  // CB Insights 2018 data for 1,119 seed stage companies\n  const baseGraduationRates: GraduationRateData[] = [\n    {\n      round: \"Seed to A\",\n      graduationRate: 0.46, // 46% graduation rate\n      companies: 40,\n      avgRoundSize: 8000000,\n      avgPreMoney: 15000000,\n      dilution: 0.35,\n      proRataAmount: 0,\n      followOnRate: 0.85, // Follow into 85% of A rounds\n      totalFollowOn: 0\n    },\n    {\n      round: \"A to B\", \n      graduationRate: 0.65,\n      companies: 0,\n      avgRoundSize: 15000000,\n      avgPreMoney: 35000000,\n      dilution: 0.30,\n      proRataAmount: 0,\n      followOnRate: 0.80, // Follow into 80% of B rounds\n      totalFollowOn: 0\n    },\n    {\n      round: \"B to C\",\n      graduationRate: 0.70,\n      companies: 0,\n      avgRoundSize: 25000000,\n      avgPreMoney: 75000000,\n      dilution: 0.25,\n      proRataAmount: 0,\n      followOnRate: 0.50, // Follow into 50% of C rounds\n      totalFollowOn: 0\n    },\n    {\n      round: \"C to D\",\n      graduationRate: 0.60,\n      companies: 0,\n      avgRoundSize: 40000000,\n      avgPreMoney: 150000000,\n      dilution: 0.21,\n      proRataAmount: 0,\n      followOnRate: 0.25, // Follow into 25% of D rounds\n      totalFollowOn: 0\n    },\n    {\n      round: \"D to E\",\n      graduationRate: 0.55,\n      companies: 0,\n      avgRoundSize: 60000000,\n      avgPreMoney: 300000000,\n      dilution: 0.17,\n      proRataAmount: 0,\n      followOnRate: 0.40, // Follow into 40% of late stage winners\n      totalFollowOn: 0\n    }\n  ];\n\n  // Calculate follow-on strategy\n  const calculateFollowOnStrategy = () => {\n    const initialCheckSize = (seedValuation * initialOwnership) / 100;\n    const totalInitialInvestment = portfolioSize * initialCheckSize;\n    \n    let remainingCompanies = portfolioSize;\n    let totalFollowOnCapital = 0;\n    let totalFollowOnInvestments = 0;\n    \n    const calculatedRates = baseGraduationRates.map((round, index) => {\n      // Calculate companies reaching this round\n      const companiesReachingRound = Math.round(remainingCompanies * round.graduationRate);\n      \n      // Calculate current ownership (diluted from previous rounds)\n      let currentOwnership = initialOwnership;\n      for (let i = 0; i < index; i++) {\n        currentOwnership *= (1 - baseGraduationRates[i].dilution);\n      }\n      \n      // Calculate pro-rata amount needed to maintain ownership\n      const proRataAmount = (round.avgRoundSize * currentOwnership) / 100;\n      \n      // Calculate actual follow-on investments\n      const followOnInvestments = Math.round(companiesReachingRound * round.followOnRate);\n      const totalRoundFollowOn = followOnInvestments * proRataAmount;\n      \n      totalFollowOnCapital += totalRoundFollowOn;\n      totalFollowOnInvestments += followOnInvestments;\n      \n      remainingCompanies = companiesReachingRound;\n      \n      return {\n        ...round,\n        companies: companiesReachingRound,\n        proRataAmount: proRataAmount,\n        totalFollowOn: totalRoundFollowOn\n      };\n    });\n\n    const managementFees = (managementFee / 100) * 10; // 10 year fund life\n    const optimalFundSize = totalInitialInvestment + totalFollowOnCapital + (managementFees * (totalInitialInvestment + totalFollowOnCapital));\n    \n    return {\n      calculatedRates,\n      totalInitialInvestment,\n      totalFollowOnCapital,\n      totalFollowOnInvestments,\n      optimalFundSize,\n      avgFollowOnCheck: totalFollowOnCapital / totalFollowOnInvestments || 0\n    };\n  };\n\n  // Generate Monte Carlo simulation data\n  const generateMonteCarloData = (): MonteCarloResult[] => {\n    const results: MonteCarloResult[] = [];\n    \n    for (let i = 0; i < 1000; i++) {\n      // Add randomness to graduation rates (Normal distribution ┬▒10%)\n      const randomizedRates = baseGraduationRates.map(rate => ({\n        ...rate,\n        graduationRate: Math.max(0.1, Math.min(0.9, \n          rate.graduationRate + (Math.random() - 0.5) * 0.2\n        ))\n      }));\n      \n      // Recalculate with randomized rates\n      let remainingCompanies = portfolioSize;\n      let totalFollowOn = 0;\n      \n      forEach(randomizedRates, (round, index) => {\n        const companiesReachingRound = Math.round(remainingCompanies * round.graduationRate);\n        let currentOwnership = initialOwnership;\n        \n        for (let j = 0; j < index; j++) {\n          currentOwnership *= (1 - randomizedRates[j].dilution);\n        }\n        \n        const proRataAmount = (round.avgRoundSize * currentOwnership) / 100;\n        const followOnInvestments = Math.round(companiesReachingRound * round.followOnRate);\n        \n        totalFollowOn += followOnInvestments * proRataAmount;\n        remainingCompanies = companiesReachingRound;\n      });\n      \n      const initialInvestment = portfolioSize * (seedValuation * initialOwnership) / 100;\n      const optimalFundSize = initialInvestment + totalFollowOn * 1.25; // Add buffer\n      \n      results.push({\n        simulation: i + 1,\n        followOnCapital: totalFollowOn,\n        optimalFundSize: optimalFundSize,\n        totalReturns: optimalFundSize * (2.5 + Math.random() * 2) // Simulated returns\n      });\n    }\n    \n    return results;\n  };\n\n  const strategy = calculateFollowOnStrategy();\n  const monteCarloResults = generateMonteCarloData();\n  \n  // Monte Carlo statistics\n  const meanFollowOn = monteCarloResults.reduce((sum, r) => sum + r.followOnCapital, 0) / monteCarloResults.length;\n  const meanFundSize = monteCarloResults.reduce((sum, r) => sum + r.optimalFundSize, 0) / monteCarloResults.length;\n  \n  const formatCurrency = (amount: number) => {\n    if (amount >= 1000000) return `$${(amount / 1000000).toFixed(1)}M`;\n    if (amount >= 1000) return `$${(amount / 1000).toFixed(0)}K`;\n    return `$${amount.toLocaleString()}`;\n  };\n\n  const formatPercent = (value: number) => `${(value * 100).toFixed(1)}%`;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold flex items-center space-x-2\">\n            <Target className=\"h-6 w-6 text-blue-600\" />\n            <span>Graduation Rate Follow-On Strategy</span>\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Optimize follow-on allocation using graduation rates and round dynamics\n          </p>\n        </div>\n        <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n          <Shuffle className=\"h-4 w-4\" />\n          <span>Run Monte Carlo</span>\n        </Button>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"strategy\">Strategy</TabsTrigger>\n          <TabsTrigger value=\"graduation\">Graduation Rates</TabsTrigger>\n          <TabsTrigger value=\"monte-carlo\">Monte Carlo</TabsTrigger>\n          <TabsTrigger value=\"optimization\">Optimization</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"strategy\" className=\"space-y-6\">\n          {/* Strategy Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card className=\"border-blue-200 bg-blue-50\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <Users className=\"h-8 w-8 text-blue-600\" />\n                  <div>\n                    <div className=\"text-sm text-blue-800\">Portfolio Size</div>\n                    <div className=\"font-bold text-blue-900\">{portfolioSize} companies</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-green-200 bg-green-50\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <DollarSign className=\"h-8 w-8 text-green-600\" />\n                  <div>\n                    <div className=\"text-sm text-green-800\">Initial Investment</div>\n                    <div className=\"font-bold text-green-900\">\n                      {formatCurrency(strategy.totalInitialInvestment)}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-orange-200 bg-orange-50\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <TrendingUp className=\"h-8 w-8 text-orange-600\" />\n                  <div>\n                    <div className=\"text-sm text-orange-800\">Follow-On Capital</div>\n                    <div className=\"font-bold text-orange-900\">\n                      {formatCurrency(strategy.totalFollowOnCapital)}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-purple-200 bg-purple-50\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <Calculator className=\"h-8 w-8 text-purple-600\" />\n                  <div>\n                    <div className=\"text-sm text-purple-800\">Optimal Fund Size</div>\n                    <div className=\"font-bold text-purple-900\">\n                      {formatCurrency(strategy.optimalFundSize)}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Follow-On Strategy Parameters */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Strategy Parameters</CardTitle>\n              <CardDescription>\n                Adjust key parameters to optimize your follow-on strategy\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"portfolio-size\">Portfolio Size</Label>\n                  <Input\n                    id=\"portfolio-size\"\n                    type=\"number\"\n                    value={portfolioSize}\n                    onChange={(e) => setPortfolioSize(parseInt(e.target.value) || 40)}\n                    className=\"bg-yellow-50 border-yellow-300\"\n                  />\n                  <p className=\"text-xs text-gray-500\">Number of companies</p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"initial-ownership\">Initial Ownership (%)</Label>\n                  <Input\n                    id=\"initial-ownership\"\n                    type=\"number\"\n                    value={initialOwnership}\n                    onChange={(e) => setInitialOwnership(parseFloat(e.target.value) || 10)}\n                    className=\"bg-yellow-50 border-yellow-300\"\n                  />\n                  <p className=\"text-xs text-gray-500\">Target ownership at seed</p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"seed-valuation\">Seed Valuation</Label>\n                  <Input\n                    id=\"seed-valuation\"\n                    type=\"number\"\n                    value={seedValuation}\n                    onChange={(e) => setSeedValuation(parseInt(e.target.value) || 12000000)}\n                    className=\"bg-yellow-50 border-yellow-300\"\n                  />\n                  <p className=\"text-xs text-gray-500\">Post-money valuation</p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"management-fee\">Management Fee (%)</Label>\n                  <Input\n                    id=\"management-fee\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    value={managementFee}\n                    onChange={(e) => setManagementFee(parseFloat(e.target.value) || 2)}\n                    className=\"bg-yellow-50 border-yellow-300\"\n                  />\n                  <p className=\"text-xs text-gray-500\">Annual management fee</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Follow-On Allocation Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Follow-On Capital Allocation by Round</CardTitle>\n              <CardDescription>\n                Capital allocation across different funding rounds\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={strategy.calculatedRates}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"round\" />\n                    <YAxis tickFormatter={(value) => formatCurrency(value)} />\n                    <Tooltip \n                      formatter={(value: number) => [formatCurrency(value), \"Follow-On Capital\"]}\n                      labelFormatter={(label) => `Round: ${label}`}\n                    />\n                    <Bar dataKey=\"totalFollowOn\" fill=\"#3b82f6\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"graduation\" className=\"space-y-6\">\n          {/* Graduation Rates Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Graduation Rates & Follow-On Analysis</CardTitle>\n              <CardDescription>\n                Based on CB Insights 2018 data for 1,119 seed stage companies\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Round</TableHead>\n                    <TableHead>Graduation Rate</TableHead>\n                    <TableHead>Companies</TableHead>\n                    <TableHead>Avg Round Size</TableHead>\n                    <TableHead>Dilution</TableHead>\n                    <TableHead>Pro-Rata Amount</TableHead>\n                    <TableHead>Follow-On Rate</TableHead>\n                    <TableHead>Total Follow-On</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {strategy.calculatedRates.map((row, index) => (\n                    <TableRow key={index}>\n                      <TableCell className=\"font-medium\">{row.round}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\" className=\"text-blue-600\">\n                          {formatPercent(row.graduationRate)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{row.companies}</TableCell>\n                      <TableCell>{formatCurrency(row.avgRoundSize)}</TableCell>\n                      <TableCell>{formatPercent(row.dilution)}</TableCell>\n                      <TableCell>{formatCurrency(row.proRataAmount)}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\" className=\"text-green-600\">\n                          {formatPercent(row.followOnRate)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"font-bold\">\n                        {formatCurrency(row.totalFollowOn)}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n\n          {/* Graduation Funnel Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Portfolio Graduation Funnel</CardTitle>\n              <CardDescription>\n                Company progression through funding rounds\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart data={strategy.calculatedRates}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"round\" />\n                    <YAxis />\n                    <Tooltip \n                      formatter={(value: number) => [value, \"Companies\"]}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"companies\" \n                      stroke=\"#8884d8\" \n                      fill=\"#8884d8\" \n                      fillOpacity={0.6}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"monte-carlo\" className=\"space-y-6\">\n          {/* Monte Carlo Summary */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card className=\"border-blue-200 bg-blue-50\">\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-blue-900\">\n                    {formatCurrency(meanFollowOn)}\n                  </div>\n                  <div className=\"text-sm text-blue-700\">Mean Follow-On Capital</div>\n                  <div className=\"text-xs text-blue-600 mt-1\">\n                    67% probability need more than {formatCurrency(strategy.totalFollowOnCapital)}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-green-200 bg-green-50\">\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-900\">\n                    {formatCurrency(meanFundSize)}\n                  </div>\n                  <div className=\"text-sm text-green-700\">Mean Optimal Fund Size</div>\n                  <div className=\"text-xs text-green-600 mt-1\">\n                    1,000 simulations\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-orange-200 bg-orange-50\">\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-orange-900\">\n                    ┬▒{formatCurrency(Math.max(...monteCarloResults.map(r => r.followOnCapital)) - Math.min(...monteCarloResults.map(r => r.followOnCapital)))}\n                  </div>\n                  <div className=\"text-sm text-orange-700\">Follow-On Range</div>\n                  <div className=\"text-xs text-orange-600 mt-1\">\n                    Min to Max spread\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Monte Carlo Distribution */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Monte Carlo Simulation Results</CardTitle>\n              <CardDescription>\n                Distribution of follow-on capital needed across 1,000 simulations\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart data={monteCarloResults.slice(0, 100)}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"simulation\" />\n                    <YAxis tickFormatter={(value) => formatCurrency(value)} />\n                    <Tooltip \n                      formatter={(value: number) => [formatCurrency(value), \"Follow-On Capital\"]}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"followOnCapital\" \n                      stroke=\"#f59e0b\" \n                      fill=\"#f59e0b\" \n                      fillOpacity={0.6}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"optimization\" className=\"space-y-6\">\n          {/* Strategy Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Optimization Summary</CardTitle>\n              <CardDescription>\n                Key insights from graduation rate follow-on analysis\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium text-gray-900\">Strategy Metrics</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Total Follow-On Investments:</span>\n                      <span className=\"font-medium\">{strategy.totalFollowOnInvestments}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Avg Follow-On Check:</span>\n                      <span className=\"font-medium\">{formatCurrency(strategy.avgFollowOnCheck)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Follow-On as % of Fund:</span>\n                      <span className=\"font-medium\">\n                        {((strategy.totalFollowOnCapital / strategy.optimalFundSize) * 100).toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Companies Followed:</span>\n                      <span className=\"font-medium\">15 companies</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium text-gray-900\">Key Insights</h4>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"flex items-start space-x-2\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-1.5\"></div>\n                      <p>Higher follow-on rates in Series A/B to avoid signaling risk</p>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full mt-1.5\"></div>\n                      <p>Selective follow-on in later rounds (50% C, 25% D)</p>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <div className=\"w-2 h-2 bg-orange-500 rounded-full mt-1.5\"></div>\n                      <p>Increased late-stage allocation for breakout winners</p>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-1.5\"></div>\n                      <p>Monte Carlo suggests 67% need for additional capital buffer</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\planning\\portfolio-construction.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'capitalUtilization' is assigned a value but never used.","line":125,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":125,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'unusedCapital' is assigned a value but never used.","line":126,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":126,"endColumn":24}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { AreaChart } from 'recharts/es6/chart/AreaChart';\nimport { Area } from 'recharts/es6/cartesian/Area';\nimport { LineChart } from 'recharts/es6/chart/LineChart';\nimport { Line } from 'recharts/es6/cartesian/Line';\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Calculator,\n  DollarSign,\n  TrendingUp,\n  Target,\n  Settings,\n  Info,\n  BarChart3\n} from \"lucide-react\";\n\ninterface PortfolioParams {\n  fundSize: number;\n  managementFee: number;\n  initialCheckSize: number;\n  followOnReserve: number;\n  targetCompanies: number;\n  targetOwnership: number;\n  requiredLPReturn: number;\n  seedRoundSize: number;\n  seedPreMoney: number;\n  seriesAGradRate: number;\n  seriesBGradRate: number;\n  seriesCGradRate: number;\n  fundTerm: number; // years, 0 means no end date\n}\n\ninterface PortfolioCalculations {\n  initialInvestmentCapital: number;\n  followOnReserveCapital: number;\n  managementFees: number;\n  fundCosts: number;\n  totalInvestableCapital: number;\n  avgInitialCheck: number;\n  avgOwnership: number;\n  totalRequiredReturn: number;\n  returnTheFundValue: number;\n  impliedTVPI: number;\n}\n\nexport default function PortfolioConstruction() {\n  const [params, setParams] = useState<PortfolioParams>({\n    fundSize: 100000, // $100M in thousands\n    managementFee: 2.0,\n    initialCheckSize: 1000, // $1M in thousands\n    followOnReserve: 67,\n    targetCompanies: 30,\n    targetOwnership: 15,\n    requiredLPReturn: 3.0,\n    seedRoundSize: 1776,\n    seedPreMoney: 6912,\n    seriesAGradRate: 50,\n    seriesBGradRate: 50,\n    seriesCGradRate: 50,\n    fundTerm: 10 // 10 year fund term\n  });\n\n  const updateParam = (key: keyof PortfolioParams, value: number) => {\n    setParams(prev => ({ ...prev, [key]: value }));\n  };\n\n  // Calculate portfolio construction metrics using Tactyc methodology\n  const calculatePortfolio = (): PortfolioCalculations => {\n    const fundSizeActual = params.fundSize * 1000; // Convert to actual dollars\n    const managementFees = (fundSizeActual * params.managementFee / 100) * 10; // 10 year fund\n    const fundCosts = 850000; // $850K fund costs\n    \n    const totalCosts = managementFees + fundCosts;\n    const totalInvestableCapital = fundSizeActual - totalCosts;\n    \n    // Deploy ALL available capital - no unused capital allowed\n    // Start with initial check size, calculate precise number of deals to deploy all capital\n    const initialCheckSizeActual = params.initialCheckSize * 1000;\n    \n    // Calculate follow-on requirements based on graduation rates and market dynamics\n    const seedGradRate = params.seriesAGradRate / 100;\n    const seriesAGradRate = params.seriesBGradRate / 100; \n    const seriesBGradRate = params.seriesCGradRate / 100;\n    \n    // Market-driven follow-on check sizes (based on typical round participation)\n    const seedFollowOnCheck = 377778; // From market data\n    const seriesAFollowOnCheck = 1200000; // From market data\n    const seriesBFollowOnCheck = 2000000; // From market data\n    \n    // Calculate expected follow-on capital per initial investment\n    const expectedSeedFollowOn = seedGradRate * seedFollowOnCheck * 0.8; // 80% participation\n    const expectedSeriesAFollowOn = seedGradRate * seriesAGradRate * seriesAFollowOnCheck * 0.7; // 70% participation\n    const expectedSeriesBFollowOn = seedGradRate * seriesAGradRate * seriesBGradRate * seriesBFollowOnCheck * 0.5; // 50% participation\n    \n    const totalFollowOnPerDeal = expectedSeedFollowOn + expectedSeriesAFollowOn + expectedSeriesBFollowOn;\n    const totalCapitalPerDeal = initialCheckSizeActual + totalFollowOnPerDeal;\n    \n    // Calculate precise number of deals to deploy ALL capital\n    const preciseNumberOfDeals = totalInvestableCapital / totalCapitalPerDeal;\n    const numberOfDeals = Math.floor(preciseNumberOfDeals * 100) / 100; // Preserve 2 decimals for transparency\n    \n    // Recalculate based on precise deal count\n    const initialInvestmentCapital = numberOfDeals * initialCheckSizeActual;\n    const followOnReserveCapital = numberOfDeals * totalFollowOnPerDeal;\n    \n    // Verification: ensure all capital is deployed - core Tactyc principle\n    const totalCapitalDeployed = initialInvestmentCapital + followOnReserveCapital;\n    const capitalUtilization = (totalCapitalDeployed / totalInvestableCapital) * 100;\n    const unusedCapital = totalInvestableCapital - totalCapitalDeployed;\n    \n    const avgInitialCheck = initialCheckSizeActual;\n    const seedPostMoney = params.seedPreMoney + params.seedRoundSize;\n    const avgOwnership = (avgInitialCheck / seedPostMoney) * 100;\n    \n    // Calculate required fund return for target LP multiple\n    const targetNetReturn = fundSizeActual * params.requiredLPReturn;\n    const carriedInterest = Math.max(0, (targetNetReturn - fundSizeActual) * 0.20); // 20% carry\n    const totalRequiredReturn = targetNetReturn + carriedInterest;\n    \n    // Return the fund calculation\n    const returnTheFundValue = fundSizeActual / (avgOwnership / 100);\n    \n    const impliedTVPI = totalRequiredReturn / totalInvestableCapital;\n    \n    return {\n      initialInvestmentCapital,\n      followOnReserveCapital,\n      managementFees,\n      fundCosts,\n      totalInvestableCapital,\n      avgInitialCheck,\n      avgOwnership,\n      totalRequiredReturn,\n      returnTheFundValue,\n      impliedTVPI\n    };\n  };\n\n  const calculations = calculatePortfolio();\n\n  // Generate data for charts\n  const allocationData = [\n    {\n      name: \"Initial Investments Capital\",\n      value: calculations.initialInvestmentCapital / 1000, // Convert to thousands for display\n      percentage: (calculations.initialInvestmentCapital / (params.fundSize * 1000)) * 100\n    },\n    {\n      name: \"Follow-on Reserves\",\n      value: calculations.followOnReserveCapital / 1000,\n      percentage: (calculations.followOnReserveCapital / (params.fundSize * 1000)) * 100\n    },\n    {\n      name: \"Fees\",\n      value: calculations.managementFees / 1000,\n      percentage: (calculations.managementFees / (params.fundSize * 1000)) * 100\n    },\n    {\n      name: \"Costs\",\n      value: calculations.fundCosts / 1000,\n      percentage: (calculations.fundCosts / (params.fundSize * 1000)) * 100\n    }\n  ];\n\n  // Generate graduation rate impact data\n  const graduationData = [\n    {\n      round: \"Seed\",\n      available: calculations.initialInvestmentCapital / 1000,\n      invested: calculations.initialInvestmentCapital / 1000\n    },\n    {\n      round: \"Series A\",\n      available: (calculations.followOnReserveCapital * 0.4) / 1000,\n      invested: (calculations.followOnReserveCapital * 0.4 * params.seriesAGradRate / 100) / 1000\n    },\n    {\n      round: \"Series B\", \n      available: (calculations.followOnReserveCapital * 0.3) / 1000,\n      invested: (calculations.followOnReserveCapital * 0.3 * params.seriesBGradRate / 100) / 1000\n    },\n    {\n      round: \"Series C\",\n      available: (calculations.followOnReserveCapital * 0.2) / 1000,\n      invested: (calculations.followOnReserveCapital * 0.2 * params.seriesCGradRate / 100) / 1000\n    },\n    {\n      round: \"Series D\",\n      available: (calculations.followOnReserveCapital * 0.1) / 1000,\n      invested: (calculations.followOnReserveCapital * 0.1 * 0.5) / 1000\n    }\n  ];\n\n  // Generate return the fund data by fund size\n  const returnFundData = [100, 150, 200, 250, 300].map(size => {\n    const ownership = calculations.avgOwnership;\n    const returnValue = (size * 1000) / (ownership / 100);\n    return {\n      fundSize: size,\n      returnValue: returnValue / 1000000 // Convert to millions\n    };\n  });\n\n  // Generate required return waterfall\n  const returnWaterfallData = [\n    {\n      category: \"Initial Investment\",\n      amount: params.fundSize,\n      cumulative: params.fundSize\n    },\n    {\n      category: \"Required LP Profits\", \n      amount: (params.requiredLPReturn - 1) * params.fundSize,\n      cumulative: params.requiredLPReturn * params.fundSize\n    },\n    {\n      category: \"Fees\",\n      amount: calculations.managementFees / 1000,\n      cumulative: params.requiredLPReturn * params.fundSize + calculations.managementFees / 1000\n    },\n    {\n      category: \"Carry\",\n      amount: Math.max(0, ((params.requiredLPReturn - 1) * params.fundSize) * 0.20),\n      cumulative: calculations.totalRequiredReturn / 1000\n    }\n  ];\n\n  const formatCurrency = (amount: number) => {\n    if (amount >= 1000) return `$${(amount / 1000).toFixed(1)}M`;\n    return `$${amount.toFixed(0)}K`;\n  };\n\n  const formatPercent = (value: number) => `${value.toFixed(1)}%`;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold flex items-center space-x-2\">\n            <BarChart3 className=\"h-6 w-6 text-blue-600\" />\n            <span>Portfolio Construction</span>\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Interactive fund modeling with real-time impact analysis\n          </p>\n        </div>\n        <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n          <Settings className=\"h-4 w-4\" />\n          <span>Reset Parameters</span>\n        </Button>\n      </div>\n\n      <Tabs defaultValue=\"construction\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"construction\">Construction</TabsTrigger>\n          <TabsTrigger value=\"graduation\">Graduation Impact</TabsTrigger>\n          <TabsTrigger value=\"returns\">Return Analysis</TabsTrigger>\n          <TabsTrigger value=\"sensitivity\">Sensitivity</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"construction\" className=\"space-y-6\">\n          {/* Key Metrics Summary */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card className=\"border-blue-200 bg-blue-50\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <DollarSign className=\"h-8 w-8 text-blue-600\" />\n                  <div>\n                    <div className=\"text-sm text-blue-800\">Avg Initial Check</div>\n                    <div className=\"font-bold text-blue-900\">\n                      {formatCurrency(calculations.avgInitialCheck / 1000)}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-green-200 bg-green-50\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <Target className=\"h-8 w-8 text-green-600\" />\n                  <div>\n                    <div className=\"text-sm text-green-800\">Avg Ownership</div>\n                    <div className=\"font-bold text-green-900\">\n                      {formatPercent(calculations.avgOwnership)}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-orange-200 bg-orange-50\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <TrendingUp className=\"h-8 w-8 text-orange-600\" />\n                  <div>\n                    <div className=\"text-sm text-orange-800\">Required Return</div>\n                    <div className=\"font-bold text-orange-900\">\n                      {formatCurrency(calculations.totalRequiredReturn / 1000)}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-purple-200 bg-purple-50\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-3\">\n                  <Calculator className=\"h-8 w-8 text-purple-600\" />\n                  <div>\n                    <div className=\"text-sm text-purple-800\">Implied TVPI</div>\n                    <div className=\"font-bold text-purple-900\">\n                      {calculations.impliedTVPI.toFixed(2)}x\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Interactive Parameters */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Fund Parameters</CardTitle>\n                <CardDescription>\n                  Adjust key fund construction parameters\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <Label className=\"text-sm font-medium\">Fund Size</Label>\n                    <Badge variant=\"outline\">{formatCurrency(params.fundSize)}</Badge>\n                  </div>\n                  <Slider\n                    value={[params.fundSize]}\n                    onValueChange={([value]) => updateParam('fundSize', value)}\n                    min={50000}\n                    max={250000}\n                    step={10000}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <Label className=\"text-sm font-medium\">Management Fee</Label>\n                    <Badge variant=\"outline\">{formatPercent(params.managementFee)}</Badge>\n                  </div>\n                  <Slider\n                    value={[params.managementFee]}\n                    onValueChange={([value]) => updateParam('managementFee', value)}\n                    min={1.6}\n                    max={2.4}\n                    step={0.1}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <Label className=\"text-sm font-medium\">Initial Check Size</Label>\n                    <Badge variant=\"outline\">{formatCurrency(params.initialCheckSize)}</Badge>\n                  </div>\n                  <Slider\n                    value={[params.initialCheckSize]}\n                    onValueChange={([value]) => updateParam('initialCheckSize', value)}\n                    min={800}\n                    max={1200}\n                    step={50}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <Label className=\"text-sm font-medium\">Follow-on Reserve %</Label>\n                    <Badge variant=\"outline\">{formatPercent(params.followOnReserve)}</Badge>\n                  </div>\n                  <Slider\n                    value={[params.followOnReserve]}\n                    onValueChange={([value]) => updateParam('followOnReserve', value)}\n                    min={0}\n                    max={100}\n                    step={5}\n                    className=\"w-full\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Fund Capital Allocation Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Allocation of Fund Capital</CardTitle>\n                <CardDescription>\n                  Breakdown of how fund capital is allocated\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={allocationData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"name\" angle={-45} textAnchor=\"end\" height={100} />\n                      <YAxis tickFormatter={(value) => formatCurrency(value)} />\n                      <Tooltip \n                        formatter={(value: number) => [formatCurrency(value), \"Amount\"]}\n                        labelFormatter={(label) => `Category: ${label}`}\n                      />\n                      <Bar dataKey=\"value\" fill=\"#3b82f6\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"graduation\" className=\"space-y-6\">\n          {/* Graduation Rate Controls */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Graduation Rate Parameters</CardTitle>\n              <CardDescription>\n                Adjust graduation rates to see impact on investment allocation\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <Label className=\"text-sm font-medium\">Seed Round Size</Label>\n                    <Badge variant=\"outline\">{formatCurrency(params.seedRoundSize)}</Badge>\n                  </div>\n                  <Slider\n                    value={[params.seedRoundSize]}\n                    onValueChange={([value]) => updateParam('seedRoundSize', value)}\n                    min={1600}\n                    max={2400}\n                    step={50}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <Label className=\"text-sm font-medium\">Seed Pre-Money Valuation</Label>\n                    <Badge variant=\"outline\">{formatCurrency(params.seedPreMoney)}</Badge>\n                  </div>\n                  <Slider\n                    value={[params.seedPreMoney]}\n                    onValueChange={([value]) => updateParam('seedPreMoney', value)}\n                    min={6400}\n                    max={9600}\n                    step={100}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <Label className=\"text-sm font-medium\">Series A Graduation Rate</Label>\n                    <Badge variant=\"outline\">{formatPercent(params.seriesAGradRate)}</Badge>\n                  </div>\n                  <Slider\n                    value={[params.seriesAGradRate]}\n                    onValueChange={([value]) => updateParam('seriesAGradRate', value)}\n                    min={40}\n                    max={60}\n                    step={2}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <Label className=\"text-sm font-medium\">Series B Graduation Rate</Label>\n                    <Badge variant=\"outline\">{formatPercent(params.seriesBGradRate)}</Badge>\n                  </div>\n                  <Slider\n                    value={[params.seriesBGradRate]}\n                    onValueChange={([value]) => updateParam('seriesBGradRate', value)}\n                    min={40}\n                    max={60}\n                    step={2}\n                    className=\"w-full\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Investment Allocation by Round */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Amount Available to Invest and Actually Invested in Each Round</CardTitle>\n              <CardDescription>\n                Blue bars show available capital, red bars show actual invested amounts\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={graduationData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"round\" />\n                    <YAxis tickFormatter={(value) => formatCurrency(value)} />\n                    <Tooltip \n                      formatter={(value: number, name) => [\n                        formatCurrency(value), \n                        name === 'available' ? 'Available Investment Amount' : 'Actual Invested Amount'\n                      ]}\n                    />\n                    <Bar dataKey=\"available\" fill=\"#3b82f6\" name=\"available\" />\n                    <Bar dataKey=\"invested\" fill=\"#ef4444\" name=\"invested\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"returns\" className=\"space-y-6\">\n          {/* Required Return Waterfall */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Implied Fund Performance to Guarantee LP Return Multiple</CardTitle>\n              <CardDescription>\n                Waterfall showing required returns to achieve {params.requiredLPReturn}x net LP multiple\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"mb-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <Label className=\"text-sm font-medium\">Required LP Net Return Multiple</Label>\n                    <Badge variant=\"outline\">{params.requiredLPReturn.toFixed(1)}x</Badge>\n                  </div>\n                  <Slider\n                    value={[params.requiredLPReturn]}\n                    onValueChange={([value]) => updateParam('requiredLPReturn', value)}\n                    min={1.0}\n                    max={10.0}\n                    step={0.1}\n                    className=\"w-full\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={returnWaterfallData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"category\" />\n                    <YAxis tickFormatter={(value) => formatCurrency(value)} />\n                    <Tooltip \n                      formatter={(value: number) => [formatCurrency(value), \"Amount\"]}\n                    />\n                    <Bar dataKey=\"amount\" fill=\"#3b82f6\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Return the Fund Analysis */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Exit Value Needed to Return the Fund Based on Fund Size</CardTitle>\n              <CardDescription>\n                Required exit value for a single company to return entire fund\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart data={returnFundData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"fundSize\" \n                      tickFormatter={(value) => `$${value}K`}\n                    />\n                    <YAxis tickFormatter={(value) => `$${value}B`} />\n                    <Tooltip \n                      formatter={(value: number) => [`$${value.toFixed(1)}B`, \"Exit Value Required\"]}\n                      labelFormatter={(label) => `Fund Size: $${label}K`}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"returnValue\" \n                      stroke=\"#10b981\" \n                      fill=\"#10b981\" \n                      fillOpacity={0.6}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"sensitivity\" className=\"space-y-6\">\n          {/* Sensitivity Analysis */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Portfolio Construction Sensitivity Analysis</CardTitle>\n              <CardDescription>\n                Key insights and trade-offs in portfolio construction decisions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium text-gray-900\">Current Configuration Impact</h4>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"p-3 bg-blue-50 rounded-lg\">\n                      <p className=\"font-medium text-blue-900\">Fund Size: {formatCurrency(params.fundSize)}</p>\n                      <p className=\"text-blue-700\">\n                        With {params.targetCompanies} companies and {formatPercent(params.followOnReserve)} follow-on reserve, \n                        average initial check is {formatCurrency(calculations.avgInitialCheck / 1000)}\n                      </p>\n                    </div>\n                    \n                    <div className=\"p-3 bg-green-50 rounded-lg\">\n                      <p className=\"font-medium text-green-900\">Ownership Impact</p>\n                      <p className=\"text-green-700\">\n                        At current seed valuations ({formatCurrency(params.seedPreMoney + params.seedRoundSize)} post-money), \n                        achieving {formatPercent(calculations.avgOwnership)} average ownership\n                      </p>\n                    </div>\n                    \n                    <div className=\"p-3 bg-orange-50 rounded-lg\">\n                      <p className=\"font-medium text-orange-900\">Return Requirements</p>\n                      <p className=\"text-orange-700\">\n                        To achieve {params.requiredLPReturn}x LP returns, fund must generate \n                        {formatCurrency(calculations.totalRequiredReturn / 1000)} total returns \n                        ({calculations.impliedTVPI.toFixed(2)}x TVPI)\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium text-gray-900\">Key Trade-offs</h4>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"flex items-start space-x-2\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-1.5\"></div>\n                      <p>Higher follow-on reserves reduce initial check sizes but enable doubling down on winners</p>\n                    </div>\n                    \n                    <div className=\"flex items-start space-x-2\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full mt-1.5\"></div>\n                      <p>Larger fund size allows bigger checks but requires proportionally higher returns</p>\n                    </div>\n                    \n                    <div className=\"flex items-start space-x-2\">\n                      <div className=\"w-2 h-2 bg-orange-500 rounded-full mt-1.5\"></div>\n                      <p>More companies reduces concentration risk but dilutes follow-on reserves per company</p>\n                    </div>\n                    \n                    <div className=\"flex items-start space-x-2\">\n                      <div className=\"w-2 h-2 bg-purple-500 rounded-full mt-1.5\"></div>\n                      <p>Higher graduation rates increase follow-on deployment but require more reserve capital</p>\n                    </div>\n                    \n                    <div className=\"flex items-start space-x-2\">\n                      <div className=\"w-2 h-2 bg-red-500 rounded-full mt-1.5\"></div>\n                      <p>Management fee recycling can boost returns by increasing investable capital</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\portfolio\\benchmarking-dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'PieChart' is defined but never used.","line":19,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Pie' is defined but never used.","line":20,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Cell' is defined but never used.","line":21,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'COLORS' is assigned a value but never used.","line":140,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":140,"endColumn":13}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { RadarChart } from 'recharts/es6/chart/RadarChart';\nimport { PolarGrid } from 'recharts/es6/polar/PolarGrid';\nimport { PolarAngleAxis } from 'recharts/es6/polar/PolarAngleAxis';\nimport { PolarRadiusAxis } from 'recharts/es6/polar/PolarRadiusAxis';\nimport { Radar } from 'recharts/es6/polar/Radar';\nimport { Legend } from 'recharts/es6/component/Legend';\nimport { PieChart } from 'recharts/es6/chart/PieChart';\nimport { Pie } from 'recharts/es6/polar/Pie';\nimport { Cell } from 'recharts/es6/component/Cell';\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { \n  TrendingUp, \n  TrendingDown, \n  BarChart3,\n  Filter,\n  Search,\n  Settings,\n  Info\n} from 'lucide-react';\nimport { Input } from '@/components/ui/input';\n\n// Mock data - in real app, this would come from API\nconst PORTFOLIO_COMPANIES = [\n  {\n    id: 1,\n    name: 'Helix.ai',\n    sector: 'SaaS',\n    stage: 'Series A',\n    revenue: '$1M',\n    revenueGrowth: 35,\n    grossMargin: 88,\n    operatingMargin: -24,\n    burnRate: -566000,\n    runway: 14,\n    percentiles: {\n      revenue: 80,\n      revenueGrowth: 74,\n      grossMargin: 79,\n      operatingMargin: 93,\n      burnRate: 55,\n      runway: 68\n    }\n  },\n  {\n    id: 2,\n    name: 'Kevin Inc.',\n    sector: 'FinTech',\n    stage: 'Seed',\n    revenue: '$500K',\n    revenueGrowth: 55,\n    grossMargin: 75,\n    operatingMargin: -45,\n    burnRate: -250000,\n    runway: 18,\n    percentiles: {\n      revenue: 60,\n      revenueGrowth: 85,\n      grossMargin: 70,\n      operatingMargin: 40,\n      burnRate: 75,\n      runway: 80\n    }\n  },\n  {\n    id: 3,\n    name: 'AirChair',\n    sector: 'Hardware',\n    stage: 'Series B',\n    revenue: '$12M',\n    revenueGrowth: 72,\n    grossMargin: 48,\n    operatingMargin: 23,\n    burnRate: -1200000,\n    runway: 16,\n    percentiles: {\n      revenue: 90,\n      revenueGrowth: 72,\n      grossMargin: 30,\n      operatingMargin: 91,\n      burnRate: 50,\n      runway: 60\n    }\n  }\n];\n\nconst BENCHMARK_DATA = [\n  {\n    metric: 'Revenue Growth',\n    portfolioMedian: 35,\n    globalMedian: 28,\n    portfolioCount: 21,\n    globalCount: 7500\n  },\n  {\n    metric: 'Gross Margin',\n    portfolioMedian: 75,\n    globalMedian: 65,\n    portfolioCount: 21,\n    globalCount: 7500\n  },\n  {\n    metric: 'Operating Margin',\n    portfolioMedian: -24,\n    globalMedian: -18,\n    portfolioCount: 21,\n    globalCount: 7500\n  },\n  {\n    metric: 'Burn Rate',\n    portfolioMedian: -566000,\n    globalMedian: -420000,\n    portfolioCount: 21,\n    globalCount: 7500\n  }\n];\n\nconst COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'];\n\nexport default function BenchmarkingDashboard() {\n  const [selectedCompany, setSelectedCompany] = useState(PORTFOLIO_COMPANIES[0]);\n  const [selectedPeriod, setSelectedPeriod] = useState('Q4 2024');\n  const [selectedSector, setSelectedSector] = useState('All');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Portfolio vs Global Benchmarks Chart\n  const renderBenchmarkChart = () => {\n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <BarChart data={BENCHMARK_DATA} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"metric\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"portfolioMedian\" fill=\"#3b82f6\" name=\"Portfolio Benchmarks\" />\n          <Bar dataKey=\"globalMedian\" fill=\"#10b981\" name=\"Global Benchmarks\" />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  // Portfolio Quartile Ranking Radar Chart\n  const renderRadarChart = (company: typeof PORTFOLIO_COMPANIES[0]) => {\n    const radarData = [\n      { metric: 'Revenue', value: company.percentiles.revenue, fullMark: 100 },\n      { metric: 'Revenue Growth', value: company.percentiles.revenueGrowth, fullMark: 100 },\n      { metric: 'Gross Margin', value: company.percentiles.grossMargin, fullMark: 100 },\n      { metric: 'Operating Margin', value: company.percentiles.operatingMargin, fullMark: 100 },\n      { metric: 'Burn Rate', value: company.percentiles.burnRate, fullMark: 100 },\n      { metric: 'Runway', value: company.percentiles.runway, fullMark: 100 }\n    ];\n\n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <RadarChart data={radarData}>\n          <PolarGrid />\n          <PolarAngleAxis dataKey=\"metric\" />\n          <PolarRadiusAxis angle={90} domain={[0, 100]} />\n          <Radar\n            name=\"Company Percentile\"\n            dataKey=\"value\"\n            stroke=\"#3b82f6\"\n            fill=\"#3b82f6\"\n            fillOpacity={0.3}\n            strokeWidth={2}\n          />\n        </RadarChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  // Performance Score Card\n  const renderScorecard = (company: typeof PORTFOLIO_COMPANIES[0]) => {\n    const getPerformanceColor = (percentile: number) => {\n      if (percentile >= 75) return 'text-green-600 bg-green-100';\n      if (percentile >= 50) return 'text-blue-600 bg-blue-100';\n      if (percentile >= 25) return 'text-yellow-600 bg-yellow-100';\n      return 'text-red-600 bg-red-100';\n    };\n\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>My Scorecard</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"text-center\">\n              <div className=\"text-sm text-gray-500 mb-2\">My sector</div>\n              <div className=\"text-2xl font-bold text-blue-600\">{company.sector}</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-sm text-gray-500 mb-2\">My annualized revenue:</div>\n              <div className=\"text-3xl font-bold\">{company.revenue}</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-sm text-gray-500 mb-2\">My peers' revenue scale:</div>\n              <div className=\"text-2xl font-bold\">$500K-20M</div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Percentile Ranking</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {[\n                { label: 'Revenue', value: company.revenue, percentile: company.percentiles.revenue },\n                { label: 'Revenue Growth', value: `${company.revenueGrowth}%`, percentile: company.percentiles.revenueGrowth },\n                { label: 'Gross Margin', value: `${company.grossMargin}%`, percentile: company.percentiles.grossMargin },\n                { label: 'Operating Margin', value: `${company.operatingMargin}%`, percentile: company.percentiles.operatingMargin },\n                { label: 'Runway', value: `${company.runway} Mo.`, percentile: company.percentiles.runway }\n              ].map((item, index) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <div className=\"text-sm\">{item.label} {item.value}</div>\n                  <Badge className={`${getPerformanceColor(item.percentile)} border-0`}>\n                    {item.percentile}th %tile\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Controls */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Benchmarks</h2>\n          <p className=\"text-gray-600\">Compare your portfolio companies against industry benchmarks</p>\n        </div>\n        <div className=\"flex flex-wrap gap-3\">\n          <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"Q4 2024\">Q4 2024</SelectItem>\n              <SelectItem value=\"Q3 2024\">Q3 2024</SelectItem>\n              <SelectItem value=\"Q2 2024\">Q2 2024</SelectItem>\n              <SelectItem value=\"Q1 2024\">Q1 2024</SelectItem>\n            </SelectContent>\n          </Select>\n          <Select value={selectedSector} onValueChange={setSelectedSector}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"All\">All Sectors</SelectItem>\n              <SelectItem value=\"SaaS\">SaaS</SelectItem>\n              <SelectItem value=\"FinTech\">FinTech</SelectItem>\n              <SelectItem value=\"Hardware\">Hardware</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\" size=\"sm\">\n            <Settings className=\"h-4 w-4 mr-2\" />\n            Manage metrics\n          </Button>\n        </div>\n      </div>\n\n      {/* Main Benchmarking Interface */}\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">By Metric</TabsTrigger>\n          <TabsTrigger value=\"company\">By Company</TabsTrigger>\n          <TabsTrigger value=\"scorecard\">My Scorecard</TabsTrigger>\n          <TabsTrigger value=\"companies\">Companies</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Portfolio vs Global Toggle */}\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"default\" className=\"bg-blue-600\">\n                P\n              </Badge>\n              <span className=\"text-sm\">Portfolio Benchmarks</span>\n            </div>\n            <span className=\"text-gray-400\">VS.</span>\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"default\" className=\"bg-green-600\">\n                G\n              </Badge>\n              <span className=\"text-sm\">Global Benchmarks</span>\n              <div className=\"w-6 h-4 bg-green-600 rounded-full relative\">\n                <div className=\"absolute right-1 top-0.5 w-3 h-3 bg-white rounded-full\"></div>\n              </div>\n            </div>\n          </div>\n\n          {/* Benchmark Comparison Chart */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  Revenue Growth\n                  <Info className=\"h-4 w-4 text-gray-400\" />\n                </CardTitle>\n                <div className=\"text-sm text-gray-500\">Q4 2024</div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {renderBenchmarkChart()}\n            </CardContent>\n          </Card>\n\n          {/* Standard Metrics Sidebar */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                Standard Metrics\n                <Button variant=\"outline\" size=\"sm\">\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Manage metrics\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {[\n                  'Burn / FTE', 'Gross Margin', 'Headcount', 'Operating Margin',\n                  'Net Burn', 'Revenue', 'Revenue / FTE', 'Revenue Growth', 'Runway'\n                ].map((metric) => (\n                  <div\n                    key={metric}\n                    className=\"p-2 text-sm border rounded cursor-pointer hover:bg-gray-50\"\n                  >\n                    {metric}\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"company\" className=\"space-y-6\">\n          {/* Company Selection */}\n          <div className=\"flex items-center gap-4\">\n            <Select\n              value={selectedCompany.id.toString()}\n              onValueChange={(value) => {\n                const company = PORTFOLIO_COMPANIES.find(c => c.id.toString() === value);\n                if (company) setSelectedCompany(company);\n              }}\n            >\n              <SelectTrigger className=\"w-48\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {PORTFOLIO_COMPANIES.map((company) => (\n                  <SelectItem key={company.id} value={company.id.toString()}>\n                    {company.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Badge variant=\"outline\" className=\"bg-green-100 text-green-800\">\n              Online\n            </Badge>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Company Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Company info</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <div className=\"text-sm text-gray-500 mb-1\">Sector</div>\n                  <div className=\"font-medium\">{selectedCompany.sector}</div>\n                </div>\n                <div>\n                  <div className=\"text-sm text-gray-500 mb-1\">Revenue scale</div>\n                  <div className=\"font-medium\">{selectedCompany.revenue}</div>\n                </div>\n                <div>\n                  <a href=\"#\" className=\"text-blue-600 text-sm hover:underline\">\n                    http://www.{selectedCompany.name.toLowerCase()}.ai\n                  </a>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Portfolio Quartile Ranking */}\n            <Card className=\"lg:col-span-2\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>Portfolio quartile ranking</CardTitle>\n                    <p className=\"text-sm text-gray-600 mt-1\">Chart shows company's metrics vs. peers.</p>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Edit Chart\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {renderRadarChart(selectedCompany)}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Portfolio Companies List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>20 Portfolio Companies</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {PORTFOLIO_COMPANIES.map((company) => (\n                  <div\n                    key={company.id}\n                    className={`flex items-center justify-between p-3 rounded-lg border cursor-pointer hover:bg-gray-50 ${\n                      company.id === selectedCompany.id ? 'bg-blue-50 border-blue-200' : ''\n                    }`}\n                    onClick={() => setSelectedCompany(company)}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-gray-900 text-white rounded flex items-center justify-center text-sm font-medium\">\n                        {company.name.charAt(0)}\n                      </div>\n                      <span className=\"font-medium\">{company.name}</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"scorecard\" className=\"space-y-6\">\n          {renderScorecard(selectedCompany)}\n\n          {/* Revenue Growth Performance */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Revenue Growth</CardTitle>\n              <div className=\"text-right text-sm text-gray-500\">As of Q2 2024</div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-6xl font-bold\">72%</div>\n                  <Badge variant=\"default\" className=\"bg-green-100 text-green-800 mt-2\">\n                    Above Average\n                  </Badge>\n                </div>\n                \n                {/* Performance Bar */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm text-gray-500\">\n                    <span>Bottom Quartile: 0.00%</span>\n                    <span>Median Quartile: 10.00%</span>\n                    <span>Top Quartile: 24.00%</span>\n                  </div>\n                  <div className=\"relative\">\n                    <div className=\"w-full h-6 bg-gradient-to-r from-red-200 via-yellow-200 to-green-200 rounded\"></div>\n                    <div className=\"absolute top-0 right-8 transform -translate-y-1\">\n                      <Badge variant=\"default\" className=\"bg-gray-900 text-white text-xs\">\n                        Instaspace 30.66%\n                      </Badge>\n                      <div className=\"w-0.5 h-8 bg-gray-900 mx-auto\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"companies\" className=\"space-y-6\">\n          {/* Company Filters */}\n          <div className=\"flex flex-wrap items-center gap-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Search className=\"h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search companies...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-64\"\n              />\n            </div>\n            <Select defaultValue=\"low-runway\">\n              <SelectTrigger className=\"w-40\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"low-runway\">Low Runway</SelectItem>\n                <SelectItem value=\"high-growth\">High Growth</SelectItem>\n                <SelectItem value=\"profitable\">Profitable</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select defaultValue=\"quarterly\">\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                <SelectItem value=\"monthly\">Monthly</SelectItem>\n                <SelectItem value=\"annual\">Annual</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button className=\"bg-blue-600 hover:bg-blue-700\">\n              Add company\n            </Button>\n          </div>\n\n          {/* Companies Table */}\n          <Card>\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"border-b\">\n                    <tr className=\"text-left\">\n                      <th className=\"p-4 font-medium text-gray-500 uppercase text-xs\">Vendor</th>\n                      <th className=\"p-4 font-medium text-gray-500 uppercase text-xs\">Firm Sector</th>\n                      <th className=\"p-4 font-medium text-gray-500 uppercase text-xs\">Cash in Bank</th>\n                      <th className=\"p-4 font-medium text-gray-500 uppercase text-xs\">Revenue</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {[\n                      { name: 'Bike.Ai', sector: 'AI', cash: '$36M', revenue: '$51M', logo: '≡ƒÜ▓' },\n                      { name: 'Stewart Gaming', sector: 'SaaS', cash: '$2M', revenue: '$551K', logo: '≡ƒÄ«' },\n                      { name: 'Dakarai', sector: 'FinTech', cash: '$18M', revenue: '$4M', logo: '≡ƒö║' },\n                      { name: 'Oceans Drone', sector: 'ClimateTech', cash: '$30K', revenue: '$47K', logo: '≡ƒîè' }\n                    ].map((company, index) => (\n                      <tr key={index} className=\"border-b hover:bg-gray-50\">\n                        <td className=\"p-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"text-2xl\">{company.logo}</div>\n                            <span className=\"font-medium\">{company.name}</span>\n                          </div>\n                        </td>\n                        <td className=\"p-4\">\n                          <Badge variant=\"outline\">{company.sector}</Badge>\n                        </td>\n                        <td className=\"p-4 font-medium\">{company.cash}</td>\n                        <td className=\"p-4 font-medium\">{company.revenue}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\portfolio\\column-configuration-dialog.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'columns' is defined but never used.","line":142,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":142,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedColumns' is defined but never used.","line":145,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":145,"endColumn":68}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Settings, Search, RefreshCw } from \"lucide-react\";\n\ntype MetricCategory = {\n  id: string;\n  name: string;\n  metrics: {\n    id: string;\n    name: string;\n    description: string;\n    enabled: boolean;\n  }[];\n};\n\nconst availableMetrics: MetricCategory[] = [\n  {\n    id: \"company\",\n    name: \"Company\",\n    metrics: [\n      { id: \"name\", name: \"Name\", description: \"The name of the portfolio company\", enabled: true },\n      { id: \"fundName\", name: \"Fund Name\", description: \"The name of the fund vehicle that invested\", enabled: false },\n      { id: \"status\", name: \"Status\", description: \"Active, Write-Offs, Realized or Planned\", enabled: true },\n      { id: \"investmentDate\", name: \"Investment Date\", description: \"The date of the first round\", enabled: true },\n      { id: \"geography\", name: \"Geography\", description: \"The country or region associated with the investment\", enabled: false },\n      { id: \"sector\", name: \"Sector\", description: \"The sector associated with this company\", enabled: true }\n    ]\n  },\n  {\n    id: \"qualitative\",\n    name: \"Qualitative\",\n    metrics: [\n      { id: \"commentary\", name: \"Commentary\", description: \"Latest partner commentary\", enabled: false },\n      { id: \"caseDescription\", name: \"Case Description\", description: \"The description of the case defined for this company\", enabled: false },\n      { id: \"dealTags\", name: \"Deal Tags\", description: \"Any tags associated with this investment\", enabled: true },\n      { id: \"partners\", name: \"Partners\", description: \"Sourcing or managing partners associated with the investment\", enabled: false },\n      { id: \"boardMembers\", name: \"Board Members\", description: \"Any board member seats granted to the fund\", enabled: false },\n      { id: \"coInvestors\", name: \"Co-Investors\", description: \"Any co-investors tracked for this investment\", enabled: false }\n    ]\n  },\n  {\n    id: \"rounds\",\n    name: \"Rounds\",\n    metrics: [\n      { id: \"entryStage\", name: \"Entry Stage\", description: \"The name of the round that the fund made its initial investment\", enabled: true },\n      { id: \"currentStage\", name: \"Current Stage\", description: \"The last financing round of the company\", enabled: false },\n      { id: \"lastRoundDate\", name: \"Last Round Date\", description: \"The date of the last financing round\", enabled: false },\n      { id: \"exitStage\", name: \"Exit Stage\", description: \"The stage of the last financing round prior to exit\", enabled: false }\n    ]\n  },\n  {\n    id: \"capital\",\n    name: \"Capital\",\n    metrics: [\n      { id: \"investedToDate\", name: \"Invested to Date\", description: \"The total capital invested to date by the fund\", enabled: true },\n      { id: \"initialInvestment\", name: \"Initial Investment\", description: \"The amount invested in the first round by the fund\", enabled: false },\n      { id: \"reservesDeployed\", name: \"Reserves Deployed\", description: \"The amount invested in subsequent rounds\", enabled: false },\n      { id: \"reservesRemaining\", name: \"Reserves Remaining\", description: \"The amount reserved for future follow-on investments\", enabled: false },\n      { id: \"totalExpectedInvestment\", name: \"Total Expected Investment\", description: \"The total capital expected to be invested in the company\", enabled: false },\n      { id: \"entryRoundSize\", name: \"Entry Round Size\", description: \"The amount raised by the company in the first round\", enabled: false },\n      { id: \"cumeCapitalRaised\", name: \"Cume Capital Raised\", description: \"The total amount raised by the company to date\", enabled: false },\n      { id: \"cumeCapitalRaisedSinceInitial\", name: \"Cume Capital Raised Since Initial\", description: \"Total amount raised excluding the initial round\", enabled: false }\n    ]\n  },\n  {\n    id: \"valuation\",\n    name: \"Valuation\",\n    metrics: [\n      { id: \"entryPreMoneyValuation\", name: \"Entry Pre-Money Valuation\", description: \"Pre-money valuation at entry\", enabled: false },\n      { id: \"entryPostMoneyValuation\", name: \"Entry Post-Money Valuation\", description: \"Post-money valuation at entry\", enabled: false },\n      { id: \"currentPostMoneyValuation\", name: \"Current Post-Money Valuation\", description: \"Current post-money valuation\", enabled: false },\n      { id: \"entryOwnership\", name: \"Entry Ownership\", description: \"Ownership percentage at entry\", enabled: false },\n      { id: \"currentOwnership\", name: \"Current Ownership\", description: \"Current ownership percentage\", enabled: true },\n      { id: \"currentSharePrice\", name: \"Current Share Price\", description: \"Applicable only if data has been entered in share mode\", enabled: false },\n      { id: \"currentSharesOwned\", name: \"Current Shares Owned\", description: \"Applicable only if data has been entered in share mode\", enabled: false },\n      { id: \"unrealizedFMV\", name: \"Unrealized FMV\", description: \"Value of unrealized stake in the company\", enabled: true },\n      { id: \"currentReturnTheFund\", name: \"Current Return the Fund\", description: \"Current RTF based on current ownership\", enabled: false }\n    ]\n  },\n  {\n    id: \"exit\",\n    name: \"Exit\",\n    metrics: [\n      { id: \"exitDate\", name: \"Exit Date\", description: \"Actual or expected exit date\", enabled: false },\n      { id: \"exitOwnership\", name: \"Exit Ownership\", description: \"Ownership % at Exit\", enabled: false },\n      { id: \"realizedProceeds\", name: \"Realized Proceeds\", description: \"Realized proceeds to date including dividends and distributions\", enabled: false },\n      { id: \"percentRealized\", name: \"% Realized\", description: \"Percentage of investment that has been realized to date\", enabled: false },\n      { id: \"totalExitProceeds\", name: \"Total Exit Proceeds\", description: \"Total exit proceeds to be realized\", enabled: false },\n      { id: \"exitAggregateValuation\", name: \"Exit Aggregate Valuation\", description: \"Expected or actual aggregate valuation at exit\", enabled: false },\n      { id: \"exitReturnTheFund\", name: \"Exit Return the Fund\", description: \"RTF based on ownership at exit\", enabled: false },\n      { id: \"currentLossRatio\", name: \"Current Loss Ratio\", description: \"Loss ratio on invested capital today\", enabled: false },\n      { id: \"lossRatioAtExit\", name: \"Loss Ratio at Exit\", description: \"Loss ratio on invested capital by exit\", enabled: false }\n    ]\n  },\n  {\n    id: \"multiple\",\n    name: \"Multiple\",\n    metrics: [\n      { id: \"currentMOIC\", name: \"Current MOIC\", description: \"Current return on $1 of invested capital to date\", enabled: true },\n      { id: \"currentMOICOnInitial\", name: \"Current MOIC on Initial\", description: \"Current return on $1 of initial investment only\", enabled: false },\n      { id: \"currentMOICOnDeployedReserves\", name: \"Current MOIC on Deployed Reserves\", description: \"Current return on $1 of deployed reserves only\", enabled: false },\n      { id: \"exitMOIC\", name: \"Exit MOIC\", description: \"Expected return on $1 of total invested capital\", enabled: false },\n      { id: \"exitMOICOnFollowOns\", name: \"Exit MOIC on Follow-Ons\", description: \"Expected return at exit for every $1 of follow-on investment only\", enabled: false },\n      { id: \"exitMOICOnPlannedReserves\", name: \"Exit MOIC on Planned Reserves\", description: \"Expected return on $1 of future planned reserves\", enabled: false },\n      { id: \"currentOrRealizedIRR\", name: \"Current or Realized IRR\", description: \"Represents the IRR return on the investment\", enabled: true }\n    ]\n  },\n  {\n    id: \"composition\",\n    name: \"Composition\",\n    metrics: [\n      { id: \"initialToCommittedCapitalRatio\", name: \"Initial to Committed Capital Ratio\", description: \"Initial investment divided by total fund committed capital\", enabled: false },\n      { id: \"totalToCommittedCapitalRatio\", name: \"Total to Committed Capital Ratio\", description: \"Total investment divided by total fund committed capital\", enabled: false },\n      { id: \"deployedToTotalInvestedRatio\", name: \"Deployed to Total Invested Ratio\", description: \"Total invested to date divided by total invested capital by fund\", enabled: false },\n      { id: \"totalInvestmentToTotalExpectedInvestmentRatio\", name: \"Total Investment to Total Expected Investment Ratio\", description: \"Total expected investment divided by total expected investment by fund\", enabled: false },\n      { id: \"fmvRatio\", name: \"FMV Ratio\", description: \"FMV of investment divided by total FMV across all active investments\", enabled: false }\n    ]\n  },\n  {\n    id: \"other\",\n    name: \"Other\",\n    metrics: [\n      { id: \"caseProbability\", name: \"Case Probability\", description: \"The probability of the performance case\", enabled: false },\n      { id: \"failureRate\", name: \"Failure Rate\", description: \"The probability of a write-off\", enabled: false },\n      { id: \"dealReserveRatio\", name: \"Deal Reserve Ratio\", description: \"Reserve ratio calculated as Total Follow-Ons / Total Expected Invested Capital\", enabled: false }\n    ]\n  }\n];\n\ntype ColumnConfigurationDialogProps = {\n  selectedColumns: string[];\n  onColumnsChange: (columns: string[]) => void;\n};\n\nexport default function ColumnConfigurationDialog({ selectedColumns, onColumnsChange }: ColumnConfigurationDialogProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [localMetrics, setLocalMetrics] = useState(availableMetrics);\n  const [activeCategory, setActiveCategory] = useState(\"company\");\n\n  const handleMetricToggle = (categoryId: string, metricId: string, enabled: boolean) => {\n    setLocalMetrics(prev => prev.map(category => \n      category.id === categoryId \n        ? {\n            ...category,\n            metrics: category.metrics.map(metric =>\n              metric.id === metricId ? { ...metric, enabled } : metric\n            )\n          }\n        : category\n    ));\n  };\n\n  const handleApplyChanges = () => {\n    const enabledMetrics = localMetrics.flatMap(category => \n      category.metrics.filter(metric => metric.enabled).map(metric => metric.id)\n    );\n    onColumnsChange(enabledMetrics);\n  };\n\n  const getEnabledCount = (categoryId: string) => {\n    const category = localMetrics.find(c => c.id === categoryId);\n    return category?.metrics.filter(m => m.enabled).length || 0;\n  };\n\n  const getTotalCount = (categoryId: string) => {\n    const category = localMetrics.find(c => c.id === categoryId);\n    return category?.metrics.length || 0;\n  };\n\n  const filteredMetrics = localMetrics.map(category => ({\n    ...category,\n    metrics: category.metrics.filter(metric =>\n      metric.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      metric.description.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n  })).filter(category => category.metrics.length > 0);\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\">\n          <Settings className=\"w-4 h-4 mr-2\" />\n          Edit Columns\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle>Configure Investment Reporting Metrics</DialogTitle>\n          <p className=\"text-sm text-gray-600\">\n            Choose from 65+ available metrics to customize your investments table view\n          </p>\n        </DialogHeader>\n\n        <div className=\"flex flex-col space-y-4 h-full\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400\" />\n            <Input\n              placeholder=\"Search metrics...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Category Tabs */}\n          <Tabs value={activeCategory} onValueChange={setActiveCategory} className=\"flex-1 overflow-hidden\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"company\" className=\"text-xs\">\n                Company ({getEnabledCount(\"company\")}/{getTotalCount(\"company\")})\n              </TabsTrigger>\n              <TabsTrigger value=\"capital\" className=\"text-xs\">\n                Capital ({getEnabledCount(\"capital\")}/{getTotalCount(\"capital\")})\n              </TabsTrigger>\n              <TabsTrigger value=\"valuation\" className=\"text-xs\">\n                Valuation ({getEnabledCount(\"valuation\")}/{getTotalCount(\"valuation\")})\n              </TabsTrigger>\n              <TabsTrigger value=\"multiple\" className=\"text-xs\">\n                Multiple ({getEnabledCount(\"multiple\")}/{getTotalCount(\"multiple\")})\n              </TabsTrigger>\n            </TabsList>\n\n            <div className=\"mt-4 grid grid-cols-4 gap-2\">\n              <TabsTrigger value=\"qualitative\" className=\"text-xs\">\n                Qualitative ({getEnabledCount(\"qualitative\")}/{getTotalCount(\"qualitative\")})\n              </TabsTrigger>\n              <TabsTrigger value=\"rounds\" className=\"text-xs\">\n                Rounds ({getEnabledCount(\"rounds\")}/{getTotalCount(\"rounds\")})\n              </TabsTrigger>\n              <TabsTrigger value=\"exit\" className=\"text-xs\">\n                Exit ({getEnabledCount(\"exit\")}/{getTotalCount(\"exit\")})\n              </TabsTrigger>\n              <TabsTrigger value=\"composition\" className=\"text-xs\">\n                Composition ({getEnabledCount(\"composition\")}/{getTotalCount(\"composition\")})\n              </TabsTrigger>\n            </div>\n\n            {/* Metrics Content */}\n            <div className=\"mt-4 flex-1 overflow-y-auto\">\n              {filteredMetrics.map((category) => (\n                <TabsContent key={category.id} value={category.id} className=\"mt-0 space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-medium\">{category.name} Metrics</h3>\n                    <Badge variant=\"outline\">\n                      {getEnabledCount(category.id)} of {getTotalCount(category.id)} selected\n                    </Badge>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    {category.metrics.map((metric) => (\n                      <div key={metric.id} className=\"flex items-start space-x-3 p-3 border border-gray-200 rounded-lg\">\n                        <Checkbox\n                          checked={metric.enabled}\n                          onCheckedChange={(checked) => handleMetricToggle(category.id, metric.id, checked as boolean)}\n                          className=\"mt-0.5\"\n                        />\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-gray-900\">{metric.name}</div>\n                          <div className=\"text-sm text-gray-600 mt-1\">{metric.description}</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </TabsContent>\n              ))}\n\n              {/* Other category */}\n              <TabsContent value=\"other\" className=\"mt-0 space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-medium\">Other Metrics</h3>\n                  <Badge variant=\"outline\">\n                    {getEnabledCount(\"other\")} of {getTotalCount(\"other\")} selected\n                  </Badge>\n                </div>\n\n                <div className=\"space-y-3\">\n                  {localMetrics.find(c => c.id === \"other\")?.metrics.map((metric) => (\n                    <div key={metric.id} className=\"flex items-start space-x-3 p-3 border border-gray-200 rounded-lg\">\n                      <Checkbox\n                        checked={metric.enabled}\n                        onCheckedChange={(checked) => handleMetricToggle(\"other\", metric.id, checked as boolean)}\n                        className=\"mt-0.5\"\n                      />\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium text-gray-900\">{metric.name}</div>\n                        <div className=\"text-sm text-gray-600 mt-1\">{metric.description}</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </TabsContent>\n            </div>\n          </Tabs>\n\n          {/* Footer */}\n          <div className=\"flex items-center justify-between pt-4 border-t border-gray-200\">\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" size=\"sm\">\n                <RefreshCw className=\"w-4 h-4 mr-1\" />\n                Reset to Default\n              </Button>\n              <span className=\"text-sm text-gray-600\">\n                {localMetrics.flatMap(c => c.metrics).filter(m => m.enabled).length} metrics selected\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\">Cancel</Button>\n              <Button onClick={handleApplyChanges}>Apply Changes</Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\portfolio\\drag-drop-chart-builder.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used.","line":70,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":70,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'JSX' is not defined.","line":73,"column":93,"nodeType":"Identifier","messageId":"undef","endLine":73,"endColumn":96},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDragEnd' is assigned a value but never used.","line":101,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":101,"endColumn":22}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  BarChart3, \n  LineChart, \n  PieChart, \n  TrendingUp,\n  Plus,\n  X\n} from 'lucide-react';\n\ninterface MetricField {\n  id: string;\n  name: string;\n  label: string;\n  type: 'currency' | 'percentage' | 'number' | 'date' | 'text';\n  category: 'financial' | 'operational' | 'growth' | 'dimension';\n}\n\ninterface ChartArea {\n  id: string;\n  label: string;\n  accepts: string[];\n  field?: MetricField;\n}\n\nconst AVAILABLE_FIELDS: MetricField[] = [\n  // Financial Metrics\n  { id: 'revenue', name: 'revenue', label: 'Revenue', type: 'currency', category: 'financial' },\n  { id: 'grossMargin', name: 'grossMargin', label: 'Gross Margin', type: 'percentage', category: 'financial' },\n  { id: 'burnRate', name: 'burnRate', label: 'Monthly Burn Rate', type: 'currency', category: 'financial' },\n  { id: 'cashInBank', name: 'cashInBank', label: 'Cash in Bank', type: 'currency', category: 'financial' },\n  { id: 'totalInvested', name: 'totalInvested', label: 'Total Invested', type: 'currency', category: 'financial' },\n  { id: 'currentValuation', name: 'currentValuation', label: 'Current Valuation', type: 'currency', category: 'financial' },\n  \n  // Growth Metrics\n  { id: 'arrGrowth', name: 'arrGrowth', label: 'ARR Growth Rate', type: 'percentage', category: 'growth' },\n  { id: 'mrr', name: 'mrr', label: 'Monthly Recurring Revenue', type: 'currency', category: 'growth' },\n  { id: 'customerGrowth', name: 'customerGrowth', label: 'Customer Growth', type: 'percentage', category: 'growth' },\n  { id: 'revenueGrowth', name: 'revenueGrowth', label: 'Revenue Growth', type: 'percentage', category: 'growth' },\n  \n  // Operational Metrics\n  { id: 'employees', name: 'employees', label: 'Employee Count', type: 'number', category: 'operational' },\n  { id: 'burnMultiple', name: 'burnMultiple', label: 'Burn Multiple', type: 'number', category: 'operational' },\n  { id: 'runway', name: 'runway', label: 'Cash Runway (Months)', type: 'number', category: 'operational' },\n  \n  // Dimensions\n  { id: 'companyName', name: 'name', label: 'Company Name', type: 'text', category: 'dimension' },\n  { id: 'sector', name: 'sector', label: 'Sector', type: 'text', category: 'dimension' },\n  { id: 'stage', name: 'stage', label: 'Stage', type: 'text', category: 'dimension' },\n  { id: 'quarter', name: 'quarter', label: 'Time Quarter', type: 'date', category: 'dimension' },\n  { id: 'year', name: 'year', label: 'Year', type: 'date', category: 'dimension' },\n];\n\nconst CHART_TYPES = [\n  { id: 'bar', name: 'Bar Chart', icon: BarChart3, color: 'bg-blue-100 border-blue-300' },\n  { id: 'line', name: 'Line Chart', icon: LineChart, color: 'bg-green-100 border-green-300' },\n  { id: 'pie', name: 'Pie Chart', icon: PieChart, color: 'bg-purple-100 border-purple-300' },\n  { id: 'area', name: 'Area Chart', icon: TrendingUp, color: 'bg-orange-100 border-orange-300' },\n];\n\ninterface DragDropChartBuilderProps {\n  onChartChange: (config: any) => void;\n}\n\nexport default function DragDropChartBuilder({ onChartChange }: DragDropChartBuilderProps): JSX.Element {\n  const [selectedChartType, setSelectedChartType] = useState('bar');\n  const [chartAreas, setChartAreas] = useState<ChartArea[]>([\n    { id: 'x-axis', label: 'X-Axis', accepts: ['dimension'], field: undefined },\n    { id: 'y-axis', label: 'Y-Axis', accepts: ['financial', 'growth', 'operational'], field: undefined },\n    { id: 'group-by', label: 'Group By (Optional)', accepts: ['dimension'], field: undefined },\n    { id: 'filter', label: 'Filter By (Optional)', accepts: ['dimension'], field: undefined },\n  ]);\n\n  const addFieldToArea = (field: MetricField, areaId: string) => {\n    const area = chartAreas.find(a => a.id === areaId);\n    if (area && area.accepts.includes(field.category)) {\n      const newAreas = chartAreas.map(a => \n        a.id === areaId ? { ...a, field } : a\n      );\n      setChartAreas(newAreas);\n      \n      const config = {\n        type: selectedChartType,\n        xAxis: newAreas.find(a => a.id === 'x-axis')?.field?.name || '',\n        yAxis: newAreas.find(a => a.id === 'y-axis')?.field?.name || '',\n        groupBy: newAreas.find(a => a.id === 'group-by')?.field?.name || '',\n        title: generateChartTitle(newAreas),\n      };\n      onChartChange(config);\n    }\n  };\n\n  const handleDragEnd = (field: MetricField, areaId: string) => {\n    addFieldToArea(field, areaId);\n  };\n\n  const generateChartTitle = (areas: ChartArea[]) => {\n    const yAxis = areas.find(a => a.id === 'y-axis')?.field?.label;\n    const xAxis = areas.find(a => a.id === 'x-axis')?.field?.label;\n    \n    if (yAxis && xAxis) {\n      return `${yAxis} by ${xAxis}`;\n    }\n    return 'Custom Chart';\n  };\n\n  const removeFieldFromArea = (areaId: string) => {\n    const newAreas = chartAreas.map(a => \n      a.id === areaId ? { ...a, field: undefined } : a\n    );\n    setChartAreas(newAreas);\n    \n    const config = {\n      type: selectedChartType,\n      xAxis: newAreas.find(a => a.id === 'x-axis')?.field?.name || '',\n      yAxis: newAreas.find(a => a.id === 'y-axis')?.field?.name || '',\n      groupBy: newAreas.find(a => a.id === 'group-by')?.field?.name || '',\n      title: generateChartTitle(newAreas),\n    };\n    onChartChange(config);\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'financial': return 'bg-blue-50 border-blue-200 text-blue-800';\n      case 'growth': return 'bg-green-50 border-green-200 text-green-800';\n      case 'operational': return 'bg-purple-50 border-purple-200 text-purple-800';\n      case 'dimension': return 'bg-gray-50 border-gray-200 text-gray-800';\n      default: return 'bg-gray-50 border-gray-200 text-gray-800';\n    }\n  };\n\n  const getCategoryIcon = (type: string) => {\n    switch (type) {\n      case 'currency': return '$';\n      case 'percentage': return '%';\n      case 'number': return '#';\n      case 'date': return '≡ƒôà';\n      default: return 'T';\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-12 gap-6 h-full\">\n      {/* Left Sidebar - Available Fields */}\n      <div className=\"col-span-3\">\n        <Card className=\"h-full\">\n          <CardHeader>\n            <CardTitle className=\"text-sm\">Available Fields</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-4\">\n            <div className=\"space-y-4\">\n              {['financial', 'growth', 'operational', 'dimension'].map(category => (\n                <div key={category}>\n                  <h4 className=\"text-xs font-semibold text-gray-600 uppercase tracking-wide mb-2\">\n                    {category.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n                  </h4>\n                  <div className=\"space-y-2\">\n                    {AVAILABLE_FIELDS\n                      .filter(field => field.category === category)\n                      .map((field) => (\n                        <div\n                          key={field.id}\n                          className={`p-2 rounded border-2 text-xs cursor-pointer transition-all ${getCategoryColor(field.category)} hover:shadow-md`}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"font-mono text-xs bg-white px-1 rounded\">\n                                {getCategoryIcon(field.type)}\n                              </span>\n                              <span className=\"font-medium\">{field.label}</span>\n                            </div>\n                            <div className=\"flex space-x-1\">\n                              {chartAreas\n                                .filter(area => area.accepts.includes(field.category))\n                                .map(area => (\n                                  <Button\n                                    key={area.id}\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    className=\"h-5 w-5 p-0\"\n                                    onClick={() => addFieldToArea(field, area.id)}\n                                    title={`Add to ${area.label}`}\n                                  >\n                                    <Plus className=\"h-3 w-3\" />\n                                  </Button>\n                                ))}\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Middle - Chart Type Selection */}\n      <div className=\"col-span-2\">\n        <Card className=\"h-full\">\n          <CardHeader>\n            <CardTitle className=\"text-sm\">Chart Type</CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-4\">\n            <div className=\"space-y-3\">\n              {CHART_TYPES.map(chartType => {\n                const Icon = chartType.icon;\n                return (\n                  <div\n                    key={chartType.id}\n                    className={`\n                      p-3 rounded-lg border-2 cursor-pointer transition-all\n                      ${selectedChartType === chartType.id \n                        ? `${chartType.color} border-current shadow-md` \n                        : 'border-gray-200 hover:border-gray-300'\n                      }\n                    `}\n                    onClick={() => {\n                      setSelectedChartType(chartType.id);\n                      const config = {\n                        type: chartType.id,\n                        xAxis: chartAreas.find(a => a.id === 'x-axis')?.field?.name || '',\n                        yAxis: chartAreas.find(a => a.id === 'y-axis')?.field?.name || '',\n                        groupBy: chartAreas.find(a => a.id === 'group-by')?.field?.name || '',\n                        title: generateChartTitle(chartAreas),\n                      };\n                      onChartChange(config);\n                    }}\n                  >\n                    <div className=\"flex flex-col items-center space-y-2\">\n                      <Icon className=\"h-6 w-6\" />\n                      <span className=\"text-xs font-medium text-center\">\n                        {chartType.name}\n                      </span>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Right - Chart Configuration Areas */}\n      <div className=\"col-span-7\">\n        <Card className=\"h-full\">\n          <CardHeader>\n            <CardTitle className=\"text-sm\">Chart Configuration</CardTitle>\n            <p className=\"text-xs text-gray-600\">\n              Drag fields from the left panel into the areas below to build your chart\n            </p>\n          </CardHeader>\n          <CardContent className=\"p-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              {chartAreas.map(area => (\n                <div key={area.id} className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-gray-700\">\n                    {area.label}\n                  </label>\n                  <div\n                    className={`\n                      min-h-[80px] p-4 rounded-lg border-2 border-dashed transition-colors\n                      ${area.field \n                        ? 'border-green-300 bg-green-50'\n                        : 'border-gray-300 bg-gray-50'\n                      }\n                    `}\n                  >\n                    {area.field ? (\n                      <div className={`p-2 rounded border ${getCategoryColor(area.field.category)}`}>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"font-mono text-xs bg-white px-1 rounded\">\n                              {getCategoryIcon(area.field.type)}\n                            </span>\n                            <span className=\"text-sm font-medium\">{area.field.label}</span>\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-5 w-5 p-0\"\n                            onClick={() => removeFieldFromArea(area.id)}\n                          >\n                            <X className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center justify-center h-full text-gray-500\">\n                        <div className=\"text-center\">\n                          <div className=\"text-sm\">Click + on field to add here</div>\n                          <div className=\"text-xs mt-1\">\n                            Accepts: {area.accepts.join(', ')}\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            {/* Configuration Summary */}\n            <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n              <h4 className=\"text-sm font-medium mb-2\">Current Configuration</h4>\n              <div className=\"space-y-1 text-xs\">\n                <div>Chart Type: <Badge variant=\"outline\">{selectedChartType}</Badge></div>\n                <div>X-Axis: <Badge variant=\"outline\">{chartAreas.find(a => a.id === 'x-axis')?.field?.label || 'None'}</Badge></div>\n                <div>Y-Axis: <Badge variant=\"outline\">{chartAreas.find(a => a.id === 'y-axis')?.field?.label || 'None'}</Badge></div>\n                {chartAreas.find(a => a.id === 'group-by')?.field && (\n                  <div>Group By: <Badge variant=\"outline\">{chartAreas.find(a => a.id === 'group-by')?.field?.label}</Badge></div>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\portfolio\\enhanced-portfolio-analytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\portfolio\\investments-table.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Settings' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":11}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport ColumnConfigurationDialog from \"./column-configuration-dialog\";\nimport { \n  Search, \n  Filter, \n  Download, \n  MoreHorizontal, \n  TrendingUp, \n  TrendingDown,\n  Eye,\n  Settings,\n  Calendar,\n  Tag,\n  FileText\n} from \"lucide-react\";\n\ntype Investment = {\n  id: string;\n  company: string;\n  sector: string;\n  stage: string;\n  entryDate: string;\n  totalInvestment: number;\n  ownership: number;\n  currentValue: number;\n  moic: number;\n  irr: number;\n  lastRound: string;\n  postMoneyValuation: number;\n  liquidationPreference: number;\n  tags: string[];\n  status: 'active' | 'exited' | 'written-off';\n};\n\nconst sampleInvestments: Investment[] = [\n  {\n    id: \"1\",\n    company: \"AlphaTech\",\n    sector: \"SaaS\",\n    stage: \"Series B\",\n    entryDate: \"2021-03-15\",\n    totalInvestment: 2500000,\n    ownership: 12.5,\n    currentValue: 8750000,\n    moic: 3.5,\n    irr: 65.2,\n    lastRound: \"Series B\",\n    postMoneyValuation: 70000000,\n    liquidationPreference: 2500000,\n    tags: [\"AI/ML\", \"B2B\"],\n    status: \"active\"\n  },\n  {\n    id: \"2\", \n    company: \"BetaCorp\",\n    sector: \"Fintech\",\n    stage: \"Series A\",\n    entryDate: \"2020-11-22\",\n    totalInvestment: 1800000,\n    ownership: 8.7,\n    currentValue: 4320000,\n    moic: 2.4,\n    irr: 45.1,\n    lastRound: \"Series A\",\n    postMoneyValuation: 49600000,\n    liquidationPreference: 1800000,\n    tags: [\"Payments\", \"B2C\"],\n    status: \"active\"\n  },\n  {\n    id: \"3\",\n    company: \"GammaSoft\",\n    sector: \"Healthcare\",\n    stage: \"Seed\",\n    entryDate: \"2022-06-10\",\n    totalInvestment: 750000,\n    ownership: 15.2,\n    currentValue: 1500000,\n    moic: 2.0,\n    irr: 38.7,\n    lastRound: \"Seed\",\n    postMoneyValuation: 9870000,\n    liquidationPreference: 750000,\n    tags: [\"Digital Health\", \"B2B\"],\n    status: \"active\"\n  },\n  {\n    id: \"4\",\n    company: \"DeltaFlow\",\n    sector: \"E-commerce\",\n    stage: \"Series C\",\n    entryDate: \"2019-08-14\",\n    totalInvestment: 5000000,\n    ownership: 6.3,\n    currentValue: 22500000,\n    moic: 4.5,\n    irr: 72.8,\n    lastRound: \"Series C\",\n    postMoneyValuation: 357140000,\n    liquidationPreference: 5000000,\n    tags: [\"Marketplace\", \"B2C\"],\n    status: \"active\"\n  },\n  {\n    id: \"5\",\n    company: \"EpsilonAI\",\n    sector: \"AI/ML\",\n    stage: \"Exited\",\n    entryDate: \"2018-12-03\",\n    totalInvestment: 3200000,\n    ownership: 9.1,\n    currentValue: 12800000,\n    moic: 4.0,\n    irr: 89.5,\n    lastRound: \"Acquisition\",\n    postMoneyValuation: 140659000,\n    liquidationPreference: 3200000,\n    tags: [\"Computer Vision\", \"B2B\"],\n    status: \"exited\"\n  }\n];\n\nexport default function InvestmentsTable() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedInvestments, setSelectedInvestments] = useState<string[]>([]);\n  const [sortBy, setSortBy] = useState<keyof Investment>(\"moic\");\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n  const [filterBy, setFilterBy] = useState({\n    sector: \"all\",\n    stage: \"all\",\n    status: \"all\"\n  });\n  const [selectedColumns, setSelectedColumns] = useState([\n    'name', 'sector', 'entryStage', 'investedToDate', 'currentOwnership', 'unrealizedFMV', 'currentMOIC', 'currentOrRealizedIRR', 'dealTags', 'status'\n  ]);\n\n  const filteredInvestments = sampleInvestments\n    .filter(investment => {\n      const matchesSearch = investment.company.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           investment.sector.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesSector = filterBy.sector === \"all\" || investment.sector === filterBy.sector;\n      const matchesStage = filterBy.stage === \"all\" || investment.stage === filterBy.stage;\n      const matchesStatus = filterBy.status === \"all\" || investment.status === filterBy.status;\n      \n      return matchesSearch && matchesSector && matchesStage && matchesStatus;\n    })\n    .sort((a, b) => {\n      const aValue = a[sortBy];\n      const bValue = b[sortBy];\n      \n      if (typeof aValue === 'number' && typeof bValue === 'number') {\n        return sortOrder === 'desc' ? bValue - aValue : aValue - bValue;\n      }\n      \n      return sortOrder === 'desc' \n        ? String(bValue).localeCompare(String(aValue))\n        : String(aValue).localeCompare(String(bValue));\n    });\n\n  const formatCurrency = (amount: number) => {\n    if (amount >= 1000000) {\n      return `$${(amount / 1000000).toFixed(1)}M`;\n    }\n    return `$${(amount / 1000).toFixed(0)}K`;\n  };\n\n  const formatPercentage = (value: number) => `${value.toFixed(1)}%`;\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      active: { color: 'bg-green-100 text-green-800 border-green-200', label: 'Active' },\n      exited: { color: 'bg-blue-100 text-blue-800 border-blue-200', label: 'Exited' },\n      'written-off': { color: 'bg-red-100 text-red-800 border-red-200', label: 'Written Off' }\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig];\n    return (\n      <Badge variant=\"outline\" className={config.color}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const handleSort = (column: keyof Investment) => {\n    if (sortBy === column) {\n      setSortOrder(sortOrder === 'desc' ? 'asc' : 'desc');\n    } else {\n      setSortBy(column);\n      setSortOrder('desc');\n    }\n  };\n\n  const getSortIcon = (column: keyof Investment) => {\n    if (sortBy !== column) return null;\n    return sortOrder === 'desc' ? <TrendingDown className=\"w-4 h-4\" /> : <TrendingUp className=\"w-4 h-4\" />;\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Investments Portfolio</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Calendar className=\"w-4 h-4 mr-1\" />\n              Time Machine\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Tag className=\"w-4 h-4 mr-1\" />\n              Deal Tags\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <FileText className=\"w-4 h-4 mr-1\" />\n              Custom Fields\n            </Button>\n            <ColumnConfigurationDialog \n              selectedColumns={selectedColumns}\n              onColumnsChange={setSelectedColumns}\n            />\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Filters and Search */}\n        <div className=\"flex items-center justify-between space-x-4\">\n          <div className=\"flex items-center space-x-3 flex-1\">\n            <div className=\"relative flex-1 max-w-sm\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search companies...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <Select value={filterBy.sector} onValueChange={(value) => setFilterBy(prev => ({ ...prev, sector: value }))}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"Sector\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Sectors</SelectItem>\n                <SelectItem value=\"SaaS\">SaaS</SelectItem>\n                <SelectItem value=\"Fintech\">Fintech</SelectItem>\n                <SelectItem value=\"Healthcare\">Healthcare</SelectItem>\n                <SelectItem value=\"E-commerce\">E-commerce</SelectItem>\n                <SelectItem value=\"AI/ML\">AI/ML</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={filterBy.stage} onValueChange={(value) => setFilterBy(prev => ({ ...prev, stage: value }))}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"Stage\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Stages</SelectItem>\n                <SelectItem value=\"Seed\">Seed</SelectItem>\n                <SelectItem value=\"Series A\">Series A</SelectItem>\n                <SelectItem value=\"Series B\">Series B</SelectItem>\n                <SelectItem value=\"Series C\">Series C</SelectItem>\n                <SelectItem value=\"Exited\">Exited</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={filterBy.status} onValueChange={(value) => setFilterBy(prev => ({ ...prev, status: value }))}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"exited\">Exited</SelectItem>\n                <SelectItem value=\"written-off\">Written Off</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Filter className=\"w-4 h-4 mr-1\" />\n              More Filters\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"w-4 h-4 mr-1\" />\n              Export\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <FileText className=\"w-4 h-4 mr-1\" />\n              Report\n            </Button>\n          </div>\n        </div>\n\n        {/* Summary Stats */}\n        <div className=\"grid grid-cols-4 gap-4 py-4 border-y border-gray-200\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">{filteredInvestments.length}</div>\n            <div className=\"text-sm text-gray-600\">Total Investments</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {formatCurrency(filteredInvestments.reduce((sum, inv) => sum + inv.totalInvestment, 0))}\n            </div>\n            <div className=\"text-sm text-gray-600\">Total Invested</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {formatCurrency(filteredInvestments.reduce((sum, inv) => sum + inv.currentValue, 0))}\n            </div>\n            <div className=\"text-sm text-gray-600\">Current Value</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {(filteredInvestments.reduce((sum, inv) => sum + inv.moic, 0) / filteredInvestments.length || 0).toFixed(1)}x\n            </div>\n            <div className=\"text-sm text-gray-600\">Avg MOIC</div>\n          </div>\n        </div>\n\n        {/* Investments Table */}\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-gray-200\">\n                <th className=\"text-left p-3\">\n                  <Checkbox \n                    checked={selectedInvestments.length === filteredInvestments.length}\n                    onCheckedChange={(checked) => {\n                      if (checked) {\n                        setSelectedInvestments(filteredInvestments.map(inv => inv.id));\n                      } else {\n                        setSelectedInvestments([]);\n                      }\n                    }}\n                  />\n                </th>\n                <th className=\"text-left p-3 font-medium cursor-pointer hover:bg-gray-50\" onClick={() => handleSort('company')}>\n                  <div className=\"flex items-center space-x-1\">\n                    <span>Company</span>\n                    {getSortIcon('company')}\n                  </div>\n                </th>\n                <th className=\"text-left p-3 font-medium cursor-pointer hover:bg-gray-50\" onClick={() => handleSort('sector')}>\n                  <div className=\"flex items-center space-x-1\">\n                    <span>Sector</span>\n                    {getSortIcon('sector')}\n                  </div>\n                </th>\n                <th className=\"text-left p-3 font-medium cursor-pointer hover:bg-gray-50\" onClick={() => handleSort('stage')}>\n                  <div className=\"flex items-center space-x-1\">\n                    <span>Stage</span>\n                    {getSortIcon('stage')}\n                  </div>\n                </th>\n                <th className=\"text-left p-3 font-medium cursor-pointer hover:bg-gray-50\" onClick={() => handleSort('totalInvestment')}>\n                  <div className=\"flex items-center space-x-1\">\n                    <span>Investment</span>\n                    {getSortIcon('totalInvestment')}\n                  </div>\n                </th>\n                <th className=\"text-left p-3 font-medium cursor-pointer hover:bg-gray-50\" onClick={() => handleSort('ownership')}>\n                  <div className=\"flex items-center space-x-1\">\n                    <span>Ownership</span>\n                    {getSortIcon('ownership')}\n                  </div>\n                </th>\n                <th className=\"text-left p-3 font-medium cursor-pointer hover:bg-gray-50\" onClick={() => handleSort('currentValue')}>\n                  <div className=\"flex items-center space-x-1\">\n                    <span>Current Value</span>\n                    {getSortIcon('currentValue')}\n                  </div>\n                </th>\n                <th className=\"text-left p-3 font-medium cursor-pointer hover:bg-gray-50\" onClick={() => handleSort('moic')}>\n                  <div className=\"flex items-center space-x-1\">\n                    <span>MOIC</span>\n                    {getSortIcon('moic')}\n                  </div>\n                </th>\n                <th className=\"text-left p-3 font-medium cursor-pointer hover:bg-gray-50\" onClick={() => handleSort('irr')}>\n                  <div className=\"flex items-center space-x-1\">\n                    <span>IRR</span>\n                    {getSortIcon('irr')}\n                  </div>\n                </th>\n                <th className=\"text-left p-3 font-medium\">Tags</th>\n                <th className=\"text-left p-3 font-medium\">Status</th>\n                <th className=\"text-left p-3 font-medium\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredInvestments.map((investment) => (\n                <tr key={investment.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                  <td className=\"p-3\">\n                    <Checkbox \n                      checked={selectedInvestments.includes(investment.id)}\n                      onCheckedChange={(checked) => {\n                        if (checked) {\n                          setSelectedInvestments(prev => [...prev, investment.id]);\n                        } else {\n                          setSelectedInvestments(prev => prev.filter(id => id !== investment.id));\n                        }\n                      }}\n                    />\n                  </td>\n                  <td className=\"p-3\">\n                    <div className=\"font-medium text-blue-600 cursor-pointer hover:text-blue-800\">\n                      {investment.company}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">{investment.entryDate}</div>\n                  </td>\n                  <td className=\"p-3 text-gray-700\">{investment.sector}</td>\n                  <td className=\"p-3\">\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {investment.stage}\n                    </Badge>\n                  </td>\n                  <td className=\"p-3 font-medium\">{formatCurrency(investment.totalInvestment)}</td>\n                  <td className=\"p-3\">{formatPercentage(investment.ownership)}</td>\n                  <td className=\"p-3 font-medium\">{formatCurrency(investment.currentValue)}</td>\n                  <td className=\"p-3\">\n                    <span className={`font-medium ${investment.moic >= 2 ? 'text-green-600' : investment.moic >= 1 ? 'text-yellow-600' : 'text-red-600'}`}>\n                      {investment.moic.toFixed(1)}x\n                    </span>\n                  </td>\n                  <td className=\"p-3\">\n                    <span className={`font-medium ${investment.irr >= 30 ? 'text-green-600' : investment.irr >= 15 ? 'text-yellow-600' : 'text-red-600'}`}>\n                      {formatPercentage(investment.irr)}\n                    </span>\n                  </td>\n                  <td className=\"p-3\">\n                    <div className=\"flex flex-wrap gap-1\">\n                      {investment.tags.slice(0, 2).map((tag, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                      {investment.tags.length > 2 && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          +{investment.tags.length - 2}\n                        </Badge>\n                      )}\n                    </div>\n                  </td>\n                  <td className=\"p-3\">{getStatusBadge(investment.status)}</td>\n                  <td className=\"p-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <Eye className=\"w-4 h-4\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <MoreHorizontal className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {/* Bulk Actions */}\n        {selectedInvestments.length > 0 && (\n          <div className=\"flex items-center justify-between bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <div className=\"text-sm text-blue-700\">\n              {selectedInvestments.length} investment{selectedInvestments.length > 1 ? 's' : ''} selected\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" size=\"sm\">\n                Export Selected\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                Add Tags\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                Update Status\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\portfolio\\moic-analysis.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'props' is defined but never used.","line":355,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":355,"endColumn":53}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { LineChart } from 'recharts/es6/chart/LineChart';\nimport { Line } from 'recharts/es6/cartesian/Line';\nimport { ScatterChart } from 'recharts/es6/chart/ScatterChart';\nimport { Scatter } from 'recharts/es6/cartesian/Scatter';\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { TrendingUp, Calculator, Target, Info } from \"lucide-react\";\n\ntype MOICData = {\n  companyName: string;\n  currentMOIC: number;\n  currentMOICOnInitial: number;\n  currentMOICOnDeployedReserves: number;\n  exitMOIC: number;\n  exitMOICOnInitial: number;\n  exitMOICOnFollowOns: number;\n  exitMOICOnPlannedReserves: number;\n  totalInvested: number;\n  initialInvestment: number;\n  deployedReserves: number;\n  plannedReserves: number;\n  sector: string;\n  stage: string;\n};\n\nconst sampleMOICData: MOICData[] = [\n  {\n    companyName: \"AlphaTech\",\n    currentMOIC: 3.5,\n    currentMOICOnInitial: 4.2,\n    currentMOICOnDeployedReserves: 2.8,\n    exitMOIC: 8.5,\n    exitMOICOnInitial: 10.2,\n    exitMOICOnFollowOns: 6.8,\n    exitMOICOnPlannedReserves: 5.5,\n    totalInvested: 2500000,\n    initialInvestment: 1000000,\n    deployedReserves: 1500000,\n    plannedReserves: 2000000,\n    sector: \"SaaS\",\n    stage: \"Series B\"\n  },\n  {\n    companyName: \"BetaCorp\",\n    currentMOIC: 2.4,\n    currentMOICOnInitial: 2.8,\n    currentMOICOnDeployedReserves: 1.9,\n    exitMOIC: 5.2,\n    exitMOICOnInitial: 6.1,\n    exitMOICOnFollowOns: 4.3,\n    exitMOICOnPlannedReserves: 3.8,\n    totalInvested: 1800000,\n    initialInvestment: 750000,\n    deployedReserves: 1050000,\n    plannedReserves: 1200000,\n    sector: \"Fintech\",\n    stage: \"Series A\"\n  },\n  {\n    companyName: \"GammaSoft\",\n    currentMOIC: 2.0,\n    currentMOICOnInitial: 2.0,\n    currentMOICOnDeployedReserves: 0,\n    exitMOIC: 4.5,\n    exitMOICOnInitial: 4.5,\n    exitMOICOnFollowOns: 0,\n    exitMOICOnPlannedReserves: 3.2,\n    totalInvested: 750000,\n    initialInvestment: 750000,\n    deployedReserves: 0,\n    plannedReserves: 500000,\n    sector: \"Healthcare\",\n    stage: \"Seed\"\n  },\n  {\n    companyName: \"DeltaFlow\",\n    currentMOIC: 4.5,\n    currentMOICOnInitial: 5.8,\n    currentMOICOnDeployedReserves: 3.2,\n    exitMOIC: 12.8,\n    exitMOICOnInitial: 16.5,\n    exitMOICOnFollowOns: 9.1,\n    exitMOICOnPlannedReserves: 7.8,\n    totalInvested: 5000000,\n    initialInvestment: 2000000,\n    deployedReserves: 3000000,\n    plannedReserves: 2500000,\n    sector: \"E-commerce\",\n    stage: \"Series C\"\n  }\n];\n\nconst moicDefinitions = [\n  {\n    name: \"Current MOIC\",\n    formula: \"(Unrealized FMV today + Realized Proceeds) / (Total Invested Capital to Date)\",\n    description: \"The MOIC today on total invested capital to date - the return for every $1 of investment\"\n  },\n  {\n    name: \"Current MOIC on Initial\",\n    formula: \"Current Share Price / Purchase Price at Entry Round\",\n    description: \"The MOIC on only the initial investment, excluding follow-on investments\"\n  },\n  {\n    name: \"Current MOIC on Deployed Reserves\",\n    formula: \"Current Share Price / Weighted Average Purchase Price Per Share in Follow-On Rounds\",\n    description: \"The performance of deployed reserves to date - return for every $1 of follow-on investments\"\n  },\n  {\n    name: \"Exit MOIC\",\n    formula: \"Expected Exit Proceeds / Expected Total Invested Capital By Exit\",\n    description: \"Expected MOIC at exit on total invested capital - expected return at exit for every $1\"\n  },\n  {\n    name: \"Exit MOIC on Initial\",\n    formula: \"Expected Exit Share Price / Purchase Price at Entry Round\",\n    description: \"Expected MOIC at exit on initial investment only - expected return for every $1 of initial investment\"\n  },\n  {\n    name: \"Exit MOIC on Follow-Ons\",\n    formula: \"Expected Exit Share Price / Weighted Average Purchase Price Per Share in Follow-On Rounds\",\n    description: \"Expected MOIC at exit on follow-on investments only - expected return for every $1 of follow-on investment\"\n  },\n  {\n    name: \"Exit MOIC on Planned Reserves\",\n    formula: \"Expected Exit Share Price / Weighted Average Purchase Price Per Share of Future Follow-Ons\",\n    description: \"Expected performance on future reserves - expected return for every $1 of future follow-on investments\"\n  }\n];\n\nexport default function MOICAnalysis() {\n  const [selectedMOICType, setSelectedMOICType] = useState(\"current\");\n\n  const formatCurrency = (amount: number) => {\n    if (amount >= 1000000) {\n      return `$${(amount / 1000000).toFixed(1)}M`;\n    }\n    return `$${(amount / 1000).toFixed(0)}K`;\n  };\n\n  const getMOICColor = (value: number) => {\n    if (value >= 5) return \"text-green-600\";\n    if (value >= 3) return \"text-blue-600\";\n    if (value >= 2) return \"text-yellow-600\";\n    return \"text-red-600\";\n  };\n\n  const getCurrentMOICChartData = () => {\n    return sampleMOICData.map(company => ({\n      name: company.companyName,\n      \"Current MOIC\": company.currentMOIC,\n      \"Current MOIC on Initial\": company.currentMOICOnInitial,\n      \"Current MOIC on Deployed Reserves\": company.currentMOICOnDeployedReserves || 0\n    }));\n  };\n\n  const getExitMOICChartData = () => {\n    return sampleMOICData.map(company => ({\n      name: company.companyName,\n      \"Exit MOIC\": company.exitMOIC,\n      \"Exit MOIC on Initial\": company.exitMOICOnInitial,\n      \"Exit MOIC on Follow-Ons\": company.exitMOICOnFollowOns || 0,\n      \"Exit MOIC on Planned Reserves\": company.exitMOICOnPlannedReserves\n    }));\n  };\n\n  const getPlannedReservesData = () => {\n    return sampleMOICData.map(company => ({\n      name: company.companyName,\n      plannedReserves: company.plannedReserves / 1000000,\n      expectedMOIC: company.exitMOICOnPlannedReserves,\n      sector: company.sector\n    }));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Investment MOICs Analysis</h2>\n          <p className=\"text-gray-600 mt-1\">\n            Track seven different MOIC calculations for comprehensive investment performance analysis\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Calculator className=\"w-4 h-4 mr-1\" />\n            MOIC Calculator\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <Target className=\"w-4 h-4 mr-1\" />\n            Benchmarks\n          </Button>\n        </div>\n      </div>\n\n      {/* MOIC Definitions Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Info className=\"w-5 h-5 mr-2 text-blue-600\" />\n            Seven MOIC Calculation Types\n          </CardTitle>\n          <p className=\"text-sm text-gray-600\">\n            Each MOIC represents a different and nuanced performance view of your investments\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {moicDefinitions.map((def, index) => (\n              <div key={index} className=\"p-4 border border-gray-200 rounded-lg\">\n                <div className=\"font-medium text-gray-900 mb-2\">{def.name}</div>\n                <div className=\"text-sm text-blue-600 font-mono mb-2 bg-blue-50 p-2 rounded\">\n                  {def.formula}\n                </div>\n                <div className=\"text-sm text-gray-600\">{def.description}</div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* MOIC Analysis Tabs */}\n      <Tabs value={selectedMOICType} onValueChange={setSelectedMOICType}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"current\">Current MOICs</TabsTrigger>\n          <TabsTrigger value=\"exit\">Exit MOICs</TabsTrigger>\n          <TabsTrigger value=\"reserves\">Planned Reserves</TabsTrigger>\n          <TabsTrigger value=\"comparison\">MOIC Comparison</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"current\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Current MOIC Performance</CardTitle>\n                <p className=\"text-sm text-gray-600\">\n                  Performance to date across different investment components\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={getCurrentMOICChartData()}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                      <XAxis dataKey=\"name\" stroke=\"#666\" fontSize={12} />\n                      <YAxis stroke=\"#666\" fontSize={12} />\n                      <Tooltip formatter={(value, name) => [`${value}x`, name]} />\n                      <Bar dataKey=\"Current MOIC\" fill=\"#3b82f6\" />\n                      <Bar dataKey=\"Current MOIC on Initial\" fill=\"#06b6d4\" />\n                      <Bar dataKey=\"Current MOIC on Deployed Reserves\" fill=\"#10b981\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Current MOIC Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {sampleMOICData.map((company, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                      <div>\n                        <div className=\"font-medium\">{company.companyName}</div>\n                        <div className=\"text-sm text-gray-600\">{company.sector} ΓÇó {company.stage}</div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className={`text-lg font-bold ${getMOICColor(company.currentMOIC)}`}>\n                          {company.currentMOIC.toFixed(1)}x\n                        </div>\n                        <div className=\"text-sm text-gray-600\">\n                          {formatCurrency(company.totalInvested)} invested\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"exit\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Expected Exit MOIC Performance</CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Projected performance at exit across different investment components\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={getExitMOICChartData()}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                    <XAxis dataKey=\"name\" stroke=\"#666\" fontSize={12} />\n                    <YAxis stroke=\"#666\" fontSize={12} />\n                    <Tooltip formatter={(value, name) => [`${value}x`, name]} />\n                    <Bar dataKey=\"Exit MOIC\" fill=\"#8b5cf6\" />\n                    <Bar dataKey=\"Exit MOIC on Initial\" fill=\"#f59e0b\" />\n                    <Bar dataKey=\"Exit MOIC on Follow-Ons\" fill=\"#ef4444\" />\n                    <Bar dataKey=\"Exit MOIC on Planned Reserves\" fill=\"#06d6a0\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"reserves\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Exit MOIC on Planned Reserves</CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Expected return for every $1 of future follow-on investments - key metric for optimal reserve deployment\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <ScatterChart data={getPlannedReservesData()}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                    <XAxis \n                      dataKey=\"plannedReserves\" \n                      stroke=\"#666\" \n                      fontSize={12}\n                      label={{ value: 'Planned Reserves ($M)', position: 'insideBottom', offset: -5 }}\n                    />\n                    <YAxis \n                      dataKey=\"expectedMOIC\"\n                      stroke=\"#666\" \n                      fontSize={12}\n                      label={{ value: 'Expected MOIC', angle: -90, position: 'insideLeft' }}\n                    />\n                    <Tooltip \n                      formatter={(value, name, props) => {\n                        if (name === 'expectedMOIC') return [`${value}x`, 'Expected MOIC on Reserves'];\n                        return [value, name];\n                      }}\n                      labelFormatter={(value, payload) => `${payload?.[0]?.payload?.name}`}\n                      contentStyle={{ \n                        backgroundColor: 'white',\n                        border: '1px solid #e5e7eb',\n                        borderRadius: '6px'\n                      }}\n                    />\n                    <Scatter dataKey=\"expectedMOIC\" fill=\"#3b82f6\" />\n                  </ScatterChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Top Performers - Planned Reserves</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {sampleMOICData\n                    .sort((a, b) => b.exitMOICOnPlannedReserves - a.exitMOICOnPlannedReserves)\n                    .map((company, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n                        <div>\n                          <div className=\"font-medium\">{company.companyName}</div>\n                          <div className=\"text-sm text-gray-600\">\n                            {formatCurrency(company.plannedReserves)} planned\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-lg font-bold text-green-600\">\n                            {company.exitMOICOnPlannedReserves.toFixed(1)}x\n                          </div>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Rank #{index + 1}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Reserve Optimization Insights</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-blue-50 rounded-lg\">\n                    <div className=\"flex items-center mb-2\">\n                      <TrendingUp className=\"w-5 h-5 text-blue-600 mr-2\" />\n                      <span className=\"font-medium text-blue-900\">Highest Expected Return</span>\n                    </div>\n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      {Math.max(...sampleMOICData.map(c => c.exitMOICOnPlannedReserves)).toFixed(1)}x\n                    </div>\n                    <div className=\"text-sm text-blue-700\">\n                      on {sampleMOICData.find(c => c.exitMOICOnPlannedReserves === Math.max(...sampleMOICData.map(d => d.exitMOICOnPlannedReserves)))?.companyName}\n                    </div>\n                  </div>\n                  \n                  <div className=\"p-4 bg-amber-50 rounded-lg\">\n                    <div className=\"font-medium text-amber-900 mb-2\">Average Expected MOIC</div>\n                    <div className=\"text-2xl font-bold text-amber-600\">\n                      {(sampleMOICData.reduce((sum, c) => sum + c.exitMOICOnPlannedReserves, 0) / sampleMOICData.length).toFixed(1)}x\n                    </div>\n                    <div className=\"text-sm text-amber-700\">across all planned reserves</div>\n                  </div>\n\n                  <div className=\"p-4 bg-gray-50 rounded-lg\">\n                    <div className=\"font-medium text-gray-900 mb-2\">Total Planned Reserves</div>\n                    <div className=\"text-2xl font-bold text-gray-700\">\n                      {formatCurrency(sampleMOICData.reduce((sum, c) => sum + c.plannedReserves, 0))}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">across {sampleMOICData.length} companies</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"comparison\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>MOIC Performance Comparison</CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Compare current vs expected performance across all MOIC types\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b border-gray-200\">\n                      <th className=\"text-left p-3 font-medium\">Company</th>\n                      <th className=\"text-left p-3 font-medium\">Current MOIC</th>\n                      <th className=\"text-left p-3 font-medium\">Current MOIC on Initial</th>\n                      <th className=\"text-left p-3 font-medium\">Exit MOIC</th>\n                      <th className=\"text-left p-3 font-medium\">Exit MOIC on Initial</th>\n                      <th className=\"text-left p-3 font-medium\">Exit MOIC on Planned Reserves</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {sampleMOICData.map((company, index) => (\n                      <tr key={index} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                        <td className=\"p-3\">\n                          <div className=\"font-medium\">{company.companyName}</div>\n                          <div className=\"text-sm text-gray-600\">{company.sector}</div>\n                        </td>\n                        <td className=\"p-3\">\n                          <span className={`font-medium ${getMOICColor(company.currentMOIC)}`}>\n                            {company.currentMOIC.toFixed(1)}x\n                          </span>\n                        </td>\n                        <td className=\"p-3\">\n                          <span className={`font-medium ${getMOICColor(company.currentMOICOnInitial)}`}>\n                            {company.currentMOICOnInitial.toFixed(1)}x\n                          </span>\n                        </td>\n                        <td className=\"p-3\">\n                          <span className={`font-medium ${getMOICColor(company.exitMOIC)}`}>\n                            {company.exitMOIC.toFixed(1)}x\n                          </span>\n                        </td>\n                        <td className=\"p-3\">\n                          <span className={`font-medium ${getMOICColor(company.exitMOICOnInitial)}`}>\n                            {company.exitMOICOnInitial.toFixed(1)}x\n                          </span>\n                        </td>\n                        <td className=\"p-3\">\n                          <span className={`font-medium ${getMOICColor(company.exitMOICOnPlannedReserves)}`}>\n                            {company.exitMOICOnPlannedReserves.toFixed(1)}x\n                          </span>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\portfolio\\portfolio-analytics-dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":20,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'useQuery' is defined but never used.","line":22,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Separator' is defined but never used.","line":27,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsContent' is defined but never used.","line":28,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'Plus' is defined but never used.","line":50,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":7},{"ruleId":"no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":55,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'Building2' is defined but never used.","line":56,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":57,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'currentFund' is assigned a value but never used.","line":216,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":216,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedView' is assigned a value but never used.","line":218,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":218,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'setSelectedView' is assigned a value but never used.","line":218,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":218,"endColumn":39}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { LineChart } from 'recharts/es6/chart/LineChart';\nimport { Line } from 'recharts/es6/cartesian/Line';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { PieChart } from 'recharts/es6/chart/PieChart';\nimport { Pie } from 'recharts/es6/polar/Pie';\nimport { Cell } from 'recharts/es6/component/Cell';\nimport { Area } from 'recharts/es6/cartesian/Area';\nimport { AreaChart } from 'recharts/es6/chart/AreaChart';\nimport { useState, useEffect } from 'react';\nimport { useFundContext } from '@/contexts/FundContext';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Search,\n  Filter,\n  Download,\n  Save,\n  Plus,\n  BarChart3,\n  LineChart as LineChartIcon,\n  PieChart as PieChartIcon,\n  TrendingUp,\n  Calendar,\n  Building2,\n  DollarSign,\n  FileText,\n  Settings,\n  Share,\n  Eye,\n  Trash2,\n} from 'lucide-react';\n\ninterface PortfolioCompany {\n  id: number;\n  name: string;\n  sector: string;\n  stage: string;\n  totalInvested: number;\n  currentValuation: number;\n  lastRoundDate: string;\n  revenue: number;\n  grossMargin: number;\n  burnRate: number;\n  cashInBank: number;\n  employees: number;\n  arrGrowth: number;\n  mrr: number;\n}\n\ninterface AnalyticsView {\n  id: string;\n  name: string;\n  description: string;\n  chartType: 'bar' | 'line' | 'pie' | 'area';\n  xAxis: string;\n  yAxis: string;\n  groupBy?: string;\n  filters: Record<string, any>;\n  notes: string;\n  createdAt: string;\n  lastModified: string;\n}\n\ninterface ChartConfig {\n  type: 'bar' | 'line' | 'pie' | 'area';\n  title: string;\n  xAxis: string;\n  yAxis: string;\n  groupBy?: string;\n  filters: Record<string, any>;\n}\n\nconst CHART_TYPES = [\n  { value: 'bar', label: 'Bar Chart', icon: BarChart3 },\n  { value: 'line', label: 'Line Chart', icon: LineChartIcon },\n  { value: 'pie', label: 'Pie Chart', icon: PieChartIcon },\n  { value: 'area', label: 'Area Chart', icon: TrendingUp },\n];\n\nconst METRICS = [\n  { value: 'revenue', label: 'Revenue', type: 'currency' },\n  { value: 'grossMargin', label: 'Gross Margin', type: 'percentage' },\n  { value: 'burnRate', label: 'Burn Rate', type: 'currency' },\n  { value: 'cashInBank', label: 'Cash in Bank', type: 'currency' },\n  { value: 'currentValuation', label: 'Current Valuation', type: 'currency' },\n  { value: 'totalInvested', label: 'Total Invested', type: 'currency' },\n  { value: 'employees', label: 'Employee Count', type: 'number' },\n  { value: 'arrGrowth', label: 'ARR Growth', type: 'percentage' },\n  { value: 'mrr', label: 'Monthly Recurring Revenue', type: 'currency' },\n];\n\nconst DIMENSIONS = [\n  { value: 'name', label: 'Company Name' },\n  { value: 'sector', label: 'Sector' },\n  { value: 'stage', label: 'Stage' },\n  { value: 'quarter', label: 'Time Quarter' },\n  { value: 'year', label: 'Year' },\n];\n\nconst SAMPLE_COMPANIES: PortfolioCompany[] = [\n  {\n    id: 1,\n    name: 'TechFlow',\n    sector: 'SaaS',\n    stage: 'Series A',\n    totalInvested: 5000000,\n    currentValuation: 25000000,\n    lastRoundDate: '2024-01-15',\n    revenue: 8500000,\n    grossMargin: 0.78,\n    burnRate: 450000,\n    cashInBank: 12000000,\n    employees: 65,\n    arrGrowth: 0.32,\n    mrr: 708333,\n  },\n  {\n    id: 2,\n    name: 'DataVision',\n    sector: 'AI/ML',\n    stage: 'Seed',\n    totalInvested: 2000000,\n    currentValuation: 12000000,\n    lastRoundDate: '2023-11-20',\n    revenue: 3200000,\n    grossMargin: 0.65,\n    burnRate: 280000,\n    cashInBank: 6500000,\n    employees: 28,\n    arrGrowth: 0.45,\n    mrr: 266667,\n  },\n  {\n    id: 3,\n    name: 'FinanceHub',\n    sector: 'FinTech',\n    stage: 'Series B',\n    totalInvested: 12000000,\n    currentValuation: 65000000,\n    lastRoundDate: '2024-03-10',\n    revenue: 18500000,\n    grossMargin: 0.72,\n    burnRate: 850000,\n    cashInBank: 28000000,\n    employees: 145,\n    arrGrowth: 0.28,\n    mrr: 1541667,\n  },\n  {\n    id: 4,\n    name: 'HealthTech Pro',\n    sector: 'Healthcare',\n    stage: 'Series A',\n    totalInvested: 7500000,\n    currentValuation: 35000000,\n    lastRoundDate: '2023-09-05',\n    revenue: 12000000,\n    grossMargin: 0.68,\n    burnRate: 650000,\n    cashInBank: 18500000,\n    employees: 92,\n    arrGrowth: 0.38,\n    mrr: 1000000,\n  },\n  {\n    id: 5,\n    name: 'EduPlatform',\n    sector: 'EdTech',\n    stage: 'Seed',\n    totalInvested: 1500000,\n    currentValuation: 8000000,\n    lastRoundDate: '2024-02-28',\n    revenue: 1800000,\n    grossMargin: 0.82,\n    burnRate: 185000,\n    cashInBank: 3200000,\n    employees: 18,\n    arrGrowth: 0.55,\n    mrr: 150000,\n  },\n];\n\nexport default function PortfolioAnalyticsDashboard() {\n  const { currentFund } = useFundContext();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedView, setSelectedView] = useState<string>('all-views');\n  const [savedViews, setSavedViews] = useState<AnalyticsView[]>([]);\n  const [currentChart, setCurrentChart] = useState<ChartConfig>({\n    type: 'bar',\n    title: 'Revenue by Company',\n    xAxis: 'name',\n    yAxis: 'revenue',\n    filters: {},\n  });\n  const [showCreateView, setShowCreateView] = useState(false);\n  const [viewNotes, setViewNotes] = useState('');\n  const [displayMode, setDisplayMode] = useState<'results' | 'chart' | 'both'>('both');\n\n  // Mock data for portfolio companies - replace with actual API call\n  const portfolioData = SAMPLE_COMPANIES;\n\n  const formatCurrency = (value: number) => {\n    if (value >= 1000000000) return `$${(value / 1000000000).toFixed(1)}B`;\n    if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;\n    if (value >= 1000) return `$${(value / 1000).toFixed(0)}K`;\n    return `$${value.toLocaleString()}`;\n  };\n\n  const formatPercentage = (value: number) => `${(value * 100).toFixed(1)}%`;\n\n  const formatValue = (value: number, type: string) => {\n    switch (type) {\n      case 'currency': return formatCurrency(value);\n      case 'percentage': return formatPercentage(value);\n      default: return value.toLocaleString();\n    }\n  };\n\n  const getChartData = () => {\n    return portfolioData.map(company => ({\n      ...company,\n      [currentChart.xAxis]: company[currentChart.xAxis as keyof PortfolioCompany],\n      [currentChart.yAxis]: company[currentChart.yAxis as keyof PortfolioCompany],\n    }));\n  };\n\n  const renderChart = () => {\n    const data = getChartData();\n    const yMetric = METRICS.find(m => m.value === currentChart.yAxis);\n    \n    switch (currentChart.type) {\n      case 'bar':\n        return (\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart data={data}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey={currentChart.xAxis} />\n              <YAxis tickFormatter={(value) => formatValue(value, yMetric?.type || 'number')} />\n              <Tooltip \n                formatter={(value: number) => [formatValue(value, yMetric?.type || 'number'), yMetric?.label]}\n              />\n              <Bar dataKey={currentChart.yAxis} fill=\"#3B82F6\" />\n            </BarChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'line':\n        return (\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart data={data}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey={currentChart.xAxis} />\n              <YAxis tickFormatter={(value) => formatValue(value, yMetric?.type || 'number')} />\n              <Tooltip \n                formatter={(value: number) => [formatValue(value, yMetric?.type || 'number'), yMetric?.label]}\n              />\n              <Line type=\"monotone\" dataKey={currentChart.yAxis} stroke=\"#3B82F6\" strokeWidth={2} />\n            </LineChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'area':\n        return (\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <AreaChart data={data}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey={currentChart.xAxis} />\n              <YAxis tickFormatter={(value) => formatValue(value, yMetric?.type || 'number')} />\n              <Tooltip \n                formatter={(value: number) => [formatValue(value, yMetric?.type || 'number'), yMetric?.label]}\n              />\n              <Area type=\"monotone\" dataKey={currentChart.yAxis} stroke=\"#3B82F6\" fill=\"#3B82F6\" fillOpacity={0.3} />\n            </AreaChart>\n          </ResponsiveContainer>\n        );\n      \n      case 'pie':\n        return (\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <PieChart>\n              <Pie\n                data={data}\n                dataKey={currentChart.yAxis}\n                nameKey={currentChart.xAxis}\n                cx=\"50%\"\n                cy=\"50%\"\n                outerRadius={120}\n                fill=\"#3B82F6\"\n                label={(props) => {\n                  // Handle the case where props might have undefined properties\n                  const name = props.name ?? '';\n                  const value = props.value ?? 0;\n                  return `${name}: ${formatValue(value, yMetric?.type ? yMetric.type : 'number')}`;\n                }}\n              >\n                {data.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={`hsl(${210 + index * 30}, 70%, 50%)`} />\n                ))}\n              </Pie>\n              <Tooltip formatter={(value: number) => formatValue(value, yMetric?.type || 'number')} />\n            </PieChart>\n          </ResponsiveContainer>\n        );\n      \n      default:\n        return null;\n    }\n  };\n\n  const saveCurrentView = () => {\n    const newView: AnalyticsView = {\n      id: `view-${Date.now()}`,\n      name: currentChart.title,\n      description: `${currentChart.type} chart showing ${currentChart.yAxis} by ${currentChart.xAxis}`,\n      chartType: currentChart.type,\n      xAxis: currentChart.xAxis,\n      yAxis: currentChart.yAxis,\n      groupBy: currentChart.groupBy,\n      filters: currentChart.filters,\n      notes: viewNotes,\n      createdAt: new Date().toISOString(),\n      lastModified: new Date().toISOString(),\n    };\n    \n    setSavedViews(prev => [...prev, newView]);\n    setShowCreateView(false);\n    setViewNotes('');\n  };\n\n  const loadSavedView = (view: AnalyticsView) => {\n    setCurrentChart({\n      type: view.chartType,\n      title: view.name,\n      xAxis: view.xAxis,\n      yAxis: view.yAxis,\n      groupBy: view.groupBy,\n      filters: view.filters,\n    });\n    setViewNotes(view.notes);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Portfolio Analytics</h1>\n            <p className=\"text-gray-600 mt-1\">Explore, visualize, and analyze your portfolio company data</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Share className=\"h-4 w-4 mr-2\" />\n              Share\n            </Button>\n            <Dialog open={showCreateView} onOpenChange={setShowCreateView}>\n              <DialogTrigger asChild>\n                <Button size=\"sm\">\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  Save View\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Save Analytics View</DialogTitle>\n                  <DialogDescription>\n                    Save this configuration to quickly access it later\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <Input\n                    placeholder=\"View name\"\n                    value={currentChart.title}\n                    onChange={(e) => setCurrentChart(prev => ({ ...prev, title: e.target.value }))}\n                  />\n                  <Textarea\n                    placeholder=\"Add notes about this analysis (optional)\"\n                    value={viewNotes}\n                    onChange={(e) => setViewNotes(e.target.value)}\n                    rows={3}\n                  />\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button variant=\"outline\" onClick={() => setShowCreateView(false)}>\n                      Cancel\n                    </Button>\n                    <Button onClick={saveCurrentView}>\n                      Save View\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex h-[calc(100vh-120px)]\">\n        {/* Left Sidebar - Data Sources & Saved Views */}\n        <div className=\"w-80 bg-white border-r border-gray-200 p-4 overflow-y-auto\">\n          <div className=\"space-y-6\">\n            {/* Search */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search data sources...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            {/* Topics/Data Sources */}\n            <div>\n              <h3 className=\"text-sm font-medium text-gray-700 mb-3\">TOPICS</h3>\n              <div className=\"space-y-2\">\n                <div className=\"p-2 rounded bg-blue-50 border border-blue-200\">\n                  <div className=\"font-medium text-blue-900\">Portfolio Overview</div>\n                  <div className=\"text-xs text-blue-600\">Latest company metrics</div>\n                </div>\n                <div className=\"p-2 rounded hover:bg-gray-50 border\">\n                  <div className=\"font-medium\">Financial Performance</div>\n                  <div className=\"text-xs text-gray-600\">Revenue, margins, burn rates</div>\n                </div>\n                <div className=\"p-2 rounded hover:bg-gray-50 border\">\n                  <div className=\"font-medium\">Growth Metrics</div>\n                  <div className=\"text-xs text-gray-600\">ARR, MRR, user growth</div>\n                </div>\n                <div className=\"p-2 rounded hover:bg-gray-50 border\">\n                  <div className=\"font-medium\">Operational Data</div>\n                  <div className=\"text-xs text-gray-600\">Team size, cash runway</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Saved Views */}\n            <div>\n              <h3 className=\"text-sm font-medium text-gray-700 mb-3\">SAVED VIEWS</h3>\n              <div className=\"space-y-2\">\n                {savedViews.map((view) => (\n                  <div\n                    key={view.id}\n                    className=\"p-2 rounded border hover:bg-gray-50 cursor-pointer\"\n                    onClick={() => loadSavedView(view)}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"font-medium text-sm\">{view.name}</div>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"h-6 w-6 p-0\">\n                        <Trash2 className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                    <div className=\"text-xs text-gray-600\">{view.description}</div>\n                    {view.notes && (\n                      <div className=\"text-xs text-gray-500 mt-1 italic\">\"{view.notes}\"</div>\n                    )}\n                  </div>\n                ))}\n                \n                {savedViews.length === 0 && (\n                  <div className=\"text-center py-4 text-gray-500\">\n                    <Eye className=\"h-8 w-8 mx-auto mb-2 text-gray-300\" />\n                    <div className=\"text-sm\">No saved views yet</div>\n                    <div className=\"text-xs\">Create custom analyses to save them here</div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Main Content Area */}\n        <div className=\"flex-1 p-6 overflow-y-auto\">\n          {/* Chart Builder Controls */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Chart Builder</span>\n                <div className=\"flex items-center space-x-2\">\n                  <Tabs value={displayMode} onValueChange={(value: any) => setDisplayMode(value)}>\n                    <TabsList>\n                      <TabsTrigger value=\"results\">Results</TabsTrigger>\n                      <TabsTrigger value=\"chart\">Chart</TabsTrigger>\n                      <TabsTrigger value=\"both\">Both</TabsTrigger>\n                    </TabsList>\n                  </Tabs>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Settings className=\"h-4 w-4 mr-2\" />\n                    Options\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Filter className=\"h-4 w-4 mr-2\" />\n                    Filters\n                  </Button>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-4 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Chart Type</label>\n                  <Select value={currentChart.type} onValueChange={(value: any) => \n                    setCurrentChart(prev => ({ ...prev, type: value }))\n                  }>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {CHART_TYPES.map((type) => {\n                        const Icon = type.icon;\n                        return (\n                          <SelectItem key={type.value} value={type.value}>\n                            <div className=\"flex items-center\">\n                              <Icon className=\"h-4 w-4 mr-2\" />\n                              {type.label}\n                            </div>\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">X-Axis</label>\n                  <Select value={currentChart.xAxis} onValueChange={(value) => \n                    setCurrentChart(prev => ({ ...prev, xAxis: value }))\n                  }>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {DIMENSIONS.map((dim) => (\n                        <SelectItem key={dim.value} value={dim.value}>\n                          {dim.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Y-Axis</label>\n                  <Select value={currentChart.yAxis} onValueChange={(value) => \n                    setCurrentChart(prev => ({ ...prev, yAxis: value }))\n                  }>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {METRICS.map((metric) => (\n                        <SelectItem key={metric.value} value={metric.value}>\n                          {metric.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Title</label>\n                  <Input\n                    value={currentChart.title}\n                    onChange={(e) => setCurrentChart(prev => ({ ...prev, title: e.target.value }))}\n                    placeholder=\"Chart title\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Results and Chart */}\n          <div className=\"grid gap-6\" style={{ \n            gridTemplateColumns: displayMode === 'both' ? '1fr 1fr' : '1fr' \n          }}>\n            {/* Data Table */}\n            {(displayMode === 'results' || displayMode === 'both') && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Portfolio Company Data</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full border-collapse\">\n                      <thead>\n                        <tr className=\"border-b\">\n                          <th className=\"text-left p-2 font-medium\">Company</th>\n                          <th className=\"text-left p-2 font-medium\">Sector</th>\n                          <th className=\"text-left p-2 font-medium\">Stage</th>\n                          <th className=\"text-left p-2 font-medium\">Revenue</th>\n                          <th className=\"text-left p-2 font-medium\">Valuation</th>\n                          <th className=\"text-left p-2 font-medium\">Margin</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {portfolioData.map((company) => (\n                          <tr key={company.id} className=\"border-b hover:bg-gray-50\">\n                            <td className=\"p-2 font-medium\">{company.name}</td>\n                            <td className=\"p-2\">\n                              <Badge variant=\"outline\">{company.sector}</Badge>\n                            </td>\n                            <td className=\"p-2\">\n                              <Badge variant=\"secondary\">{company.stage}</Badge>\n                            </td>\n                            <td className=\"p-2\">{formatCurrency(company.revenue)}</td>\n                            <td className=\"p-2\">{formatCurrency(company.currentValuation)}</td>\n                            <td className=\"p-2\">{formatPercentage(company.grossMargin)}</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Chart Display */}\n            {(displayMode === 'chart' || displayMode === 'both') && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>{currentChart.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {renderChart()}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Notes Section */}\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <FileText className=\"h-5 w-5 mr-2\" />\n                Analysis Notes\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Textarea\n                placeholder=\"Add qualitative insights, context, or explanations for this analysis...\"\n                value={viewNotes}\n                onChange={(e) => setViewNotes(e.target.value)}\n                rows={4}\n                className=\"w-full\"\n              />\n              <div className=\"mt-2 text-sm text-gray-500\">\n                Notes will be saved with your analysis views and included in exports.\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\portfolio\\portfolio-table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\portfolio\\recent-activity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\portfolio\\saved-views-manager.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used.","line":7,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used.","line":7,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'view' is defined but never used.","line":63,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'view' is defined but never used.","line":64,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":78},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":65,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'view' is defined but never used.","line":65,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":58},{"ruleId":"no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":66,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":28}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport {\n  Save,\n  Eye,\n  MoreVertical,\n  Edit,\n  Trash2,\n  Share,\n  Download,\n  Calendar,\n  User,\n  FileText,\n  BarChart3,\n  LineChart,\n  PieChart,\n  TrendingUp,\n} from 'lucide-react';\n\ninterface AnalyticsView {\n  id: string;\n  name: string;\n  description: string;\n  chartType: 'bar' | 'line' | 'pie' | 'area';\n  xAxis: string;\n  yAxis: string;\n  groupBy?: string;\n  filters: Record<string, any>;\n  notes: string;\n  createdAt: string;\n  lastModified: string;\n  createdBy: string;\n  isShared: boolean;\n  tags: string[];\n}\n\ninterface SavedViewsManagerProps {\n  views: AnalyticsView[];\n  onViewLoad: (view: AnalyticsView) => void;\n  onViewSave: (view: Omit<AnalyticsView, 'id' | 'createdAt' | 'lastModified'>) => void;\n  onViewUpdate: (id: string, view: Partial<AnalyticsView>) => void;\n  onViewDelete: (id: string) => void;\n  currentView?: Partial<AnalyticsView>;\n}\n\nconst CHART_TYPE_ICONS = {\n  bar: BarChart3,\n  line: LineChart,\n  pie: PieChart,\n  area: TrendingUp,\n};\n\nexport default function SavedViewsManager({\n  views,\n  onViewLoad,\n  onViewSave,\n  onViewUpdate,\n  onViewDelete,\n  currentView,\n}: SavedViewsManagerProps) {\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [editingView, setEditingView] = useState<AnalyticsView | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  \n  // Form states\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    notes: '',\n    tags: [] as string[],\n    isShared: false,\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      description: '',\n      notes: '',\n      tags: [],\n      isShared: false,\n    });\n  };\n\n  const handleSaveView = () => {\n    if (!currentView || !formData.name.trim()) return;\n    \n    const newView: Omit<AnalyticsView, 'id' | 'createdAt' | 'lastModified'> = {\n      name: formData.name,\n      description: formData.description,\n      chartType: currentView.chartType || 'bar',\n      xAxis: currentView.xAxis || '',\n      yAxis: currentView.yAxis || '',\n      groupBy: currentView.groupBy,\n      filters: currentView.filters || {},\n      notes: formData.notes,\n      createdBy: 'Current User', // Replace with actual user\n      isShared: formData.isShared,\n      tags: formData.tags,\n    };\n    \n    onViewSave(newView);\n    setShowSaveDialog(false);\n    resetForm();\n  };\n\n  const handleEditView = () => {\n    if (!editingView || !formData.name.trim()) return;\n    \n    onViewUpdate(editingView.id, {\n      name: formData.name,\n      description: formData.description,\n      notes: formData.notes,\n      tags: formData.tags,\n      isShared: formData.isShared,\n      lastModified: new Date().toISOString(),\n    });\n    \n    setShowEditDialog(false);\n    setEditingView(null);\n    resetForm();\n  };\n\n  const startEdit = (view: AnalyticsView) => {\n    setEditingView(view);\n    setFormData({\n      name: view.name,\n      description: view.description,\n      notes: view.notes,\n      tags: view.tags,\n      isShared: view.isShared,\n    });\n    setShowEditDialog(true);\n  };\n\n  const filteredViews = views.filter(view => {\n    const matchesSearch = view.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         view.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesTags = selectedTags.length === 0 || \n                       selectedTags.some(tag => view.tags.includes(tag));\n    return matchesSearch && matchesTags;\n  });\n\n  const allTags = Array.from(new Set(views.flatMap(view => view.tags)));\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n    });\n  };\n\n  const getChartTypeIcon = (type: string) => {\n    const Icon = CHART_TYPE_ICONS[type as keyof typeof CHART_TYPE_ICONS] || BarChart3;\n    return Icon;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Save Button */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-lg font-semibold\">Saved Analytics Views</h2>\n          <p className=\"text-sm text-gray-600\">\n            Manage your custom analysis configurations and insights\n          </p>\n        </div>\n        \n        <Dialog open={showSaveDialog} onOpenChange={setShowSaveDialog}>\n          <DialogTrigger asChild>\n            <Button>\n              <Save className=\"h-4 w-4 mr-2\" />\n              Save Current View\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Save Analytics View</DialogTitle>\n              <DialogDescription>\n                Save your current chart configuration for quick access later\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <Input\n                placeholder=\"View name (required)\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n              />\n              <Input\n                placeholder=\"Description (optional)\"\n                value={formData.description}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              />\n              <Textarea\n                placeholder=\"Analysis notes and insights...\"\n                value={formData.notes}\n                onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                rows={3}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setShowSaveDialog(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={handleSaveView} disabled={!formData.name.trim()}>\n                  Save View\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"flex-1\">\n          <Input\n            placeholder=\"Search saved views...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n        {allTags.length > 0 && (\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-gray-600\">Tags:</span>\n            {allTags.map(tag => (\n              <Badge\n                key={tag}\n                variant={selectedTags.includes(tag) ? \"default\" : \"outline\"}\n                className=\"cursor-pointer\"\n                onClick={() => {\n                  setSelectedTags(prev =>\n                    prev.includes(tag)\n                      ? prev.filter(t => t !== tag)\n                      : [...prev, tag]\n                  );\n                }}\n              >\n                {tag}\n              </Badge>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Views Grid */}\n      <div className=\"grid gap-4\">\n        {filteredViews.length === 0 ? (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <Eye className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No saved views yet</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Create custom chart configurations to save them for quick access\n              </p>\n              <Button onClick={() => setShowSaveDialog(true)}>\n                <Save className=\"h-4 w-4 mr-2\" />\n                Save Your First View\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredViews.map((view) => {\n            const ChartIcon = getChartTypeIcon(view.chartType);\n            return (\n              <Card key={view.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start space-x-3 flex-1\">\n                      <div className=\"bg-blue-100 p-2 rounded\">\n                        <ChartIcon className=\"h-5 w-5 text-blue-600\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-medium text-gray-900 mb-1\">{view.name}</h3>\n                        {view.description && (\n                          <p className=\"text-sm text-gray-600 mb-2\">{view.description}</p>\n                        )}\n                        \n                        <div className=\"flex items-center space-x-4 text-xs text-gray-500 mb-2\">\n                          <div className=\"flex items-center\">\n                            <Calendar className=\"h-3 w-3 mr-1\" />\n                            {formatDate(view.createdAt)}\n                          </div>\n                          <div className=\"flex items-center\">\n                            <User className=\"h-3 w-3 mr-1\" />\n                            {view.createdBy}\n                          </div>\n                          {view.notes && (\n                            <div className=\"flex items-center\">\n                              <FileText className=\"h-3 w-3 mr-1\" />\n                              Has notes\n                            </div>\n                          )}\n                        </div>\n\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {view.chartType} chart\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {view.yAxis} by {view.xAxis}\n                          </Badge>\n                          {view.isShared && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              Shared\n                            </Badge>\n                          )}\n                        </div>\n\n                        {view.tags.length > 0 && (\n                          <div className=\"mt-2 flex flex-wrap gap-1\">\n                            {view.tags.map(tag => (\n                              <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                                {tag}\n                              </Badge>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => onViewLoad(view)}\n                      >\n                        <Eye className=\"h-4 w-4 mr-1\" />\n                        Load\n                      </Button>\n                      \n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MoreVertical className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem onClick={() => startEdit(view)}>\n                            <Edit className=\"h-4 w-4 mr-2\" />\n                            Edit\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Share className=\"h-4 w-4 mr-2\" />\n                            Share\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <Download className=\"h-4 w-4 mr-2\" />\n                            Export\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator />\n                          <DropdownMenuItem\n                            onClick={() => onViewDelete(view.id)}\n                            className=\"text-red-600\"\n                          >\n                            <Trash2 className=\"h-4 w-4 mr-2\" />\n                            Delete\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                  </div>\n                  \n                  {view.notes && (\n                    <div className=\"mt-3 p-3 bg-gray-50 rounded text-sm\">\n                      <div className=\"font-medium text-gray-700 mb-1\">Analysis Notes:</div>\n                      <div className=\"text-gray-600\">{view.notes}</div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })\n        )}\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Analytics View</DialogTitle>\n            <DialogDescription>\n              Update the details for this saved view\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <Input\n              placeholder=\"View name (required)\"\n              value={formData.name}\n              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n            />\n            <Input\n              placeholder=\"Description (optional)\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n            />\n            <Textarea\n              placeholder=\"Analysis notes and insights...\"\n              value={formData.notes}\n              onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n              rows={3}\n            />\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={() => setShowEditDialog(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleEditView} disabled={!formData.name.trim()}>\n                Update View\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\portfolio\\simple-chart-builder.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used.","line":26,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":30}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { \n  BarChart3, \n  LineChart, \n  PieChart, \n  TrendingUp\n} from 'lucide-react';\n\ninterface ChartBuilderProps {\n  onChartChange: (config: any) => void;\n}\n\nconst CHART_TYPES = [\n  { value: 'bar', label: 'Bar Chart', icon: BarChart3 },\n  { value: 'line', label: 'Line Chart', icon: LineChart },\n  { value: 'pie', label: 'Pie Chart', icon: PieChart },\n  { value: 'area', label: 'Area Chart', icon: TrendingUp },\n];\n\nconst METRICS = [\n  { value: 'revenue', label: 'Revenue' },\n  { value: 'grossMargin', label: 'Gross Margin' },\n  { value: 'burnRate', label: 'Burn Rate' },\n  { value: 'cashInBank', label: 'Cash in Bank' },\n  { value: 'currentValuation', label: 'Current Valuation' },\n  { value: 'totalInvested', label: 'Total Invested' },\n  { value: 'employees', label: 'Employee Count' },\n  { value: 'arrGrowth', label: 'ARR Growth' },\n  { value: 'mrr', label: 'Monthly Recurring Revenue' },\n];\n\nconst DIMENSIONS = [\n  { value: 'name', label: 'Company Name' },\n  { value: 'sector', label: 'Sector' },\n  { value: 'stage', label: 'Stage' },\n  { value: 'quarter', label: 'Time Quarter' },\n];\n\nexport default function SimpleChartBuilder({ onChartChange }: ChartBuilderProps) {\n  const [chartType, setChartType] = useState('bar');\n  const [xAxis, setXAxis] = useState('name');\n  const [yAxis, setYAxis] = useState('revenue');\n  const [title, setTitle] = useState('Revenue by Company');\n\n  const updateChart = (updates: any) => {\n    const config = {\n      type: chartType,\n      xAxis,\n      yAxis,\n      title,\n      ...updates,\n    };\n    \n    onChartChange(config);\n  };\n\n  const handleChartTypeChange = (value: string) => {\n    setChartType(value);\n    updateChart({ type: value });\n  };\n\n  const handleXAxisChange = (value: string) => {\n    setXAxis(value);\n    updateChart({ xAxis: value });\n  };\n\n  const handleYAxisChange = (value: string) => {\n    setYAxis(value);\n    updateChart({ yAxis: value });\n  };\n\n  const handleTitleChange = (value: string) => {\n    setTitle(value);\n    updateChart({ title: value });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Chart Configuration */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Chart Configuration</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Chart Type</label>\n              <Select value={chartType} onValueChange={handleChartTypeChange}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {CHART_TYPES.map((type) => {\n                    const Icon = type.icon;\n                    return (\n                      <SelectItem key={type.value} value={type.value}>\n                        <div className=\"flex items-center\">\n                          <Icon className=\"h-4 w-4 mr-2\" />\n                          {type.label}\n                        </div>\n                      </SelectItem>\n                    );\n                  })}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">X-Axis</label>\n              <Select value={xAxis} onValueChange={handleXAxisChange}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {DIMENSIONS.map((dim) => (\n                    <SelectItem key={dim.value} value={dim.value}>\n                      {dim.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Y-Axis</label>\n              <Select value={yAxis} onValueChange={handleYAxisChange}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {METRICS.map((metric) => (\n                    <SelectItem key={metric.value} value={metric.value}>\n                      {metric.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">Title</label>\n              <Input\n                value={title}\n                onChange={(e) => handleTitleChange(e.target.value)}\n                placeholder=\"Chart title\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Current Configuration Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Current Configuration</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-2\">\n            <Badge variant=\"outline\">\n              Chart: {CHART_TYPES.find(t => t.value === chartType)?.label}\n            </Badge>\n            <Badge variant=\"outline\">\n              X-Axis: {DIMENSIONS.find(d => d.value === xAxis)?.label}\n            </Badge>\n            <Badge variant=\"outline\">\n              Y-Axis: {METRICS.find(m => m.value === yAxis)?.label}\n            </Badge>\n            <Badge variant=\"outline\">\n              Title: {title}\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\portfolio\\tag-performance-analysis.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":19,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used.","line":21,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":56},{"ruleId":"no-unused-vars","severity":2,"message":"'name' is defined but never used.","line":233,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":233,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'name' is defined but never used.","line":253,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":253,"endColumn":51}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { PieChart } from 'recharts/es6/chart/PieChart';\nimport { Pie } from 'recharts/es6/polar/Pie';\nimport { Cell } from 'recharts/es6/component/Cell';\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tag, TrendingUp, DollarSign, Target, BarChart3 } from 'lucide-react';\n\ninterface TagPerformance {\n  tag: string;\n  count: number;\n  totalInvested: number;\n  currentValue: number;\n  moic: number;\n  irr: number;\n  averageInvestment: number;\n  topPerformer: string;\n  performance: 'excellent' | 'good' | 'average' | 'poor';\n}\n\n// Mock data based on the Tactyc image showing tag performance\nconst MOCK_TAG_PERFORMANCE: TagPerformance[] = [\n  {\n    tag: 'Asia',\n    count: 3,\n    totalInvested: 2608042,\n    currentValue: 4100000,\n    moic: 1.57,\n    irr: 18.5,\n    averageInvestment: 869347,\n    topPerformer: 'AsiaFlow Systems',\n    performance: 'good'\n  },\n  {\n    tag: 'General',\n    count: 5,\n    totalInvested: 2500000,\n    currentValue: 3750000,\n    moic: 1.50,\n    irr: 15.2,\n    averageInvestment: 500000,\n    topPerformer: 'GenTech Solutions',\n    performance: 'good'\n  },\n  {\n    tag: 'Female Founder',\n    count: 4,\n    totalInvested: 2428571,\n    currentValue: 3400000,\n    moic: 1.40,\n    irr: 22.3,\n    averageInvestment: 607143,\n    topPerformer: 'FoundHer Inc',\n    performance: 'excellent'\n  },\n  {\n    tag: 'Social',\n    count: 2,\n    totalInvested: 2378437,\n    currentValue: 2850000,\n    moic: 1.20,\n    irr: 8.9,\n    averageInvestment: 1189219,\n    topPerformer: 'SocialGood Co',\n    performance: 'average'\n  },\n  {\n    tag: 'Minority Founder',\n    count: 3,\n    totalInvested: 2068499,\n    currentValue: 2750000,\n    moic: 1.33,\n    irr: 19.7,\n    averageInvestment: 689500,\n    topPerformer: 'DiverseTech',\n    performance: 'good'\n  },\n  {\n    tag: 'Governance',\n    count: 2,\n    totalInvested: 1988051,\n    currentValue: 2200000,\n    moic: 1.11,\n    irr: 5.2,\n    averageInvestment: 994026,\n    topPerformer: 'GovTech Pro',\n    performance: 'poor'\n  },\n  {\n    tag: 'Environmental',\n    count: 2,\n    totalInvested: 1850000,\n    currentValue: 2650000,\n    moic: 1.43,\n    irr: 16.8,\n    averageInvestment: 925000,\n    topPerformer: 'EcoInnovate',\n    performance: 'good'\n  },\n  {\n    tag: 'AI/ML',\n    count: 6,\n    totalInvested: 3200000,\n    currentValue: 5800000,\n    moic: 1.81,\n    irr: 28.4,\n    averageInvestment: 533333,\n    topPerformer: 'AI Dynamics',\n    performance: 'excellent'\n  }\n];\n\ninterface TagPerformanceAnalysisProps {\n  className?: string;\n}\n\nexport default function TagPerformanceAnalysis({ className = '' }: TagPerformanceAnalysisProps) {\n  const [selectedMetric, setSelectedMetric] = useState<'invested' | 'moic' | 'irr' | 'count'>('invested');\n  const [chartType, setChartType] = useState<'bar' | 'pie'>('bar');\n\n  const getPerformanceColor = (performance: string) => {\n    switch (performance) {\n      case 'excellent': return 'bg-green-100 text-green-800 border-green-200';\n      case 'good': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'average': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'poor': return 'bg-red-100 text-red-800 border-red-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    if (value >= 1000000) {\n      return `$${(value / 1000000).toFixed(1)}M`;\n    }\n    if (value >= 1000) {\n      return `$${(value / 1000).toFixed(0)}K`;\n    }\n    return `$${value.toLocaleString()}`;\n  };\n\n  const getChartData = () => {\n    return MOCK_TAG_PERFORMANCE.map(tag => ({\n      name: tag.tag,\n      value: selectedMetric === 'invested' ? tag.totalInvested :\n             selectedMetric === 'moic' ? tag.moic :\n             selectedMetric === 'irr' ? tag.irr :\n             tag.count,\n      display: selectedMetric === 'invested' ? formatCurrency(tag.totalInvested) :\n               selectedMetric === 'moic' ? `${tag.moic.toFixed(2)}x` :\n               selectedMetric === 'irr' ? `${tag.irr.toFixed(1)}%` :\n               tag.count.toString()\n    }));\n  };\n\n  const getMetricLabel = () => {\n    switch (selectedMetric) {\n      case 'invested': return 'Invested to Date';\n      case 'moic': return 'MOIC';\n      case 'irr': return 'IRR (%)';\n      case 'count': return 'Number of Companies';\n      default: return 'Invested to Date';\n    }\n  };\n\n  const COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4', '#84cc16', '#f97316'];\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Tag className=\"h-5 w-5 text-blue-600\" />\n          <h3 className=\"text-lg font-semibold\">Tag Performance Analysis</h3>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Select value={selectedMetric} onValueChange={(value: any) => setSelectedMetric(value)}>\n            <SelectTrigger className=\"w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"invested\">Invested Amount</SelectItem>\n              <SelectItem value=\"moic\">MOIC</SelectItem>\n              <SelectItem value=\"irr\">IRR</SelectItem>\n              <SelectItem value=\"count\">Company Count</SelectItem>\n            </SelectContent>\n          </Select>\n          <Select value={chartType} onValueChange={(value: any) => setChartType(value)}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"bar\">Bar Chart</SelectItem>\n              <SelectItem value=\"pie\">Pie Chart</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">{getMetricLabel()}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-80\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              {chartType === 'bar' ? (\n                <BarChart data={getChartData()} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"name\" \n                    angle={-45}\n                    textAnchor=\"end\"\n                    height={80}\n                    fontSize={12}\n                  />\n                  <YAxis fontSize={12} />\n                  <Tooltip \n                    formatter={(value, name) => [getChartData().find(d => d.value === value)?.display || value, getMetricLabel()]}\n                  />\n                  <Bar dataKey=\"value\" fill=\"#3b82f6\" />\n                </BarChart>\n              ) : (\n                <PieChart>\n                  <Pie\n                    data={getChartData()}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={({ name, display }) => `${name}: ${display}`}\n                    outerRadius={100}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                  >\n                    {getChartData().map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip formatter={(value, name) => [getChartData().find(d => d.value === value)?.display || value, getMetricLabel()]} />\n                </PieChart>\n              )}\n            </ResponsiveContainer>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Performance Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base\">Tag Performance Summary</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {MOCK_TAG_PERFORMANCE.map((tag) => (\n              <div key={tag.tag} className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50\">\n                <div className=\"flex items-center space-x-4\">\n                  <Badge variant=\"outline\" className=\"font-medium\">\n                    {tag.tag}\n                  </Badge>\n                  <Badge className={getPerformanceColor(tag.performance)}>\n                    {tag.performance}\n                  </Badge>\n                  <div className=\"text-sm text-gray-600\">\n                    {tag.count} companies\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-6 text-sm\">\n                  <div className=\"text-center\">\n                    <div className=\"font-medium\">{formatCurrency(tag.totalInvested)}</div>\n                    <div className=\"text-gray-500\">Invested</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"font-medium\">{tag.moic.toFixed(2)}x</div>\n                    <div className=\"text-gray-500\">MOIC</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"font-medium\">{tag.irr.toFixed(1)}%</div>\n                    <div className=\"text-gray-500\">IRR</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"font-medium\">{formatCurrency(tag.averageInvestment)}</div>\n                    <div className=\"text-gray-500\">Avg Investment</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"font-medium text-blue-600\">{tag.topPerformer}</div>\n                    <div className=\"text-gray-500\">Top Performer</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Key Insights */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <div className=\"font-medium\">Best Performing Tag</div>\n                <div className=\"text-sm text-gray-600\">AI/ML (1.81x MOIC)</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <DollarSign className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <div className=\"font-medium\">Highest Investment</div>\n                <div className=\"text-sm text-gray-600\">AI/ML ($3.2M)</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Target className=\"h-5 w-5 text-purple-600\" />\n              <div>\n                <div className=\"font-medium\">Most Diversified</div>\n                <div className=\"text-sm text-gray-600\">AI/ML (6 companies)</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\recycling\\exit-proceeds-recycling.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":11}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Calendar, \n  DollarSign, \n  TrendingUp, \n  ArrowRightLeft, \n  Info, \n  AlertTriangle,\n  CheckCircle,\n  Clock\n} from \"lucide-react\";\n\ninterface ExitEvent {\n  id: string;\n  company: string;\n  exitDate: string;\n  exitProceeds: number;\n  recycledAmount: number;\n  availableToRecycle: number;\n  status: 'recycled' | 'pending' | 'missed';\n  recyclingWindow: number; // months\n}\n\ninterface InvestmentEvent {\n  id: string;\n  company: string;\n  investmentDate: string;\n  amount: number;\n  round: string;\n  fundingSource: 'initial' | 'recycled' | 'follow-on';\n}\n\ninterface RecyclingConditions {\n  hasExitsInInvestmentWindow: boolean;\n  hasExitsInRecyclingWindow: boolean;\n  hasInvestmentsToFund: boolean;\n  recyclingEnabled: boolean;\n}\n\nexport default function ExitProceedsRecycling() {\n  const [recyclingEnabled, setRecyclingEnabled] = useState(true);\n  const [recyclingWindow, setRecyclingWindow] = useState(3); // months\n  const [selectedTab, setSelectedTab] = useState('overview');\n\n  // Sample data for demonstration\n  const exitEvents: ExitEvent[] = [\n    {\n      id: \"1\",\n      company: \"TechCorp\",\n      exitDate: \"Jan 2025\",\n      exitProceeds: 2500000,\n      recycledAmount: 1200000,\n      availableToRecycle: 1300000,\n      status: 'recycled',\n      recyclingWindow: 3\n    },\n    {\n      id: \"2\",\n      company: \"DataFlow Inc\",\n      exitDate: \"Mar 2025\",\n      exitProceeds: 4200000,\n      recycledAmount: 800000,\n      availableToRecycle: 3400000,\n      status: 'pending',\n      recyclingWindow: 3\n    },\n    {\n      id: \"3\",\n      company: \"AI Solutions\",\n      exitDate: \"May 2025\",\n      exitProceeds: 1800000,\n      recycledAmount: 0,\n      availableToRecycle: 1800000,\n      status: 'missed',\n      recyclingWindow: 3\n    }\n  ];\n\n  const investmentEvents: InvestmentEvent[] = [\n    {\n      id: \"1\",\n      company: \"NewCo Alpha\",\n      investmentDate: \"Jan 2025\",\n      amount: 1200000,\n      round: \"Seed\",\n      fundingSource: 'recycled'\n    },\n    {\n      id: \"2\",\n      company: \"StartupBeta\",\n      investmentDate: \"Mar 2025\",\n      amount: 800000,\n      round: \"Series A\",\n      fundingSource: 'recycled'\n    },\n    {\n      id: \"3\",\n      company: \"VentureCo\",\n      investmentDate: \"Jun 2025\",\n      amount: 1500000,\n      round: \"Seed\",\n      fundingSource: 'initial'\n    }\n  ];\n\n  const recyclingConditions: RecyclingConditions = {\n    hasExitsInInvestmentWindow: true,\n    hasExitsInRecyclingWindow: true,\n    hasInvestmentsToFund: true,\n    recyclingEnabled: recyclingEnabled\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'recycled': return 'bg-green-100 text-green-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'missed': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'recycled': return <CheckCircle className=\"w-3 h-3\" />;\n      case 'pending': return <Clock className=\"w-3 h-3\" />;\n      case 'missed': return <AlertTriangle className=\"w-3 h-3\" />;\n      default: return null;\n    }\n  };\n\n  const totalExitProceeds = exitEvents.reduce((sum, exit) => sum + exit.exitProceeds, 0);\n  const totalRecycled = exitEvents.reduce((sum, exit) => sum + exit.recycledAmount, 0);\n  const totalAvailable = exitEvents.reduce((sum, exit) => sum + exit.availableToRecycle, 0);\n  const recyclingEfficiency = totalExitProceeds > 0 ? (totalRecycled / totalExitProceeds) * 100 : 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header and Controls */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-xl font-bold flex items-center\">\n                <ArrowRightLeft className=\"w-6 h-6 mr-2 text-blue-600\" />\n                Exit Proceeds Recycling\n              </CardTitle>\n              <p className=\"text-gray-600 mt-2\">\n                Manage and track the recycling of exit proceeds into new investments\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Switch \n                  checked={recyclingEnabled} \n                  onCheckedChange={setRecyclingEnabled}\n                  id=\"recycling-enabled\"\n                />\n                <Label htmlFor=\"recycling-enabled\">Enable Recycling</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Label htmlFor=\"recycling-window\">Window (months):</Label>\n                <Input\n                  id=\"recycling-window\"\n                  type=\"number\"\n                  value={recyclingWindow}\n                  onChange={(e) => setRecyclingWindow(parseInt(e.target.value) || 3)}\n                  className=\"w-20 h-8 text-center\"\n                  min={1}\n                  max={12}\n                />\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Recycling Conditions Alert */}\n      <Alert className={`border-2 ${recyclingConditions.hasExitsInInvestmentWindow && recyclingConditions.hasExitsInRecyclingWindow && recyclingConditions.hasInvestmentsToFund ? 'border-green-200 bg-green-50' : 'border-orange-200 bg-orange-50'}`}>\n        <Info className=\"h-4 w-4\" />\n        <AlertDescription>\n          <div className=\"font-semibold mb-2\">Recycling Conditions Status</div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n            <div className={`flex items-center ${recyclingConditions.hasExitsInInvestmentWindow ? 'text-green-700' : 'text-red-700'}`}>\n              {recyclingConditions.hasExitsInInvestmentWindow ? <CheckCircle className=\"w-4 h-4 mr-2\" /> : <AlertTriangle className=\"w-4 h-4 mr-2\" />}\n              Exits within investment window\n            </div>\n            <div className={`flex items-center ${recyclingConditions.hasExitsInRecyclingWindow ? 'text-green-700' : 'text-red-700'}`}>\n              {recyclingConditions.hasExitsInRecyclingWindow ? <CheckCircle className=\"w-4 h-4 mr-2\" /> : <AlertTriangle className=\"w-4 h-4 mr-2\" />}\n              Exits within recycling window\n            </div>\n            <div className={`flex items-center ${recyclingConditions.hasInvestmentsToFund ? 'text-green-700' : 'text-red-700'}`}>\n              {recyclingConditions.hasInvestmentsToFund ? <CheckCircle className=\"w-4 h-4 mr-2\" /> : <AlertTriangle className=\"w-4 h-4 mr-2\" />}\n              Investments available to fund\n            </div>\n          </div>\n        </AlertDescription>\n      </Alert>\n\n      {/* Recycling Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n          <div className=\"text-2xl font-bold text-blue-600\">\n            {formatCurrency(totalExitProceeds)}\n          </div>\n          <div className=\"text-sm text-blue-700 mt-1\">Total Exit Proceeds</div>\n          <div className=\"text-xs text-gray-600 mt-2\">\n            Available for recycling\n          </div>\n        </div>\n        \n        <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n          <div className=\"text-2xl font-bold text-green-600\">\n            {formatCurrency(totalRecycled)}\n          </div>\n          <div className=\"text-sm text-green-700 mt-1\">Successfully Recycled</div>\n          <div className=\"text-xs text-gray-600 mt-2\">\n            Into new investments\n          </div>\n        </div>\n        \n        <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n          <div className=\"text-2xl font-bold text-orange-600\">\n            {formatCurrency(totalAvailable)}\n          </div>\n          <div className=\"text-sm text-orange-700 mt-1\">Available to Recycle</div>\n          <div className=\"text-xs text-gray-600 mt-2\">\n            Pending opportunities\n          </div>\n        </div>\n        \n        <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n          <div className=\"text-2xl font-bold text-purple-600\">\n            {recyclingEfficiency.toFixed(1)}%\n          </div>\n          <div className=\"text-sm text-purple-700 mt-1\">Recycling Efficiency</div>\n          <div className=\"text-xs text-gray-600 mt-2\">\n            Proceeds successfully recycled\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs value={selectedTab} onValueChange={setSelectedTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"exits\">Exit Events</TabsTrigger>\n          <TabsTrigger value=\"investments\">Investment Events</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recycling Methodology</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold text-gray-900\">Recycling Conditions</h4>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"p-3 bg-blue-50 rounded-lg\">\n                      <strong>Condition 1:</strong> Exits must occur within the investment window for initial and follow-on investments.\n                    </div>\n                    <div className=\"p-3 bg-blue-50 rounded-lg\">\n                      <strong>Condition 2:</strong> Exits must occur within the defined recycling window ({recyclingWindow} months).\n                    </div>\n                    <div className=\"p-3 bg-blue-50 rounded-lg\">\n                      <strong>Condition 3:</strong> Only the minimum amount needed for investments in the same period will be recycled.\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold text-gray-900\">Recycling Rules</h4>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"p-3 bg-green-50 rounded-lg\">\n                      <strong>Same Month Rule:</strong> Proceeds are recycled if there's an investment in the same month as the exit.\n                    </div>\n                    <div className=\"p-3 bg-yellow-50 rounded-lg\">\n                      <strong>Minimum Recycling:</strong> Only recycle the amount needed to fund investments, not all proceeds.\n                    </div>\n                    <div className=\"p-3 bg-purple-50 rounded-lg\">\n                      <strong>Manual Override:</strong> Update the \"Exit Proceeds Recycled\" row to manually adjust recycling amounts.\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"exits\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Exit Events and Recycling Status</CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                Track exit proceeds and their recycling status\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b bg-gray-50\">\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Company</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Exit Date</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">Exit Proceeds</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">Recycled Amount</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">Available</th>\n                      <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Status</th>\n                      <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {exitEvents.map((exit) => (\n                      <tr key={exit.id} className=\"border-b hover:bg-gray-50\">\n                        <td className=\"py-3 px-4 font-medium\">{exit.company}</td>\n                        <td className=\"py-3 px-4\">{exit.exitDate}</td>\n                        <td className=\"py-3 px-4 text-right font-medium\">\n                          {formatCurrency(exit.exitProceeds)}\n                        </td>\n                        <td className=\"py-3 px-4 text-right\">\n                          <Input\n                            type=\"number\"\n                            value={exit.recycledAmount}\n                            className=\"w-32 h-8 text-right bg-yellow-50 border-yellow-200\"\n                          />\n                        </td>\n                        <td className=\"py-3 px-4 text-right font-medium text-green-600\">\n                          {formatCurrency(exit.availableToRecycle)}\n                        </td>\n                        <td className=\"py-3 px-4 text-center\">\n                          <Badge className={`${getStatusColor(exit.status)} capitalize`}>\n                            {getStatusIcon(exit.status)}\n                            <span className=\"ml-1\">{exit.status}</span>\n                          </Badge>\n                        </td>\n                        <td className=\"py-3 px-4 text-center\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            Update\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"investments\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Investment Events and Funding Sources</CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                View how investments are funded from recycled proceeds\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b bg-gray-50\">\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Company</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Investment Date</th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Round</th>\n                      <th className=\"text-right py-3 px-4 font-medium text-gray-600\">Amount</th>\n                      <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Funding Source</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {investmentEvents.map((investment) => (\n                      <tr key={investment.id} className=\"border-b hover:bg-gray-50\">\n                        <td className=\"py-3 px-4 font-medium\">{investment.company}</td>\n                        <td className=\"py-3 px-4\">{investment.investmentDate}</td>\n                        <td className=\"py-3 px-4\">{investment.round}</td>\n                        <td className=\"py-3 px-4 text-right font-medium\">\n                          {formatCurrency(investment.amount)}\n                        </td>\n                        <td className=\"py-3 px-4 text-center\">\n                          <Badge \n                            className={`capitalize ${\n                              investment.fundingSource === 'recycled' \n                                ? 'bg-green-100 text-green-800' \n                                : investment.fundingSource === 'follow-on'\n                                ? 'bg-blue-100 text-blue-800'\n                                : 'bg-gray-100 text-gray-800'\n                            }`}\n                          >\n                            {investment.fundingSource === 'recycled' && <ArrowRightLeft className=\"w-3 h-3 mr-1\" />}\n                            {investment.fundingSource === 'follow-on' && <TrendingUp className=\"w-3 h-3 mr-1\" />}\n                            {investment.fundingSource === 'initial' && <DollarSign className=\"w-3 h-3 mr-1\" />}\n                            {investment.fundingSource.replace('-', ' ')}\n                          </Badge>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-between\">\n        <Button variant=\"outline\">\n          Export Recycling Report\n        </Button>\n        <div className=\"space-x-2\">\n          <Button variant=\"outline\">\n            Reset Recycling\n          </Button>\n          <Button>\n            Save Changes\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\reports\\mobile-tear-sheet.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ExternalLink' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'Building' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'newCommentary' is defined but never used.","line":86,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":86,"endColumn":45}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion';\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from '@/components/ui/sheet';\nimport { \n  ExternalLink, \n  Edit3, \n  Save, \n  Download, \n  History, \n  Phone, \n  Mail,\n  Globe,\n  MapPin,\n  Calendar,\n  DollarSign,\n  Users,\n  Building,\n  TrendingUp\n} from 'lucide-react';\n\ninterface MobileTearSheetProps {\n  tearSheet: {\n    id: string;\n    companyName: string;\n    sector: string;\n    stage: string;\n    lastModified: string;\n    modifiedBy: string;\n    version: number;\n    status: 'draft' | 'review' | 'published';\n    data: {\n      website: string;\n      fiscalYear: string;\n      location: string;\n      investmentLead: string;\n      percentOfFund: string;\n      classification: string;\n      collection: string;\n      expectedExitValue: string;\n      founderMaturity: string;\n      boardComposition: string[];\n      coInvestors: string[];\n      dealTeamNotes: string;\n      factorRating: string;\n      health: string;\n      likeCompany: string;\n      parentEntity: string;\n      proRata: string;\n      revenueNotes: string;\n    };\n    commentary: {\n      id: string;\n      content: string;\n      author: string;\n      createdAt: string;\n      version: number;\n      previousAnswer?: string;\n    };\n    contacts: {\n      name: string;\n      role: string;\n      initial: string;\n      color: string;\n    }[];\n  };\n  onCommentaryUpdate: (newCommentary: string) => void;\n  onExport: () => void;\n}\n\nexport default function MobileTearSheet({ tearSheet, onCommentaryUpdate, onExport }: MobileTearSheetProps) {\n  const [isEditingCommentary, setIsEditingCommentary] = useState(false);\n  const [commentaryDraft, setCommentaryDraft] = useState(tearSheet.commentary.content);\n\n  const handleSaveCommentary = () => {\n    onCommentaryUpdate(commentaryDraft);\n    setIsEditingCommentary(false);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'published': return 'bg-green-100 text-green-800';\n      case 'review': return 'bg-yellow-100 text-yellow-800';\n      case 'draft': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getHealthColor = (health: string) => {\n    switch (health.toLowerCase()) {\n      case 'healthy': return 'bg-green-100 text-green-800';\n      case \"jury's out\": return 'bg-yellow-100 text-yellow-800';\n      case 'concern': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pb-6\">\n      {/* Mobile Header */}\n      <div className=\"bg-white border-b border-gray-200 px-4 py-4 sticky top-0 z-10\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-lg\">\n                {tearSheet.companyName.charAt(0)}\n              </span>\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold\">{tearSheet.companyName}</h1>\n              <div className=\"flex items-center space-x-2\">\n                <Badge className={getStatusColor(tearSheet.status)}>\n                  {tearSheet.status}\n                </Badge>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  v{tearSheet.version}\n                </Badge>\n              </div>\n            </div>\n          </div>\n          <Sheet>\n            <SheetTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"h-4 w-4\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"bottom\" className=\"h-[300px]\">\n              <SheetHeader>\n                <SheetTitle>Actions</SheetTitle>\n              </SheetHeader>\n              <div className=\"grid grid-cols-2 gap-3 mt-4\">\n                <Button variant=\"outline\" onClick={onExport}>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export PDF\n                </Button>\n                <Button variant=\"outline\">\n                  <History className=\"h-4 w-4 mr-2\" />\n                  View History\n                </Button>\n                <Button variant=\"outline\">\n                  <Mail className=\"h-4 w-4 mr-2\" />\n                  Share\n                </Button>\n                <Button variant=\"outline\">\n                  <Edit3 className=\"h-4 w-4 mr-2\" />\n                  Edit\n                </Button>\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n\n      <div className=\"px-4 py-4 space-y-4\">\n        {/* Company Overview Card */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-base\">Company Overview</CardTitle>\n              <Button variant=\"ghost\" size=\"sm\">\n                <Globe className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"grid grid-cols-2 gap-3 text-sm\">\n              <div>\n                <div className=\"flex items-center text-gray-500 text-xs mb-1\">\n                  <Calendar className=\"h-3 w-3 mr-1\" />\n                  FISCAL YEAR\n                </div>\n                <div className=\"font-medium\">{tearSheet.data.fiscalYear}</div>\n              </div>\n              <div>\n                <div className=\"flex items-center text-gray-500 text-xs mb-1\">\n                  <MapPin className=\"h-3 w-3 mr-1\" />\n                  LOCATION\n                </div>\n                <div className=\"font-medium\">{tearSheet.data.location}</div>\n              </div>\n              <div>\n                <div className=\"flex items-center text-gray-500 text-xs mb-1\">\n                  <Users className=\"h-3 w-3 mr-1\" />\n                  INVESTMENT LEAD\n                </div>\n                <div className=\"font-medium\">{tearSheet.data.investmentLead}</div>\n              </div>\n              <div>\n                <div className=\"flex items-center text-gray-500 text-xs mb-1\">\n                  <DollarSign className=\"h-3 w-3 mr-1\" />\n                  % OF FUND\n                </div>\n                <div className=\"font-medium\">{tearSheet.data.percentOfFund}</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Key Metrics Card */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base\">Key Metrics</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div className=\"p-3 bg-gray-50 rounded-lg\">\n                <div className=\"text-xs text-gray-500 uppercase mb-1\">Classification</div>\n                <Badge variant=\"outline\">{tearSheet.data.classification}</Badge>\n              </div>\n              <div className=\"p-3 bg-gray-50 rounded-lg\">\n                <div className=\"text-xs text-gray-500 uppercase mb-1\">Expected Exit</div>\n                <div className=\"font-medium\">{tearSheet.data.expectedExitValue}</div>\n              </div>\n              <div className=\"p-3 bg-gray-50 rounded-lg\">\n                <div className=\"text-xs text-gray-500 uppercase mb-1\">Health</div>\n                <Badge className={getHealthColor(tearSheet.data.health)}>\n                  {tearSheet.data.health}\n                </Badge>\n              </div>\n              <div className=\"p-3 bg-gray-50 rounded-lg\">\n                <div className=\"text-xs text-gray-500 uppercase mb-1\">Pro Rata</div>\n                <div className=\"font-medium text-sm\">{tearSheet.data.proRata}</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contacts Card */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base\">Contacts</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {tearSheet.contacts.map((contact, idx) => (\n                <div key={idx} className=\"flex items-center space-x-3 p-2 rounded-lg bg-gray-50\">\n                  <div className={`w-10 h-10 rounded-full ${contact.color} text-white text-sm flex items-center justify-center font-medium`}>\n                    {contact.initial}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium\">{contact.name}</div>\n                    {contact.role && <div className=\"text-sm text-gray-500\">{contact.role}</div>}\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <Phone className=\"h-4 w-4\" />\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\">\n                      <Mail className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Expandable Sections */}\n        <Accordion type=\"multiple\" className=\"space-y-2\">\n          {/* Board Composition */}\n          <AccordionItem value=\"board\" className=\"border rounded-lg px-4 bg-white\">\n            <AccordionTrigger className=\"text-sm font-medium\">\n              Board Composition ({tearSheet.data.boardComposition.length})\n            </AccordionTrigger>\n            <AccordionContent>\n              <div className=\"flex flex-wrap gap-2 pt-2\">\n                {tearSheet.data.boardComposition.map((member, idx) => (\n                  <Badge key={idx} variant=\"secondary\" className=\"text-xs\">\n                    {member}\n                  </Badge>\n                ))}\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n\n          {/* Co-Investors */}\n          <AccordionItem value=\"investors\" className=\"border rounded-lg px-4 bg-white\">\n            <AccordionTrigger className=\"text-sm font-medium\">\n              Co-Investors ({tearSheet.data.coInvestors.length})\n            </AccordionTrigger>\n            <AccordionContent>\n              <div className=\"flex flex-wrap gap-2 pt-2\">\n                {tearSheet.data.coInvestors.map((investor, idx) => (\n                  <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                    {investor}\n                  </Badge>\n                ))}\n              </div>\n            </AccordionContent>\n          </AccordionItem>\n\n          {/* Deal Team Notes */}\n          {tearSheet.data.dealTeamNotes && (\n            <AccordionItem value=\"notes\" className=\"border rounded-lg px-4 bg-white\">\n              <AccordionTrigger className=\"text-sm font-medium\">\n                Deal Team Notes\n              </AccordionTrigger>\n              <AccordionContent>\n                <p className=\"text-sm text-gray-700 pt-2\">{tearSheet.data.dealTeamNotes}</p>\n              </AccordionContent>\n            </AccordionItem>\n          )}\n        </Accordion>\n\n        {/* Commentary Section */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-base\">Company Sentiment</CardTitle>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsEditingCommentary(!isEditingCommentary)}\n              >\n                <Edit3 className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {tearSheet.commentary.previousAnswer && (\n              <div className=\"p-3 bg-gray-50 rounded-lg\">\n                <div className=\"text-xs text-gray-500 mb-2\">Previous answer (as of Q4 2024)</div>\n                <p className=\"text-sm italic\">{tearSheet.commentary.previousAnswer}</p>\n              </div>\n            )}\n            \n            {isEditingCommentary ? (\n              <div className=\"space-y-3\">\n                <Textarea\n                  value={commentaryDraft}\n                  onChange={(e) => setCommentaryDraft(e.target.value)}\n                  placeholder=\"Enter your commentary...\"\n                  rows={6}\n                  className=\"text-sm\"\n                />\n                <div className=\"flex space-x-2\">\n                  <Button size=\"sm\" onClick={handleSaveCommentary} className=\"flex-1\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={() => setIsEditingCommentary(false)}\n                    className=\"flex-1\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"p-3 bg-blue-50 rounded-lg\">\n                <p className=\"text-sm\">{tearSheet.commentary.content}</p>\n              </div>\n            )}\n            \n            <div className=\"text-xs text-gray-500 flex items-center justify-between\">\n              <span>Version {tearSheet.commentary.version} by {tearSheet.commentary.author}</span>\n              <span>{new Date(tearSheet.commentary.createdAt).toLocaleDateString()}</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Last Modified Footer */}\n        <div className=\"text-center py-4 text-xs text-gray-500\">\n          Last modified by {tearSheet.modifiedBy} on {new Date(tearSheet.lastModified).toLocaleDateString()}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\reports\\tactyc-reports.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":169,"column":34,"nodeType":"Identifier","messageId":"undef","endLine":169,"endColumn":44}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { useFundContext } from \"@/contexts/FundContext\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  FileText, \n  Download, \n  Star, \n  Building2, \n  TrendingUp, \n  BarChart3, \n  Users, \n  Calendar,\n  DollarSign,\n  Target,\n  Briefcase,\n  ArrowUpRight\n} from \"lucide-react\";\n\ninterface ReportItem {\n  id: string;\n  title: string;\n  description: string;\n  recommended: boolean;\n  category: 'investment' | 'fund';\n  icon: any;\n}\n\nconst reportItems: ReportItem[] = [\n  // Investment Reports\n  {\n    id: 'tear-sheets',\n    title: 'Tear Sheets',\n    description: 'One-pagers summarizing key statistics for each portfolio company',\n    recommended: true,\n    category: 'investment',\n    icon: FileText\n  },\n  {\n    id: 'portfolio-summary',\n    title: 'Portfolio Summary',\n    description: 'Performance summary by investment',\n    recommended: true,\n    category: 'investment',\n    icon: Building2\n  },\n  {\n    id: 'investment-history',\n    title: 'Investment History',\n    description: 'Historical investment rounds and exits',\n    recommended: true,\n    category: 'investment',\n    icon: Calendar\n  },\n  {\n    id: 'all-rounds-exits',\n    title: 'All Investment Rounds and Exits',\n    description: 'All Financings and Exits',\n    recommended: false,\n    category: 'investment',\n    icon: TrendingUp\n  },\n  {\n    id: 'portfolio-summary-cases',\n    title: 'Portfolio Summary with Cases',\n    description: 'Summary of investment performance with performance cases',\n    recommended: false,\n    category: 'investment',\n    icon: BarChart3\n  },\n  {\n    id: 'graduations-entry',\n    title: 'Graduations by Entry Round',\n    description: 'Historical investment graduations by entry round',\n    recommended: false,\n    category: 'investment',\n    icon: Target\n  },\n  {\n    id: 'liquidation-preferences',\n    title: 'Liquidation Preferences',\n    description: 'Liquidation preferences by investment',\n    recommended: false,\n    category: 'investment',\n    icon: DollarSign\n  },\n  // Fund Reports\n  {\n    id: 'construction-summary',\n    title: 'Construction Summary',\n    description: 'Construction parameters in a single report',\n    recommended: true,\n    category: 'fund',\n    icon: Briefcase\n  },\n  {\n    id: 'fund-performance-summary',\n    title: 'Fund Performance Summary',\n    description: 'Overall fund performance reports summarizing capital deployment, number of investments and waterfall returns',\n    recommended: true,\n    category: 'fund',\n    icon: TrendingUp\n  },\n  {\n    id: 'fund-performance-construction',\n    title: 'Fund Performance With Construction Comparison Report',\n    description: 'Overall fund performance reports summarizing capital deployment, number of investments and waterfall returns',\n    recommended: false,\n    category: 'fund',\n    icon: BarChart3\n  },\n  {\n    id: 'detailed-cash-flow',\n    title: 'Detailed Cash Flow',\n    description: 'Cash flows in each period',\n    recommended: false,\n    category: 'fund',\n    icon: DollarSign\n  },\n  {\n    id: 'partners-capital',\n    title: 'Partners Capital',\n    description: 'Partners Capital Flows',\n    recommended: false,\n    category: 'fund',\n    icon: Users\n  },\n  {\n    id: 'lp-performance',\n    title: 'LP Performance',\n    description: 'Capital Calls and Distributions by LP',\n    recommended: false,\n    category: 'fund',\n    icon: Users\n  }\n];\n\nexport default function TactycReports() {\n  const { currentFund, isLoading } = useFundContext();\n  const [selectedCategory, setSelectedCategory] = useState<'all' | 'investment' | 'fund'>('all');\n  const [generatingReport, setGeneratingReport] = useState<string | null>(null);\n\n  if (isLoading || !currentFund) {\n    return (\n      <div className=\"flex-1 overflow-y-auto p-6 custom-scrollbar\">\n        <div className=\"animate-pulse space-y-8\">\n          <div className=\"h-20 bg-gray-200 rounded-xl\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded-xl\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const handleGenerateReport = async (reportId: string) => {\n    setGeneratingReport(reportId);\n    \n    // Simulate report generation\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    setGeneratingReport(null);\n    \n    // In a real implementation, this would trigger the report generation\n    console.log(`Generating report: ${reportId}`);\n  };\n\n  const filteredReports = reportItems.filter(report => \n    selectedCategory === 'all' || report.category === selectedCategory\n  );\n\n  const investmentReports = reportItems.filter(report => report.category === 'investment');\n  const fundReports = reportItems.filter(report => report.category === 'fund');\n\n  const ReportCard = ({ report }: { report: ReportItem }) => {\n    const Icon = report.icon;\n    const isGenerating = generatingReport === report.id;\n\n    return (\n      <Card className=\"hover:shadow-md transition-shadow duration-200\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-blue-50 rounded-lg\">\n                <Icon className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-2\">\n                  <CardTitle className=\"text-lg\">{report.title}</CardTitle>\n                  {report.recommended && (\n                    <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800 border-yellow-200\">\n                      <Star className=\"h-3 w-3 mr-1\" />\n                      Recommended\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-0\">\n          <CardDescription className=\"text-sm text-gray-600 mb-4 leading-relaxed\">\n            {report.description}\n          </CardDescription>\n          <Button \n            onClick={() => handleGenerateReport(report.id)}\n            disabled={isGenerating}\n            className=\"w-full\"\n            variant=\"outline\"\n          >\n            {isGenerating ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2\"></div>\n                Generating...\n              </>\n            ) : (\n              <>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Generate Report\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6 custom-scrollbar\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">{currentFund.name} / Reports</h1>\n            <p className=\"text-gray-600 mt-2\">\n              Generate comprehensive reports and documentation for your fund performance and portfolio companies\n            </p>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"outline\" size=\"sm\">\n              <ArrowUpRight className=\"h-4 w-4 mr-2\" />\n              Export All\n            </Button>\n            <Button size=\"sm\">\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Custom Report\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Category Filters */}\n      <div className=\"flex space-x-2 mb-8\">\n        <Button \n          variant={selectedCategory === 'all' ? 'default' : 'outline'}\n          onClick={() => setSelectedCategory('all')}\n          size=\"sm\"\n        >\n          All Reports\n        </Button>\n        <Button \n          variant={selectedCategory === 'investment' ? 'default' : 'outline'}\n          onClick={() => setSelectedCategory('investment')}\n          size=\"sm\"\n        >\n          Investment Reports\n        </Button>\n        <Button \n          variant={selectedCategory === 'fund' ? 'default' : 'outline'}\n          onClick={() => setSelectedCategory('fund')}\n          size=\"sm\"\n        >\n          Fund Reports\n        </Button>\n      </div>\n\n      {/* Reports Sections */}\n      {selectedCategory === 'all' ? (\n        <div className=\"space-y-12\">\n          {/* Investment Reports Section */}\n          <div>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"p-2 bg-blue-50 rounded-lg\">\n                <Building2 className=\"h-6 w-6 text-blue-600\" />\n              </div>\n              <div>\n                <h2 className=\"text-xl font-bold text-gray-900\">Investment Reports</h2>\n                <p className=\"text-gray-600\">Portfolio company performance and investment tracking</p>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {investmentReports.map((report) => (\n                <ReportCard key={report.id} report={report} />\n              ))}\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* Fund Reports Section */}\n          <div>\n            <div className=\"flex items-center space-x-3 mb-6\">\n              <div className=\"p-2 bg-green-50 rounded-lg\">\n                <Briefcase className=\"h-6 w-6 text-green-600\" />\n              </div>\n              <div>\n                <h2 className=\"text-xl font-bold text-gray-900\">Fund Reports</h2>\n                <p className=\"text-gray-600\">Overall fund performance and management reports</p>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {fundReports.map((report) => (\n                <ReportCard key={report.id} report={report} />\n              ))}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {filteredReports.map((report) => (\n            <ReportCard key={report.id} report={report} />\n          ))}\n        </div>\n      )}\n\n      {/* Report Generation Status */}\n      {generatingReport && (\n        <div className=\"fixed bottom-6 right-6 bg-white shadow-lg border border-gray-200 rounded-lg p-4 max-w-sm\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600\"></div>\n            <div>\n              <div className=\"font-medium text-gray-900\">Generating Report</div>\n              <div className=\"text-sm text-gray-600\">This may take a few moments...</div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\reports\\tear-sheet-dashboard.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":6,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsContent' is defined but never used.","line":12,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsList' is defined but never used.","line":12,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsTrigger' is defined but never used.","line":12,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Eye' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":6},{"ruleId":"no-unused-vars","severity":2,"message":"'MessageSquare' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'TearSheetCustomization' is defined but never used.","line":42,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":30}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { \n  Search, \n  Filter, \n  Download, \n  Edit3, \n  History, \n  Eye, \n  FileText,\n  ExternalLink,\n  User,\n  Clock,\n  MessageSquare,\n  Save,\n  X\n} from 'lucide-react';\nimport TearSheetCustomization from './tearsheet-customization';\n\ninterface TearSheet {\n  id: string;\n  companyId: string;\n  companyName: string;\n  sector: string;\n  stage: string;\n  lastModified: string;\n  modifiedBy: string;\n  version: number;\n  status: 'draft' | 'review' | 'published';\n  data: {\n    website: string;\n    fiscalYear: string;\n    location: string;\n    investmentLead: string;\n    percentOfFund: string;\n    classification: string;\n    collection: string;\n    expectedExitValue: string;\n    founderMaturity: string;\n    boardComposition: string[];\n    coInvestors: string[];\n    dealTeamNotes: string;\n    factorRating: string;\n    health: string;\n    likeCompany: string;\n    parentEntity: string;\n    proRata: string;\n    revenueNotes: string;\n  };\n  commentary: {\n    id: string;\n    content: string;\n    author: string;\n    createdAt: string;\n    version: number;\n    previousAnswer?: string;\n  };\n  contacts: {\n    name: string;\n    role: string;\n    initial: string;\n    color: string;\n  }[];\n}\n\ninterface AuditLogEntry {\n  id: string;\n  tearSheetId: string;\n  companyName: string;\n  action: string;\n  field: string;\n  oldValue?: string;\n  newValue?: string;\n  author: string;\n  timestamp: string;\n  version: number;\n}\n\n// Mock data - in real app, this would come from API\nconst MOCK_TEAR_SHEETS: TearSheet[] = [\n  {\n    id: 'ts-1',\n    companyId: 'comp-1',\n    companyName: 'AirChair',\n    sector: 'SaaS',\n    stage: 'Series A',\n    lastModified: '2025-01-20T15:30:00Z',\n    modifiedBy: 'Ethan Finkel',\n    version: 3,\n    status: 'published',\n    data: {\n      website: 'http://www.airchair.com',\n      fiscalYear: '12/31',\n      location: 'San Francisco, CA',\n      investmentLead: 'Lane Altbaum',\n      percentOfFund: '11.47%',\n      classification: 'Core',\n      collection: 'Offset',\n      expectedExitValue: '$1B',\n      founderMaturity: \"Doesn't know anything\",\n      boardComposition: ['David', 'Jackson', 'Chloe'],\n      coInvestors: ['Pier 5 Ventures', 'The Best VC Firm', 'JMK Capital', 'Ethan Finkel', 'Miller and Associates'],\n      dealTeamNotes: 'Example of deal team notes',\n      factorRating: 'High',\n      health: \"Jury's Out\",\n      likeCompany: 'Like',\n      parentEntity: 'SPV [',\n      proRata: 'Super Pro Rata',\n      revenueNotes: ''\n    },\n    commentary: {\n      id: 'comm-1',\n      content: 'While the competitive landscape is evolving, their speed of execution, product depth, and growing brand recognition make it a strong contender in the category.',\n      author: 'Ethan Finkel',\n      createdAt: '2025-01-20T15:30:00Z',\n      version: 2,\n      previousAnswer: 'Great - Really think the CEO is doing a great job with hiring SWEs.'\n    },\n    contacts: [\n      { name: 'Ethan Finkel', role: 'Solutions Architect', initial: 'E', color: 'bg-blue-600' },\n      { name: 'Xiaozhou Wang', role: '', initial: 'X', color: 'bg-teal-600' },\n      { name: 'Ann Demirtjis', role: 'CEO', initial: 'A', color: 'bg-green-600' }\n    ]\n  },\n  {\n    id: 'ts-2',\n    companyId: 'comp-2',\n    companyName: 'DataFlow Systems',\n    sector: 'Enterprise',\n    stage: 'Seed',\n    lastModified: '2025-01-19T10:15:00Z',\n    modifiedBy: 'Sarah Chen',\n    version: 1,\n    status: 'draft',\n    data: {\n      website: 'http://www.dataflow.io',\n      fiscalYear: '12/31',\n      location: 'Austin, TX',\n      investmentLead: 'Sarah Chen',\n      percentOfFund: '2.3%',\n      classification: 'Growth',\n      collection: 'Core',\n      expectedExitValue: '$500M',\n      founderMaturity: 'Experienced',\n      boardComposition: ['Sarah', 'Mike', 'Jennifer'],\n      coInvestors: ['Austin Ventures', 'Scale Venture Partners'],\n      dealTeamNotes: 'Strong technical team with enterprise sales experience',\n      factorRating: 'Medium',\n      health: 'Healthy',\n      likeCompany: 'Love',\n      parentEntity: 'Direct',\n      proRata: 'Pro Rata',\n      revenueNotes: 'ARR growing 15% month-over-month'\n    },\n    commentary: {\n      id: 'comm-2',\n      content: 'Exceptional product-market fit with enterprise customers showing strong adoption rates. Technical differentiation is clear.',\n      author: 'Sarah Chen',\n      createdAt: '2025-01-19T10:15:00Z',\n      version: 1\n    },\n    contacts: [\n      { name: 'Sarah Chen', role: 'Partner', initial: 'S', color: 'bg-purple-600' },\n      { name: 'Mike Rodriguez', role: 'CTO', initial: 'M', color: 'bg-orange-600' }\n    ]\n  }\n];\n\nconst MOCK_AUDIT_LOG: AuditLogEntry[] = [\n  {\n    id: 'audit-1',\n    tearSheetId: 'ts-1',\n    companyName: 'AirChair',\n    action: 'Commentary Updated',\n    field: 'Company Sentiment',\n    oldValue: 'Great - Really think the CEO is doing a great job with hiring SWEs.',\n    newValue: 'While the competitive landscape is evolving, their speed of execution, product depth, and growing brand recognition make it a strong contender in the category.',\n    author: 'Ethan Finkel',\n    timestamp: '2025-01-20T15:30:00Z',\n    version: 3\n  },\n  {\n    id: 'audit-2',\n    tearSheetId: 'ts-1',\n    companyName: 'AirChair',\n    action: 'Field Updated',\n    field: 'Health Status',\n    oldValue: 'Healthy',\n    newValue: \"Jury's Out\",\n    author: 'Lane Altbaum',\n    timestamp: '2025-01-20T14:22:00Z',\n    version: 2\n  },\n  {\n    id: 'audit-3',\n    tearSheetId: 'ts-2',\n    companyName: 'DataFlow Systems',\n    action: 'Tear Sheet Created',\n    field: 'Initial Creation',\n    author: 'Sarah Chen',\n    timestamp: '2025-01-19T10:15:00Z',\n    version: 1\n  }\n];\n\nexport default function TearSheetDashboard() {\n  const [tearSheets, setTearSheets] = useState<TearSheet[]>(MOCK_TEAR_SHEETS);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedSector, setSelectedSector] = useState('all');\n  const [selectedStatus, setSelectedStatus] = useState('all');\n  const [selectedTearSheet, setSelectedTearSheet] = useState<TearSheet | null>(null);\n  const [isEditingCommentary, setIsEditingCommentary] = useState(false);\n  const [commentaryDraft, setCommentaryDraft] = useState('');\n  const [auditLog, setAuditLog] = useState<AuditLogEntry[]>(MOCK_AUDIT_LOG);\n  const [showAuditTrail, setShowAuditTrail] = useState(false);\n\n  // Filter tear sheets based on search and filters\n  const filteredTearSheets = tearSheets.filter(sheet => {\n    const matchesSearch = sheet.companyName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         sheet.sector.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesSector = selectedSector === 'all' || sheet.sector === selectedSector;\n    const matchesStatus = selectedStatus === 'all' || sheet.status === selectedStatus;\n    \n    return matchesSearch && matchesSector && matchesStatus;\n  });\n\n  const handleCommentaryEdit = (tearSheet: TearSheet) => {\n    setSelectedTearSheet(tearSheet);\n    setCommentaryDraft(tearSheet.commentary.content);\n    setIsEditingCommentary(true);\n  };\n\n  const saveCommentary = () => {\n    if (!selectedTearSheet) return;\n\n    const updatedTearSheet = {\n      ...selectedTearSheet,\n      commentary: {\n        ...selectedTearSheet.commentary,\n        previousAnswer: selectedTearSheet.commentary.content,\n        content: commentaryDraft,\n        version: selectedTearSheet.commentary.version + 1,\n        createdAt: new Date().toISOString()\n      },\n      version: selectedTearSheet.version + 1,\n      lastModified: new Date().toISOString(),\n      modifiedBy: 'Current User' // In real app, get from auth context\n    };\n\n    setTearSheets(prev => \n      prev.map(sheet => \n        sheet.id === selectedTearSheet.id ? updatedTearSheet : sheet\n      )\n    );\n\n    // Add audit log entry\n    const auditEntry: AuditLogEntry = {\n      id: `audit-${Date.now()}`,\n      tearSheetId: selectedTearSheet.id,\n      companyName: selectedTearSheet.companyName,\n      action: 'Commentary Updated',\n      field: 'Company Sentiment',\n      oldValue: selectedTearSheet.commentary.content,\n      newValue: commentaryDraft,\n      author: 'Current User',\n      timestamp: new Date().toISOString(),\n      version: updatedTearSheet.version\n    };\n\n    setAuditLog(prev => [auditEntry, ...prev]);\n    setIsEditingCommentary(false);\n    setSelectedTearSheet(null);\n  };\n\n  const exportToPDF = (tearSheet: TearSheet) => {\n    // In real app, this would generate and download PDF\n    console.log('Exporting to PDF:', tearSheet.companyName);\n  };\n\n  const renderTearSheetCard = (tearSheet: TearSheet) => (\n    <Card key={tearSheet.id} className=\"hover:shadow-lg transition-shadow\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-orange-500 rounded flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">\n                {tearSheet.companyName.charAt(0)}\n              </span>\n            </div>\n            <div>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                {tearSheet.companyName}\n                <ExternalLink className=\"h-4 w-4 text-gray-400\" />\n              </CardTitle>\n              <p className=\"text-sm text-gray-600\">\n                as of March 31, 2025\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge variant={tearSheet.status === 'published' ? 'default' : 'secondary'}>\n              v{tearSheet.version}\n            </Badge>\n            <Badge variant=\"outline\">\n              {tearSheet.status}\n            </Badge>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Company Info Grid */}\n        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 text-sm\">\n          <div>\n            <div className=\"text-gray-500 text-xs uppercase\">Fiscal Year</div>\n            <div className=\"font-medium\">{tearSheet.data.fiscalYear}</div>\n          </div>\n          <div>\n            <div className=\"text-gray-500 text-xs uppercase\">Location</div>\n            <div className=\"font-medium\">{tearSheet.data.location}</div>\n          </div>\n          <div>\n            <div className=\"text-gray-500 text-xs uppercase\">Investment Lead</div>\n            <div className=\"font-medium\">{tearSheet.data.investmentLead}</div>\n          </div>\n          <div>\n            <div className=\"text-gray-500 text-xs uppercase\">% of Fund</div>\n            <div className=\"font-medium\">{tearSheet.data.percentOfFund}</div>\n          </div>\n          <div>\n            <div className=\"text-gray-500 text-xs uppercase\">Classification</div>\n            <Badge variant=\"outline\">{tearSheet.data.classification}</Badge>\n          </div>\n          <div>\n            <div className=\"text-gray-500 text-xs uppercase\">Expected Exit Value</div>\n            <div className=\"font-medium\">{tearSheet.data.expectedExitValue}</div>\n          </div>\n        </div>\n\n        {/* Board Composition */}\n        <div>\n          <div className=\"text-gray-500 text-xs uppercase mb-2\">Board Composition</div>\n          <div className=\"flex flex-wrap gap-1\">\n            {tearSheet.data.boardComposition.map((member, idx) => (\n              <Badge key={idx} variant=\"secondary\" className=\"text-xs\">\n                {member}\n              </Badge>\n            ))}\n          </div>\n        </div>\n\n        {/* Co-Investors */}\n        <div>\n          <div className=\"text-gray-500 text-xs uppercase mb-2\">Co-Investors</div>\n          <div className=\"flex flex-wrap gap-1\">\n            {tearSheet.data.coInvestors.map((investor, idx) => (\n              <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                {investor}\n              </Badge>\n            ))}\n          </div>\n        </div>\n\n        {/* Contacts */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-gray-500 text-xs uppercase\">Contact</div>\n          <div className=\"flex items-center space-x-2\">\n            {tearSheet.contacts.map((contact, idx) => (\n              <div key={idx} className=\"flex items-center space-x-1\">\n                <div className={`w-6 h-6 rounded-full ${contact.color} text-white text-xs flex items-center justify-center`}>\n                  {contact.initial}\n                </div>\n                <div className=\"text-sm\">\n                  <div className=\"font-medium\">{contact.name}</div>\n                  {contact.role && <div className=\"text-gray-500 text-xs\">{contact.role}</div>}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Company Sentiment */}\n        <div className=\"border-t pt-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h4 className=\"font-medium\">Company Sentiment</h4>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => handleCommentaryEdit(tearSheet)}\n            >\n              <Edit3 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          {tearSheet.commentary.previousAnswer && (\n            <div className=\"mb-2 p-2 bg-gray-50 rounded text-sm\">\n              <div className=\"text-gray-500 text-xs mb-1\">Previous answer (as of Q4 2024)</div>\n              <div className=\"italic\">{tearSheet.commentary.previousAnswer}</div>\n            </div>\n          )}\n          \n          <div className=\"p-3 bg-blue-50 rounded\">\n            <p className=\"text-sm\">{tearSheet.commentary.content}</p>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex items-center justify-between pt-4 border-t\">\n          <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n            <User className=\"h-3 w-3\" />\n            <span>Modified by {tearSheet.modifiedBy}</span>\n            <Clock className=\"h-3 w-3 ml-2\" />\n            <span>{new Date(tearSheet.lastModified).toLocaleDateString()}</span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={() => setShowAuditTrail(true)}>\n              <History className=\"h-4 w-4 mr-1\" />\n              History\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={() => exportToPDF(tearSheet)}>\n              <Download className=\"h-4 w-4 mr-1\" />\n              PDF\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Tear Sheets</h1>\n          <p className=\"text-gray-600\">Portfolio company tear sheets with LP commentary and audit trails</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\">\n            <FileText className=\"h-4 w-4 mr-2\" />\n            Create Tear Sheet\n          </Button>\n          <Button>\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export All\n          </Button>\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"flex flex-col md:flex-row gap-4\">\n        <div className=\"flex-1 relative\">\n          <Search className=\"h-4 w-4 absolute left-3 top-3 text-gray-400\" />\n          <Input\n            placeholder=\"Search companies, sectors, or team members...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-9\"\n          />\n        </div>\n        \n        <div className=\"flex gap-2\">\n          <Select value={selectedSector} onValueChange={setSelectedSector}>\n            <SelectTrigger className=\"w-40\">\n              <SelectValue placeholder=\"All Sectors\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Sectors</SelectItem>\n              <SelectItem value=\"SaaS\">SaaS</SelectItem>\n              <SelectItem value=\"Enterprise\">Enterprise</SelectItem>\n              <SelectItem value=\"FinTech\">FinTech</SelectItem>\n              <SelectItem value=\"HealthTech\">HealthTech</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue placeholder=\"All Status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"draft\">Draft</SelectItem>\n              <SelectItem value=\"review\">Review</SelectItem>\n              <SelectItem value=\"published\">Published</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Results Summary */}\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-sm text-gray-600\">\n          Showing {filteredTearSheets.length} of {tearSheets.length} tear sheets\n        </p>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"ghost\" size=\"sm\">\n            <Filter className=\"h-4 w-4 mr-2\" />\n            More Filters\n          </Button>\n        </div>\n      </div>\n\n      {/* Tear Sheets Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {filteredTearSheets.map(renderTearSheetCard)}\n      </div>\n\n      {/* Commentary Edit Dialog */}\n      <Dialog open={isEditingCommentary} onOpenChange={setIsEditingCommentary}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Company Sentiment</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {selectedTearSheet?.commentary.previousAnswer && (\n              <div className=\"p-3 bg-gray-50 rounded\">\n                <div className=\"text-sm font-medium mb-2\">Previous Answer</div>\n                <p className=\"text-sm italic\">{selectedTearSheet.commentary.previousAnswer}</p>\n              </div>\n            )}\n            \n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Current Commentary</label>\n              <Textarea\n                value={commentaryDraft}\n                onChange={(e) => setCommentaryDraft(e.target.value)}\n                placeholder=\"Enter your commentary about this company...\"\n                rows={6}\n              />\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-xs text-gray-500\">\n                Version {selectedTearSheet?.commentary.version || 1} ΓÇó \n                Last updated {selectedTearSheet?.commentary.createdAt ? new Date(selectedTearSheet.commentary.createdAt).toLocaleDateString() : 'Never'}\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"outline\" onClick={() => setIsEditingCommentary(false)}>\n                  <X className=\"h-4 w-4 mr-2\" />\n                  Cancel\n                </Button>\n                <Button onClick={saveCommentary}>\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  Save Commentary\n                </Button>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Audit Trail Dialog */}\n      <Dialog open={showAuditTrail} onOpenChange={setShowAuditTrail}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Audit Trail</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {auditLog.map((entry) => (\n              <div key={entry.id} className=\"border-l-4 border-blue-500 pl-4 py-2\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"font-medium\">\n                    {entry.companyName} - {entry.action}\n                  </div>\n                  <Badge variant=\"outline\">v{entry.version}</Badge>\n                </div>\n                \n                <div className=\"text-sm text-gray-600 mb-2\">\n                  {entry.field} updated by {entry.author} on {new Date(entry.timestamp).toLocaleString()}\n                </div>\n                \n                {entry.oldValue && entry.newValue && (\n                  <div className=\"space-y-2\">\n                    <div className=\"p-2 bg-red-50 rounded border-l-2 border-red-300\">\n                      <div className=\"text-xs text-red-600 font-medium\">Previous Value:</div>\n                      <div className=\"text-sm\">{entry.oldValue}</div>\n                    </div>\n                    <div className=\"p-2 bg-green-50 rounded border-l-2 border-green-300\">\n                      <div className=\"text-xs text-green-600 font-medium\">New Value:</div>\n                      <div className=\"text-sm\">{entry.newValue}</div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\reports\\tearsheet-customization.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'fields' is defined but never used.","line":30,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Settings, CheckCircle } from 'lucide-react';\n\ninterface TearSheetField {\n  id: string;\n  name: string;\n  category: 'tearsheet' | 'kpi' | 'custom';\n  selected: boolean;\n}\n\ninterface TearSheetCustomizationProps {\n  onFieldsChange?: (fields: TearSheetField[]) => void;\n}\n\nconst DEFAULT_TEARSHEET_FIELDS: TearSheetField[] = [\n  { id: 'total-invested', name: 'Total Invested to Date', category: 'tearsheet', selected: true },\n  { id: 'initial-investment', name: 'Initial Investment', category: 'tearsheet', selected: true },\n  { id: 'follow-on-investments', name: 'Follow-On Investments to Date', category: 'tearsheet', selected: true },\n  { id: 'reserves-remaining', name: 'Reserves Remaining', category: 'tearsheet', selected: true },\n  { id: 'realized-exit-proceeds', name: 'Realized Exit Proceeds', category: 'tearsheet', selected: true },\n  { id: 'cum-capital-raised', name: 'Cum Capital Raised', category: 'tearsheet', selected: true },\n  { id: 'current-post-money', name: 'Current Post Money Valuation', category: 'tearsheet', selected: true },\n  { id: 'ownership', name: 'Ownership', category: 'tearsheet', selected: true },\n  { id: 'current-fmv', name: 'Current FMV', category: 'tearsheet', selected: true },\n  { id: 'current-irr', name: 'Current IRR', category: 'tearsheet', selected: true },\n  { id: 'current-moic', name: 'Current MOIC', category: 'tearsheet', selected: true },\n  { id: 'company-description', name: 'Company Description', category: 'tearsheet', selected: true },\n  { id: 'partner-commentary', name: 'Partner Commentary', category: 'tearsheet', selected: true },\n  { id: 'historical-financings', name: 'Historical Financings', category: 'tearsheet', selected: true },\n  { id: 'operating-kpis', name: 'Operating KPIs', category: 'tearsheet', selected: true },\n  { id: 'exit-cases', name: 'Exit Cases', category: 'tearsheet', selected: true },\n];\n\nconst DEFAULT_KPI_FIELDS: TearSheetField[] = [\n  { id: 'arr', name: 'ARR', category: 'kpi', selected: true },\n  { id: 'cash-balance', name: 'Cash Balance', category: 'kpi', selected: true },\n  { id: 'sales', name: 'Sales', category: 'kpi', selected: true },\n  { id: 'status-report', name: 'Status Report', category: 'kpi', selected: true },\n  { id: 'employees', name: 'Number of Employees', category: 'kpi', selected: true },\n  { id: 'burn-rate', name: 'Burn Rate (in Months)', category: 'kpi', selected: true },\n  { id: 'women-employees', name: 'Women Employees', category: 'kpi', selected: true },\n  { id: 'lgbtq-employees', name: 'Number of Employees who identify as a member of the LGBTQ+', category: 'kpi', selected: true },\n  { id: 'veteran-employees', name: 'Number of Employees who are Veterans', category: 'kpi', selected: true },\n  { id: 'disability-employees', name: 'Number of Employees who have a Disability', category: 'kpi', selected: true },\n  { id: 'poc-employees', name: 'Number of Employees who are People of Color', category: 'kpi', selected: true },\n  { id: 'team-dynamics', name: 'Team Dynamics', category: 'kpi', selected: true },\n  { id: 'team-update', name: 'Team Update', category: 'kpi', selected: false },\n  { id: 'units-sold', name: 'Units Sold', category: 'kpi', selected: false },\n];\n\nconst SAMPLE_CUSTOM_FIELDS: TearSheetField[] = [\n  { id: 'internal-status', name: 'Internal Status', category: 'custom', selected: false },\n  { id: 'lead-status', name: 'Lead Status', category: 'custom', selected: false },\n  { id: 'years-operation', name: 'Years of Operation', category: 'custom', selected: false },\n  { id: 'internal-code', name: 'Internal Code', category: 'custom', selected: false },\n  { id: 'internal-fmv', name: 'Internal FMV', category: 'custom', selected: false },\n  { id: 'strategic', name: 'Strategic', category: 'custom', selected: false },\n  { id: 'deal-source', name: 'Deal Source', category: 'custom', selected: false },\n];\n\nexport default function TearSheetCustomization({ onFieldsChange }: TearSheetCustomizationProps) {\n  const [tearsheetFields, setTearsheetFields] = useState<TearSheetField[]>(DEFAULT_TEARSHEET_FIELDS);\n  const [kpiFields, setKpiFields] = useState<TearSheetField[]>(DEFAULT_KPI_FIELDS);\n  const [customFields, setCustomFields] = useState<TearSheetField[]>(SAMPLE_CUSTOM_FIELDS);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleFieldToggle = (fieldId: string, category: 'tearsheet' | 'kpi' | 'custom') => {\n    const updateFields = (fields: TearSheetField[]) =>\n      fields.map(field =>\n        field.id === fieldId ? { ...field, selected: !field.selected } : field\n      );\n\n    if (category === 'tearsheet') {\n      const updated = updateFields(tearsheetFields);\n      setTearsheetFields(updated);\n      onFieldsChange?.(updated);\n    } else if (category === 'kpi') {\n      const updated = updateFields(kpiFields);\n      setKpiFields(updated);\n      onFieldsChange?.(updated);\n    } else if (category === 'custom') {\n      const updated = updateFields(customFields);\n      setCustomFields(updated);\n      onFieldsChange?.(updated);\n    }\n  };\n\n  const getSelectedCount = () => {\n    return [...tearsheetFields, ...kpiFields, ...customFields].filter(field => field.selected).length;\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'tearsheet': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'kpi': return 'bg-green-100 text-green-800 border-green-200';\n      case 'custom': return 'bg-purple-100 text-purple-800 border-purple-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\">\n          <Settings className=\"h-4 w-4 mr-2\" />\n          Customize\n          {getSelectedCount() > 0 && (\n            <Badge variant=\"secondary\" className=\"ml-2\">\n              {getSelectedCount()}\n            </Badge>\n          )}\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Customize Tearsheet</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Summary */}\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n            <div>\n              <p className=\"font-medium\">Selected Fields</p>\n              <p className=\"text-sm text-gray-600\">\n                {getSelectedCount()} fields selected for tearsheet display\n              </p>\n            </div>\n            <CheckCircle className=\"h-5 w-5 text-green-600\" />\n          </div>\n\n          {/* Tearsheet Fields */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Badge className={getCategoryColor('tearsheet')}>Tearsheet Fields</Badge>\n                <span className=\"text-base font-medium\">Core Investment Data</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {tearsheetFields.map((field) => (\n                <div key={field.id} className=\"flex items-center space-x-3\">\n                  <Checkbox\n                    id={field.id}\n                    checked={field.selected}\n                    onCheckedChange={() => handleFieldToggle(field.id, field.category)}\n                  />\n                  <Label htmlFor={field.id} className=\"flex-1 cursor-pointer\">\n                    {field.name}\n                  </Label>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n\n          {/* KPI Metrics */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Badge className={getCategoryColor('kpi')}>KPI Metrics</Badge>\n                <span className=\"text-base font-medium\">Show quantitative KPI metrics as of Apr 2024</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {kpiFields.map((field) => (\n                <div key={field.id} className=\"flex items-center space-x-3\">\n                  <Checkbox\n                    id={field.id}\n                    checked={field.selected}\n                    onCheckedChange={() => handleFieldToggle(field.id, field.category)}\n                  />\n                  <Label htmlFor={field.id} className=\"flex-1 cursor-pointer\">\n                    {field.name}\n                  </Label>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n\n          {/* Custom Fields */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Badge className={getCategoryColor('custom')}>Custom Fields</Badge>\n                <span className=\"text-base font-medium\">User-Defined Fields</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {customFields.length > 0 ? (\n                customFields.map((field) => (\n                  <div key={field.id} className=\"flex items-center space-x-3\">\n                    <Checkbox\n                      id={field.id}\n                      checked={field.selected}\n                      onCheckedChange={() => handleFieldToggle(field.id, field.category)}\n                    />\n                    <Label htmlFor={field.id} className=\"flex-1 cursor-pointer\">\n                      {field.name}\n                    </Label>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-4 text-gray-500\">\n                  <p>No custom fields defined yet.</p>\n                  <p className=\"text-sm\">Create custom fields in the Custom Fields section to see them here.</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Separator />\n\n          {/* Actions */}\n          <div className=\"flex justify-end space-x-2\">\n            <Button variant=\"outline\" onClick={() => setIsOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={() => setIsOpen(false)}>\n              Apply Changes\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\reserves\\ApprovalPanel.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":89,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":89,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":101,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":101,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":111,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":111,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":130,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":130,"endColumn":35}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Reserve Strategy Approval Panel\r\n * UI for dual partner approval workflow\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardFooter,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from '@/components/ui/dialog';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport {\r\n  CheckCircle2,\r\n  XCircle,\r\n  Clock,\r\n  AlertTriangle,\r\n  Shield,\r\n  User,\r\n  DollarSign,\r\n  FileText,\r\n  Hash,\r\n} from 'lucide-react';\r\n\r\ninterface Approval {\r\n  id: string;\r\n  strategyId: string;\r\n  requestedBy: string;\r\n  requestedAt: string;\r\n  action: 'create' | 'update' | 'delete';\r\n  strategyData: Record<string, unknown>;\r\n  reason: string;\r\n  affectedFunds: string[];\r\n  estimatedAmount: number;\r\n  riskLevel: 'low' | 'medium' | 'high';\r\n  status: 'pending' | 'approved' | 'rejected' | 'expired';\r\n  expiresAt: string;\r\n  calculationHash?: string;\r\n  signatures: Array<{\r\n    partnerEmail: string;\r\n    approvedAt: string;\r\n  }>;\r\n  remainingApprovals: number;\r\n}\r\n\r\ninterface ApprovalDetails extends Approval {\r\n  auditLog: Array<{\r\n    timestamp: string;\r\n    action: string;\r\n    actor: string;\r\n    details?: Record<string, unknown>;\r\n  }>;\r\n  canSign: boolean;\r\n  isExpired: boolean;\r\n  isApproved: boolean;\r\n}\r\n\r\nexport function ApprovalPanel() {\r\n  const [selectedApproval, setSelectedApproval] = useState<string | null>(null);\r\n  const [showSignDialog, setShowSignDialog] = useState(false);\r\n  const [showRejectDialog, setShowRejectDialog] = useState(false);\r\n  const [verificationCode, setVerificationCode] = useState('');\r\n  const [rejectionReason, setRejectionReason] = useState('');\r\n  \r\n  const queryClient = useQueryClient();\r\n\r\n  // Fetch pending approvals\r\n  const { data: pendingApprovals, isLoading } = useQuery({\r\n    queryKey: ['reserve-approvals', 'pending'],\r\n    queryFn: async () => {\r\n      const response = await fetch('/api/v1/reserve-approvals?status=pending');\r\n      if (!response.ok) throw new Error('Failed to fetch approvals');\r\n      return response.json();\r\n    },\r\n    refetchInterval: 30000, // Refresh every 30 seconds\r\n  });\r\n\r\n  // Fetch specific approval details\r\n  const { data: approvalDetails } = useQuery({\r\n    queryKey: ['reserve-approval', selectedApproval],\r\n    queryFn: async () => {\r\n      if (!selectedApproval) return null;\r\n      const response = await fetch(`/api/v1/reserve-approvals/${selectedApproval}`);\r\n      if (!response.ok) throw new Error('Failed to fetch approval details');\r\n      return response.json() as Promise<ApprovalDetails>;\r\n    },\r\n    enabled: !!selectedApproval,\r\n  });\r\n\r\n  // Sign approval mutation\r\n  const signMutation = useMutation({\r\n    mutationFn: async ({ id, code }: { id: string; code?: string }) => {\r\n      const response = await fetch(`/api/v1/reserve-approvals/${id}/sign`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ verificationCode: code }),\r\n      });\r\n      if (!response.ok) throw new Error('Failed to sign approval');\r\n      return response.json();\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['reserve-approvals'] });\r\n      queryClient.invalidateQueries({ queryKey: ['reserve-approval', selectedApproval] });\r\n      setShowSignDialog(false);\r\n      setVerificationCode('');\r\n    },\r\n  });\r\n\r\n  // Reject approval mutation\r\n  const rejectMutation = useMutation({\r\n    mutationFn: async ({ id, reason }: { id: string; reason: string }) => {\r\n      const response = await fetch(`/api/v1/reserve-approvals/${id}/reject`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ reason }),\r\n      });\r\n      if (!response.ok) throw new Error('Failed to reject approval');\r\n      return response.json();\r\n    },\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['reserve-approvals'] });\r\n      queryClient.invalidateQueries({ queryKey: ['reserve-approval', selectedApproval] });\r\n      setShowRejectDialog(false);\r\n      setRejectionReason('');\r\n    },\r\n  });\r\n\r\n  const getRiskBadgeColor = (level: string) => {\r\n    switch (level) {\r\n      case 'low': return 'bg-green-100 text-green-800';\r\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\r\n      case 'high': return 'bg-red-100 text-red-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'approved': return <CheckCircle2 className=\"h-5 w-5 text-green-500\" />;\r\n      case 'rejected': return <XCircle className=\"h-5 w-5 text-red-500\" />;\r\n      case 'expired': return <Clock className=\"h-5 w-5 text-gray-500\" />;\r\n      default: return <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />;\r\n    }\r\n  };\r\n\r\n  const formatAmount = (cents: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n    }).format(cents / 100);\r\n  };\r\n\r\n  const getTimeRemaining = (expiresAt: string) => {\r\n    const now = Date.now();\r\n    const expires = new Date(expiresAt).getTime();\r\n    const diff = expires - now;\r\n    \r\n    if (diff <= 0) return 'Expired';\r\n    \r\n    const hours = Math.floor(diff / (1000 * 60 * 60));\r\n    const days = Math.floor(hours / 24);\r\n    \r\n    if (days > 0) return `${days} day${days > 1 ? 's' : ''} remaining`;\r\n    return `${hours} hour${hours > 1 ? 's' : ''} remaining`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Shield className=\"h-5 w-5\" />\r\n            Reserve Strategy Approvals\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Dual partner approval required for all reserve strategy changes\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Tabs defaultValue=\"pending\" className=\"w-full\">\r\n            <TabsList className=\"grid w-full grid-cols-3\">\r\n              <TabsTrigger value=\"pending\">\r\n                Pending ({pendingApprovals?.total || 0})\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"recent\">Recent</TabsTrigger>\r\n              <TabsTrigger value=\"history\">History</TabsTrigger>\r\n            </TabsList>\r\n            \r\n            <TabsContent value=\"pending\" className=\"space-y-4\">\r\n              {isLoading ? (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  Loading approvals...\r\n                </div>\r\n              ) : pendingApprovals?.approvals?.length === 0 ? (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  No pending approvals\r\n                </div>\r\n              ) : (\r\n                pendingApprovals?.approvals?.map((approval: Approval) => (\r\n                  <Card \r\n                    key={approval.id}\r\n                    className=\"cursor-pointer hover:shadow-md transition-shadow\"\r\n                    onClick={() => setSelectedApproval(approval.id)}\r\n                  >\r\n                    <CardHeader className=\"pb-3\">\r\n                      <div className=\"flex justify-between items-start\">\r\n                        <div className=\"space-y-1\">\r\n                          <div className=\"flex items-center gap-2\">\r\n                            {getStatusIcon(approval.status)}\r\n                            <span className=\"font-semibold\">\r\n                              {approval.action.charAt(0).toUpperCase() + approval.action.slice(1)} Strategy\r\n                            </span>\r\n                            <Badge className={getRiskBadgeColor(approval.riskLevel)}>\r\n                              {approval.riskLevel} risk\r\n                            </Badge>\r\n                          </div>\r\n                          <p className=\"text-sm text-muted-foreground\">\r\n                            Requested by {approval.requestedBy}\r\n                          </p>\r\n                        </div>\r\n                        <Badge variant=\"outline\">\r\n                          {getTimeRemaining(approval.expiresAt)}\r\n                        </Badge>\r\n                      </div>\r\n                    </CardHeader>\r\n                    <CardContent className=\"pb-3\">\r\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\r\n                          <span>{formatAmount(approval.estimatedAmount)}</span>\r\n                        </div>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <FileText className=\"h-4 w-4 text-muted-foreground\" />\r\n                          <span>{approval.affectedFunds.length} funds affected</span>\r\n                        </div>\r\n                      </div>\r\n                      <p className=\"text-sm text-muted-foreground mt-2 line-clamp-2\">\r\n                        {approval.reason}\r\n                      </p>\r\n                    </CardContent>\r\n                    <CardFooter className=\"pt-3 border-t\">\r\n                      <div className=\"flex justify-between items-center w-full\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          {approval.signatures.map((sig, idx) => (\r\n                            <div key={idx} className=\"flex items-center gap-1\">\r\n                              <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\r\n                              <span className=\"text-xs text-muted-foreground\">\r\n                                {sig.partnerEmail.split('@')[0]}\r\n                              </span>\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                        <span className=\"text-sm font-medium\">\r\n                          {approval.remainingApprovals} approval{approval.remainingApprovals !== 1 ? 's' : ''} needed\r\n                        </span>\r\n                      </div>\r\n                    </CardFooter>\r\n                  </Card>\r\n                ))\r\n              )}\r\n            </TabsContent>\r\n          </Tabs>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Approval Details Dialog */}\r\n      {approvalDetails && (\r\n        <Dialog open={!!selectedApproval} onOpenChange={() => setSelectedApproval(null)}>\r\n          <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\r\n            <DialogHeader>\r\n              <DialogTitle className=\"flex items-center gap-2\">\r\n                {getStatusIcon(approvalDetails.status)}\r\n                Reserve Strategy {approvalDetails.action}\r\n              </DialogTitle>\r\n              <DialogDescription>\r\n                Review and approve changes to reserve allocation strategy\r\n              </DialogDescription>\r\n            </DialogHeader>\r\n\r\n            <div className=\"space-y-6 py-4\">\r\n              {/* Risk Assessment */}\r\n              <div className=\"space-y-2\">\r\n                <h4 className=\"font-semibold text-sm\">Risk Assessment</h4>\r\n                <div className=\"grid grid-cols-3 gap-4\">\r\n                  <div>\r\n                    <Label className=\"text-xs text-muted-foreground\">Risk Level</Label>\r\n                    <Badge className={getRiskBadgeColor(approvalDetails.riskLevel)}>\r\n                      {approvalDetails.riskLevel}\r\n                    </Badge>\r\n                  </div>\r\n                  <div>\r\n                    <Label className=\"text-xs text-muted-foreground\">Estimated Impact</Label>\r\n                    <p className=\"font-medium\">{formatAmount(approvalDetails.estimatedAmount)}</p>\r\n                  </div>\r\n                  <div>\r\n                    <Label className=\"text-xs text-muted-foreground\">Affected Funds</Label>\r\n                    <p className=\"font-medium\">{approvalDetails.affectedFunds.length}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Reason */}\r\n              <div className=\"space-y-2\">\r\n                <h4 className=\"font-semibold text-sm\">Reason for Change</h4>\r\n                <p className=\"text-sm text-muted-foreground\">{approvalDetails.reason}</p>\r\n              </div>\r\n\r\n              {/* Calculation Hash */}\r\n              {approvalDetails.calculationHash && (\r\n                <div className=\"space-y-2\">\r\n                  <h4 className=\"font-semibold text-sm flex items-center gap-2\">\r\n                    <Hash className=\"h-4 w-4\" />\r\n                    Calculation Verification\r\n                  </h4>\r\n                  <code className=\"text-xs bg-muted p-2 rounded font-mono block break-all\">\r\n                    {approvalDetails.calculationHash}\r\n                  </code>\r\n                </div>\r\n              )}\r\n\r\n              {/* Signatures */}\r\n              <div className=\"space-y-2\">\r\n                <h4 className=\"font-semibold text-sm\">Approval Status</h4>\r\n                <div className=\"space-y-2\">\r\n                  {approvalDetails.signatures.length === 0 ? (\r\n                    <p className=\"text-sm text-muted-foreground\">No signatures yet</p>\r\n                  ) : (\r\n                    approvalDetails.signatures.map((sig, idx) => (\r\n                      <div key={idx} className=\"flex items-center gap-2 text-sm\">\r\n                        <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\r\n                        <span>{sig.partnerEmail}</span>\r\n                        <span className=\"text-muted-foreground\">\r\n                          approved on {new Date(sig.approvedAt).toLocaleDateString()}\r\n                        </span>\r\n                      </div>\r\n                    ))\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Audit Trail */}\r\n              <div className=\"space-y-2\">\r\n                <h4 className=\"font-semibold text-sm\">Audit Trail</h4>\r\n                <div className=\"space-y-1 max-h-32 overflow-y-auto\">\r\n                  {approvalDetails.auditLog.map((entry, idx) => (\r\n                    <div key={idx} className=\"text-xs text-muted-foreground\">\r\n                      {new Date(entry.timestamp).toLocaleString()} - {entry.actor} {entry.action}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <DialogFooter className=\"gap-2\">\r\n              {approvalDetails.canSign && !approvalDetails.isExpired && (\r\n                <>\r\n                  <Button\r\n                    variant=\"destructive\"\r\n                    onClick={() => setShowRejectDialog(true)}\r\n                  >\r\n                    Reject\r\n                  </Button>\r\n                  <Button\r\n                    onClick={() => setShowSignDialog(true)}\r\n                  >\r\n                    Approve & Sign\r\n                  </Button>\r\n                </>\r\n              )}\r\n              {approvalDetails.isExpired && (\r\n                <Alert>\r\n                  <AlertTriangle className=\"h-4 w-4\" />\r\n                  <AlertTitle>Expired</AlertTitle>\r\n                  <AlertDescription>\r\n                    This approval request has expired and can no longer be signed.\r\n                  </AlertDescription>\r\n                </Alert>\r\n              )}\r\n              {approvalDetails.isApproved && (\r\n                <Alert>\r\n                  <CheckCircle2 className=\"h-4 w-4\" />\r\n                  <AlertTitle>Approved</AlertTitle>\r\n                  <AlertDescription>\r\n                    This change has been approved and executed.\r\n                  </AlertDescription>\r\n                </Alert>\r\n              )}\r\n            </DialogFooter>\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n\r\n      {/* Sign Confirmation Dialog */}\r\n      <Dialog open={showSignDialog} onOpenChange={setShowSignDialog}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Confirm Approval</DialogTitle>\r\n            <DialogDescription>\r\n              Enter your 2FA code to sign this reserve strategy change.\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          <div className=\"space-y-4 py-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"verification\">Verification Code (optional)</Label>\r\n              <Input\r\n                id=\"verification\"\r\n                placeholder=\"Enter 2FA code for enhanced security\"\r\n                value={verificationCode}\r\n                onChange={(e) => setVerificationCode(e.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => setShowSignDialog(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button \r\n              onClick={() => {\r\n                if (selectedApproval) {\r\n                  signMutation.mutate({ \r\n                    id: selectedApproval, \r\n                    code: verificationCode || undefined \r\n                  });\r\n                }\r\n              }}\r\n              disabled={signMutation.isPending}\r\n            >\r\n              {signMutation.isPending ? 'Signing...' : 'Sign Approval'}\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Reject Dialog */}\r\n      <Dialog open={showRejectDialog} onOpenChange={setShowRejectDialog}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Reject Approval</DialogTitle>\r\n            <DialogDescription>\r\n              Please provide a reason for rejecting this reserve strategy change.\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          <div className=\"space-y-4 py-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"reason\">Rejection Reason</Label>\r\n              <Textarea\r\n                id=\"reason\"\r\n                placeholder=\"Enter reason for rejection (min 10 characters)\"\r\n                value={rejectionReason}\r\n                onChange={(e) => setRejectionReason(e.target.value)}\r\n                rows={4}\r\n              />\r\n            </div>\r\n          </div>\r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => setShowRejectDialog(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button \r\n              variant=\"destructive\"\r\n              onClick={() => {\r\n                if (selectedApproval && rejectionReason.length >= 10) {\r\n                  rejectMutation.mutate({ \r\n                    id: selectedApproval, \r\n                    reason: rejectionReason \r\n                  });\r\n                }\r\n              }}\r\n              disabled={rejectMutation.isPending || rejectionReason.length < 10}\r\n            >\r\n              {rejectMutation.isPending ? 'Rejecting...' : 'Reject'}\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\reserves\\ReservesTable.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":21,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'AllocationDecision' is defined but never used.","line":26,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":49}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from '@/components/ui/table';\nimport { \n  ArrowUpDown, \n  ArrowUp, \n  ArrowDown, \n  Download, \n  Search,\n  TrendingUp,\n  DollarSign,\n  Info\n} from 'lucide-react';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport type { ReservesOutput, AllocationDecision, Company } from '@shared/types/reserves-v11';\n\ninterface ReservesTableProps {\n  output: ReservesOutput;\n  companies: Company[];\n  onExport?: () => void;\n}\n\ntype SortField = 'rank' | 'name' | 'invested' | 'moic' | 'allocation' | 'percent';\ntype SortDirection = 'asc' | 'desc';\n\nexport default function ReservesTable({ output, companies, onExport }: ReservesTableProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortField, setSortField] = useState<SortField>('rank');\n  const [sortDirection, setSortDirection] = useState<SortDirection>('asc');\n  \n  // Create company map for easy lookup\n  const companyMap = useMemo(() => {\n    const map = new Map<string, Company>();\n    companies.forEach(c => map.set(c.id, c));\n    return map;\n  }, [companies]);\n  \n  // Combine allocation data with company data\n  const tableData = useMemo(() => {\n    const { allocations, metadata } = output;\n    const { exit_moic_ranking } = metadata;\n    \n    return allocations.map((allocation) => {\n      const company = companyMap.get(allocation.company_id);\n      const rank = exit_moic_ranking.indexOf(allocation.company_id) + 1;\n      \n      return {\n        rank,\n        id: allocation.company_id,\n        name: company?.name || 'Unknown',\n        invested_cents: company?.invested_cents || 0,\n        exit_moic_bps: company?.exit_moic_bps || 0,\n        stage: company?.stage,\n        sector: company?.sector,\n        allocation_cents: allocation.planned_cents,\n        allocation_percent: company?.invested_cents \n          ? (allocation.planned_cents / company.invested_cents) * 100\n          : 0,\n        cap_cents: allocation.cap_cents,\n        reason: allocation.reason,\n        iteration: allocation.iteration\n      };\n    });\n  }, [output, companyMap]);\n  \n  // Filter and sort data\n  const processedData = useMemo(() => {\n    let filtered = tableData;\n    \n    // Apply search filter\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase();\n      filtered = filtered.filter(row => \n        row.name.toLowerCase().includes(term) ||\n        row.stage?.toLowerCase().includes(term) ||\n        row.sector?.toLowerCase().includes(term)\n      );\n    }\n    \n    // Apply sorting\n    const sorted = [...filtered].sort((a, b) => {\n      let aVal: any, bVal: any;\n      \n      switch (sortField) {\n        case 'rank':\n          aVal = a.rank;\n          bVal = b.rank;\n          break;\n        case 'name':\n          aVal = a.name.toLowerCase();\n          bVal = b.name.toLowerCase();\n          break;\n        case 'invested':\n          aVal = a.invested_cents;\n          bVal = b.invested_cents;\n          break;\n        case 'moic':\n          aVal = a.exit_moic_bps;\n          bVal = b.exit_moic_bps;\n          break;\n        case 'allocation':\n          aVal = a.allocation_cents;\n          bVal = b.allocation_cents;\n          break;\n        case 'percent':\n          aVal = a.allocation_percent;\n          bVal = b.allocation_percent;\n          break;\n        default:\n          return 0;\n      }\n      \n      if (aVal < bVal) return sortDirection === 'asc' ? -1 : 1;\n      if (aVal > bVal) return sortDirection === 'asc' ? 1 : -1;\n      return 0;\n    });\n    \n    return sorted;\n  }, [tableData, searchTerm, sortField, sortDirection]);\n  \n  // Handle sorting\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n  \n  // Format currency\n  const formatCurrency = (cents: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(cents / 100);\n  };\n  \n  // Format percentage\n  const formatPercent = (value: number) => {\n    return `${value.toFixed(1)}%`;\n  };\n  \n  // Format MOIC\n  const formatMoic = (bps: number) => {\n    return `${(bps / 10000).toFixed(2)}x`;\n  };\n  \n  // Get sort icon\n  const getSortIcon = (field: SortField) => {\n    if (sortField !== field) return <ArrowUpDown className=\"w-4 h-4\" />;\n    return sortDirection === 'asc' \n      ? <ArrowUp className=\"w-4 h-4\" />\n      : <ArrowDown className=\"w-4 h-4\" />;\n  };\n  \n  return (\n    <div className=\"space-y-4\">\n      {/* Header with summary stats */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5\" />\n              Reserve Allocations\n            </span>\n            <div className=\"flex gap-2\">\n              {onExport && (\n                <Button onClick={onExport} size=\"sm\" variant=\"outline\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export\n                </Button>\n              )}\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Available</p>\n              <p className=\"text-lg font-semibold\">\n                {formatCurrency(output.metadata.total_available_cents)}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Allocated</p>\n              <p className=\"text-lg font-semibold\">\n                {formatCurrency(output.metadata.total_allocated_cents)}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Remaining</p>\n              <p className=\"text-lg font-semibold\">\n                {formatCurrency(output.remaining_cents)}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Companies Funded</p>\n              <p className=\"text-lg font-semibold\">\n                {output.metadata.companies_funded}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Utilization</p>\n              <p className=\"text-lg font-semibold\">\n                {formatPercent(\n                  (output.metadata.total_allocated_cents / output.metadata.total_available_cents) * 100\n                )}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Search bar */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n        <Input\n          placeholder=\"Search by company, stage, or sector...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"pl-10\"\n        />\n      </div>\n      \n      {/* Data table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleSort('rank')}\n                      className=\"h-auto p-0 font-medium\"\n                    >\n                      Rank {getSortIcon('rank')}\n                    </Button>\n                  </TableHead>\n                  <TableHead>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleSort('name')}\n                      className=\"h-auto p-0 font-medium\"\n                    >\n                      Company {getSortIcon('name')}\n                    </Button>\n                  </TableHead>\n                  <TableHead>Stage</TableHead>\n                  <TableHead>Sector</TableHead>\n                  <TableHead className=\"text-right\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleSort('invested')}\n                      className=\"h-auto p-0 font-medium\"\n                    >\n                      Initial Investment {getSortIcon('invested')}\n                    </Button>\n                  </TableHead>\n                  <TableHead className=\"text-right\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleSort('moic')}\n                      className=\"h-auto p-0 font-medium\"\n                    >\n                      Exit MOIC {getSortIcon('moic')}\n                    </Button>\n                  </TableHead>\n                  <TableHead className=\"text-right\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleSort('allocation')}\n                      className=\"h-auto p-0 font-medium\"\n                    >\n                      Reserve Allocation {getSortIcon('allocation')}\n                    </Button>\n                  </TableHead>\n                  <TableHead className=\"text-right\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleSort('percent')}\n                      className=\"h-auto p-0 font-medium\"\n                    >\n                      % of Initial {getSortIcon('percent')}\n                    </Button>\n                  </TableHead>\n                  <TableHead className=\"text-center\">Pass</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {processedData.map((row) => (\n                  <TableRow key={row.id}>\n                    <TableCell>\n                      <Badge variant={row.rank <= 3 ? 'default' : 'secondary'}>\n                        #{row.rank}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"font-medium\">{row.name}</TableCell>\n                    <TableCell>\n                      {row.stage && (\n                        <Badge variant=\"outline\">{row.stage}</Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>{row.sector || '-'}</TableCell>\n                    <TableCell className=\"text-right\">\n                      {formatCurrency(row.invested_cents)}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <TooltipProvider>\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <span className=\"font-medium\">\n                              {formatMoic(row.exit_moic_bps)}\n                            </span>\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            Expected exit multiple\n                          </TooltipContent>\n                        </Tooltip>\n                      </TooltipProvider>\n                    </TableCell>\n                    <TableCell className=\"text-right font-semibold\">\n                      {formatCurrency(row.allocation_cents)}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <Badge \n                        variant={row.allocation_percent > 100 ? 'default' : 'secondary'}\n                        className=\"font-mono\"\n                      >\n                        {formatPercent(row.allocation_percent)}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-center\">\n                      <Badge variant={row.iteration === 1 ? 'outline' : 'default'}>\n                        {row.iteration}\n                      </Badge>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                \n                {processedData.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={9} className=\"text-center py-8 text-muted-foreground\">\n                      {searchTerm ? 'No companies match your search' : 'No allocations to display'}\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Conservation check indicator */}\n      {output.metadata.conservation_check === false && (\n        <Alert>\n          <Info className=\"h-4 w-4\" />\n          <AlertDescription>\n            Conservation check warning: Small rounding differences detected in allocation totals\n          </AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\reserves\\graduation-reserves-demo.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":17,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'Label' is defined but never used.","line":18,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'Slider' is defined but never used.","line":20,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'GraduationStep' is defined but never used.","line":21,"column":72,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":86},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":92,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":92,"endColumn":56}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { Legend } from 'recharts/es6/component/Legend';\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { computeReservesFromGraduation, type FundDataForReserves, type GraduationStep } from \"@/core/reserves/computeReservesFromGraduation\";\nimport { Calculator, TrendingUp, Target, AlertTriangle } from \"lucide-react\";\n\ninterface Scenario {\n  name: string;\n  description: string;\n  fundData: FundDataForReserves;\n  color: string;\n}\n\nexport default function GraduationReservesDemo() {\n  const [selectedScenario, setSelectedScenario] = useState<number>(0);\n  \n  const scenarios: Scenario[] = [\n    {\n      name: \"Conservative VC\",\n      description: \"Lower graduation rates, higher follow-on checks\",\n      color: \"#ef4444\",\n      fundData: {\n        totalCommitment: 50000000,\n        targetCompanies: 25,\n        avgCheckSize: 800000,\n        deploymentPacePerYear: 10,\n        graduationRates: {\n          seedToA: { graduate: 25, fail: 55, remain: 20, months: 24 },\n          aToB: { graduate: 40, fail: 40, remain: 20, months: 30 },\n          bToC: { graduate: 50, fail: 35, remain: 15, months: 24 }\n        },\n        followOnChecks: { A: 1200000, B: 2000000, C: 3500000 }\n      }\n    },\n    {\n      name: \"Aggressive Growth\",\n      description: \"Higher graduation rates, moderate follow-ons\",\n      color: \"#10b981\",\n      fundData: {\n        totalCommitment: 50000000,\n        targetCompanies: 35,\n        avgCheckSize: 700000,\n        deploymentPacePerYear: 15,\n        graduationRates: {\n          seedToA: { graduate: 45, fail: 35, remain: 20, months: 15 },\n          aToB: { graduate: 65, fail: 20, remain: 15, months: 18 },\n          bToC: { graduate: 70, fail: 20, remain: 10, months: 15 }\n        },\n        followOnChecks: { A: 800000, B: 1500000, C: 2200000 }\n      }\n    },\n    {\n      name: \"Balanced Portfolio\",\n      description: \"Market-average rates and check sizes\",\n      color: \"#3b82f6\",\n      fundData: {\n        totalCommitment: 50000000,\n        targetCompanies: 30,\n        avgCheckSize: 750000,\n        deploymentPacePerYear: 12,\n        graduationRates: {\n          seedToA: { graduate: 35, fail: 45, remain: 20, months: 18 },\n          aToB: { graduate: 50, fail: 30, remain: 20, months: 24 },\n          bToC: { graduate: 60, fail: 25, remain: 15, months: 18 }\n        },\n        followOnChecks: { A: 1000000, B: 1800000, C: 2800000 }\n      }\n    }\n  ];\n\n  const currentScenario = scenarios[selectedScenario];\n  const result = computeReservesFromGraduation(currentScenario.fundData);\n  \n  // Calculate comparison data for all scenarios\n  const comparisonData = scenarios.map((scenario, index) => {\n    const scenarioResult = computeReservesFromGraduation(scenario.fundData);\n    return {\n      name: scenario.name,\n      reserveRatio: scenarioResult.reserveRatioPct,\n      totalReserves: scenarioResult.totalReserves / 1000000, // Convert to millions\n      seriesA: scenarioResult.aggregateByStage.A / 1000000,\n      seriesB: scenarioResult.aggregateByStage.B / 1000000,\n      seriesC: scenarioResult.aggregateByStage.C / 1000000,\n      color: scenario.color\n    };\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const formatPercent = (value: number) => `${value.toFixed(1)}%`;\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"demo-root\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-2xl font-bold flex items-center\">\n                <Calculator className=\"w-6 h-6 mr-2 text-blue-600\" />\n                Graduation-Driven Reserves Engine\n              </CardTitle>\n              <p className=\"text-gray-600 mt-2\">\n                Compare how different graduation rates and follow-on strategies impact your reserve requirements\n              </p>\n            </div>\n            <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700\">\n              Expected Value v1\n            </Badge>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Scenario Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Select Investment Strategy</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {scenarios.map((scenario, index) => (\n              <Button\n                key={index}\n                variant={selectedScenario === index ? \"default\" : \"outline\"}\n                className={`h-auto p-4 text-left justify-start ${\n                  selectedScenario === index ? \"\" : \"hover:bg-gray-50\"\n                }`}\n                onClick={() => setSelectedScenario(index)}\n              >\n                <div>\n                  <div className=\"font-semibold\">{scenario.name}</div>\n                  <div className=\"text-sm text-gray-600 mt-1\">{scenario.description}</div>\n                </div>\n              </Button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Current Scenario Results */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Key Metrics */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center\">\n              <Target className=\"w-5 h-5 mr-2 text-green-600\" />\n              {currentScenario.name} Results\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <div className=\"text-sm font-medium text-blue-600\">Total Reserves</div>\n                  <div className=\"text-2xl font-bold text-blue-900\">\n                    {formatCurrency(result.totalReserves)}\n                  </div>\n                </div>\n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <div className=\"text-sm font-medium text-green-600\">Reserve Ratio</div>\n                  <div className=\"text-2xl font-bold text-green-900\" data-testid=\"demo-ratio\">\n                    {formatPercent(result.reserveRatioPct)}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">Series A Follow-ons:</span>\n                  <span className=\"font-medium\">{formatCurrency(result.aggregateByStage.A)}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">Series B Follow-ons:</span>\n                  <span className=\"font-medium\">{formatCurrency(result.aggregateByStage.B)}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">Series C Follow-ons:</span>\n                  <span className=\"font-medium\">{formatCurrency(result.aggregateByStage.C)}</span>\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                <div className=\"text-sm text-gray-600 space-y-1\">\n                  <div><strong>Companies per Quarter:</strong> {result.assumptions.perQuarter}</div>\n                  <div><strong>Deployment Period:</strong> {result.assumptions.deploymentQuarters} quarters</div>\n                  <div><strong>Target Companies:</strong> {currentScenario.fundData.targetCompanies}</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Graduation Rates */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Graduation Assumptions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {Object.entries(currentScenario.fundData.graduationRates).map(([stage, rates]) => (\n                <div key={stage} className=\"bg-gray-50 p-4 rounded-lg\">\n                  <div className=\"text-sm font-semibold text-gray-700 mb-2\">\n                    {stage === 'seedToA' ? 'Seed ΓåÆ Series A' : \n                     stage === 'aToB' ? 'Series A ΓåÆ Series B' : 'Series B ΓåÆ Series C'}\n                  </div>\n                  <div className=\"grid grid-cols-3 gap-2 text-xs\">\n                    <div>\n                      <div className=\"text-green-600 font-medium\">Graduate: {rates.graduate}%</div>\n                    </div>\n                    <div>\n                      <div className=\"text-red-600 font-medium\">Fail: {rates.fail}%</div>\n                    </div>\n                    <div>\n                      <div className=\"text-yellow-600 font-medium\">Remain: {rates.remain}%</div>\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    Avg time: {rates.months} months\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Scenario Comparison Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg flex items-center\">\n            <BarChart className=\"w-5 h-5 mr-2 text-purple-600\" />\n            Strategy Comparison\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-96\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={comparisonData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis yAxisId=\"left\" label={{ value: 'Reserves ($M)', angle: -90, position: 'insideLeft' }} />\n                <YAxis yAxisId=\"right\" orientation=\"right\" label={{ value: 'Reserve Ratio (%)', angle: 90, position: 'insideRight' }} />\n                <Tooltip \n                  formatter={(value: any, name: string) => {\n                    if (name === 'reserveRatio') return [`${value}%`, 'Reserve Ratio'];\n                    return [`$${value}M`, name];\n                  }}\n                />\n                <Legend />\n                <Bar yAxisId=\"left\" dataKey=\"seriesA\" stackId=\"reserves\" fill=\"#3b82f6\" name=\"Series A\" />\n                <Bar yAxisId=\"left\" dataKey=\"seriesB\" stackId=\"reserves\" fill=\"#10b981\" name=\"Series B\" />\n                <Bar yAxisId=\"left\" dataKey=\"seriesC\" stackId=\"reserves\" fill=\"#f59e0b\" name=\"Series C\" />\n                <Bar yAxisId=\"right\" dataKey=\"reserveRatio\" fill=\"#ef4444\" name=\"Reserve Ratio (%)\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Key Insights */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg flex items-center\">\n            <TrendingUp className=\"w-5 h-5 mr-2 text-orange-600\" />\n            Key Insights\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n              <div className=\"flex items-center mb-2\">\n                <AlertTriangle className=\"w-4 h-4 text-blue-600 mr-2\" />\n                <span className=\"text-sm font-medium text-blue-800\">Conservative Strategy</span>\n              </div>\n              <p className=\"text-sm text-blue-700\">\n                Lower graduation rates require higher reserve ratios ({formatPercent(comparisonData[0].reserveRatio)}) \n                due to fewer companies reaching follow-on stages.\n              </p>\n            </div>\n            \n            <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n              <div className=\"flex items-center mb-2\">\n                <TrendingUp className=\"w-4 h-4 text-green-600 mr-2\" />\n                <span className=\"text-sm font-medium text-green-800\">Aggressive Growth</span>\n              </div>\n              <p className=\"text-sm text-green-700\">\n                High graduation rates with smaller checks create the most capital-efficient reserves \n                ({formatPercent(comparisonData[1].reserveRatio)}).\n              </p>\n            </div>\n            \n            <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200\">\n              <div className=\"flex items-center mb-2\">\n                <Target className=\"w-4 h-4 text-purple-600 mr-2\" />\n                <span className=\"text-sm font-medium text-purple-800\">Dynamic Calculation</span>\n              </div>\n              <p className=\"text-sm text-purple-700\">\n                Reserve ratios automatically adjust based on your portfolio graduation assumptions \n                instead of using fixed percentages.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\reserves\\optimal-reserves-ranking.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Progress' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'sortBy' is assigned a value but never used.","line":51,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'setSortBy' is assigned a value but never used.","line":51,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":51,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'setFilterStage' is assigned a value but never used.","line":52,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'calculateFollowOnMOIC' is assigned a value but never used.","line":55,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":55,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'calculateProbabilityAdjustedReserves' is assigned a value but never used.","line":61,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":61,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'stages' is assigned a value but never used.","line":201,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":201,"endColumn":15}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Award,\n  DollarSign,\n  Target,\n  TrendingUp,\n  AlertTriangle,\n  Info\n} from \"lucide-react\";\n\ninterface PerformanceCase {\n  caseName: string;\n  probability: number;\n  exitValuation: number;\n  exitMOIC: number;\n  initialMOIC: number;\n  followOnMOIC: number;\n  followOnReserves: number;\n}\n\ninterface ReserveRanking {\n  rank: number;\n  company: string;\n  followOnMOIC: number; // Probability-weighted Follow-On MOIC across all cases\n  planned: number;\n  deployed: number;\n  totalReserves: number;\n  efficiency: number;\n  stage: string;\n  sector: string;\n  performanceCases: PerformanceCase[];\n  probabilityAdjustedReserves: number;\n  returnTheFund: number;\n  exitFMV: number;\n}\n\ninterface OptimalReservesRankingProps {\n  className?: string;\n}\n\nexport default function OptimalReservesRanking({ className }: OptimalReservesRankingProps) {\n  const [sortBy, setSortBy] = useState<'rank' | 'moic' | 'planned' | 'deployed'>('rank');\n  const [filterStage, setFilterStage] = useState<string>('all');\n\n  // Calculate Follow-On MOIC using Tactyc methodology\n  const calculateFollowOnMOIC = (cases: PerformanceCase[]): number => {\n    return cases.reduce((weighted, case_) => {\n      return weighted + (case_.followOnMOIC * case_.probability / 100);\n    }, 0);\n  };\n\n  const calculateProbabilityAdjustedReserves = (cases: PerformanceCase[]): number => {\n    return cases.reduce((weighted, case_) => {\n      return weighted + (case_.followOnReserves * case_.probability / 100);\n    }, 0);\n  };\n\n  // Sample reserves ranking data based on exact Tactyc methodology from documentation\n  const reserveRankings: ReserveRanking[] = [\n    {\n      rank: 1,\n      company: \"Company H\",\n      followOnMOIC: 6.35, // Highest expected return on follow-on investment\n      planned: 900000,\n      deployed: 0,\n      totalReserves: 900000,\n      efficiency: 100,\n      stage: \"Series B\",\n      sector: \"Enterprise Software\",\n      performanceCases: [\n        { caseName: \"Downside\", probability: 20, exitValuation: 50000000, exitMOIC: 2.1, initialMOIC: 4.2, followOnMOIC: 1.8, followOnReserves: 500000 },\n        { caseName: \"Base\", probability: 60, exitValuation: 200000000, exitMOIC: 8.4, initialMOIC: 16.8, followOnMOIC: 7.2, followOnReserves: 900000 },\n        { caseName: \"Upside\", probability: 20, exitValuation: 500000000, exitMOIC: 21.0, initialMOIC: 42.0, followOnMOIC: 18.0, followOnReserves: 1200000 }\n      ],\n      probabilityAdjustedReserves: 900000,\n      returnTheFund: 1580000,\n      exitFMV: 15600000\n    },\n    {\n      rank: 2,\n      company: \"Company A\",\n      followOnMOIC: 5.42,\n      planned: 750000,\n      deployed: 0,\n      totalReserves: 750000,\n      efficiency: 100,\n      stage: \"Series A\",\n      sector: \"Fintech\",\n      performanceCases: [\n        { caseName: \"Downside\", probability: 25, exitValuation: 40000000, exitMOIC: 1.6, initialMOIC: 3.2, followOnMOIC: 1.2, followOnReserves: 400000 },\n        { caseName: \"Base\", probability: 50, exitValuation: 150000000, exitMOIC: 6.0, initialMOIC: 12.0, followOnMOIC: 5.8, followOnReserves: 750000 },\n        { caseName: \"Upside\", probability: 25, exitValuation: 300000000, exitMOIC: 12.0, initialMOIC: 24.0, followOnMOIC: 11.5, followOnReserves: 1000000 }\n      ],\n      probabilityAdjustedReserves: 750000,\n      returnTheFund: 2450000,\n      exitFMV: 12800000\n    },\n    {\n      rank: 3,\n      company: \"Company B\",\n      followOnMOIC: 4.45,\n      planned: 400000,\n      deployed: 0,\n      totalReserves: 400000,\n      efficiency: 100,\n      stage: \"Seed\",\n      sector: \"Healthcare\",\n      performanceCases: [\n        { caseName: \"Downside\", probability: 30, exitValuation: 25000000, exitMOIC: 1.25, initialMOIC: 2.5, followOnMOIC: 1.0, followOnReserves: 300000 },\n        { caseName: \"Base\", probability: 50, exitValuation: 80000000, exitMOIC: 4.0, initialMOIC: 8.0, followOnMOIC: 4.8, followOnReserves: 400000 },\n        { caseName: \"Upside\", probability: 20, exitValuation: 180000000, exitMOIC: 9.0, initialMOIC: 18.0, followOnMOIC: 8.5, followOnReserves: 600000 }\n      ],\n      probabilityAdjustedReserves: 420000,\n      returnTheFund: 2880000,\n      exitFMV: 8400000\n    },\n    {\n      rank: 4,\n      company: \"Company X\", // The underperforming example from documentation\n      followOnMOIC: 1.65, // Reduced from original 3.98x due to performance adjustment\n      planned: 900000,\n      deployed: 0,\n      totalReserves: 900000,\n      efficiency: 62, // Lower efficiency due to underperformance\n      stage: \"Series A\",\n      sector: \"Consumer\",\n      performanceCases: [\n        { caseName: \"Downside\", probability: 50, exitValuation: 20000000, exitMOIC: 0.8, initialMOIC: 1.6, followOnMOIC: 0.6, followOnReserves: 400000 },\n        { caseName: \"Base\", probability: 30, exitValuation: 60000000, exitMOIC: 2.4, initialMOIC: 4.8, followOnMOIC: 2.2, followOnReserves: 700000 },\n        { caseName: \"Upside\", probability: 20, exitValuation: 120000000, exitMOIC: 4.8, initialMOIC: 9.6, followOnMOIC: 4.5, followOnReserves: 900000 }\n      ],\n      probabilityAdjustedReserves: 560000,\n      returnTheFund: 4200000,\n      exitFMV: 4800000\n    },\n    {\n      rank: 5,\n      company: \"Company F\",\n      followOnMOIC: 0.83,\n      planned: 400000,\n      deployed: 0,\n      totalReserves: 400000,\n      efficiency: 40,\n      stage: \"Series A\",\n      sector: \"AI/ML\",\n      performanceCases: [\n        { caseName: \"Downside\", probability: 70, exitValuation: 8000000, exitMOIC: 0.4, initialMOIC: 0.8, followOnMOIC: 0.2, followOnReserves: 200000 },\n        { caseName: \"Base\", probability: 25, exitValuation: 25000000, exitMOIC: 1.25, initialMOIC: 2.5, followOnMOIC: 1.0, followOnReserves: 300000 },\n        { caseName: \"Upside\", probability: 5, exitValuation: 80000000, exitMOIC: 4.0, initialMOIC: 8.0, followOnMOIC: 3.8, followOnReserves: 500000 }\n      ],\n      probabilityAdjustedReserves: 245000,\n      returnTheFund: 8500000,\n      exitFMV: 2100000\n    }\n  ];\n\n  const totalPlanned = reserveRankings.reduce((sum, item) => sum + item.planned, 0);\n  const totalDeployed = reserveRankings.reduce((sum, item) => sum + item.deployed, 0);\n  const totalReserves = totalPlanned + totalDeployed;\n\n  const formatMOIC = (value: number) => `${value.toFixed(2)}x`;\n\n  const formatCurrency = (value: number) => {\n    if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;\n    if (value >= 1000) return `$${(value / 1000).toFixed(0)}K`;\n    return `$${value.toLocaleString()}`;\n  };\n\n  const getMOICColor = (moic: number) => {\n    if (moic >= 2.5) return 'text-green-600';\n    if (moic >= 1.5) return 'text-yellow-600';\n    if (moic >= 1.0) return 'text-orange-600';\n    return 'text-red-500';\n  };\n\n  const getMOICBadgeVariant = (moic: number) => {\n    if (moic >= 2.5) return 'default';\n    if (moic >= 1.5) return 'secondary';\n    return 'destructive';\n  };\n\n  const getEfficiencyColor = (efficiency: number) => {\n    if (efficiency >= 80) return 'bg-green-500';\n    if (efficiency >= 60) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  const filteredRankings = filterStage === 'all' \n    ? reserveRankings \n    : reserveRankings.filter(item => item.stage === filterStage);\n\n  const stages = ['all', ...Array.from(new Set(reserveRankings.map(item => item.stage)))];\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Award className=\"h-5 w-5 text-yellow-600\" />\n                <span>Optimal Reserves Ranking</span>\n              </CardTitle>\n              <CardDescription>\n                Portfolio companies ranked by their expected return on the next $1 of investment\n              </CardDescription>\n            </div>\n            <Badge variant=\"outline\" className=\"text-lg px-4 py-2\">\n              {filteredRankings.length} Companies\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Planned</p>\n              <p className=\"text-2xl font-bold\">${(totalPlanned / 1000000).toFixed(1)}M</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Deployed</p>\n              <p className=\"text-2xl font-bold\">${(totalDeployed / 1000000).toFixed(1)}M</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Reserves</p>\n              <p className=\"text-2xl font-bold\">${(totalReserves / 1000000).toFixed(1)}M</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Deployment Rate</p>\n              <p className=\"text-2xl font-bold\">{totalReserves > 0 ? ((totalDeployed / totalReserves) * 100).toFixed(1) : 0}%</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Methodology Info */}\n      <Card className=\"border-blue-200 bg-blue-50\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-start space-x-3\">\n            <Info className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n            <div>\n              <h4 className=\"font-medium text-blue-900 mb-2\">Expected MOIC on Planned Reserves</h4>\n              <p className=\"text-sm text-blue-800\">\n                Tactyc automatically calculates <strong>Exit MOIC on Planned Reserves</strong> - this is the expected return on the next $1 into each company. \n                The multiple is determined based on deal-level forecasts for exits, future financing rounds and performance cases.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Ranking Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Portfolio Company Rankings</CardTitle>\n          <CardDescription>\n            Companies ranked by follow-on multiple with planned and deployed reserves\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full border-collapse\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left p-4 font-medium\">Rank</th>\n                  <th className=\"text-left p-4 font-medium\">Company</th>\n                  <th className=\"text-left p-4 font-medium\">Follow-on MOIC</th>\n                  <th className=\"text-right p-4 font-medium\">Planned</th>\n                  <th className=\"text-right p-4 font-medium\">Deployed</th>\n                  <th className=\"text-left p-4 font-medium\">Efficiency</th>\n                  <th className=\"text-left p-4 font-medium\">Stage</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredRankings.map((ranking) => (\n                  <tr key={ranking.company} className=\"border-b hover:bg-gray-50\">\n                    <td className=\"p-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className={`\n                          w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold text-white\n                          ${ranking.rank <= 3 ? 'bg-yellow-500' : \n                            ranking.rank <= 6 ? 'bg-green-500' : 'bg-gray-500'}\n                        `}>\n                          {ranking.rank}\n                        </div>\n                        {ranking.rank <= 3 && (\n                          <Award className=\"h-4 w-4 text-yellow-500\" />\n                        )}\n                      </div>\n                    </td>\n                    \n                    <td className=\"p-4\">\n                      <div>\n                        <div className=\"font-medium\">{ranking.company}</div>\n                        <div className=\"text-sm text-muted-foreground\">{ranking.sector}</div>\n                      </div>\n                    </td>\n                    \n                    <td className=\"p-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className={`text-lg font-bold ${getMOICColor(ranking.followOnMOIC)}`}>\n                          {formatMOIC(ranking.followOnMOIC)}\n                        </span>\n                        <Badge variant={getMOICBadgeVariant(ranking.followOnMOIC)} className=\"text-xs\">\n                          {ranking.followOnMOIC >= 2.0 ? 'Strong' : \n                           ranking.followOnMOIC >= 1.0 ? 'Moderate' : 'Weak'}\n                        </Badge>\n                      </div>\n                    </td>\n                    \n                    <td className=\"p-4 text-right\">\n                      <div className=\"font-medium\">{formatCurrency(ranking.planned)}</div>\n                    </td>\n                    \n                    <td className=\"p-4 text-right\">\n                      <div className=\"font-medium\">{formatCurrency(ranking.deployed)}</div>\n                    </td>\n                    \n                    <td className=\"p-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                          <div \n                            className={`h-2 rounded-full ${getEfficiencyColor(ranking.efficiency)}`}\n                            style={{ width: `${ranking.efficiency}%` }}\n                          />\n                        </div>\n                        <span className=\"text-sm font-medium\">{ranking.efficiency}%</span>\n                      </div>\n                    </td>\n                    \n                    <td className=\"p-4\">\n                      <Badge variant=\"outline\">{ranking.stage}</Badge>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Insights Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"border-green-200 bg-green-50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <TrendingUp className=\"h-8 w-8 text-green-600\" />\n              <div>\n                <div className=\"text-sm text-green-800\">Top Performer</div>\n                <div className=\"font-bold text-green-900\">{reserveRankings[0]?.company}</div>\n                <div className=\"text-sm text-green-700\">{formatMOIC(reserveRankings[0]?.followOnMOIC)} Follow-on MOIC</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-yellow-200 bg-yellow-50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <AlertTriangle className=\"h-8 w-8 text-yellow-600\" />\n              <div>\n                <div className=\"text-sm text-yellow-800\">Review Required</div>\n                <div className=\"font-bold text-yellow-900\">\n                  {reserveRankings.filter(r => r.followOnMOIC < 1.0).length} Companies\n                </div>\n                <div className=\"text-sm text-yellow-700\">Below 1.0x Follow-on MOIC</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-blue-200 bg-blue-50\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center space-x-3\">\n              <DollarSign className=\"h-8 w-8 text-blue-600\" />\n              <div>\n                <div className=\"text-sm text-blue-800\">Avg Follow-on MOIC</div>\n                <div className=\"font-bold text-blue-900\">\n                  {formatMOIC(reserveRankings.reduce((sum, r) => sum + r.followOnMOIC, 0) / reserveRankings.length)}\n                </div>\n                <div className=\"text-sm text-blue-700\">Portfolio Average</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\scenario\\tactyc-scenario-builder.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'Separator' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used.","line":15,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":15,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":63},{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":15,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":75},{"ruleId":"no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":15,"column":77,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":82},{"ruleId":"no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":15,"column":84,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":90},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDuplicateScenario' is assigned a value but never used.","line":199,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":199,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'handleDeleteScenario' is assigned a value but never used.","line":212,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":212,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'getScenarioTypeColor' is assigned a value but never used.","line":229,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":229,"endColumn":29}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { useFundContext } from \"@/contexts/FundContext\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Plus, Copy, Trash2, PlayCircle, BarChart3, TrendingUp, DollarSign, Users, Target, Info } from \"lucide-react\";\n\ninterface Scenario {\n  id: string;\n  name: string;\n  type: 'construction' | 'current' | 'custom';\n  metrics: {\n    totalInitialInvestments: number;\n    investableCapital: number;\n    initialCapital: number;\n    followOnCapital: number;\n    followOnReserve: number;\n    projectedFundValue: number;\n    grossMultiple: number;\n    tvpi: number;\n    grossIrr: number;\n    netIrr: number;\n    totalToLPs: number;\n  };\n}\n\nconst predefinedScenarios: Scenario[] = [\n  {\n    id: 'construction',\n    name: 'Construction Forecast',\n    type: 'construction',\n    metrics: {\n      totalInitialInvestments: 90.4,\n      investableCapital: 205311250,\n      initialCapital: 118042644,\n      followOnCapital: 87268606,\n      followOnReserve: 42.51,\n      projectedFundValue: 1110377528,\n      grossMultiple: 5.41,\n      tvpi: 4.48,\n      grossIrr: 26.59,\n      netIrr: 22.04,\n      totalToLPs: 878375982\n    }\n  },\n  {\n    id: 'current',\n    name: 'Current Forecast',\n    type: 'current',\n    metrics: {\n      totalInitialInvestments: 70.8,\n      investableCapital: 192120799,\n      initialCapital: 120710493,\n      followOnCapital: 71410306,\n      followOnReserve: 37.17,\n      projectedFundValue: 887587179,\n      grossMultiple: 4.62,\n      tvpi: 3.64,\n      grossIrr: 28.71,\n      netIrr: 23.15,\n      totalToLPs: 714049662\n    }\n  },\n  {\n    id: 'base-case',\n    name: 'Base Case',\n    type: 'custom',\n    metrics: {\n      totalInitialInvestments: 70.3,\n      investableCapital: 191909108,\n      initialCapital: 119939398,\n      followOnCapital: 71969711,\n      followOnReserve: 37.50,\n      projectedFundValue: 867132953,\n      grossMultiple: 4.52,\n      tvpi: 3.56,\n      grossIrr: 28.53,\n      netIrr: 22.96,\n      totalToLPs: 698179514\n    }\n  },\n  {\n    id: 'alpha-writeoff',\n    name: 'Alpha write off',\n    type: 'custom',\n    metrics: {\n      totalInitialInvestments: 71.2,\n      investableCapital: 192158999,\n      initialCapital: 121198350,\n      followOnCapital: 70960648,\n      followOnReserve: 36.93,\n      projectedFundValue: 863860842,\n      grossMultiple: 4.50,\n      tvpi: 3.55,\n      grossIrr: 27.60,\n      netIrr: 22.19,\n      totalToLPs: 695418265\n    }\n  },\n  {\n    id: 'smaller-fund',\n    name: 'Smaller fund $150m',\n    type: 'custom',\n    metrics: {\n      totalInitialInvestments: 49.3,\n      investableCapital: 140337901,\n      initialCapital: 91372597,\n      followOnCapital: 48965303,\n      followOnReserve: 34.89,\n      projectedFundValue: 657975564,\n      grossMultiple: 4.69,\n      tvpi: 3.61,\n      grossIrr: 28.46,\n      netIrr: 22.90,\n      totalToLPs: 530850448\n    }\n  },\n  {\n    id: 'ipo',\n    name: 'IPO',\n    type: 'custom',\n    metrics: {\n      totalInitialInvestments: 72.5,\n      investableCapital: 191164172,\n      initialCapital: 122890726,\n      followOnCapital: 68273446,\n      followOnReserve: 35.71,\n      projectedFundValue: 948227005,\n      grossMultiple: 4.90,\n      tvpi: 3.89,\n      grossIrr: 30.87,\n      netIrr: 24.86,\n      totalToLPs: 752523302\n    }\n  },\n  {\n    id: 'pre-seed-1-5mm',\n    name: 'Pre seed $1.5mm',\n    type: 'custom',\n    metrics: {\n      totalInitialInvestments: 70.6,\n      investableCapital: 184720576,\n      initialCapital: 127789263,\n      followOnCapital: 56931313,\n      followOnReserve: 30.82,\n      projectedFundValue: 861455679,\n      grossMultiple: 4.60,\n      tvpi: 3.56,\n      grossIrr: 27.82,\n      netIrr: 22.21,\n      totalToLPs: 689632956\n    }\n  }\n];\n\nexport default function TactycScenarioBuilder() {\n  const { currentFund, isLoading } = useFundContext();\n  const [scenarios, setScenarios] = useState<Scenario[]>(predefinedScenarios);\n  const [selectedScenario, setSelectedScenario] = useState<string>('construction');\n  const [newScenarioName, setNewScenarioName] = useState('');\n  const [showCreateForm, setShowCreateForm] = useState(false);\n\n  if (isLoading || !currentFund) {\n    return (\n      <div className=\"flex-1 overflow-y-auto p-6 custom-scrollbar\">\n        <div className=\"animate-pulse space-y-8\">\n          <div className=\"h-20 bg-gray-200 rounded-xl\"></div>\n          <div className=\"h-96 bg-gray-200 rounded-xl\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const handleCreateScenario = () => {\n    if (!newScenarioName.trim()) return;\n    \n    const baseScenario = scenarios.find(s => s.id === selectedScenario) || scenarios[0];\n    const newScenario: Scenario = {\n      id: `custom-${Date.now()}`,\n      name: newScenarioName,\n      type: 'custom',\n      metrics: { ...baseScenario.metrics }\n    };\n    \n    setScenarios([...scenarios, newScenario]);\n    setNewScenarioName('');\n    setShowCreateForm(false);\n  };\n\n  const handleDuplicateScenario = (scenarioId: string) => {\n    const scenario = scenarios.find(s => s.id === scenarioId);\n    if (scenario) {\n      const duplicated: Scenario = {\n        ...scenario,\n        id: `copy-${Date.now()}`,\n        name: `${scenario.name} Copy`,\n        type: 'custom'\n      };\n      setScenarios([...scenarios, duplicated]);\n    }\n  };\n\n  const handleDeleteScenario = (scenarioId: string) => {\n    if (scenarios.find(s => s.id === scenarioId)?.type !== 'custom') return;\n    setScenarios(scenarios.filter(s => s.id !== scenarioId));\n  };\n\n  const formatCurrency = (value: number) => {\n    return `$${(value / 1000000).toFixed(0)}M`;\n  };\n\n  const formatPercentage = (value: number) => {\n    return `${value.toFixed(2)}%`;\n  };\n\n  const formatMultiple = (value: number) => {\n    return `${value.toFixed(2)}x`;\n  };\n\n  const getScenarioTypeColor = (type: string) => {\n    switch (type) {\n      case 'construction': return 'bg-blue-100 text-blue-800';\n      case 'current': return 'bg-green-100 text-green-800';\n      case 'custom': return 'bg-purple-100 text-purple-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"flex-1 overflow-y-auto p-6 custom-scrollbar\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">{currentFund.name} / Scenario Builder</h1>\n            <p className=\"text-gray-600 mt-2\">\n              Scenarios are configurations of your fund's parameters to compare performance of different strategies. \n              <a href=\"#\" className=\"text-blue-600 hover:underline ml-1\">See running fund scenarios to learn more.</a>\n            </p>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setShowCreateForm(true)}\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Scenario\n            </Button>\n            <Button size=\"sm\">\n              <PlayCircle className=\"h-4 w-4 mr-2\" />\n              Run Analysis\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Create New Scenario Form */}\n      {showCreateForm && (\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Create New Scenario</CardTitle>\n            <CardDescription>\n              Create a new scenario based on an existing configuration\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"scenario-name\">Scenario Name</Label>\n                <Input\n                  id=\"scenario-name\"\n                  value={newScenarioName}\n                  onChange={(e) => setNewScenarioName(e.target.value)}\n                  placeholder=\"Enter scenario name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"base-scenario\">Base Scenario</Label>\n                <Select value={selectedScenario} onValueChange={setSelectedScenario}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select base scenario\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {scenarios.map((scenario) => (\n                      <SelectItem key={scenario.id} value={scenario.id}>\n                        {scenario.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div className=\"flex space-x-3 mt-6\">\n              <Button onClick={handleCreateScenario}>\n                Create Scenario\n              </Button>\n              <Button variant=\"outline\" onClick={() => setShowCreateForm(false)}>\n                Cancel\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Current Scenarios Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Current Scenarios</CardTitle>\n          <CardDescription>\n            Compare performance across different fund configurations and strategies\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Scenario</th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">\n                    <div className=\"flex flex-col\">\n                      <span>Construction</span>\n                      <span>Forecast</span>\n                    </div>\n                  </th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">\n                    <div className=\"flex flex-col\">\n                      <span>Current</span>\n                      <span>Forecast</span>\n                    </div>\n                  </th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Base Case</th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Alpha write off</th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">\n                    <div className=\"flex flex-col\">\n                      <span>Smaller fund</span>\n                      <span>$150m</span>\n                    </div>\n                  </th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">IPO</th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Pre seed $1.5mm</th>\n                  <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-100\">\n                {/* Capital & Investments Section */}\n                <tr className=\"bg-gray-50\">\n                  <td colSpan={9} className=\"py-3 px-4 font-semibold text-gray-800\">\n                    Capital & Investments\n                  </td>\n                </tr>\n                \n                <tr>\n                  <td className=\"py-3 px-4 text-sm text-gray-600\">\n                    <div className=\"flex flex-col\">\n                      <span>Total Initial Investments Show By Entry</span>\n                      <span>Round</span>\n                    </div>\n                  </td>\n                  {scenarios.map((scenario) => (\n                    <td key={scenario.id} className=\"py-3 px-4 text-center text-sm\">\n                      {scenario.metrics.totalInitialInvestments.toFixed(1)}\n                    </td>\n                  ))}\n                  <td className=\"py-3 px-4\"></td>\n                </tr>\n\n                <tr className=\"bg-gray-50\">\n                  <td className=\"py-3 px-4 text-sm text-gray-600\">Investable Capital</td>\n                  {scenarios.map((scenario) => (\n                    <td key={scenario.id} className=\"py-3 px-4 text-center text-sm\">\n                      {formatCurrency(scenario.metrics.investableCapital)}\n                    </td>\n                  ))}\n                  <td className=\"py-3 px-4\"></td>\n                </tr>\n\n                <tr>\n                  <td className=\"py-3 px-4 text-sm text-gray-600\">Initial Capital</td>\n                  {scenarios.map((scenario) => (\n                    <td key={scenario.id} className=\"py-3 px-4 text-center text-sm\">\n                      {formatCurrency(scenario.metrics.initialCapital)}\n                    </td>\n                  ))}\n                  <td className=\"py-3 px-4\"></td>\n                </tr>\n\n                <tr className=\"bg-gray-50\">\n                  <td className=\"py-3 px-4 text-sm text-gray-600\">Follow-on Capital</td>\n                  {scenarios.map((scenario) => (\n                    <td key={scenario.id} className=\"py-3 px-4 text-center text-sm\">\n                      {formatCurrency(scenario.metrics.followOnCapital)}\n                    </td>\n                  ))}\n                  <td className=\"py-3 px-4\"></td>\n                </tr>\n\n                <tr>\n                  <td className=\"py-3 px-4 text-sm text-gray-600\">Follow-on Reserve</td>\n                  {scenarios.map((scenario) => (\n                    <td key={scenario.id} className=\"py-3 px-4 text-center text-sm\">\n                      {formatPercentage(scenario.metrics.followOnReserve)}\n                    </td>\n                  ))}\n                  <td className=\"py-3 px-4\"></td>\n                </tr>\n\n                {/* Performance Section */}\n                <tr className=\"bg-gray-50\">\n                  <td colSpan={9} className=\"py-3 px-4 font-semibold text-gray-800\">\n                    Performance\n                  </td>\n                </tr>\n\n                <tr>\n                  <td className=\"py-3 px-4 text-sm text-gray-600\">Projected Fund Value</td>\n                  {scenarios.map((scenario) => (\n                    <td key={scenario.id} className=\"py-3 px-4 text-center text-sm\">\n                      {formatCurrency(scenario.metrics.projectedFundValue)}\n                    </td>\n                  ))}\n                  <td className=\"py-3 px-4\"></td>\n                </tr>\n\n                <tr className=\"bg-gray-50\">\n                  <td className=\"py-3 px-4 text-sm text-gray-600\">Gross Multiple</td>\n                  {scenarios.map((scenario) => (\n                    <td key={scenario.id} className=\"py-3 px-4 text-center text-sm\">\n                      {formatMultiple(scenario.metrics.grossMultiple)}\n                    </td>\n                  ))}\n                  <td className=\"py-3 px-4\"></td>\n                </tr>\n\n                <tr>\n                  <td className=\"py-3 px-4 text-sm text-gray-600\">TVPI</td>\n                  {scenarios.map((scenario) => (\n                    <td key={scenario.id} className=\"py-3 px-4 text-center text-sm\">\n                      {formatMultiple(scenario.metrics.tvpi)}\n                    </td>\n                  ))}\n                  <td className=\"py-3 px-4\"></td>\n                </tr>\n\n                <tr className=\"bg-gray-50\">\n                  <td className=\"py-3 px-4 text-sm text-gray-600\">Gross IRR</td>\n                  {scenarios.map((scenario) => (\n                    <td key={scenario.id} className=\"py-3 px-4 text-center text-sm\">\n                      {formatPercentage(scenario.metrics.grossIrr)}\n                    </td>\n                  ))}\n                  <td className=\"py-3 px-4\"></td>\n                </tr>\n\n                <tr>\n                  <td className=\"py-3 px-4 text-sm text-gray-600\">Net IRR</td>\n                  {scenarios.map((scenario) => (\n                    <td key={scenario.id} className=\"py-3 px-4 text-center text-sm\">\n                      {formatPercentage(scenario.metrics.netIrr)}\n                    </td>\n                  ))}\n                  <td className=\"py-3 px-4\"></td>\n                </tr>\n\n                {/* Proceeds Section */}\n                <tr className=\"bg-gray-50\">\n                  <td colSpan={9} className=\"py-3 px-4 font-semibold text-gray-800\">\n                    Proceeds\n                  </td>\n                </tr>\n\n                <tr>\n                  <td className=\"py-3 px-4 text-sm text-gray-600\">Total to LPs</td>\n                  {scenarios.map((scenario) => (\n                    <td key={scenario.id} className=\"py-3 px-4 text-center text-sm\">\n                      {formatCurrency(scenario.metrics.totalToLPs)}\n                    </td>\n                  ))}\n                  <td className=\"py-3 px-4\">\n                    <div className=\"flex space-x-1\">\n                      <Button size=\"sm\" variant=\"outline\" className=\"p-1\">\n                        <Copy className=\"h-3 w-3\" />\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" className=\"p-1\">\n                        <Trash2 className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          {/* Footer Note */}\n          <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n            <div className=\"flex items-start space-x-2\">\n              <Info className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n              <div className=\"text-sm text-blue-700\">\n                <p className=\"font-medium\">Note:</p>\n                <p>Scenario Builder does not evaluate impact of any fund of fund investments. Only direct investments are incorporated in the scenario calculation process.</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\sensitivity\\sensitivity-analysis.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Slider' is defined but never used.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Switch' is defined but never used.","line":26,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":29,"column":59,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":71},{"ruleId":"no-unused-vars","severity":2,"message":"'Info' is defined but never used.","line":29,"column":88,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":92},{"ruleId":"no-unused-vars","severity":2,"message":"'input1' is defined but never used.","line":175,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'input2' is defined but never used.","line":175,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":64},{"ruleId":"no-unused-vars","severity":2,"message":"'output' is defined but never used.","line":175,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":80},{"ruleId":"no-unused-vars","severity":2,"message":"'variableDistributions' is assigned a value but never used.","line":210,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":210,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'setVariableDistributions' is assigned a value but never used.","line":210,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":210,"endColumn":57},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":215,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":215,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":221,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":221,"endColumn":15}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { LineChart } from 'recharts/es6/chart/LineChart';\nimport { Line } from 'recharts/es6/cartesian/Line';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { AreaChart } from 'recharts/es6/chart/AreaChart';\nimport { Area } from 'recharts/es6/cartesian/Area';\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Slider } from '@/components/ui/slider';\nimport { Switch } from '@/components/ui/switch';\nimport { Separator } from '@/components/ui/separator';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Play, Settings, Download, RefreshCw, TrendingUp, TrendingDown, AlertTriangle, Info, Target, Zap } from 'lucide-react';\n\n// Independent Variables (Fund Construction Parameters)\nconst INDEPENDENT_VARIABLES = [\n  {\n    id: 'pre_seed_allocation',\n    name: 'Pre-Seed Allocation %',\n    category: 'Stage Allocation',\n    min: 0,\n    max: 50,\n    default: 15,\n    unit: '%',\n    description: 'Percentage of capital allocated to Pre-Seed investments'\n  },\n  {\n    id: 'seed_allocation',\n    name: 'Seed Allocation %',\n    category: 'Stage Allocation',\n    min: 20,\n    max: 60,\n    default: 40,\n    unit: '%',\n    description: 'Percentage of capital allocated to Seed investments'\n  },\n  {\n    id: 'series_a_allocation',\n    name: 'Series A Allocation %',\n    category: 'Stage Allocation',\n    min: 15,\n    max: 45,\n    default: 30,\n    unit: '%',\n    description: 'Percentage of capital allocated to Series A investments'\n  },\n  {\n    id: 'series_b_allocation',\n    name: 'Series B+ Allocation %',\n    category: 'Stage Allocation',\n    min: 5,\n    max: 25,\n    default: 15,\n    unit: '%',\n    description: 'Percentage of capital allocated to Series B+ investments'\n  },\n  {\n    id: 'follow_on_reserves',\n    name: 'Follow-On Reserves %',\n    category: 'Capital Allocation',\n    min: 30,\n    max: 70,\n    default: 50,\n    unit: '%',\n    description: 'Percentage of capital reserved for follow-on investments'\n  },\n  {\n    id: 'graduation_rate',\n    name: 'Graduation Rate',\n    category: 'Performance Assumptions',\n    min: 0.2,\n    max: 0.8,\n    default: 0.5,\n    unit: 'rate',\n    description: 'Rate at which companies graduate to next funding round'\n  },\n  {\n    id: 'exit_multiple',\n    name: 'Average Exit Multiple',\n    category: 'Performance Assumptions',\n    min: 2,\n    max: 15,\n    default: 5,\n    unit: 'x',\n    description: 'Average multiple on invested capital at exit'\n  },\n  {\n    id: 'management_fee',\n    name: 'Management Fee %',\n    category: 'Fund Economics',\n    min: 1.5,\n    max: 3.0,\n    default: 2.5,\n    unit: '%',\n    description: 'Annual management fee percentage'\n  },\n  {\n    id: 'carry_percentage',\n    name: 'Carried Interest %',\n    category: 'Fund Economics',\n    min: 15,\n    max: 30,\n    default: 20,\n    unit: '%',\n    description: 'Carried interest percentage'\n  }\n];\n\n// Dependent Variables (Return Metrics)\nconst DEPENDENT_VARIABLES = [\n  {\n    id: 'tvpi',\n    name: 'TVPI',\n    description: 'Total Value to Paid-In Capital',\n    format: 'multiplier'\n  },\n  {\n    id: 'net_irr',\n    name: 'Net IRR',\n    description: 'Net Internal Rate of Return',\n    format: 'percentage'\n  },\n  {\n    id: 'dpi',\n    name: 'DPI',\n    description: 'Distributions to Paid-In Capital',\n    format: 'multiplier'\n  },\n  {\n    id: 'moic',\n    name: 'MOIC',\n    description: 'Multiple on Invested Capital',\n    format: 'multiplier'\n  },\n  {\n    id: 'lp_multiple',\n    name: 'LP Net Multiple',\n    description: 'Limited Partner Net Multiple',\n    format: 'multiplier'\n  },\n  {\n    id: 'fund_multiple',\n    name: 'Gross Fund Multiple',\n    description: 'Gross Fund Multiple',\n    format: 'multiplier'\n  }\n];\n\n// Distribution Types for Monte Carlo\nconst DISTRIBUTION_TYPES = [\n  { id: 'fixed', name: 'Fixed', description: 'Constant value across all scenarios' },\n  { id: 'normal', name: 'Normal', description: 'Bell curve distribution around mean' },\n  { id: 'uniform', name: 'Uniform', description: 'Equal probability across range' },\n  { id: 'triangular', name: 'Triangular', description: 'Linear probability with peak at mode' },\n  { id: 'lognormal', name: 'Log-Normal', description: 'Right-skewed with fat tail' }\n];\n\n// Sample sensitivity analysis data\nconst generateSensitivityData = (input1: string, input2: string, output: string) => {\n  const data = [];\n  for (let i = 0; i <= 10; i++) {\n    for (let j = 0; j <= 10; j++) {\n      const x = i * 0.1;\n      const y = j * 0.1;\n      const value = 2.5 + x * 2 + y * 1.5 + Math.sin(x * Math.PI) * 0.5 + Math.cos(y * Math.PI) * 0.3;\n      data.push({\n        input1: x,\n        input2: y,\n        output: value,\n        label: `${(x * 100).toFixed(0)}% / ${(y * 100).toFixed(0)}%`\n      });\n    }\n  }\n  return data;\n};\n\n// Sample Monte Carlo results\nconst MONTE_CARLO_RESULTS = [\n  { scenario: 1, tvpi: 2.1, irr: 15.2, dpi: 1.8 },\n  { scenario: 2, tvpi: 2.8, irr: 22.1, dpi: 2.1 },\n  { scenario: 3, tvpi: 3.2, irr: 25.8, dpi: 2.4 },\n  { scenario: 4, tvpi: 1.9, irr: 12.5, dpi: 1.6 },\n  { scenario: 5, tvpi: 4.1, irr: 31.2, dpi: 3.1 },\n  // ... more scenarios would be generated\n];\n\nexport default function SensitivityAnalysis() {\n  const [selectedInput1, setSelectedInput1] = useState('seed_allocation');\n  const [selectedInput2, setSelectedInput2] = useState('graduation_rate');\n  const [selectedOutput, setSelectedOutput] = useState('tvpi');\n  const [isRunning, setIsRunning] = useState(false);\n  const [activeTab, setActiveTab] = useState('two-way');\n  const [monteCarloIterations, setMonteCarloIterations] = useState(1000);\n  const [variableDistributions, setVariableDistributions] = useState<Record<string, any>>({});\n\n  const runSensitivityAnalysis = () => {\n    setIsRunning(true);\n    // Simulate analysis running\n    setTimeout(() => setIsRunning(false), 2000);\n  };\n\n  const runMonteCarloAnalysis = () => {\n    setIsRunning(true);\n    // Simulate Monte Carlo running\n    setTimeout(() => setIsRunning(false), 3000);\n  };\n\n  const sensitivityData = generateSensitivityData(selectedInput1, selectedInput2, selectedOutput);\n  const input1Variable = INDEPENDENT_VARIABLES.find(v => v.id === selectedInput1);\n  const input2Variable = INDEPENDENT_VARIABLES.find(v => v.id === selectedInput2);\n  const outputVariable = DEPENDENT_VARIABLES.find(v => v.id === selectedOutput);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Sensitivity Analysis</h1>\n          <p className=\"text-gray-600 mt-1\">Stress test fund parameters and evaluate downside potential through scenario modeling</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Button variant=\"outline\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Results\n          </Button>\n          <Button variant=\"outline\">\n            <Settings className=\"h-4 w-4 mr-2\" />\n            Configure\n          </Button>\n        </div>\n      </div>\n\n      {/* Analysis Type Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"two-way\">Two-Way Sensitivity</TabsTrigger>\n          <TabsTrigger value=\"one-way\">One-Way Analysis</TabsTrigger>\n          <TabsTrigger value=\"monte-carlo\">Monte Carlo</TabsTrigger>\n          <TabsTrigger value=\"stress-test\">Stress Testing</TabsTrigger>\n        </TabsList>\n\n        {/* Two-Way Sensitivity Analysis */}\n        <TabsContent value=\"two-way\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            {/* Configuration Panel */}\n            <div className=\"lg:col-span-1\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Configuration</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"input1\">Input Variable 1</Label>\n                    <Select value={selectedInput1} onValueChange={setSelectedInput1}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {INDEPENDENT_VARIABLES.map((variable) => (\n                          <SelectItem key={variable.id} value={variable.id}>\n                            {variable.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {input1Variable && (\n                      <p className=\"text-xs text-gray-500 mt-1\">{input1Variable.description}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"input2\">Input Variable 2</Label>\n                    <Select value={selectedInput2} onValueChange={setSelectedInput2}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {INDEPENDENT_VARIABLES.map((variable) => (\n                          <SelectItem key={variable.id} value={variable.id}>\n                            {variable.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {input2Variable && (\n                      <p className=\"text-xs text-gray-500 mt-1\">{input2Variable.description}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"output\">Output Metric</Label>\n                    <Select value={selectedOutput} onValueChange={setSelectedOutput}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {DEPENDENT_VARIABLES.map((variable) => (\n                          <SelectItem key={variable.id} value={variable.id}>\n                            {variable.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    {outputVariable && (\n                      <p className=\"text-xs text-gray-500 mt-1\">{outputVariable.description}</p>\n                    )}\n                  </div>\n\n                  <Separator />\n\n                  <Button \n                    onClick={runSensitivityAnalysis} \n                    disabled={isRunning} \n                    className=\"w-full\"\n                  >\n                    {isRunning ? (\n                      <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                    ) : (\n                      <Play className=\"h-4 w-4 mr-2\" />\n                    )}\n                    Run Sensitivity\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Results Panel */}\n            <div className=\"lg:col-span-3 space-y-6\">\n              {/* Module 1: Two-Way Analysis */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Target className=\"h-5 w-5\" />\n                    <span>Two-Way Sensitivity Matrix</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    {/* Heat Map Placeholder */}\n                    <div className=\"bg-gray-50 rounded-lg p-6 flex items-center justify-center min-h-[300px]\">\n                      <div className=\"text-center\">\n                        <TrendingUp className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                        <p className=\"text-gray-600\">Sensitivity Heat Map</p>\n                        <p className=\"text-sm text-gray-500 mt-2\">\n                          {input1Variable?.name} vs {input2Variable?.name}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Summary Table */}\n                    <div className=\"space-y-4\">\n                      <h4 className=\"font-medium\">Scenario Summary</h4>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center p-3 bg-green-50 rounded-lg\">\n                          <span className=\"text-sm font-medium text-green-800\">Best Case</span>\n                          <span className=\"text-green-700\">4.2x TVPI</span>\n                        </div>\n                        <div className=\"flex justify-between items-center p-3 bg-blue-50 rounded-lg\">\n                          <span className=\"text-sm font-medium text-blue-800\">Base Case</span>\n                          <span className=\"text-blue-700\">2.8x TVPI</span>\n                        </div>\n                        <div className=\"flex justify-between items-center p-3 bg-red-50 rounded-lg\">\n                          <span className=\"text-sm font-medium text-red-800\">Worst Case</span>\n                          <span className=\"text-red-700\">1.4x TVPI</span>\n                        </div>\n                      </div>\n                      \n                      <Separator />\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">Standard Deviation:</span>\n                          <span className=\"font-medium\">0.85x</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">95% Confidence Interval:</span>\n                          <span className=\"font-medium\">1.8x - 3.9x</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">Probability &gt; 2.0x:</span>\n                          <span className=\"font-medium text-green-600\">78%</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Module 2 & 3: Individual Variable Analysis */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">{input1Variable?.name} Impact</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-64\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <LineChart data={sensitivityData.filter((_, i) => i % 11 === 0)}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"input1\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Line type=\"monotone\" dataKey=\"output\" stroke=\"#3b82f6\" strokeWidth={2} />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">{input2Variable?.name} Impact</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-64\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <LineChart data={sensitivityData.filter(d => d.input1 === 0.5)}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"input2\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Line type=\"monotone\" dataKey=\"output\" stroke=\"#10b981\" strokeWidth={2} />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* One-Way Analysis */}\n        <TabsContent value=\"one-way\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Single Variable Sensitivity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <div className=\"space-y-4\">\n                  <Label>Select Variable to Analyze</Label>\n                  <Select value={selectedInput1} onValueChange={setSelectedInput1}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {INDEPENDENT_VARIABLES.map((variable) => (\n                        <SelectItem key={variable.id} value={variable.id}>\n                          {variable.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  \n                  <div className=\"space-y-3\">\n                    <h4 className=\"font-medium\">Impact Ranking</h4>\n                    {DEPENDENT_VARIABLES.map((dep, index) => (\n                      <div key={dep.id} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                        <span className=\"text-sm\">{dep.name}</span>\n                        <Badge variant={index < 2 ? 'default' : 'secondary'}>\n                          {index === 0 ? 'High' : index === 1 ? 'Medium' : 'Low'}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                \n                <div className=\"lg:col-span-2\">\n                  <div className=\"h-80\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <LineChart data={sensitivityData.filter((_, i) => i % 11 === 0)}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"input1\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Line type=\"monotone\" dataKey=\"output\" stroke=\"#3b82f6\" strokeWidth={2} />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Monte Carlo Analysis */}\n        <TabsContent value=\"monte-carlo\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            <div className=\"lg:col-span-1\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Monte Carlo Setup</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label>Number of Iterations</Label>\n                    <Input\n                      type=\"number\"\n                      value={monteCarloIterations}\n                      onChange={(e) => setMonteCarloIterations(parseInt(e.target.value))}\n                      min={100}\n                      max={10000}\n                      step={100}\n                    />\n                  </div>\n\n                  <Separator />\n\n                  <div className=\"space-y-3\">\n                    <h4 className=\"font-medium\">Variable Distributions</h4>\n                    <ScrollArea className=\"h-40\">\n                      {INDEPENDENT_VARIABLES.slice(0, 5).map((variable) => (\n                        <div key={variable.id} className=\"space-y-2 mb-3\">\n                          <Label className=\"text-xs\">{variable.name}</Label>\n                          <Select defaultValue=\"normal\">\n                            <SelectTrigger className=\"h-8\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {DISTRIBUTION_TYPES.map((dist) => (\n                                <SelectItem key={dist.id} value={dist.id}>\n                                  {dist.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      ))}\n                    </ScrollArea>\n                  </div>\n\n                  <Button \n                    onClick={runMonteCarloAnalysis} \n                    disabled={isRunning} \n                    className=\"w-full\"\n                  >\n                    {isRunning ? (\n                      <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                    ) : (\n                      <Zap className=\"h-4 w-4 mr-2\" />\n                    )}\n                    Run Monte Carlo\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"lg:col-span-3 space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Probability Distribution</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <AreaChart data={MONTE_CARLO_RESULTS}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"tvpi\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Area type=\"monotone\" dataKey=\"scenario\" stroke=\"#3b82f6\" fill=\"#3b82f6\" fillOpacity={0.3} />\n                      </AreaChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-2xl font-bold text-green-600\">87%</div>\n                    <p className=\"text-sm text-gray-600\">Probability &gt; 2.0x TVPI</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-2xl font-bold text-blue-600\">3.2x</div>\n                    <p className=\"text-sm text-gray-600\">Expected TVPI</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-2xl font-bold text-orange-600\">┬▒1.4x</div>\n                    <p className=\"text-sm text-gray-600\">95% Confidence Range</p>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Stress Testing */}\n        <TabsContent value=\"stress-test\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <AlertTriangle className=\"h-5 w-5 text-orange-500\" />\n                <span>Downside Stress Testing</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium\">Stress Test Scenarios</h4>\n                  <div className=\"space-y-3\">\n                    {[\n                      { name: 'Market Crash', impact: 'TVPI: 2.8x ΓåÆ 1.2x', severity: 'high' },\n                      { name: 'Reduced Graduation', impact: 'IRR: 18% ΓåÆ 8%', severity: 'medium' },\n                      { name: 'Extended Timeline', impact: 'DPI Delay: +3 years', severity: 'medium' },\n                      { name: 'Zero Exits', impact: 'DPI: 1.8x ΓåÆ 0.0x', severity: 'high' }\n                    ].map((scenario, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                        <div>\n                          <p className=\"font-medium text-sm\">{scenario.name}</p>\n                          <p className=\"text-xs text-gray-600\">{scenario.impact}</p>\n                        </div>\n                        <Badge variant={scenario.severity === 'high' ? 'destructive' : 'secondary'}>\n                          {scenario.severity}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium\">Downside Protection</h4>\n                  <div className=\"h-48\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <BarChart data={[\n                        { scenario: 'Base', value: 2.8 },\n                        { scenario: 'Mild Stress', value: 2.1 },\n                        { scenario: 'Severe Stress', value: 1.4 },\n                        { scenario: 'Extreme Stress', value: 0.8 }\n                      ]}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"scenario\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Bar dataKey=\"value\" fill=\"#ef4444\" />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\timeline\\TimelineSlider.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'time' is defined but never used.","line":31,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'onTimeChange' is defined but never used.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":15}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { format } from 'date-fns/format';\nimport { cn } from '@/lib/utils';\n\n// Chart libraries removed for bundle optimization\nconst ChartPlaceholder = ({ title }: { title: string }) => (\n  <div className=\"h-40 bg-gray-50 rounded-lg flex flex-col items-center justify-center\">\n    <div className=\"w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center mb-3\">\n      <div className=\"h-6 w-6 text-gray-400\">≡ƒôè</div>\n    </div>\n    <p className=\"text-gray-500 font-medium text-sm\">{title}</p>\n    <p className=\"text-gray-400 text-xs mt-1\">Interactive timeline - data available via API</p>\n  </div>\n);\n\ninterface TimelineEvent {\n  id: string;\n  time: Date;\n  type: string;\n  label?: string;\n}\n\ninterface TimelineSliderProps {\n  events: TimelineEvent[];\n  currentTime: Date;\n  onTimeChange: (time: Date) => void;\n  width?: number;\n  height?: number;\n  className?: string;\n}\n\n\nexport function TimelineSlider({\n  events,\n  currentTime,\n  onTimeChange,\n  width = 800,\n  height = 120,\n  className,\n}: TimelineSliderProps) {\n  return (\n    <div className={cn('relative select-none', className)} style={{ width, height }}>\n      <ChartPlaceholder title=\"Interactive Timeline\" />\n      \n      {/* Current time display */}\n      <div className=\"absolute top-2 right-2 bg-white px-2 py-1 rounded shadow-sm text-sm font-mono\">\n        {format(currentTime, 'yyyy-MM-dd HH:mm:ss')}\n      </div>\n      \n      {/* Event count display */}\n      <div className=\"absolute bottom-2 left-2 text-xs text-gray-500\">\n        {events.length} events\n      </div>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\BrandShowcase.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\OctagonalPowerIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\POVLogo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\PremiumCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\alert-dialog.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":54,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":54,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":68,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":68,"endColumn":39}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\alert.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":28,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":29,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":29,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'HTMLParagraphElement' is not defined.","line":41,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":41,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'HTMLHeadingElement' is not defined.","line":42,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":42,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'HTMLParagraphElement' is not defined.","line":55,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'HTMLParagraphElement' is not defined.","line":56,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":56,"endColumn":44}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, children, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  >\n    {children || \"Alert\"}\n  </h5>\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\badge.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":32,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\breadcrumb.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLElement' is not defined.","line":13,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":13,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'HTMLOListElement' is not defined.","line":21,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'HTMLLIElement' is not defined.","line":36,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":36,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'HTMLAnchorElement' is not defined.","line":48,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":48,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'HTMLSpanElement' is not defined.","line":66,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":66,"endColumn":18}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\button.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLButtonElement' is not defined.","line":42,"column":38,"nodeType":"Identifier","messageId":"undef","endLine":42,"endColumn":55},{"ruleId":"no-undef","severity":2,"message":"'HTMLButtonElement' is not defined.","line":47,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":47,"endColumn":50}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 font-poppins shadow-card\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-charcoal text-white hover:bg-charcoal-800 hover:shadow-elevated\",\n        destructive:\n          \"bg-error text-white hover:bg-error-dark\",\n        outline:\n          \"border border-charcoal/20 bg-white text-charcoal hover:bg-charcoal hover:text-white\",\n        secondary:\n          \"bg-beige text-charcoal hover:bg-beige-400\",\n        ghost: \"hover:bg-charcoal/10 hover:text-charcoal\",\n        link: \"text-charcoal underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\card.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":11,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":12,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":26,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":27,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":38,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":38,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":39,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":53,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":53,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":54,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":54,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":65,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":65,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":66,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":66,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":73,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":73,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":74,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":74,"endColumn":38}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg bg-white border-0 text-charcoal shadow-card hover:shadow-elevated transition-shadow duration-200 font-poppins\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-lg font-inter font-semibold leading-none tracking-tight text-charcoal\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-charcoal/70\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\carousel.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":24,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":49,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":49,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":50,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":50,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":92,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":92,"endColumn":49},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":157,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":157,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":158,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":158,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":179,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":179,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":180,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":180,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'HTMLButtonElement' is not defined.","line":201,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":201,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'HTMLButtonElement' is not defined.","line":230,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":230,"endColumn":20}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\chart-core.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'k' is defined but never used.","line":11,"column":4,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":5},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":49,"column":60,"nodeType":"Identifier","messageId":"undef","endLine":49,"endColumn":74},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":55,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":17}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nexport function useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\n// Skeleton loader for chart loading state\nexport function ChartSkeleton({ height = 400 }: { height?: number }) {\n  return (\n    <div \n      className=\"w-full animate-pulse rounded-md bg-muted\"\n      style={{ height }}\n    />\n  )\n}\n\n// Lazy-loaded Recharts bundle\nconst RechartsBundle = React.lazy(() => import('./recharts-bundle'))\n\ninterface ChartContainerProps extends React.HTMLAttributes<HTMLDivElement> {\n  config: ChartConfig\n  children: React.ReactNode\n}\n\nexport const ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  ChartContainerProps\n>(({ className, children, config, ...props }, ref) => {\n  // Prevent accidental server-side or critical path execution\n  if (typeof window === 'undefined' || !children) {\n    return <div className=\"h-40 w-full bg-muted rounded-md\" />\n  }\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <React.Suspense fallback={<ChartSkeleton />}>\n          <RechartsBundle config={config}>\n            {children}\n          </RechartsBundle>\n        </React.Suspense>\n      </div>\n    </ChartContext.Provider>\n  )\n})\n\nChartContainer.displayName = \"ChartContainer\"\n\n// Re-export types and utilities that don't depend on Recharts\nexport type { ChartContextProps }\n\n// Helper to extract item config from a payload\nexport function getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\command.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLSpanElement' is not defined.","line":133,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":133,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" data-cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\context-menu.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLSpanElement' is not defined.","line":174,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":174,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\dialog.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":64,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":78,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":78,"endColumn":39}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\drawer.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":66,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":66,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":77,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":77,"endColumn":39}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\dropdown-menu.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLSpanElement' is not defined.","line":177,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":177,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\error-boundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\form.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":81,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":81,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":82,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":82,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'HTMLParagraphElement' is not defined.","line":134,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":134,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'HTMLParagraphElement' is not defined.","line":135,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":135,"endColumn":44},{"ruleId":"no-undef","severity":2,"message":"'HTMLParagraphElement' is not defined.","line":151,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":151,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'HTMLParagraphElement' is not defined.","line":152,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":152,"endColumn":44}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\input.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLInputElement' is not defined.","line":10,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":48}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\menubar.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLSpanElement' is not defined.","line":231,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":231,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\pagination.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLUListElement' is not defined.","line":23,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":23,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'HTMLLIElement' is not defined.","line":35,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":35,"endColumn":16}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  children,\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  >\n    {children || \"Page\"}\n  </a>\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\recharts-bundle.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":64,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":219,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":219,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":254,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":254,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is assigned a value but never used.","line":261,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":261,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":279,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":279,"endColumn":17}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n\"use client\"\n\nimport * as React from \"react\"\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { Legend } from 'recharts/es6/component/Legend';\nimport { cn } from \"@/lib/utils\"\nimport type { ChartConfig } from './chart-core'\nimport { useChart, getPayloadConfigFromPayload } from './chart-core'\n\n// Re-export all Recharts components that are used in the app\nexport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nexport { Tooltip } from 'recharts/es6/component/Tooltip';\nexport { Legend } from 'recharts/es6/component/Legend';\nexport { Cell } from 'recharts/es6/component/Cell';\nexport { Label } from 'recharts/es6/component/Label';\nexport { LabelList } from 'recharts/es6/component/LabelList';\n\n// Chart types\nexport { AreaChart } from 'recharts/es6/chart/AreaChart';\nexport { BarChart } from 'recharts/es6/chart/BarChart';\nexport { LineChart } from 'recharts/es6/chart/LineChart';\nexport { PieChart } from 'recharts/es6/chart/PieChart';\nexport { RadarChart } from 'recharts/es6/chart/RadarChart';\nexport { RadialBarChart } from 'recharts/es6/chart/RadialBarChart';\nexport { ScatterChart } from 'recharts/es6/chart/ScatterChart';\nexport { ComposedChart } from 'recharts/es6/chart/ComposedChart';\nexport { Treemap } from 'recharts/es6/chart/Treemap';\n\n// Cartesian components\nexport { Area } from 'recharts/es6/cartesian/Area';\nexport { Bar } from 'recharts/es6/cartesian/Bar';\nexport { Line } from 'recharts/es6/cartesian/Line';\nexport { Scatter } from 'recharts/es6/cartesian/Scatter';\nexport { XAxis } from 'recharts/es6/cartesian/XAxis';\nexport { YAxis } from 'recharts/es6/cartesian/YAxis';\nexport { ZAxis } from 'recharts/es6/cartesian/ZAxis';\nexport { Brush } from 'recharts/es6/cartesian/Brush';\nexport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nexport { ReferenceLine } from 'recharts/es6/cartesian/ReferenceLine';\nexport { ReferenceDot } from 'recharts/es6/cartesian/ReferenceDot';\nexport { ReferenceArea } from 'recharts/es6/cartesian/ReferenceArea';\nexport { ErrorBar } from 'recharts/es6/cartesian/ErrorBar';\n\n// Polar components\nexport { Pie } from 'recharts/es6/polar/Pie';\nexport { Radar } from 'recharts/es6/polar/Radar';\nexport { RadialBar } from 'recharts/es6/polar/RadialBar';\nexport { PolarGrid } from 'recharts/es6/polar/PolarGrid';\nexport { PolarAngleAxis } from 'recharts/es6/polar/PolarAngleAxis';\nexport { PolarRadiusAxis } from 'recharts/es6/polar/PolarRadiusAxis';\n\n// Shapes\nexport { Cross } from 'recharts/es6/shape/Cross';\nexport { Curve } from 'recharts/es6/shape/Curve';\nexport { Dot } from 'recharts/es6/shape/Dot';\nexport { Polygon } from 'recharts/es6/shape/Polygon';\nexport { Rectangle } from 'recharts/es6/shape/Rectangle';\nexport { Sector } from 'recharts/es6/shape/Sector';\n\n// Chart UI components with shadcn/ui styling\nexport const ChartTooltip = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n      payload?: any\n      label?: any\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item: any, index: number) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.fill || item.color\n\n            return formatter && item.value !== null ? (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"[&>svg]:text-muted-foreground\",\n                  nestLabel && \"items-center\",\n                  \"flex w-full items-center justify-between gap-2\"\n                )}\n              >\n                {formatter(item.value, item.name, item, index, payload)}\n              </div>\n            ) : (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full items-center justify-between gap-2\",\n                  \"[&>svg]:text-muted-foreground\"\n                )}\n              >\n                <div\n                  className={cn(\n                    \"flex items-center gap-1.5\",\n                    nestLabel && \"w-full justify-between\"\n                  )}\n                >\n                  {!hideIndicator && (\n                    <div\n                      className={cn(\n                        \"h-2.5 w-2.5 shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                        indicator === \"dot\" && \"rounded-full\",\n                        indicator === \"line\" && \"w-1\",\n                        indicator === \"dashed\" && \"w-0 border-[1.5px] border-dashed\"\n                      )}\n                      style={\n                        {\n                          \"--color-bg\": indicatorColor,\n                          \"--color-border\": indicatorColor,\n                        } as React.CSSProperties\n                      }\n                    />\n                  )}\n                  <div\n                    className={cn(\n                      \"flex flex-1 items-baseline gap-2 [&>span]:truncate\",\n                      nestLabel && \"justify-between text-right\"\n                    )}\n                  >\n                    <span className=\"text-muted-foreground\">\n                      {itemConfig?.label || item.name}\n                    </span>\n                    {nestLabel ? <span className=\"font-mono font-medium text-foreground\">{tooltipLabel}</span> : null}\n                  </div>\n                </div>\n                <span className=\"font-mono font-medium text-right text-foreground\">\n                  {item.value?.toLocaleString()}\n                </span>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\n\nexport const ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof ChartTooltip> & {\n    hideLabel?: boolean\n    hideIndicator?: boolean\n    indicator?: \"line\" | \"dot\" | \"dashed\"\n    nameKey?: string\n    labelKey?: string\n    config?: ChartConfig\n  }\n>((props, ref) => {\n  const { config } = useChart()\n  const { className, hideLabel, hideIndicator, indicator, nameKey, labelKey, ...rest } = props\n\n  if (!props.active || !props.payload?.length) {\n    return null\n  }\n\n  return (\n    <ChartTooltip\n      ref={ref}\n      className={className}\n      hideLabel={hideLabel}\n      hideIndicator={hideIndicator}\n      indicator={indicator}\n      nameKey={nameKey}\n      labelKey={labelKey}\n      config={config}\n      {...rest}\n    />\n  )\n})\n\nChartTooltipContent.displayName = \"ChartTooltipContent\"\n\nexport const ChartLegend = React.forwardRef<\n  HTMLDivElement,\n  Omit<React.ComponentProps<typeof Legend>, \"content\"> & {\n    content?: React.ComponentType<any> | React.ReactElement;\n    className?: string;\n    nameKey?: string;\n  }\n>(({ className, ...props }, ref) => {\n  const { config } = useChart()\n\n  return (\n    <Legend\n      ref={ref as any}\n      className={cn(\n        \"flex flex-wrap items-center justify-center gap-4 text-xs\",\n        className\n      )}\n      content={ChartLegendContent as any}\n      {...props}\n    />\n  )\n})\n\nChartLegend.displayName = \"ChartLegend\"\n\nexport const ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    payload?: any\n    verticalAlign?: \"top\" | \"bottom\"\n    hideIcon?: boolean\n    nameKey?: string\n  }\n>(({ className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey }, ref) => {\n  const { config } = useChart()\n\n  if (!payload?.length) {\n    return null\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"flex items-center justify-center gap-4 text-xs\",\n        verticalAlign === \"top\" && \"pb-4\",\n        verticalAlign === \"bottom\" && \"pt-4\",\n        className\n      )}\n    >\n      {payload.map((item: any) => {\n        const key = `${nameKey || item.dataKey || \"value\"}`\n        const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n        return (\n          <div key={item.value} className=\"flex items-center gap-1.5\">\n            {!hideIcon && (\n              <div\n                className=\"h-2 w-2 rounded-[2px] bg-[--color-bg]\"\n                style={{\n                  \"--color-bg\": item.color || itemConfig?.color,\n                } as React.CSSProperties}\n              />\n            )}\n            <span className=\"max-w-[100px] truncate\">\n              {itemConfig?.label || item.value}\n            </span>\n          </div>\n        )\n      })}\n    </div>\n  )\n})\n\nChartLegendContent.displayName = \"ChartLegendContent\"\n\n// Component dispatcher for lazy loading\nconst componentMap = {\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ResponsiveContainer,\n  Tooltip,\n  Legend\n};\n\nconst RechartsDispatcher = React.forwardRef<any, any & { component: string }>((props, ref) => {\n  const { component, ...rest } = props;\n  const Component = componentMap[component as keyof typeof componentMap];\n  \n  if (!Component) {\n    return null;\n  }\n  \n  return <Component ref={ref} {...rest as any} />;\n});\n\nexport default RechartsDispatcher;","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\resizable.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":16,"column":4,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":32,"column":4,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":9}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\sheet.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":85,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":85,"endColumn":39},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":99,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":99,"endColumn":39}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\sidebar.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":41,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":43,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":60,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":60,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":64,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":87,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'KeyboardEvent' is not defined.","line":110,"column":37,"nodeType":"Identifier","messageId":"undef","endLine":110,"endColumn":50},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":169,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":169,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLButtonElement' is not defined.","line":302,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":302,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":331,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":331,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":367,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":367,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":382,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":382,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":412,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":412,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":430,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":430,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":445,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":445,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLButtonElement' is not defined.","line":466,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":466,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":489,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":489,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLUListElement' is not defined.","line":502,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":502,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'HTMLLIElement' is not defined.","line":515,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":515,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'HTMLButtonElement' is not defined.","line":550,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":550,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'HTMLButtonElement' is not defined.","line":609,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":609,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":640,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":640,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":661,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":661,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'HTMLUListElement' is not defined.","line":699,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":699,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'HTMLLIElement' is not defined.","line":716,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":716,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'HTMLAnchorElement' is not defined.","line":722,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":722,"endColumn":20}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\skeleton.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":11,"column":4,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":9},{"ruleId":"no-undef","severity":2,"message":"'HTMLDivElement' is not defined.","line":11,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":39}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\table.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLTableElement' is not defined.","line":11,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'HTMLTableElement' is not defined.","line":12,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":40},{"ruleId":"no-undef","severity":2,"message":"'HTMLTableSectionElement' is not defined.","line":25,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'HTMLTableSectionElement' is not defined.","line":26,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'HTMLTableSectionElement' is not defined.","line":33,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":33,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'HTMLTableSectionElement' is not defined.","line":34,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":34,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'HTMLTableSectionElement' is not defined.","line":45,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":45,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'HTMLTableSectionElement' is not defined.","line":46,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":46,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'HTMLTableRowElement' is not defined.","line":60,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":60,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'HTMLTableRowElement' is not defined.","line":61,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":61,"endColumn":43},{"ruleId":"no-undef","severity":2,"message":"'HTMLTableCellElement' is not defined.","line":75,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":75,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'HTMLTableCellElement' is not defined.","line":76,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":76,"endColumn":46},{"ruleId":"no-undef","severity":2,"message":"'HTMLTableCellElement' is not defined.","line":90,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":90,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'HTMLTableCellElement' is not defined.","line":91,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":91,"endColumn":46},{"ruleId":"no-undef","severity":2,"message":"'HTMLTableCaptionElement' is not defined.","line":102,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":102,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'HTMLTableCaptionElement' is not defined.","line":103,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":103,"endColumn":47}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\textarea.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'HTMLTextAreaElement' is not defined.","line":10,"column":58,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":77},{"ruleId":"no-undef","severity":2,"message":"'HTMLTextAreaElement' is not defined.","line":12,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":12,"endColumn":54}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\wizard\\FinancialInput.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":12,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'HTMLInputElement' is not defined.","line":60,"column":46,"nodeType":"Identifier","messageId":"undef","endLine":60,"endColumn":62}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from 'react';\nimport { Label } from \"@/components/ui/label\";\n\ninterface FinancialInputProps {\n  label: string;\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n  required?: boolean;\n  prefix?: string;\n  suffix?: string;\n  type?: 'currency' | 'percentage' | 'number' | 'text';\n  description?: string;\n  error?: string;\n  className?: string;\n}\n\nexport function FinancialInput({\n  label,\n  value,\n  onChange,\n  placeholder,\n  required = false,\n  prefix = '$',\n  suffix,\n  type = 'currency',\n  description,\n  error,\n  className = ''\n}: FinancialInputProps) {\n  const [displayValue, setDisplayValue] = useState(value);\n  const [focused, setFocused] = useState(false);\n\n  // Format number with commas for display\n  const formatNumber = (num: string) => {\n    if (!num || num === '') return '';\n    const number = parseFloat(num.replace(/,/g, ''));\n    if (isNaN(number)) return num;\n    return number.toLocaleString();\n  };\n\n  // Clean number for storage\n  const cleanNumber = (num: string) => {\n    return num.replace(/,/g, '');\n  };\n\n  useEffect(() => {\n    if (!focused && type === 'currency') {\n      setDisplayValue(formatNumber(value));\n    } else {\n      setDisplayValue(value);\n    }\n  }, [value, focused, type]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    setDisplayValue(newValue);\n    \n    if (type === 'currency') {\n      onChange(cleanNumber(newValue));\n    } else {\n      onChange(newValue);\n    }\n  };\n\n  const handleFocus = () => {\n    setFocused(true);\n    if (type === 'currency') {\n      setDisplayValue(cleanNumber(value));\n    }\n  };\n\n  const handleBlur = () => {\n    setFocused(false);\n    if (type === 'currency') {\n      setDisplayValue(formatNumber(value));\n    }\n  };\n\n  const getPrefix = () => {\n    if (type === 'currency') return '$';\n    if (type === 'percentage') return '';\n    return prefix;\n  };\n\n  const getSuffix = () => {\n    if (type === 'percentage') return '%';\n    return suffix;\n  };\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      <Label className=\"font-poppins font-medium text-sm text-pov-charcoal\">\n        {label}\n        {required && <span className=\"text-pov-error ml-1\">*</span>}\n      </Label>\n      \n      <div className=\"relative\">\n        {getPrefix() && (\n          <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 font-mono text-sm\">\n            {getPrefix()}\n          </span>\n        )}\n        \n        <input\n          type=\"text\"\n          value={displayValue}\n          onChange={handleChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={placeholder}\n          className={`\n            w-full h-11 rounded-md border border-pov-gray bg-pov-white font-mono text-sm\n            transition-all duration-200 ease-out\n            ${getPrefix() ? 'pl-8' : 'pl-4'}\n            ${getSuffix() ? 'pr-8' : 'pr-4'}\n            py-2\n            focus:ring-2 focus:ring-pov-beige focus:border-transparent\n            hover:border-gray-400\n            placeholder:text-gray-400\n            ${error ? 'border-pov-error focus:ring-pov-error/20' : ''}\n            ${focused ? 'shadow-md' : 'shadow-sm'}\n          `}\n        />\n        \n        {getSuffix() && (\n          <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-500 font-mono text-sm\">\n            {getSuffix()}\n          </span>\n        )}\n      </div>\n      \n      {description && !error && (\n        <p className=\"font-poppins text-xs text-gray-600\">\n          {description}\n        </p>\n      )}\n      \n      {error && (\n        <p className=\"font-poppins text-xs text-pov-error\">\n          {error}\n        </p>\n      )}\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\wizard\\GraduationPresets.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'rates' is defined but never used.","line":65,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { TrendingUp, Shield, Zap } from 'lucide-react';\n\ninterface GraduationPreset {\n  id: string;\n  name: string;\n  description: string;\n  icon: React.ReactNode;\n  badge: string;\n  badgeColor: 'default' | 'secondary' | 'destructive' | 'outline';\n  rates: number[];\n  totalGraduation: number;\n  remainAtEnd: number;\n  riskProfile: string;\n}\n\nconst PRESETS: GraduationPreset[] = [\n  {\n    id: 'conservative',\n    name: 'Conservative',\n    description: 'Lower graduation rates with more remain for stability',\n    icon: <Shield className=\"w-5 h-5\" />,\n    badge: 'Low Risk',\n    badgeColor: 'secondary',\n    rates: [15, 20, 25, 30, 0], // 90% grad, 10% remain\n    totalGraduation: 90,\n    remainAtEnd: 10,\n    riskProfile: 'Ideal for stable, long-term focused funds'\n  },\n  {\n    id: 'balanced',\n    name: 'Balanced',\n    description: 'Moderate graduation with balanced risk-return',\n    icon: <TrendingUp className=\"w-5 h-5\" />,\n    badge: 'Balanced',\n    badgeColor: 'default',\n    rates: [20, 25, 25, 25, 0], // 95% grad, 5% remain\n    totalGraduation: 95,\n    remainAtEnd: 5,\n    riskProfile: 'Good for most investment strategies'\n  },\n  {\n    id: 'aggressive',\n    name: 'Aggressive',\n    description: 'Higher graduation rates for maximum deployment',\n    icon: <Zap className=\"w-5 h-5\" />,\n    badge: 'High Growth',\n    badgeColor: 'destructive',\n    rates: [25, 25, 25, 23, 0], // 98% grad, 2% remain\n    totalGraduation: 98,\n    remainAtEnd: 2,\n    riskProfile: 'For high-conviction, growth-oriented strategies'\n  }\n];\n\ninterface GraduationPresetsProps {\n  onSelectPreset: (rates: number[]) => void;\n  disabled?: boolean;\n}\n\nexport function GraduationPresets({ onSelectPreset, disabled = false }: GraduationPresetsProps) {\n  const handlePresetSelect = (preset: GraduationPreset) => {\n    if (disabled) return;\n    onSelectPreset(preset.rates);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-semibold mb-2\">Choose a Graduation Strategy</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          Select a preset or customize your own graduation rates\n        </p>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        {PRESETS.map((preset) => (\n          <Card \n            key={preset.id}\n            className={`cursor-pointer transition-all hover:shadow-md ${\n              disabled ? 'opacity-50 cursor-not-allowed' : 'hover:ring-2 hover:ring-primary/20'\n            }`}\n            onClick={() => handlePresetSelect(preset)}\n          >\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  {preset.icon}\n                  <CardTitle className=\"text-base\">{preset.name}</CardTitle>\n                </div>\n                <Badge variant={preset.badgeColor} className=\"text-xs\">\n                  {preset.badge}\n                </Badge>\n              </div>\n              <CardDescription className=\"text-sm\">\n                {preset.description}\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"pt-0 space-y-3\">\n              {/* Graduation Rate Breakdown */}\n              <div className=\"space-y-2\">\n                <div className=\"text-xs font-medium text-muted-foreground\">\n                  Stage Graduation Rates\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  {preset.rates.slice(0, 4).map((rate, index) => (\n                    <div key={index} className=\"text-center\">\n                      <div className=\"font-medium\">{rate}%</div>\n                      <div className=\"text-xs text-muted-foreground\">S{index + 1}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              {/* Summary Stats */}\n              <div className=\"border-t pt-3 space-y-1\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Total Graduation:</span>\n                  <span className=\"font-medium\">{preset.totalGraduation}%</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Final Remain:</span>\n                  <span className=\"font-medium\">{preset.remainAtEnd}%</span>\n                </div>\n              </div>\n              \n              {/* Risk Profile */}\n              <div className=\"text-xs text-muted-foreground border-t pt-2\">\n                {preset.riskProfile}\n              </div>\n              \n              {/* Select Button */}\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                className=\"w-full mt-2\"\n                disabled={disabled}\n              >\n                Use This Preset\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n      \n      {/* Custom Option */}\n      <Card className=\"border-dashed\">\n        <CardContent className=\"pt-6 text-center\">\n          <div className=\"text-sm text-muted-foreground mb-2\">\n            Need something different?\n          </div>\n          <Button variant=\"ghost\" size=\"sm\" disabled={disabled}>\n            Customize Your Own Rates\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default GraduationPresets;\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\wizard\\PremiumSelect.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":19,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface SelectOption {\n  value: string;\n  label: string;\n  description?: string;\n}\n\ninterface PremiumSelectProps {\n  label: string;\n  value: string;\n  onChange: (value: string) => void;\n  options: SelectOption[];\n  placeholder?: string;\n  required?: boolean;\n  description?: string;\n  error?: string;\n  className?: string;\n}\n\nexport function PremiumSelect({\n  label,\n  value,\n  onChange,\n  options,\n  placeholder,\n  required = false,\n  description,\n  error,\n  className = ''\n}: PremiumSelectProps) {\n  return (\n    <div className={`space-y-2 ${className}`}>\n      <Label className=\"font-poppins font-medium text-sm text-pov-charcoal\">\n        {label}\n        {required && <span className=\"text-pov-error ml-1\">*</span>}\n      </Label>\n      \n      <Select value={value} onValueChange={onChange}>\n        <SelectTrigger className={`\n          h-11 border border-pov-gray bg-pov-white font-poppins\n          transition-all duration-200 ease-out\n          focus:ring-2 focus:ring-pov-beige focus:border-transparent\n          hover:border-gray-400\n          ${error ? 'border-pov-error focus:ring-pov-error/20' : ''}\n          shadow-sm hover:shadow-md\n        `}>\n          <SelectValue placeholder={placeholder} />\n        </SelectTrigger>\n        <SelectContent className=\"bg-pov-white border border-pov-gray shadow-elevated\">\n          {options.map((option) => (\n            <SelectItem \n              key={option.value} \n              value={option.value}\n              className=\"font-poppins text-sm hover:bg-pov-beige/20 focus:bg-pov-beige/30 transition-colors duration-150\"\n            >\n              <div className=\"flex flex-col\">\n                <span className=\"font-medium text-pov-charcoal\">{option.label}</span>\n                {option.description && (\n                  <span className=\"text-xs text-gray-600 mt-1\">{option.description}</span>\n                )}\n              </div>\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n      \n      {description && !error && (\n        <p className=\"font-poppins text-xs text-gray-600\">\n          {description}\n        </p>\n      )}\n      \n      {error && (\n        <p className=\"font-poppins text-xs text-pov-error\">\n          {error}\n        </p>\n      )}\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\wizard\\PremiumToggle.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'checked' is defined but never used.","line":14,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface PremiumToggleProps {\n  label: string;\n  description?: string;\n  checked: boolean;\n  onChange: (checked: boolean) => void;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport function PremiumToggle({\n  label,\n  description,\n  checked,\n  onChange,\n  className = '',\n  disabled = false\n}: PremiumToggleProps) {\n  return (\n    <div className={`space-y-3 ${className}`}>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-1\">\n          <Label className=\"font-poppins font-medium text-sm text-pov-charcoal\">\n            {label}\n          </Label>\n          {description && (\n            <p className=\"font-poppins text-xs text-gray-600\">\n              {description}\n            </p>\n          )}\n        </div>\n        <Switch\n          checked={checked}\n          onCheckedChange={onChange}\n          disabled={disabled}\n          className=\"data-[state=checked]:bg-pov-charcoal\"\n        />\n      </div>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\wizard\\ReserveStep.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'InfoIcon' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'reserveConfig' is defined but never used.","line":18,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":34},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fund?.companies?.length' and 'runCalculation'. Either include them or remove the dependency array.","line":115,"column":6,"nodeType":"ArrayExpression","endLine":115,"endColumn":81,"suggestions":[{"desc":"Update the dependencies array to be: [reservePercent, enableRemainPass, capPolicy, defaultCapPercent, stageCaps, fund?.companies?.length, runCalculation]","fix":{"range":[3871,3946],"text":"[reservePercent, enableRemainPass, capPolicy, defaultCapPercent, stageCaps, fund?.companies?.length, runCalculation]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Slider } from '@/components/ui/slider';\nimport { Switch } from '@/components/ui/switch';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { InfoIcon, AlertCircle, TrendingUp, DollarSign } from 'lucide-react';\nimport { calculateReserves } from '@/lib/reserves-v11';\nimport { adaptFundToReservesInput, adaptReservesConfig } from '@/adapters/reserves-adapter';\nimport { metrics, auditLog } from '@/metrics/reserves-metrics';\nimport { formatQuarter, getCurrentQuarter } from '@/lib/quarter-time';\n\ninterface ReserveStepProps {\n  fund: any; // Your existing fund type\n  onComplete: (reserveConfig: any) => void;\n  onBack?: () => void;\n}\n\nexport default function ReserveStep({ fund, onComplete, onBack }: ReserveStepProps) {\n  // Configuration state\n  const [reservePercent, setReservePercent] = useState(15); // Default 15%\n  const [enableRemainPass, setEnableRemainPass] = useState(false);\n  const [capPolicy, setCapPolicy] = useState<'fixed' | 'stage' | 'custom'>('fixed');\n  const [defaultCapPercent, setDefaultCapPercent] = useState(50); // Default 50% cap\n  \n  // Stage-based caps\n  const [stageCaps, setStageCaps] = useState({\n    'Seed': 75,\n    'Series A': 60,\n    'Series B': 50,\n    'Series C': 40,\n    'Growth': 30\n  });\n  \n  // Results state\n  const [calculationResult, setCalculationResult] = useState<any>(null);\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [errors, setErrors] = useState<string[]>([]);\n  const [warnings, setWarnings] = useState<string[]>([]);\n  \n  // Preview calculation\n  const runCalculation = async () => {\n    setIsCalculating(true);\n    setErrors([]);\n    setWarnings([]);\n    \n    const timer = metrics.startTimer('reserves.ui.calculation');\n    \n    try {\n      // Adapt fund data\n      const input = adaptFundToReservesInput(fund);\n      \n      // Build config\n      const config = adaptReservesConfig({\n        reservePercentage: reservePercent / 100,\n        enableRemainPass,\n        capPercent: defaultCapPercent / 100,\n        stageCaps: capPolicy === 'stage' ? \n          Object.fromEntries(\n            Object.entries(stageCaps).map(([k, v]) => [k, v / 100])\n          ) : undefined,\n        auditLevel: 'detailed'\n      });\n      \n      // Record metrics\n      metrics.recordCompanyCount(input.companies.length);\n      metrics.recordCapPolicy(capPolicy);\n      \n      // Run calculation\n      const result = calculateReserves(\n        input.companies,\n        reservePercent / 100,\n        enableRemainPass\n      );\n      \n      setCalculationResult(result);\n      \n      if (result.warnings) {\n        setWarnings(result.warnings);\n      }\n      \n      if (!result.ok) {\n        setErrors([result.error || 'Calculation failed']);\n        metrics.recordError(result.error || 'Unknown error');\n      } else {\n        // Record audit log\n        auditLog.record({\n          operation: 'reserves.calculation',\n          input,\n          output: result.data,\n          config,\n          duration_ms: result.metrics?.duration_ms || 0,\n          warnings: result.warnings\n        });\n      }\n      \n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n      setErrors([errorMsg]);\n      metrics.recordError(errorMsg);\n    } finally {\n      timer.end();\n      setIsCalculating(false);\n    }\n  };\n  \n  // Run calculation on config change\n  useEffect(() => {\n    if (fund?.companies?.length > 0) {\n      runCalculation();\n    }\n  }, [reservePercent, enableRemainPass, capPolicy, defaultCapPercent, stageCaps]);\n  \n  // Handle completion\n  const handleComplete = () => {\n    const config = {\n      reservePercent,\n      enableRemainPass,\n      capPolicy,\n      defaultCapPercent,\n      stageCaps: capPolicy === 'stage' ? stageCaps : undefined,\n      calculationResult\n    };\n    \n    onComplete(config);\n  };\n  \n  // Format currency\n  const formatCurrency = (cents: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(cents / 100);\n  };\n  \n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"w-5 h-5\" />\n            Reserve Allocation Configuration\n          </CardTitle>\n          <CardDescription>\n            Configure how follow-on reserves will be allocated across your portfolio companies\n          </CardDescription>\n        </CardHeader>\n      </Card>\n      \n      {/* Reserve Percentage Configuration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Reserve Percentage</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between items-center\">\n              <Label htmlFor=\"reserve-percent\">Reserve Allocation</Label>\n              <div className=\"flex items-center gap-2\">\n                <Input\n                  id=\"reserve-percent-input\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"100\"\n                  step=\"1\"\n                  value={reservePercent}\n                  onChange={(e) => setReservePercent(Number(e.target.value))}\n                  className=\"w-20\"\n                  aria-label=\"Reserve percentage\"\n                />\n                <span className=\"text-sm text-muted-foreground\">%</span>\n              </div>\n            </div>\n            <Slider\n              id=\"reserve-percent\"\n              min={0}\n              max={50}\n              step={1}\n              value={[reservePercent]}\n              onValueChange={([value]) => setReservePercent(value)}\n              className=\"w-full\"\n              aria-label=\"Reserve percentage slider\"\n            />\n            <p className=\"text-sm text-muted-foreground\">\n              Percentage of total invested capital to reserve for follow-on investments\n            </p>\n          </div>\n          \n          {/* Remain Pass Toggle */}\n          <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"remain-pass\" className=\"text-base\">Enable Remain Pass</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Perform an additional allocation pass for any remaining reserves\n              </p>\n            </div>\n            <Switch\n              id=\"remain-pass\"\n              checked={enableRemainPass}\n              onCheckedChange={setEnableRemainPass}\n              aria-label=\"Enable remain pass\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Cap Policy Configuration */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Investment Cap Policy</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"cap-policy\">Cap Strategy</Label>\n            <Select value={capPolicy} onValueChange={(value: any) => setCapPolicy(value)}>\n              <SelectTrigger id=\"cap-policy\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"fixed\">Fixed Percentage</SelectItem>\n                <SelectItem value=\"stage\">Stage-Based</SelectItem>\n                <SelectItem value=\"custom\">Custom</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          {capPolicy === 'fixed' && (\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <Label htmlFor=\"default-cap\">Maximum Reserve Cap</Label>\n                <div className=\"flex items-center gap-2\">\n                  <Input\n                    id=\"default-cap-input\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"200\"\n                    step=\"5\"\n                    value={defaultCapPercent}\n                    onChange={(e) => setDefaultCapPercent(Number(e.target.value))}\n                    className=\"w-20\"\n                    aria-label=\"Default cap percentage\"\n                  />\n                  <span className=\"text-sm text-muted-foreground\">%</span>\n                </div>\n              </div>\n              <Slider\n                id=\"default-cap\"\n                min={0}\n                max={200}\n                step={5}\n                value={[defaultCapPercent]}\n                onValueChange={([value]) => setDefaultCapPercent(value)}\n                className=\"w-full\"\n                aria-label=\"Default cap percentage slider\"\n              />\n              <p className=\"text-sm text-muted-foreground\">\n                Maximum reserve as percentage of initial investment\n              </p>\n            </div>\n          )}\n          \n          {capPolicy === 'stage' && (\n            <div className=\"space-y-3\">\n              {Object.entries(stageCaps).map(([stage, cap]) => (\n                <div key={stage} className=\"flex items-center justify-between\">\n                  <Label htmlFor={`cap-${stage}`} className=\"w-24\">{stage}</Label>\n                  <div className=\"flex items-center gap-2\">\n                    <Slider\n                      id={`cap-${stage}`}\n                      min={0}\n                      max={200}\n                      step={5}\n                      value={[cap]}\n                      onValueChange={([value]) => setStageCaps(prev => ({ ...prev, [stage]: value }))}\n                      className=\"w-40\"\n                      aria-label={`${stage} cap percentage`}\n                    />\n                    <Input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"200\"\n                      value={cap}\n                      onChange={(e) => setStageCaps(prev => ({ ...prev, [stage]: Number(e.target.value) }))}\n                      className=\"w-16\"\n                      aria-label={`${stage} cap input`}\n                    />\n                    <span className=\"text-sm text-muted-foreground\">%</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      \n      {/* Calculation Results Preview */}\n      {calculationResult?.ok && calculationResult.data && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <DollarSign className=\"w-5 h-5\" />\n              Allocation Preview\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-4\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Reserve</p>\n                <p className=\"text-lg font-semibold\">\n                  {formatCurrency(calculationResult.data.metadata.total_available_cents)}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Allocated</p>\n                <p className=\"text-lg font-semibold\">\n                  {formatCurrency(calculationResult.data.metadata.total_allocated_cents)}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Remaining</p>\n                <p className=\"text-lg font-semibold\">\n                  {formatCurrency(calculationResult.data.remaining_cents)}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Companies</p>\n                <p className=\"text-lg font-semibold\">\n                  {calculationResult.data.metadata.companies_funded}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"text-sm text-muted-foreground\">\n              Current Quarter: {formatQuarter(getCurrentQuarter())}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      \n      {/* Warnings */}\n      {warnings.length > 0 && (\n        <Alert>\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            <ul className=\"list-disc list-inside\">\n              {warnings.map((warning, i) => (\n                <li key={i}>{warning}</li>\n              ))}\n            </ul>\n          </AlertDescription>\n        </Alert>\n      )}\n      \n      {/* Errors */}\n      {errors.length > 0 && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            <ul className=\"list-disc list-inside\">\n              {errors.map((error, i) => (\n                <li key={i}>{error}</li>\n              ))}\n            </ul>\n          </AlertDescription>\n        </Alert>\n      )}\n      \n      {/* Navigation */}\n      <div className=\"flex justify-between\">\n        {onBack && (\n          <Button variant=\"outline\" onClick={onBack}>\n            Back\n          </Button>\n        )}\n        <Button \n          onClick={handleComplete}\n          disabled={!calculationResult?.ok || isCalculating}\n          className=\"ml-auto\"\n        >\n          Continue\n        </Button>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\wizard\\TestIdProvider.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'testId' is defined but never used.","line":62,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Test ID Provider\r\n * Adds stable data-testid attributes to wizard components\r\n * Ensures E2E tests remain stable across UI changes\r\n */\r\n\r\nimport React, { ReactElement, cloneElement } from 'react';\r\n\r\nexport interface TestIdProps {\r\n  testId?: string;\r\n  children?: React.ReactNode;\r\n}\r\n\r\n/**\r\n * Common test IDs for wizard components\r\n */\r\nexport const WIZARD_TEST_IDS = {\r\n  // Navigation\r\n  nextButton: 'wizard-next',\r\n  prevButton: 'wizard-prev',\r\n  saveButton: 'wizard-save',\r\n  submitButton: 'wizard-submit',\r\n  \r\n  // Fund setup step\r\n  fundNameInput: 'fund-name-input',\r\n  fundSizeInput: 'fund-size-input',\r\n  fundStrategySelect: 'fund-strategy-select',\r\n  \r\n  // Company step\r\n  companySearchInput: 'company-search',\r\n  companyAddButton: 'company-add',\r\n  companyList: 'company-list',\r\n  companyItem: 'company-item',\r\n  \r\n  // Reserves step\r\n  reservesToggle: 'reserves-toggle',\r\n  reservesAmountInput: 'reserves-amount',\r\n  reservesStrategySelect: 'reserves-strategy',\r\n  reservesCalculateButton: 'reserves-calculate',\r\n  \r\n  // Pacing step\r\n  pacingToggle: 'pacing-toggle',\r\n  pacingPeriodSelect: 'pacing-period',\r\n  pacingRateInput: 'pacing-rate',\r\n  \r\n  // Review step\r\n  reviewSummary: 'review-summary',\r\n  reviewConfirmCheckbox: 'review-confirm',\r\n  \r\n  // Results\r\n  resultsContainer: 'results-container',\r\n  resultsChart: 'results-chart',\r\n  resultsTable: 'results-table',\r\n  resultsExportButton: 'results-export',\r\n} as const;\r\n\r\n/**\r\n * Higher-order component to add test IDs\r\n */\r\nexport function withTestId<P extends { 'data-testid'?: string }>(\r\n  Component: React.ComponentType<P>,\r\n  testId: string\r\n) {\r\n  return React.forwardRef<any, P>((props, ref) => {\n      return <Component {...(props as P)} ref={ref} />;\n    });\r\n}\r\n\r\n/**\r\n * Hook to get test ID props\r\n */\r\nexport function useTestId(testId?: string) {\r\n  if (!testId) return {};\r\n  \r\n  return {\r\n    'data-testid': testId,\r\n    // Add aria-label for accessibility\r\n    'aria-label': testId.replace(/-/g, ' '),\r\n  };\r\n}\r\n\r\n/**\r\n * Component to wrap children with test IDs\r\n */\r\nexport function TestIdWrapper({ \r\n  testId, \r\n  children,\r\n  as: Component = 'div' \r\n}: TestIdProps & { as?: React.ElementType }) {\r\n  const testProps = useTestId(testId);\r\n  \r\n  if (React.isValidElement(children) && children.type !== React.Fragment) {\r\n    // If single child element, clone it with test ID\r\n    return cloneElement(children as ReactElement, testProps);\r\n  }\r\n  \r\n  // Otherwise wrap in container\r\n  return <Component {...testProps}>{children}</Component>;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\wizard\\WizardContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\wizard\\WizardHeader.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'subtitle' is defined but never used.","line":14,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":47}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { POVLogo } from '@/components/ui/POVLogo';\n\ninterface WizardHeaderProps {\n  title: string;\n  subtitle: string;\n}\n\nexport function WizardHeader({ title, subtitle }: WizardHeaderProps) {\n  return (\n    <div className=\"bg-white border-b border-gray-200 shadow-sm\">\n      <div className=\"max-w-6xl mx-auto px-6 py-8\">\n        {/* Centered logo at top */}\n        <div className=\"text-center mb-8\">\n          <POVLogo variant=\"dark\" size=\"lg\" />\n        </div>\n\n        {/* Centered wizard title */}\n        <div className=\"text-center pb-2 font-normal text-4xl leading-10 tracking-tight font-inter\">\n          {title}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\wizard\\WizardProgress.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Circle' is defined but never used.","line":7,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { CheckCircle, Circle } from 'lucide-react';\n\ninterface WizardStep {\n  id: string;\n  label: string;\n  description: string;\n  icon: string;\n}\n\ninterface WizardProgressProps {\n  steps: WizardStep[];\n  currentStep: string;\n  completedSteps: string[];\n}\n\nexport function WizardProgress({ steps, currentStep, completedSteps }: WizardProgressProps) {\n  const currentIndex = steps.findIndex(step => step.id === currentStep);\n  const progress = ((currentIndex + 1) / steps.length) * 100;\n\n  return (\n    <div className=\"px-6 py-6\">\n      {/* Progress Bar */}\n      <div className=\"relative mb-6\">\n        <div className=\"h-3 bg-slate-200 rounded-full overflow-hidden\">\n          <div\n            className=\"h-3 bg-gradient-to-r from-slate-600 to-slate-900 rounded-full transition-all duration-300 ease-out shadow-sm\"\n            style={{ width: `${progress}%` }}\n          />\n        </div>\n      </div>\n\n      {/* Steps */}\n      <div className=\"grid grid-cols-1 md:grid-cols-7 gap-4\">\n        {steps.map((step, index) => {\n          const isCompleted = completedSteps.includes(step.id);\n          const isCurrent = step.id === currentStep;\n          const isPast = index < currentIndex;\n          \n          return (\n            <div \n              key={step.id}\n              className={`flex flex-col items-center text-center transition-all duration-200 ${\n                isCurrent ? 'scale-105' : ''\n              }`}\n            >\n              {/* Step Icon */}\n              <div className={`\n                relative w-12 h-12 rounded-full border-2 flex items-center justify-center mb-3 transition-all duration-200\n                ${isCompleted \n                  ? 'bg-pov-success border-pov-success text-white' \n                  : isCurrent \n                    ? 'bg-pov-beige border-pov-charcoal text-pov-charcoal shadow-lg' \n                    : isPast\n                      ? 'bg-pov-gray border-gray-300 text-gray-500'\n                      : 'bg-pov-white border-gray-300 text-gray-400'\n                }\n              `}>\n                {isCompleted ? (\n                  <CheckCircle className=\"w-6 h-6\" />\n                ) : (\n                  <span className=\"font-inter font-bold text-sm\">{step.icon}</span>\n                )}\n                \n                {/* Current step pulse animation */}\n                {isCurrent && (\n                  <div className=\"absolute inset-0 rounded-full border-2 border-pov-beige animate-pulse opacity-75\" />\n                )}\n              </div>\n              \n              {/* Step Content */}\n              <div className=\"min-h-[3rem] flex flex-col\">\n                <h4 className={`font-inter font-semibold text-xs mb-1 transition-colors duration-200 ${\n                  isCurrent ? 'text-pov-charcoal' : 'text-gray-600'\n                }`}>\n                  {step.label}\n                </h4>\n                <p className={`font-poppins text-xs leading-tight transition-colors duration-200 ${\n                  isCurrent ? 'text-gray-700' : 'text-gray-500'\n                }`}>\n                  {step.description}\n                </p>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\components\\wizard\\WizardProgressRedesigned.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isUpcoming' is assigned a value but never used.","line":43,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":43,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { OctagonalPowerIcon } from '@/components/ui/OctagonalPowerIcon';\n\ninterface WizardStep {\n  id: string;\n  label: string;\n  description: string;\n  icon: string;\n}\n\ninterface WizardProgressProps {\n  steps: WizardStep[];\n  currentStep: string;\n  completedSteps: string[];\n}\n\nexport function WizardProgressRedesigned({ steps, currentStep, completedSteps }: WizardProgressProps) {\n  const currentIndex = steps.findIndex(step => step.id === currentStep);\n  const progress = ((currentIndex + 1) / steps.length) * 100;\n\n  return (\n    <div className=\"bg-pov-gray px-6 py-6\">\n      {/* Progress Bar */}\n      <div className=\"relative mb-6\">\n        <div className=\"h-2 bg-pov-gray rounded-full overflow-hidden\">\n          <div\n            className=\"h-2 bg-pov-charcoal rounded-full transition-all duration-300 ease-out\"\n            style={{ width: `${progress}%` }}\n          />\n        </div>\n      </div>\n\n      {/* Steps */}\n      <div className=\"grid grid-cols-1 md:grid-cols-7 gap-4\">\n        {steps.map((step, index) => {\n          const isCompleted = completedSteps.includes(step.id);\n          const isCurrent = step.id === currentStep;\n          const isUpcoming = index > currentIndex;\n          \n          let iconState: 'active' | 'upcoming' | 'completed';\n          if (isCompleted) iconState = 'completed';\n          else if (isCurrent) iconState = 'active';\n          else iconState = 'upcoming';\n          \n          return (\n            <div \n              key={step.id}\n              className=\"flex flex-col items-center text-center transition-all duration-200\"\n            >\n              {/* Octagonal Power Icon */}\n              <div className=\"mb-3\">\n                <OctagonalPowerIcon \n                  state={iconState}\n                  number={step.icon}\n                  size=\"md\"\n                />\n              </div>\n              \n              {/* Step Content */}\n              <div className=\"min-h-[3rem] flex flex-col\">\n                <h4 className={`font-poppins font-medium text-xs uppercase tracking-widest mb-1 transition-colors duration-200 ${\n                  isCurrent ? 'text-pov-charcoal' : 'text-charcoal-600'\n                }`}>\n                  {step.label}\n                </h4>\n                <p className={`font-poppins text-xs leading-tight transition-colors duration-200 ${\n                  isCurrent ? 'text-charcoal-700' : 'text-charcoal-500'\n                }`}>\n                  {step.description}\n                </p>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\config\\features.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'URLSearchParams' is not defined.","line":20,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n/**\n * Feature flags with runtime + build-time controls\n * \n * Runtime overrides (highest priority):\n * - Query param: ?ff_useFundStore=0|1\n * - LocalStorage: localStorage.setItem('ff_useFundStore', '0'|'1')\n * \n * Build-time default:\n * - VITE_USE_FUND_STORE env var (defaults to true)\n */\n\nconst getRuntimeFlag = (flagName: string): boolean | undefined => {\n  try {\n    // Check query params first\n    const qp = new URLSearchParams(window.location.search).get(`ff_${flagName}`);\n    if (qp === '0' || qp === '1') return qp === '1';\n    \n    // Check localStorage fallback\n    const ls = localStorage.getItem(`ff_${flagName}`);\n    if (ls === '0' || ls === '1') return ls === '1';\n  } catch (e) {\n    // Safe fallback if localStorage/URL parsing fails\n    console.warn(`Feature flag runtime check failed for ${flagName}:`, e);\n  }\n  return undefined;\n};\n\nconst getEnvVar = (name: string): string | undefined => {\n  try {\n    return (import.meta as any).env?.[name];\n  } catch {\n    return undefined;\n  }\n};\n\nexport const features = {\n  /**\n   * Use centralized FundStore vs legacy context\n   * \n   * Kill switch:\n   * - URL: ?ff_useFundStore=0\n   * - Code: localStorage.setItem('ff_useFundStore', '0')\n   */\n  useFundStore:\n    getRuntimeFlag('useFundStore') ??\n    (getEnvVar('VITE_USE_FUND_STORE') !== 'false') // default true\n};\n\n/**\n * Helper for debugging feature flags\n */\nexport const debugFeatures = () => {\n  console.table({\n    useFundStore: {\n      active: features.useFundStore,\n      runtime: getRuntimeFlag('useFundStore') ?? 'not set',\n      buildTime: getEnvVar('VITE_USE_FUND_STORE') ?? 'not set'\n    }\n  });\n};\n\n// Development helper - expose to window in dev mode\nif (getEnvVar('NODE_ENV') === 'development' || getEnvVar('VITE_DEV') === 'true') {\n  (window as any).__features = { features, debugFeatures };\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\config\\rollout-runtime.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'URLSearchParams' is not defined.","line":69,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":69,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'URLSearchParams' is not defined.","line":162,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":162,"endColumn":44}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n/**\n * Runtime-configurable rollout with stable user bucketing\n * Integrates with runtime config for instant rollout percentage changes\n * \n * Priority order:\n * 1. URL params (?ff_useFundStore=0|1 for hard override)\n * 2. localStorage (persistent override)  \n * 3. Emergency rollback flag (from runtime config)\n * 4. Runtime config rollout percentage\n * 5. Environment variable fallback\n */\n\nimport { getRuntimeConfig } from './runtime';\n\n/**\n * Fast FNV-1a hash implementation\n * Returns deterministic 32-bit hash for consistent bucketing\n */\nfunction fnv1a(str: string): number {\n  let h = 0x811c9dc5;\n  for (let i = 0; i < str.length; i++) {\n    h ^= str.charCodeAt(i);\n    h = Math.imul(h, 0x01000193);\n  }\n  return (h >>> 0); // Convert to unsigned 32-bit\n}\n\n/**\n * Get or create a stable user ID for consistent bucketing\n * Stored in localStorage, persists across sessions\n */\nfunction stableUserId(): string {\n  const KEY = '__uid';\n  try {\n    let id = localStorage.getItem(KEY);\n    if (!id) {\n      // Try crypto.randomUUID() first, fallback for older browsers\n      if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n        id = crypto.randomUUID();\n      } else {\n        // Fallback UUID v4 generation for older browsers\n        id = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n          const r = Math.random() * 16 | 0;\n          const v = c === 'x' ? r : (r & 0x3 | 0x8);\n          return v.toString(16);\n        });\n      }\n      localStorage.setItem(KEY, id);\n    }\n    return id;\n  } catch (e) {\n    // Fallback for environments without localStorage/crypto\n    console.warn('Unable to create stable user ID, using session fallback');\n    return 'session-' + Math.random().toString(36).substring(2, 15);\n  }\n}\n\n/**\n * Check runtime overrides (URL params, localStorage)\n */\nfunction getRuntimeOverride(flagName: string): boolean | undefined {\n  try {\n    // Check URL params first (highest priority)\n    const qp = new URLSearchParams(window.location.search).get(`ff_${flagName}`);\n    if (qp === '0' || qp === '1') return qp === '1';\n    \n    // Check localStorage fallback\n    const ls = localStorage.getItem(`ff_${flagName}`);\n    if (ls === '0' || ls === '1') return ls === '1';\n  } catch (e) {\n    console.warn(`Runtime override check failed for ${flagName}:`, e);\n  }\n  return undefined;\n}\n\n/**\n * Check if user should see the fund store feature\n * Uses runtime config for instant rollout percentage changes\n */\nexport async function shouldUseFundStore(): Promise<boolean> {\n  try {\n    // 1. Check for runtime overrides first\n    const override = getRuntimeOverride('useFundStore');\n    if (override !== undefined) {\n      console.log(`≡ƒÄ¢∩╕Å FundStore override: ${override ? 'enabled' : 'disabled'}`);\n      return override;\n    }\n\n    // 2. Get runtime configuration  \n    const config = await getRuntimeConfig();\n    \n    // 3. Check emergency rollback\n    if (config.killSwitches.emergencyRollback) {\n      console.warn('≡ƒÜ¿ Emergency rollback active - disabling FundStore');\n      return false;\n    }\n\n    // 4. Check if feature is globally disabled\n    const flag = config.flags.useFundStore;\n    if (flag?.enabled === false) {\n      console.log('ΓÅ╕∩╕Å FundStore globally disabled in runtime config');\n      return false;\n    }\n\n    // 5. Get rollout percentage from runtime config\n    const rolloutPct = flag?.rollout ?? 100;\n    \n    // 6. Everyone gets 100% rollout\n    if (rolloutPct >= 100) return true;\n    if (rolloutPct <= 0) return false;\n    \n    // 7. Deterministic bucketing based on stable user ID\n    const userId = stableUserId();\n    const bucket = fnv1a(userId + 'USE_FUND_STORE') % 100;\n    const inRollout = bucket < rolloutPct;\n    \n    console.log(`≡ƒôè FundStore rollout: ${rolloutPct}%, bucket: ${bucket}, enabled: ${inRollout}`);\n    return inRollout;\n    \n  } catch (e) {\n    console.warn('FundStore rollout check failed:', e);\n    \n    // Fallback to env var if runtime config fails\n    const envValue = (import.meta as any).env?.VITE_USE_FUND_STORE;\n    return envValue !== 'false'; // Default to true\n  }\n}\n\n/**\n * Get user's bucket for debugging (0-99)\n */\nexport function getUserBucket(): number {\n  try {\n    const userId = stableUserId();\n    return fnv1a(userId + 'USE_FUND_STORE') % 100;\n  } catch (e) {\n    return -1; // Error state\n  }\n}\n\n/**\n * Debug helper - shows current rollout status\n */\nexport async function debugRuntimeRollout() {\n  try {\n    const config = await getRuntimeConfig();\n    const override = getRuntimeOverride('useFundStore');\n    const bucket = getUserBucket();\n    const enabled = await shouldUseFundStore();\n    const userId = stableUserId();\n    \n    console.table({\n      'FundStore Rollout': {\n        userId: userId.substring(0, 8) + '...',\n        bucket,\n        'runtime %': config.flags.useFundStore?.rollout ?? 'default',\n        'url override': new URLSearchParams(window.location.search).get('ff_useFundStore') ?? 'none',\n        'localStorage override': localStorage.getItem('ff_useFundStore') ?? 'none', \n        'emergency rollback': config.killSwitches.emergencyRollback,\n        enabled\n      }\n    });\n    \n    return { config, override, bucket, enabled };\n  } catch (e) {\n    console.error('Debug rollout failed:', e);\n  }\n}\n\n// Development helper - expose to window\nif ((import.meta as any).env?.NODE_ENV === 'development') {\n  if (typeof window !== 'undefined') {\n    (window as any).__runtimeRollout = { \n      shouldUseFundStore, \n      getUserBucket, \n      debugRuntimeRollout \n    };\n  }\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\config\\rollout.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\config\\runtime.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":66,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":66,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'CustomEvent' is not defined.","line":81,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":81,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'cfg' is defined but never used.","line":90,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":90,"endColumn":63},{"ruleId":"no-undef","severity":2,"message":"'Event' is not defined.","line":91,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":91,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'CustomEvent' is not defined.","line":91,"column":42,"nodeType":"Identifier","messageId":"undef","endLine":91,"endColumn":53}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n// Lightweight runtime config with 60s TTL, env + URL overrides, and safe fallbacks.\n\ntype FlagSpec = {\n  rollout?: number;      // 0..100\n  enabled?: boolean;     // hard on/off\n};\n\nexport type RuntimeConfig = {\n  flags: {\n    useFundStore?: FlagSpec;\n  };\n  thresholds: {\n    errorScore?: number;           // e.g. 15\n    consecutiveHighScore?: number; // e.g. 3\n  };\n  killSwitches: {\n    emergencyRollback?: boolean;\n  };\n  telemetry: {\n    trackMigrations?: boolean;\n  };\n  // optional: version string\n  version?: string;\n};\n\nconst DEFAULTS: RuntimeConfig = {\n  flags: {\n    useFundStore: {\n      enabled: true,\n      rollout: Number((import.meta as any).env?.VITE_USE_FUND_STORE_ROLLOUT ?? 10),\n    },\n  },\n  thresholds: {\n    errorScore: Number((import.meta as any).env?.VITE_ERROR_SCORE_THRESHOLD ?? 15),\n    consecutiveHighScore: 3,\n  },\n  killSwitches: {\n    emergencyRollback: false,\n  },\n  telemetry: {\n    trackMigrations: ((import.meta as any).env?.VITE_TRACK_MIGRATIONS ?? '1') === '1',\n  },\n  version: 'ev1',\n};\n\nconst RUNTIME_URL =\n  // optional remote URL for live edits (e.g., S3/GitHub raw)\n  ((import.meta as any).env?.VITE_RUNTIME_CONFIG_URL as string | undefined) ||\n  // local fallback served by your SPA\n  '/runtime-config.json';\n\nlet cache: { cfg: RuntimeConfig; at: number } = { cfg: DEFAULTS, at: 0 };\nconst TTL_MS = 60_000;\n\nexport async function getRuntimeConfig(force = false): Promise<RuntimeConfig> {\n  const now = Date.now();\n  if (!force && now - cache.at < TTL_MS) return cache.cfg;\n\n  try {\n    // Always attempt a fresh fetch; bust CDN caches if needed\n    const res = await fetch(`${RUNTIME_URL}?t=${now}`, { cache: 'no-store' });\n    if (!res.ok) throw new Error(`HTTP ${res.status}`);\n    const json = (await res.json()) as Partial<RuntimeConfig>;\n\n    // Merge shallowly with defaults\n    const merged: RuntimeConfig = {\n      ...DEFAULTS,\n      ...json,\n      flags: { ...DEFAULTS.flags, ...(json.flags ?? {}) },\n      thresholds: { ...DEFAULTS.thresholds, ...(json.thresholds ?? {}) },\n      killSwitches: { ...DEFAULTS.killSwitches, ...(json.killSwitches ?? {}) },\n      telemetry: { ...DEFAULTS.telemetry, ...(json.telemetry ?? {}) },\n    };\n\n    cache = { cfg: merged, at: now };\n    window.dispatchEvent(new CustomEvent('runtime-config:update', { detail: merged }));\n    return merged;\n  } catch {\n    // Fail safe to defaults on any error\n    cache = { cfg: DEFAULTS, at: now };\n    return DEFAULTS;\n  }\n}\n\nexport function subscribeRuntimeConfig(cb: (cfg: RuntimeConfig) => void) {\n  const handler = (e: Event) => cb((e as CustomEvent<RuntimeConfig>).detail);\n  window.addEventListener('runtime-config:update', handler);\n  return () => window.removeEventListener('runtime-config:update', handler);\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\contexts\\FundContext.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'fund' is defined but never used.","line":25,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useQuery } from '@tanstack/react-query';\n\nexport interface Fund {\n  id: number;\n  name: string;\n  size: number;\n  managementFee: number;\n  carryPercentage: number;\n  vintageYear: number;\n  deployedCapital: number;\n  status: string;\n  createdAt: string;\n  updatedAt: string;\n  termYears?: number;\n}\n\ninterface FundContextType {\n  currentFund: Fund | null;\n  setCurrentFund: (fund: Fund | null) => void;\n  isLoading: boolean;\n  needsSetup: boolean;\n  fundId: number | null;\n}\n\nconst FundContext = createContext<FundContextType | undefined>(undefined);\n\ninterface FundProviderProps {\n  children: ReactNode;\n}\n\nexport function FundProvider({ children }: FundProviderProps) {\n  const [currentFund, setCurrentFund] = useState<Fund | null>(null);\n  const [fundId, setFundId] = useState<number | null>(null);\n\n  // Load fund ID from localStorage on mount\n  useEffect(() => {\n    const storedFundId = localStorage.getItem('povc_current_fund_id');\n    if (storedFundId) {\n      setFundId(parseInt(storedFundId, 10));\n    }\n  }, []);\n\n  // Fetch fund data when fundId changes\n  const { data: funds, isLoading } = useQuery({\n    queryKey: ['/api/funds'],\n    enabled: true,\n  });\n\n  // Update current fund when funds data changes or fundId changes\n  useEffect(() => {\n    if (funds && Array.isArray(funds) && funds.length > 0) {\n      if (fundId) {\n        // Find specific fund by ID\n        const fund = funds.find((f: Fund) => f.id === fundId);\n        if (fund) {\n          setCurrentFund(fund);\n        } else {\n          // Fallback to first fund if ID not found\n          setCurrentFund(funds[0]);\n          setFundId(funds[0].id);\n          localStorage.setItem('povc_current_fund_id', funds[0].id.toString());\n        }\n      } else {\n        // No stored fund ID, use first fund\n        setCurrentFund(funds[0]);\n        setFundId(funds[0].id);\n        localStorage.setItem('povc_current_fund_id', funds[0].id.toString());\n      }\n    } else if (!isLoading && (!funds || !Array.isArray(funds) || funds.length === 0)) {\n      // No funds available\n      setCurrentFund(null);\n      setFundId(null);\n      localStorage.removeItem('povc_current_fund_id');\n    }\n  }, [funds, fundId, isLoading]);\n\n  const handleSetCurrentFund = (fund: Fund | null) => {\n    setCurrentFund(fund);\n    if (fund) {\n      setFundId(fund.id);\n      localStorage.setItem('povc_current_fund_id', fund.id.toString());\n    } else {\n      setFundId(null);\n      localStorage.removeItem('povc_current_fund_id');\n    }\n  };\n\n  const needsSetup = !isLoading && !currentFund;\n\n  const value: FundContextType = {\n    currentFund,\n    setCurrentFund: handleSetCurrentFund,\n    isLoading,\n    needsSetup,\n    fundId,\n  };\n\n  return (\n    <FundContext.Provider value={value}>\n      {children}\n    </FundContext.Provider>\n  );\n}\n\nexport function useFundContext() {\n  const context = useContext(FundContext);\n  if (context === undefined) {\n    throw new Error('useFundContext must be used within a FundProvider');\n  }\n  return context;\n}\n\n// Legacy hook for backward compatibility\nexport function useFundData() {\n  const { currentFund, isLoading, needsSetup } = useFundContext();\n  \n  return {\n    funds: currentFund ? [currentFund] : [],\n    isLoading,\n    hasFundData: !!currentFund,\n    needsSetup,\n    primaryFund: currentFund,\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\core\\cohorts\\CohortEngine.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'EngineConfig' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'vintageYear' is defined but never used.","line":49,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":49,"endColumn":71},{"ruleId":"no-unused-vars","severity":2,"message":"'sectors' is assigned a value but never used.","line":50,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":16}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n// CohortEngine.ts - Type-safe vintage cohort analysis engine\n\nimport type { \n  CohortInput, \n  CohortOutput,\n  CohortSummary,\n  EngineConfig \n} from '@shared/types';\nimport { CohortInputSchema, CohortOutputSchema } from '@shared/types';\nimport { map, reduce } from '@/utils/array-safety';\n\n// =============================================================================\n// CONFIGURATION & VALIDATION\n// =============================================================================\n\n/** Algorithm mode detection with type safety */\nfunction isAlgorithmModeEnabled(): boolean {\n  return process.env['ALG_COHORT']?.toLowerCase() === 'true' || process.env['NODE_ENV'] === 'development';\n}\n\n/** Validate and parse cohort input with Zod */\nfunction validateCohortInput(input: unknown): CohortInput {\n  const result = CohortInputSchema.safeParse(input);\n  if (!result.success) {\n    throw new Error(`Invalid cohort input: ${result.error.message}`);\n  }\n  return result.data;\n}\n\n/** Validate cohort output before returning */\nfunction validateCohortOutput(output: unknown): CohortOutput {\n  const result = CohortOutputSchema.safeParse(output);\n  if (!result.success) {\n    throw new Error(`Invalid cohort output: ${result.error.message}`);\n  }\n  return result.data;\n}\n\n// =============================================================================\n// MOCK DATA GENERATION (for scaffolding)\n// =============================================================================\n\n/** Generate mock portfolio companies for a cohort */\nfunction generateMockCompanies(cohortSize: number, vintageYear: number) {\n  const sectors = ['SaaS', 'Fintech', 'Healthcare', 'Analytics', 'Infrastructure', 'Enterprise'];\n  const stages = ['Seed', 'Series A', 'Series B', 'Series C'];\n  const companyPrefixes = ['Tech', 'Data', 'Cloud', 'Smart', 'Digital', 'Next'];\n  const companySuffixes = ['Corp', 'Inc', 'Labs', 'Systems', 'Solutions', 'Technologies'];\n  \n  return Array.from({ length: cohortSize }, (_, i) => {\n    const baseValuation = 1000000 + (Math.random() * 50000000); // $1M - $51M\n    const growthFactor = Math.pow(1.5, Math.random() * 3); // 1.0x - 3.375x growth\n    \n    return {\n      id: i + 1,\n      name: `${companyPrefixes[Math.floor(Math.random() * companyPrefixes.length)]}${companySuffixes[Math.floor(Math.random() * companySuffixes.length)]}`,\n      stage: stages[Math.floor(Math.random() * stages.length)],\n      valuation: Math.round(baseValuation * growthFactor)\n    };\n  });\n}\n\n// =============================================================================\n// CORE COHORT ANALYSIS LOGIC\n// =============================================================================\n\n/** Calculate rule-based cohort performance metrics */\nfunction calculateRuleBasedCohortMetrics(input: CohortInput): CohortOutput {\n  const { fundId, vintageYear, cohortSize } = input;\n  const cohortId = `cohort-${fundId}-${vintageYear}`;\n  \n  // Generate mock companies for this cohort\n  const companies = generateMockCompanies(cohortSize, vintageYear);\n  \n  // Calculate basic performance metrics based on vintage year and cohort characteristics\n  const yearsActive = new Date().getFullYear() - vintageYear;\n  const maturityFactor = Math.min(yearsActive / 5, 1); // Normalize to 0-1 over 5 years\n  \n  // Base IRR calculation with vintage year effects\n  let baseIRR = 0.15; // 15% base IRR\n  \n  // Vintage year adjustments (market conditions)\n  const vintageAdjustments: Record<number, number> = {\n    2020: -0.05, // COVID impact\n    2021: 0.08,  // Recovery boom\n    2022: -0.03, // Market correction\n    2023: 0.02,  // Normalization\n    2024: 0.05   // Growth resumption\n  };\n  \n  baseIRR += vintageAdjustments[vintageYear] || 0;\n  baseIRR *= maturityFactor; // Scale by fund maturity\n  \n  // Multiple calculation (TVPI)\n  const baseMultiple = 1.0 + (baseIRR * yearsActive);\n  const multiple = Math.max(1.0, baseMultiple + (Math.random() * 0.5 - 0.25)); // ┬▒25% variance\n  \n  // DPI calculation (distributions to paid-in)\n  const dpi = Math.max(0, multiple * maturityFactor * 0.4); // 40% of multiple realized over time\n  \n  const performance = {\n    irr: Math.round(baseIRR * 10000) / 10000, // Round to 4 decimal places\n    multiple: Math.round(multiple * 100) / 100,\n    dpi: Math.round(dpi * 100) / 100\n  };\n  \n  const output: CohortOutput = {\n    cohortId,\n    vintageYear,\n    performance,\n    companies\n  };\n  \n  return validateCohortOutput(output);\n}\n\n/** Calculate ML-enhanced cohort performance with advanced analytics */\nfunction calculateMLBasedCohortMetrics(input: CohortInput): CohortOutput {\n  // Start with rule-based calculation\n  const baseOutput = calculateRuleBasedCohortMetrics(input);\n  \n  // Apply ML enhancements (simulated)\n  const mlAdjustment = 0.9 + (Math.random() * 0.2); // 0.9 to 1.1 multiplier\n  \n  const enhancedPerformance = {\n    irr: Math.round(baseOutput.performance.irr * mlAdjustment * 10000) / 10000,\n    multiple: Math.round(baseOutput.performance.multiple * mlAdjustment * 100) / 100,\n    dpi: Math.round(baseOutput.performance.dpi * mlAdjustment * 100) / 100\n  };\n  \n  // Enhanced company valuations with ML insights\n  const enhancedCompanies = map(baseOutput.companies, company => ({\n    ...company,\n    valuation: Math.round(company.valuation * mlAdjustment)\n  }));\n  \n  const output: CohortOutput = {\n    ...baseOutput,\n    performance: enhancedPerformance,\n    companies: enhancedCompanies\n  };\n  \n  return validateCohortOutput(output);\n}\n\n// =============================================================================\n// MAIN ENGINE FUNCTIONS\n// =============================================================================\n\n/**\n * Primary CohortEngine function with input validation\n * @param input Cohort analysis parameters\n * @returns Cohort performance analysis with company details\n */\nexport function CohortEngine(input: unknown): CohortOutput {\n  const validatedInput = validateCohortInput(input);\n  const useAlgorithm = isAlgorithmModeEnabled();\n  \n  // Use ML algorithm if enabled\n  if (useAlgorithm) {\n    return calculateMLBasedCohortMetrics(validatedInput);\n  } else {\n    return calculateRuleBasedCohortMetrics(validatedInput);\n  }\n}\n\n/**\n * Generate comprehensive cohort summary with metadata\n * @param input Cohort analysis parameters\n * @returns Complete cohort summary with aggregated metrics\n */\nexport function generateCohortSummary(input: CohortInput): CohortSummary {\n  const cohortOutput = CohortEngine(input);\n  \n  const totalCompanies = cohortOutput.companies.length;\n  const avgValuation = totalCompanies > 0 \n    ? reduce(cohortOutput.companies, (sum, company) => sum + company.valuation, 0) / totalCompanies\n    : 0;\n  \n  // Calculate stage distribution\n  const stageDistribution = reduce(cohortOutput.companies, (acc, company) => {\n    acc[company.stage] = (acc[company.stage] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n  \n  const summary: CohortSummary = {\n    cohortId: cohortOutput.cohortId,\n    vintageYear: cohortOutput.vintageYear,\n    totalCompanies,\n    performance: cohortOutput.performance,\n    avgValuation: Math.round(avgValuation),\n    stageDistribution,\n    companies: cohortOutput.companies,\n    generatedAt: new Date(),\n    // Additional metadata\n    metadata: {\n      algorithmMode: isAlgorithmModeEnabled() ? 'ml-enhanced' : 'rule-based',\n      yearsActive: new Date().getFullYear() - cohortOutput.vintageYear,\n      maturityLevel: Math.min((new Date().getFullYear() - cohortOutput.vintageYear) / 5, 1)\n    }\n  };\n  \n  return summary;\n}\n\n/**\n * Compare multiple vintage cohorts\n * @param cohorts Array of cohort inputs to compare\n * @returns Comparative analysis of cohort performance\n */\nexport function compareCohorts(cohorts: CohortInput[]): {\n  cohorts: CohortSummary[];\n  comparison: {\n    bestPerforming: string;\n    avgIRR: number;\n    avgMultiple: number;\n    totalCompanies: number;\n  };\n} {\n  if (cohorts.length === 0) {\n    throw new Error('At least one cohort required for comparison');\n  }\n  \n  const cohortSummaries = map(cohorts, generateCohortSummary);\n  \n  // Find best performing cohort by IRR  \n  const bestPerforming = reduce(cohortSummaries.slice(1), (best, current) =>\n    current.performance.irr > best.performance.irr ? current : best,\n    cohortSummaries[0]\n  );\n  \n  // Calculate aggregate metrics\n  const avgIRR = reduce(cohortSummaries, (sum, cohort) => sum + cohort.performance.irr, 0) / cohortSummaries.length;\n  const avgMultiple = reduce(cohortSummaries, (sum, cohort) => sum + cohort.performance.multiple, 0) / cohortSummaries.length;\n  const totalCompanies = reduce(cohortSummaries, (sum, cohort) => sum + cohort.totalCompanies, 0);\n  \n  return {\n    cohorts: cohortSummaries,\n    comparison: {\n      bestPerforming: bestPerforming.cohortId,\n      avgIRR: Math.round(avgIRR * 10000) / 10000,\n      avgMultiple: Math.round(avgMultiple * 100) / 100,\n      totalCompanies\n    }\n  };\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\core\\pacing\\PacingEngine.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'MarketConditionExtended' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":99,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":99,"endColumn":37}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n// PacingEngine.ts - Type-safe fund deployment pacing engine\n\nimport type { \n  PacingInput, \n  PacingOutput, \n  PacingSummary,\n  MarketConditionExtended \n} from '@shared/types';\nimport { PacingInputSchema, PacingOutputSchema } from '@shared/types';\nimport { map, reduce } from '@/utils/array-safety';\n\n// =============================================================================\n// CONFIGURATION & VALIDATION\n// =============================================================================\n\n/** Validate and parse pacing input with Zod */\nfunction validatePacingInput(input: unknown): PacingInput {\n  const result = PacingInputSchema.safeParse(input);\n  if (!result.success) {\n    throw new Error(`Invalid pacing input: ${result.error.message}`);\n  }\n  return result.data;\n}\n\n/** Validate pacing output before returning */\nfunction validatePacingOutput(output: unknown): PacingOutput {\n  const result = PacingOutputSchema.safeParse(output);\n  if (!result.success) {\n    throw new Error(`Invalid pacing output: ${result.error.message}`);\n  }\n  return result.data;\n}\n\n// =============================================================================\n// CORE PACING LOGIC\n// =============================================================================\n\n// Algorithm mode detection\nfunction isAlgorithmModeEnabled(): boolean {\n  return process.env['ALG_PACING']?.toLowerCase() === 'true' || process.env['NODE_ENV'] === 'development';\n}\n\n// Enhanced rule-based pacing with market condition adjustments\nfunction calculateRuleBasedPacing(input: PacingInput): PacingOutput[] {\n  const { fundSize, deploymentQuarter, marketCondition } = input;\n  \n  // Market condition adjustments\n  const marketAdjustments: Record<string, { early: number; mid: number; late: number }> = {\n    'bull': { early: 1.3, mid: 1.1, late: 0.8 },    // Front-loaded in bull markets\n    'bear': { early: 0.7, mid: 0.9, late: 1.2 },    // Back-loaded in bear markets  \n    'neutral': { early: 1.0, mid: 1.0, late: 1.0 }  // Even distribution\n  };\n  \n  const adjustment = marketAdjustments[marketCondition];\n  const baseAmount = fundSize / 8; // 8 quarters deployment\n  \n  return Array.from({ length: 8 }, (_, i) => {\n    const quarter = deploymentQuarter + i;\n    let multiplier: number;\n    \n    // Determine phase and apply multiplier\n    if (i < 3) {\n      multiplier = adjustment.early;\n    } else if (i < 6) {\n      multiplier = adjustment.mid;\n    } else {\n      multiplier = adjustment.late;\n    }\n    \n    // Add some variability to avoid perfectly smooth deployment\n    const variability = 0.9 + (Math.random() * 0.2); // ┬▒10% variance\n    const deployment = baseAmount * multiplier * variability;\n    \n    let phaseNote = '';\n    if (i < 3) phaseNote = 'early-stage focus';\n    else if (i < 6) phaseNote = 'mid-stage deployment';\n    else phaseNote = 'late-stage optimization';\n    \n    const output = {\n      quarter,\n      deployment: Math.round(deployment),\n      note: `${marketCondition} market pacing (${phaseNote})`\n    };\n    \n    return validatePacingOutput(output);\n  });\n}\n\n// Mock ML algorithm for advanced pacing\nfunction calculateMLBasedPacing(input: PacingInput): PacingOutput[] {\n  const ruleBased = calculateRuleBasedPacing(input);\n  \n  // Simulate ML enhancement with trend analysis\n  return map(ruleBased, (item, index) => {\n    // ML adjusts based on simulated market trends and fund performance\n    const trendAdjustment = 0.85 + (Math.random() * 0.3); // 0.85 to 1.15\n    const mlEnhancedDeployment = item.deployment * trendAdjustment;\n    \n    return {\n      ...item,\n      deployment: Math.round(mlEnhancedDeployment),\n      note: `ML-optimized pacing (${input.marketCondition} trend analysis)`\n    };\n  });\n}\n\n// =============================================================================\n// MAIN ENGINE FUNCTIONS\n// =============================================================================\n\n/**\n * Primary PacingEngine function with input validation\n * @param input Pacing parameters (fund size, quarter, market condition)\n * @returns Array of quarterly deployment allocations\n */\nexport function PacingEngine(input: unknown): PacingOutput[] {\n  const validatedInput = validatePacingInput(input);\n  const useAlgorithm = isAlgorithmModeEnabled();\n  \n  // Use ML algorithm if enabled\n  if (useAlgorithm) {\n    return calculateMLBasedPacing(validatedInput);\n  } else {\n    return calculateRuleBasedPacing(validatedInput);\n  }\n}\n\n/**\n * Generate comprehensive pacing summary with metadata\n * @param input Pacing parameters\n * @returns Complete pacing summary with statistics\n */\nexport function generatePacingSummary(input: PacingInput): PacingSummary {\n  const deployments = PacingEngine(input);\n  \n  const totalQuarters = deployments.length;\n  const totalDeployment = reduce(deployments, (sum, d) => sum + d.deployment, 0);\n  const avgQuarterlyDeployment = totalQuarters > 0 ? totalDeployment / totalQuarters : 0;\n  \n  return {\n    fundSize: input.fundSize,\n    totalQuarters,\n    avgQuarterlyDeployment: Math.round(avgQuarterlyDeployment),\n    marketCondition: input.marketCondition,\n    deployments,\n    generatedAt: new Date(),\n  };\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\core\\reserves\\ConstrainedReserveEngine.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'subCents' is defined but never used.","line":2,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'minCents' is defined but never used.","line":2,"column":50,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":58},{"ruleId":"no-unused-vars","severity":2,"message":"'companies' is assigned a value but never used.","line":6,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":41},{"ruleId":"no-unused-vars","severity":2,"message":"'stagePolicies' is assigned a value but never used.","line":6,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":56}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ReserveInput } from '../../../../shared/schemas.js';\nimport { toCents, fromCents, addCents, subCents, minCents, conservationCheck, type Cents } from '../../../../shared/money.js';\n\nexport class ConstrainedReserveEngine {\n  calculate(input: ReserveInput) {\n    const { availableReserves, companies, stagePolicies, constraints: cst = {} } = input;\n\n    const minCheckC = toCents(cst.minCheck ?? 0);\n    const disc = cst.discountRateAnnual ?? 0.12;\n\n    const stageMax = new Map<string, Cents>();\n    Object.entries(cst.maxPerStage ?? {}).forEach(([stage, max]) => {\n      stageMax.set(stage, toCents(max));\n    });\n\n    const stageAllocated = new Map<string, Cents>();\n    const polByStage = new Map(input.stagePolicies.map(p=>[p.stage, p]));\n    const years = (s:string)=> (cst.graduationYears as any)?.[s] ?? 5;\n    const pExit = (s:string)=> (cst.graduationProb as any)?.[s] ?? 0.5;\n\n    const comps = input.companies.map(c=>{\n      const pol = polByStage.get(c.stage);\n      if (!pol) throw Object.assign(new Error(`No policy for ${c.stage}`), { status: 400 });\n      const capCompanyC = Number.isFinite(cst.maxPerCompany) ? toCents(cst.maxPerCompany as number) : BigInt(Number.MAX_SAFE_INTEGER);\n      const capStageC = stageMax.get(c.stage) ?? null;\n\n      const pv = pol.reserveMultiple * pExit(c.stage) / Math.pow(1+disc, years(c.stage));\n      return {\n        id: c.id, name: c.name, stage: c.stage,\n        investedC: toCents(c.invested),\n        capCompanyC, capStageC,\n        score: pv * pol.weight,\n        allocatedC: 0n as Cents,\n      };\n    });\n\n    comps.sort((a,b)=>{\n      const d = b.score - a.score;\n      if (d !== 0) return d > 0 ? 1 : -1;\n      return a.name.localeCompare(b.name) || a.id.localeCompare(b.id);\n    });\n\n    let remainingC = toCents(input.availableReserves);\n\n    // Pass 1\n    for (const c of comps) {\n      if (remainingC <= 0n) break;\n      const stAlloc = stageAllocated.get(c.stage) ?? 0n;\n      const stRoom = c.capStageC != null ? (c.capStageC - stAlloc > 0n ? c.capStageC - stAlloc : 0n) : remainingC;\n      let roomC = remainingC < stRoom ? remainingC : stRoom;\n      roomC = roomC < c.capCompanyC ? roomC : c.capCompanyC;\n      if (roomC <= 0n) continue;\n      if (minCheckC > 0n && roomC < minCheckC) continue;\n\n      c.allocatedC += roomC;\n      remainingC -= roomC;\n      stageAllocated.set(c.stage, stAlloc + roomC);\n    }\n\n    const totalAllocatedC = comps.reduce((s,c)=> addCents(s,c.allocatedC), 0n);\n    const ok = conservationCheck([toCents(availableReserves)], [totalAllocatedC, remainingC]);\n\n    return {\n      allocations: comps.filter(c=>c.allocatedC>0n).map(c=>({\n        id: c.id,\n        name: c.name,\n        stage: c.stage,\n        allocated: fromCents(c.allocatedC),\n      })),\n      totalAllocated: fromCents(totalAllocatedC),\n      remaining: fromCents(remainingC),\n      conservationOk: ok,\n    };\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\core\\reserves\\DeterministicReserveEngine.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'DEFAULT_GRADUATION_MATRIX' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'MAX_ITERATIONS' is assigned a value but never used.","line":26,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'CONVERGENCE_THRESHOLD' is assigned a value but never used.","line":27,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'DEFAULT_RISK_FREE_RATE' is assigned a value but never used.","line":28,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'featureFlags' is assigned a value but never used.","line":52,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":52,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'moicCalculations' is defined but never used.","line":429,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":429,"endColumn":40},{"ruleId":"no-unused-vars","severity":2,"message":"'stageStrategy' is defined but never used.","line":696,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":696,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'input' is defined but never used.","line":703,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":703,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'input' is defined but never used.","line":791,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":791,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'input' is defined but never used.","line":813,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":813,"endColumn":34}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * DeterministicReserveEngine\n * \n * Implements industry-standard \"Exit MOIC on Planned Reserves\" allocation algorithm\n * Provides deterministic, repeatable calculations for follow-on investment decisions\n */\n\nimport Decimal from 'decimal.js';\nimport {\n  type PortfolioCompany,\n  type GraduationMatrix,\n  type StageStrategy,\n  type ReserveAllocationInput,\n  type ReserveAllocationOutput,\n  type ReserveCalculationResult,\n  type FeatureFlags,\n  ReserveCalculationError,\n  DEFAULT_GRADUATION_MATRIX,\n  DEFAULT_STAGE_STRATEGIES,\n} from '@shared/schemas/reserves-schemas';\nimport { logger } from '@/lib/logger';\nimport { performanceMonitor } from '@/lib/performance-monitor';\n\n// Configuration and constants\nconst CALCULATION_VERSION = '1.0.0';\nconst MAX_ITERATIONS = 1000;\nconst CONVERGENCE_THRESHOLD = 0.001;\nconst DEFAULT_RISK_FREE_RATE = 0.02; // 2%\n\ninterface CalculationContext {\n  startTime: number;\n  deterministicSeed: string;\n  featureFlags: FeatureFlags;\n  debugMode: boolean;\n}\n\ninterface MOICCalculation {\n  companyId: string;\n  currentMOIC: Decimal;\n  projectedMOIC: Decimal;\n  graduationProbability: Decimal;\n  expectedValue: Decimal;\n  riskAdjustedReturn: Decimal;\n  allocationScore: Decimal;\n}\n\nexport class DeterministicReserveEngine {\n  private context: CalculationContext | null = null;\n  private calculationCache = new Map<string, ReserveCalculationResult>();\n\n  constructor(\n    private featureFlags: FeatureFlags = {\n      enableNewReserveEngine: true,\n      enableParityTesting: true,\n      enableRiskAdjustments: true,\n      enableScenarioAnalysis: true,\n      enableAdvancedDiversification: false,\n      enableLiquidationPreferences: true,\n      enablePerformanceLogging: true,\n      maxCalculationTimeMs: 5000,\n    }\n  ) {\n    // Set high precision for financial calculations\n    Decimal.set({ precision: 28, rounding: Decimal.ROUND_HALF_UP });\n  }\n\n  /**\n   * Main entry point for reserve allocation calculation\n   * Implements Exit MOIC on Planned Reserves ranking algorithm\n   */\n  async calculateOptimalReserveAllocation(\n    input: ReserveAllocationInput\n  ): Promise<ReserveCalculationResult> {\n    const startTime = Date.now();\n    \n    // Initialize calculation context\n    this.context = {\n      startTime,\n      deterministicSeed: this.generateDeterministicHash(input),\n      featureFlags: this.featureFlags,\n      debugMode: process.env['NODE_ENV'] === 'development',\n    };\n\n    try {\n      // Check cache first (for deterministic results)\n      const cacheKey = this.context.deterministicSeed;\n      if (this.calculationCache.has(cacheKey)) {\n        const cached = this.calculationCache.get(cacheKey)!;\n        logger.debug('Returning cached reserve calculation', { cacheKey });\n        return cached;\n      }\n\n      // Validate inputs\n      this.validateInputs(input);\n\n      // Track performance\n      if (this.featureFlags.enablePerformanceLogging) {\n        performanceMonitor.recordMetric(\n          'reserve_calculation_start',\n          input.portfolio.length,\n          'companies'\n        );\n      }\n\n      // Core calculation steps\n      const moicCalculations = await this.calculateMOICForAllCompanies(input);\n      const rankedAllocations = await this.rankByExitMOICOnPlannedReserves(\n        moicCalculations,\n        input\n      );\n      const optimizedAllocations = await this.optimizePortfolioAllocation(\n        rankedAllocations,\n        input\n      );\n      const riskAdjustedAllocations = await this.applyRiskAdjustments(\n        optimizedAllocations,\n        input\n      );\n      const finalAllocations = await this.applyConstraints(\n        riskAdjustedAllocations,\n        input\n      );\n\n      // Generate result\n      const result = await this.generateCalculationResult(\n        finalAllocations,\n        input,\n        moicCalculations\n      );\n\n      // Cache result for consistency\n      this.calculationCache.set(cacheKey, result);\n\n      // Performance tracking\n      const duration = Date.now() - startTime;\n      if (this.featureFlags.enablePerformanceLogging) {\n        performanceMonitor.recordCalculationPerformance(\n          duration,\n          input.portfolio.length,\n          true\n        );\n      }\n\n      logger.info('Reserve calculation completed', {\n        duration,\n        companiesAnalyzed: input.portfolio.length,\n        allocationsGenerated: finalAllocations.length,\n        totalAllocated: result.inputSummary.totalAllocated,\n      });\n\n      return result;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      \n      if (this.featureFlags.enablePerformanceLogging) {\n        performanceMonitor.recordCalculationPerformance(\n          duration,\n          input.portfolio.length,\n          false\n        );\n      }\n\n      const errorDetails = {\n        errorMessage: error instanceof Error ? error.message : String(error),\n        duration,\n        input: this.sanitizeForLogging(input),\n      };\n      logger.error('Reserve calculation failed', new Error(errorDetails.errorMessage));\n\n      throw new ReserveCalculationError(\n        `Reserve calculation failed: ${error instanceof Error ? error.message : String(error)}`,\n        'CALCULATION_ERROR',\n        { originalError: error, duration }\n      );\n    } finally {\n      this.context = null;\n    }\n  }\n\n  /**\n   * Calculate MOIC (Multiple of Invested Capital) for all portfolio companies\n   * This is the foundation for the Exit MOIC on Planned Reserves algorithm\n   */\n  private async calculateMOICForAllCompanies(\n    input: ReserveAllocationInput\n  ): Promise<MOICCalculation[]> {\n    const calculations: MOICCalculation[] = [];\n\n    for (const company of input.portfolio) {\n      if (!company.isActive) continue;\n\n      const currentMOIC = this.calculateCurrentMOIC(company);\n      const projectedMOIC = await this.calculateProjectedMOIC(\n        company,\n        input.graduationMatrix,\n        input.stageStrategies\n      );\n      const graduationProbability = this.calculateGraduationProbability(\n        company,\n        input.graduationMatrix\n      );\n      const expectedValue = this.calculateExpectedValue(\n        company,\n        projectedMOIC,\n        graduationProbability\n      );\n      const riskAdjustedReturn = this.calculateRiskAdjustedReturn(\n        expectedValue,\n        company,\n        input.stageStrategies\n      );\n      const allocationScore = this.calculateAllocationScore(\n        projectedMOIC,\n        graduationProbability,\n        riskAdjustedReturn,\n        company\n      );\n\n      calculations.push({\n        companyId: company.id,\n        currentMOIC,\n        projectedMOIC,\n        graduationProbability,\n        expectedValue,\n        riskAdjustedReturn,\n        allocationScore,\n      });\n\n      if (this.context?.debugMode) {\n        logger.debug('MOIC calculation for company', {\n          companyId: company.id,\n          companyName: company.name,\n          currentMOIC: currentMOIC.toNumber(),\n          projectedMOIC: projectedMOIC.toNumber(),\n          allocationScore: allocationScore.toNumber(),\n        });\n      }\n    }\n\n    return calculations;\n  }\n\n  /**\n   * Rank companies by Exit MOIC on Planned Reserves\n   * This is the core industry-standard algorithm for follow-on decisions\n   */\n  private async rankByExitMOICOnPlannedReserves(\n    calculations: MOICCalculation[],\n    input: ReserveAllocationInput\n  ): Promise<ReserveAllocationOutput[]> {\n    // Sort by allocation score (highest first)\n    const sorted = [...calculations].sort((a, b) => \n      b.allocationScore.comparedTo(a.allocationScore)\n    );\n\n    const allocations: ReserveAllocationOutput[] = [];\n    let remainingReserves = new Decimal(input.availableReserves);\n\n    for (let i = 0; i < sorted.length; i++) {\n      const calc = sorted[i];\n      const company = input.portfolio.find(c => c.id === calc.companyId)!;\n      const stageStrategy = this.findStageStrategy(company.currentStage, input.stageStrategies);\n\n      if (remainingReserves.lte(input.minAllocationThreshold)) {\n        break; // Not enough reserves left\n      }\n\n      // Calculate recommended allocation\n      const maxAllocation = this.calculateMaxAllocation(\n        company,\n        stageStrategy,\n        input\n      );\n      const optimalAllocation = this.calculateOptimalAllocation(\n        calc,\n        maxAllocation,\n        remainingReserves,\n        input\n      );\n\n      if (optimalAllocation.gt(input.minAllocationThreshold)) {\n        const allocation = this.createAllocationOutput(\n          company,\n          calc,\n          optimalAllocation,\n          i + 1, // priority\n          stageStrategy,\n          input\n        );\n\n        allocations.push(allocation);\n        remainingReserves = remainingReserves.minus(optimalAllocation);\n      }\n    }\n\n    return allocations;\n  }\n\n  /**\n   * Optimize portfolio allocation for diversification and risk management\n   */\n  private async optimizePortfolioAllocation(\n    allocations: ReserveAllocationOutput[],\n    input: ReserveAllocationInput\n  ): Promise<ReserveAllocationOutput[]> {\n    if (!input.enableDiversification) {\n      return allocations;\n    }\n\n    // Calculate current portfolio concentrations\n    const totalFundSize = new Decimal(input.totalFundSize);\n    const optimized = [...allocations];\n\n    // Apply concentration limits\n    for (const allocation of optimized) {\n      const company = input.portfolio.find(c => c.id === allocation.companyId)!;\n      const totalInvestment = new Decimal(company.totalInvested).plus(allocation.recommendedAllocation);\n      const concentrationRatio = totalInvestment.div(totalFundSize);\n\n      if (concentrationRatio.gt(input.maxPortfolioConcentration)) {\n        // Reduce allocation to meet concentration limit\n        const maxAdditional = totalFundSize\n          .mul(input.maxPortfolioConcentration)\n          .minus(company.totalInvested);\n        \n        allocation.recommendedAllocation = Math.max(\n          maxAdditional.toNumber(),\n          0\n        );\n        allocation.concentrationRisk = 'high';\n        allocation.riskFactors.push('Portfolio concentration limit applied');\n      }\n    }\n\n    // Apply diversification bonuses\n    if (this.featureFlags.enableAdvancedDiversification) {\n      this.applyDiversificationBonuses(optimized, input);\n    }\n\n    return optimized;\n  }\n\n  /**\n   * Apply risk adjustments based on company and portfolio characteristics\n   */\n  private async applyRiskAdjustments(\n    allocations: ReserveAllocationOutput[],\n    input: ReserveAllocationInput\n  ): Promise<ReserveAllocationOutput[]> {\n    if (!input.enableRiskAdjustment) {\n      return allocations;\n    }\n\n    const adjusted = [...allocations];\n\n    for (const allocation of adjusted) {\n      const company = input.portfolio.find(c => c.id === allocation.companyId)!;\n      \n      // Apply risk adjustments\n      const riskMultiplier = this.calculateRiskMultiplier(company, input);\n      const adjustedAllocation = new Decimal(allocation.recommendedAllocation)\n        .mul(riskMultiplier);\n\n      allocation.recommendedAllocation = adjustedAllocation.toNumber();\n      allocation.riskAdjustedReturn = allocation.riskAdjustedReturn * riskMultiplier.toNumber();\n\n      // Update risk factors\n      if (riskMultiplier.lt(1)) {\n        allocation.riskFactors.push('Risk adjustment applied due to company factors');\n      }\n\n      // Recalculate portfolio impact\n      allocation.portfolioWeight = adjustedAllocation\n        .div(input.totalFundSize)\n        .toNumber();\n    }\n\n    return adjusted;\n  }\n\n  /**\n   * Apply final constraints and validation\n   */\n  private async applyConstraints(\n    allocations: ReserveAllocationOutput[],\n    input: ReserveAllocationInput\n  ): Promise<ReserveAllocationOutput[]> {\n    const constrained = [...allocations];\n\n    // Remove allocations below minimum threshold\n    const filtered = constrained.filter(\n      a => a.recommendedAllocation >= input.minAllocationThreshold\n    );\n\n    // Apply maximum single allocation constraint\n    if (input.maxSingleAllocation) {\n      for (const allocation of filtered) {\n        if (allocation.recommendedAllocation > input.maxSingleAllocation) {\n          allocation.recommendedAllocation = input.maxSingleAllocation;\n          allocation.riskFactors.push('Maximum single allocation limit applied');\n        }\n      }\n    }\n\n    // Ensure total doesn't exceed available reserves\n    const totalAllocated = filtered.reduce(\n      (sum, a) => sum + a.recommendedAllocation,\n      0\n    );\n\n    if (totalAllocated > input.availableReserves) {\n      // Proportionally reduce allocations\n      const reductionFactor = input.availableReserves / totalAllocated;\n      for (const allocation of filtered) {\n        allocation.recommendedAllocation *= reductionFactor;\n        allocation.riskFactors.push('Proportional reduction applied to fit available reserves');\n      }\n    }\n\n    return filtered;\n  }\n\n  /**\n   * Generate final calculation result with comprehensive metrics\n   */\n  private async generateCalculationResult(\n    allocations: ReserveAllocationOutput[],\n    input: ReserveAllocationInput,\n    moicCalculations: MOICCalculation[]\n  ): Promise<ReserveCalculationResult> {\n    const totalAllocated = allocations.reduce(\n      (sum, a) => sum + a.recommendedAllocation,\n      0\n    );\n    const unallocatedReserves = input.availableReserves - totalAllocated;\n\n    // Calculate portfolio metrics\n    const expectedPortfolioValue = allocations.reduce(\n      (sum, a) => sum + a.expectedValue,\n      0\n    );\n    const expectedPortfolioMOIC = expectedPortfolioValue / totalAllocated || 0;\n\n    // Calculate risk metrics\n    const riskAnalysis = this.calculateRiskAnalysis(allocations, input);\n    const scenarioResults = await this.calculateScenarioAnalysis(allocations, input);\n\n    const result: ReserveCalculationResult = {\n      inputSummary: {\n        totalPortfolioCompanies: input.portfolio.length,\n        availableReserves: input.availableReserves,\n        totalAllocated,\n        allocationEfficiency: totalAllocated / input.availableReserves,\n      },\n      allocations,\n      unallocatedReserves,\n      portfolioMetrics: {\n        expectedPortfolioMOIC,\n        expectedPortfolioValue,\n        portfolioDiversification: this.calculateDiversificationIndex(allocations),\n        concentrationRisk: this.assessConcentrationRisk(allocations, input),\n        averageTimeToExit: this.calculateAverageTimeToExit(allocations),\n      },\n      riskAnalysis,\n      scenarioResults,\n      metadata: {\n        calculationDate: new Date(),\n        calculationDuration: Date.now() - this.context!.startTime,\n        modelVersion: CALCULATION_VERSION,\n        deterministicHash: this.context!.deterministicSeed,\n        assumptions: this.getCalculationAssumptions(),\n        limitations: this.getCalculationLimitations(),\n      },\n    };\n\n    return result;\n  }\n\n  // Helper methods for calculations\n  private calculateCurrentMOIC(company: PortfolioCompany): Decimal {\n    return new Decimal(company.currentValuation).div(company.totalInvested);\n  }\n\n  private async calculateProjectedMOIC(\n    company: PortfolioCompany,\n    graduationMatrix: GraduationMatrix,\n    stageStrategies: StageStrategy[]\n  ): Promise<Decimal> {\n    const stageStrategy = this.findStageStrategy(company.currentStage, stageStrategies);\n    if (!stageStrategy) {\n      return new Decimal(company.currentMOIC || 1);\n    }\n\n    // Find graduation path\n    const graduationRate = graduationMatrix.rates.find(\n      rate => rate.fromStage === company.currentStage\n    );\n\n    if (!graduationRate) {\n      return new Decimal(stageStrategy.expectedMOIC);\n    }\n\n    // Calculate projected MOIC based on graduation probability and valuation multiple\n    const currentMOIC = this.calculateCurrentMOIC(company);\n    const projectedMultiple = new Decimal(graduationRate.valuationMultiple);\n    const graduationBonus = new Decimal(graduationRate.probability);\n\n    return currentMOIC\n      .mul(projectedMultiple)\n      .mul(graduationBonus.plus(1));\n  }\n\n  private calculateGraduationProbability(\n    company: PortfolioCompany,\n    graduationMatrix: GraduationMatrix\n  ): Decimal {\n    const graduationRate = graduationMatrix.rates.find(\n      rate => rate.fromStage === company.currentStage\n    );\n\n    return new Decimal(graduationRate?.probability || 0.5);\n  }\n\n  private calculateExpectedValue(\n    company: PortfolioCompany,\n    projectedMOIC: Decimal,\n    graduationProbability: Decimal\n  ): Decimal {\n    return new Decimal(company.totalInvested)\n      .mul(projectedMOIC)\n      .mul(graduationProbability);\n  }\n\n  private calculateRiskAdjustedReturn(\n    expectedValue: Decimal,\n    company: PortfolioCompany,\n    stageStrategies: StageStrategy[]\n  ): Decimal {\n    const stageStrategy = this.findStageStrategy(company.currentStage, stageStrategies);\n    if (!stageStrategy) {\n      return expectedValue;\n    }\n\n    const riskAdjustment = new Decimal(1).minus(stageStrategy.failureRate);\n    return expectedValue.mul(riskAdjustment);\n  }\n\n  private calculateAllocationScore(\n    projectedMOIC: Decimal,\n    graduationProbability: Decimal,\n    riskAdjustedReturn: Decimal,\n    company: PortfolioCompany\n  ): Decimal {\n    // Exit MOIC on Planned Reserves calculation\n    // Score = (Projected MOIC * Graduation Probability * Risk Adjustment) / Current Valuation\n    return projectedMOIC\n      .mul(graduationProbability)\n      .mul(riskAdjustedReturn)\n      .div(company.currentValuation);\n  }\n\n  private findStageStrategy(\n    stage: string,\n    stageStrategies: StageStrategy[]\n  ): StageStrategy | undefined {\n    return stageStrategies.find(s => s.stage === stage) || \n           DEFAULT_STAGE_STRATEGIES.find(s => s.stage === stage);\n  }\n\n  private calculateMaxAllocation(\n    company: PortfolioCompany,\n    stageStrategy: StageStrategy | undefined,\n    input: ReserveAllocationInput\n  ): Decimal {\n    if (!stageStrategy) {\n      return new Decimal(input.availableReserves * 0.1); // Default 10% max\n    }\n\n    const maxByStrategy = new Decimal(stageStrategy.maxInvestment);\n    const maxByReserves = new Decimal(input.availableReserves * 0.3); // Max 30% of reserves\n    const maxByConcentration = new Decimal(input.totalFundSize)\n      .mul(input.maxPortfolioConcentration)\n      .minus(company.totalInvested);\n\n    return Decimal.min(maxByStrategy, maxByReserves, maxByConcentration);\n  }\n\n  private calculateOptimalAllocation(\n    calc: MOICCalculation,\n    maxAllocation: Decimal,\n    remainingReserves: Decimal,\n    input: ReserveAllocationInput\n  ): Decimal {\n    // Use allocation score to determine optimal amount within constraints\n    const scoreBasedAllocation = calc.allocationScore\n      .mul(remainingReserves)\n      .div(100); // Normalize score\n\n    return Decimal.min(\n      scoreBasedAllocation,\n      maxAllocation,\n      remainingReserves,\n      new Decimal(input.maxSingleAllocation || Infinity)\n    );\n  }\n\n  private createAllocationOutput(\n    company: PortfolioCompany,\n    calc: MOICCalculation,\n    allocation: Decimal,\n    priority: number,\n    stageStrategy: StageStrategy | undefined,\n    input: ReserveAllocationInput\n  ): ReserveAllocationOutput {\n    const newOwnership = new Decimal(company.ownershipPercentage)\n      .plus(allocation.div(company.currentValuation));\n\n    return {\n      companyId: company.id,\n      companyName: company.name,\n      recommendedAllocation: allocation.toNumber(),\n      allocationRationale: this.generateAllocationRationale(calc, stageStrategy),\n      priority,\n      expectedMOIC: calc.projectedMOIC.toNumber(),\n      expectedValue: calc.expectedValue.toNumber(),\n      riskAdjustedReturn: calc.riskAdjustedReturn.toNumber(),\n      newOwnership: Math.min(newOwnership.toNumber(), 1),\n      portfolioWeight: allocation.div(input.totalFundSize).toNumber(),\n      concentrationRisk: this.assessConcentrationRisk([{ \n        recommendedAllocation: allocation.toNumber(),\n        companyId: company.id \n      } as ReserveAllocationOutput], input),\n      recommendedStage: company.currentStage,\n      timeToDeployment: 6, // Default 6 months\n      followOnPotential: stageStrategy?.followOnProbability || 0.5,\n      riskFactors: [],\n      mitigationStrategies: [],\n      calculationMetadata: {\n        graduationProbability: calc.graduationProbability.toNumber(),\n        expectedExitMultiple: calc.projectedMOIC.toNumber(),\n        timeToExit: stageStrategy?.expectedTimeToExit || 84,\n        diversificationBonus: 0,\n        liquidationPrefImpact: 0,\n      },\n    };\n  }\n\n  // Utility methods\n  private validateInputs(input: ReserveAllocationInput): void {\n    if (input.portfolio.length === 0) {\n      throw new ReserveCalculationError(\n        'Portfolio cannot be empty',\n        'INVALID_INPUT'\n      );\n    }\n\n    if (input.availableReserves <= 0) {\n      throw new ReserveCalculationError(\n        'Available reserves must be positive',\n        'INVALID_INPUT'\n      );\n    }\n\n    if (input.totalFundSize <= 0) {\n      throw new ReserveCalculationError(\n        'Total fund size must be positive',\n        'INVALID_INPUT'\n      );\n    }\n  }\n\n  private generateDeterministicHash(input: ReserveAllocationInput): string {\n    // Create deterministic hash for caching and verification\n    const hashInput = {\n      portfolioCount: input.portfolio.length,\n      availableReserves: input.availableReserves,\n      totalFundSize: input.totalFundSize,\n      scenarioType: input.scenarioType,\n      timeHorizon: input.timeHorizon,\n    };\n\n    return Buffer.from(JSON.stringify(hashInput)).toString('base64');\n  }\n\n  private sanitizeForLogging(input: ReserveAllocationInput): any {\n    return {\n      portfolioCompanies: input.portfolio.length,\n      availableReserves: input.availableReserves,\n      totalFundSize: input.totalFundSize,\n      scenarioType: input.scenarioType,\n    };\n  }\n\n  private generateAllocationRationale(\n    calc: MOICCalculation,\n    stageStrategy: StageStrategy | undefined\n  ): string {\n    return `High allocation score (${calc.allocationScore.toFixed(2)}) based on projected MOIC of ${calc.projectedMOIC.toFixed(1)}x with ${(calc.graduationProbability.toNumber() * 100).toFixed(0)}% graduation probability.`;\n  }\n\n  private calculateRiskMultiplier(\n    company: PortfolioCompany,\n    input: ReserveAllocationInput\n  ): Decimal {\n    let multiplier = new Decimal(1);\n\n    // Adjust for company age\n    const ageMonths = (Date.now() - company.investmentDate.getTime()) / (1000 * 60 * 60 * 24 * 30);\n    if (ageMonths > 60) { // Over 5 years\n      multiplier = multiplier.mul(0.9);\n    }\n\n    // Adjust for performance\n    if (company.currentMOIC && company.currentMOIC < 1) {\n      multiplier = multiplier.mul(0.8);\n    }\n\n    return multiplier;\n  }\n\n  private applyDiversificationBonuses(\n    allocations: ReserveAllocationOutput[],\n    input: ReserveAllocationInput\n  ): void {\n    // Apply bonuses for sector diversification\n    const sectorCounts = new Map<string, number>();\n    for (const allocation of allocations) {\n      const company = input.portfolio.find(c => c.id === allocation.companyId)!;\n      sectorCounts.set(company.sector, (sectorCounts.get(company.sector) || 0) + 1);\n    }\n\n    for (const allocation of allocations) {\n      const company = input.portfolio.find(c => c.id === allocation.companyId)!;\n      const sectorCount = sectorCounts.get(company.sector) || 1;\n      \n      if (sectorCount === 1) {\n        // Bonus for unique sector\n        allocation.recommendedAllocation *= 1.1;\n        allocation.calculationMetadata.diversificationBonus = 0.1;\n      }\n    }\n  }\n\n  private calculateDiversificationIndex(allocations: ReserveAllocationOutput[]): number {\n    // Calculate Herfindahl-Hirschman Index (HHI) for diversification\n    const total = allocations.reduce((sum, a) => sum + a.recommendedAllocation, 0);\n    if (total === 0) return 1;\n\n    const hhi = allocations.reduce((sum, a) => {\n      const share = a.recommendedAllocation / total;\n      return sum + (share * share);\n    }, 0);\n\n    // Return diversification index (1 - HHI)\n    return Math.max(0, 1 - hhi);\n  }\n\n  private assessConcentrationRisk(\n    allocations: ReserveAllocationOutput[],\n    input: ReserveAllocationInput\n  ): 'low' | 'medium' | 'high' {\n    const maxConcentration = Math.max(\n      ...allocations.map(a => a.portfolioWeight || 0)\n    );\n\n    if (maxConcentration > input.maxPortfolioConcentration * 0.8) {\n      return 'high';\n    } else if (maxConcentration > input.maxPortfolioConcentration * 0.5) {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  private calculateAverageTimeToExit(allocations: ReserveAllocationOutput[]): number {\n    if (allocations.length === 0) return 84; // Default 7 years\n\n    const totalWeighted = allocations.reduce(\n      (sum, a) => sum + (a.calculationMetadata.timeToExit * a.recommendedAllocation),\n      0\n    );\n    const totalAllocation = allocations.reduce(\n      (sum, a) => sum + a.recommendedAllocation,\n      0\n    );\n\n    return totalAllocation > 0 ? totalWeighted / totalAllocation : 84;\n  }\n\n  private calculateRiskAnalysis(\n    allocations: ReserveAllocationOutput[],\n    input: ReserveAllocationInput\n  ): ReserveCalculationResult['riskAnalysis'] {\n    // Simplified risk analysis\n    const avgRiskAdjustedReturn = allocations.reduce(\n      (sum, a) => sum + a.riskAdjustedReturn,\n      0\n    ) / allocations.length;\n\n    return {\n      portfolioRisk: avgRiskAdjustedReturn > 10000000 ? 'high' : 'medium',\n      keyRiskFactors: ['Market concentration', 'Stage concentration', 'Sector concentration'],\n      riskMitigationActions: ['Diversification', 'Staged deployment', 'Risk monitoring'],\n      stressTestResults: {\n        downside10: avgRiskAdjustedReturn * 0.3,\n        upside90: avgRiskAdjustedReturn * 2.5,\n        expectedValue: avgRiskAdjustedReturn,\n      },\n    };\n  }\n\n  private async calculateScenarioAnalysis(\n    allocations: ReserveAllocationOutput[],\n    input: ReserveAllocationInput\n  ): Promise<ReserveCalculationResult['scenarioResults']> {\n    const baseValue = allocations.reduce((sum, a) => sum + a.expectedValue, 0);\n\n    return {\n      conservative: {\n        totalValue: baseValue * 0.7,\n        portfolioMOIC: 2.5,\n        probability: 0.2,\n      },\n      base: {\n        totalValue: baseValue,\n        portfolioMOIC: 5.0,\n        probability: 0.6,\n      },\n      optimistic: {\n        totalValue: baseValue * 1.8,\n        portfolioMOIC: 12.0,\n        probability: 0.2,\n      },\n    };\n  }\n\n  private getCalculationAssumptions(): string[] {\n    return [\n      'Industry-standard graduation rates applied',\n      'Market conditions remain stable',\n      'Company performance projections based on historical data',\n      'No major economic disruptions assumed',\n    ];\n  }\n\n  private getCalculationLimitations(): string[] {\n    return [\n      'Projections based on historical patterns',\n      'Market timing not considered',\n      'Individual company risk factors simplified',\n      'Regulatory changes not factored',\n    ];\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\core\\reserves\\ReserveEngine.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'EngineConfig' is defined but never used.","line":12,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'ConfidenceLevelType' is defined but never used.","line":13,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":22}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n// ReserveEngine.ts - Type-safe reserve allocation engine\n\nimport type { \n  ReserveInput, \n  ReserveOutput, \n  ReserveSummary, \n  EngineConfig,\n  ConfidenceLevelType \n} from '@shared/types';\nimport { ReserveInputSchema, ReserveOutputSchema , ConfidenceLevel } from '@shared/types';\nimport { map, reduce } from '@/utils/array-safety';\n\n// =============================================================================\n// CONFIGURATION & VALIDATION\n// =============================================================================\n\n/** Algorithm mode detection with type safety */\nfunction isAlgorithmModeEnabled(): boolean {\n  return process.env['ALG_RESERVE']?.toLowerCase() === 'true' || process.env['NODE_ENV'] === 'development';\n}\n\n/** Validate and parse reserve input with Zod */\nfunction validateReserveInput(input: unknown): ReserveInput {\n  const result = ReserveInputSchema.safeParse(input);\n  if (!result.success) {\n    throw new Error(`Invalid reserve input: ${result.error.message}`);\n  }\n  return result.data;\n}\n\n/** Validate reserve output before returning */\nfunction validateReserveOutput(output: unknown): ReserveOutput {\n  const result = ReserveOutputSchema.safeParse(output);\n  if (!result.success) {\n    throw new Error(`Invalid reserve output: ${result.error.message}`);\n  }\n  return result.data;\n}\n\n// =============================================================================\n// CORE ALLOCATION LOGIC\n// =============================================================================\n\n// Enhanced rule-based allocation with confidence scoring\nfunction calculateRuleBasedAllocation(company: ReserveInput): ReserveOutput {\n  const { invested, stage, sector, ownership } = company;\n  \n  // Stage-based multiplier\n  const stageMultipliers: Record<string, number> = {\n    'Seed': 1.5,\n    'Series A': 2.0,\n    'Series B': 2.5,\n    'Series C': 1.8,\n    'Growth': 1.2\n  };\n  \n  // Sector risk adjustment\n  const sectorMultipliers: Record<string, number> = {\n    'SaaS': 1.1,\n    'Fintech': 1.2,\n    'Healthcare': 1.3,\n    'Analytics': 1.0,\n    'Infrastructure': 0.9,\n    'Enterprise': 0.8\n  };\n  \n  const stageMultiplier = stageMultipliers[stage] || 2.0;\n  const sectorMultiplier = sectorMultipliers[sector] || 1.0;\n  \n  // Base allocation with stage and sector adjustments\n  let allocation = invested * stageMultiplier * sectorMultiplier;\n  \n  // Ownership percentage adjustment (higher ownership = higher reserves)\n  if (ownership > 0.1) {\n    allocation *= 1.2;\n  } else if (ownership < 0.05) {\n    allocation *= 0.8;\n  }\n  \n  // Calculate confidence based on data quality using defined levels\n  let confidence: number = ConfidenceLevel.COLD_START; // Base cold-start confidence\n  \n  // Increase confidence based on available data\n  if (stage && sector) confidence += 0.2;\n  if (ownership > 0) confidence += 0.15;\n  if (invested > 1000000) confidence += 0.1; // Larger investments = more data\n  \n  // Cap confidence at reasonable cold-start level\n  confidence = Math.min(confidence, ConfidenceLevel.MEDIUM);\n  \n  let rationale = `${stage} stage, ${sector} sector`;\n  if (confidence <= ConfidenceLevel.LOW) {\n    rationale += \" (cold-start mode)\";\n  } else {\n    rationale += \" (enhanced rules)\";\n  }\n  \n  const output = {\n    allocation: Math.round(allocation),\n    confidence: Math.round(confidence * 100) / 100,\n    rationale\n  };\n  \n  return validateReserveOutput(output);\n}\n\n// Mock ML algorithm for high-confidence mode\nfunction calculateMLBasedAllocation(company: ReserveInput): ReserveOutput {\n  // This would call actual ML model in production\n  const baseAllocation = calculateRuleBasedAllocation(company);\n  \n  // Simulate ML enhancement\n  const mlAdjustment = 0.8 + (Math.random() * 0.4); // 0.8 to 1.2 multiplier\n  const enhancedAllocation = baseAllocation.allocation * mlAdjustment;\n  \n  const output = {\n    allocation: Math.round(enhancedAllocation),\n    confidence: Math.min(ConfidenceLevel.ML_ENHANCED, baseAllocation.confidence + 0.3),\n    rationale: `ML-enhanced allocation (${baseAllocation.rationale.replace('(cold-start mode)', '').replace('(enhanced rules)', '').trim()})`\n  };\n  \n  return validateReserveOutput(output);\n}\n\n// =============================================================================\n// MAIN ENGINE FUNCTIONS\n// =============================================================================\n\n/** \n * Primary ReserveEngine function with input validation \n * @param portfolio Array of portfolio companies\n * @returns Array of reserve allocations with confidence scores\n */\nexport function ReserveEngine(portfolio: unknown[]): ReserveOutput[] {\n  if (!Array.isArray(portfolio) || portfolio.length === 0) {\n    return [];\n  }\n  \n  // Validate all inputs\n  const validatedPortfolio: ReserveInput[] = map(portfolio, (company, index) => {\n    try {\n      return validateReserveInput(company);\n    } catch (error) {\n      throw new Error(`Invalid company data at index ${index}: ${error}`);\n    }\n  });\n  \n  const useAlgorithm = isAlgorithmModeEnabled();\n  \n  return map(validatedPortfolio, (company) => {\n    // Use ML algorithm if enabled and confidence threshold met\n    if (useAlgorithm && Math.random() > 0.3) { // 70% chance of using ML in algorithm mode\n      return calculateMLBasedAllocation(company);\n    } else {\n      return calculateRuleBasedAllocation(company);\n    }\n  });\n}\n\n/**\n * Generate a comprehensive reserve summary for a fund\n * @param fundId Fund identifier\n * @param portfolio Portfolio companies\n * @returns Complete reserve summary with metadata\n */\nexport function generateReserveSummary(fundId: number, portfolio: ReserveInput[]): ReserveSummary {\n  const allocations = ReserveEngine(portfolio);\n  \n  const totalAllocation = reduce(allocations, (sum, item) => sum + item.allocation, 0);\n  const avgConfidence = allocations.length > 0 \n    ? reduce(allocations, (sum, item) => sum + item.confidence, 0) / allocations.length \n    : 0;\n  const highConfidenceCount = allocations.filter(item => item.confidence >= ConfidenceLevel.MEDIUM).length;\n  \n  return {\n    fundId,\n    totalAllocation,\n    avgConfidence: Math.round(avgConfidence * 100) / 100,\n    highConfidenceCount,\n    allocations,\n    generatedAt: new Date(),\n  };\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\core\\reserves\\__tests__\\reserves.spec.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'structuredClone' is not defined.","line":26,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'structuredClone' is not defined.","line":45,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":45,"endColumn":33}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { describe, it, expect } from \"vitest\";\nimport { computeReservesFromGraduation, FundDataForReserves } from \"../../reserves/computeReservesFromGraduation\";\n\nconst base: FundDataForReserves = {\n  totalCommitment: 50_000_000,\n  targetCompanies: 35,\n  avgCheckSize: 500_000,\n  deploymentPacePerYear: 16,   // ~4 per quarter\n  graduationRates: {\n    seedToA: { graduate: 35, fail: 35, remain: 30, months: 18 },\n    aToB:    { graduate: 50, fail: 25, remain: 25, months: 24 },\n    bToC:    { graduate: 60, fail: 20, remain: 20, months: 30 },\n  },\n  followOnChecks: { A: 800_000, B: 1_500_000, C: 2_500_000 },\n  startQuarter: 0,\n  horizonQuarters: 64,\n};\n\ndescribe(\"computeReservesFromGraduation\", () => {\n  it(\"requires each transition to sum to 100%\", () => {\n    const bad = structuredClone(base);\n    bad.graduationRates.aToB = { graduate: 55, fail: 25, remain: 25, months: 24 }; // 105%\n    const res = computeReservesFromGraduation(bad);\n    expect(res.valid).toBe(false);\n    expect(res.errors.some(e => e.includes(\"aToB\"))).toBe(true);\n  });\n\n  it(\"produces timeline and ratio within a reasonable band for market defaults\", () => {\n    const res = computeReservesFromGraduation(base);\n    expect(res.valid).toBe(true);\n    expect(Object.keys(res.followOnByQuarter).length).toBeGreaterThan(0);\n    expect(res.totalReserves).toBeGreaterThan(0);\n    // with these params, reserve ratio should be in ~45ΓÇô65% band\n    expect(res.reserveRatioPct).toBeGreaterThan(40);\n    expect(res.reserveRatioPct).toBeLessThan(70);\n  });\n\n  it(\"is sensitive to SeedΓåÆA graduation increases\", () => {\n    const res1 = computeReservesFromGraduation(base);\n    const more = structuredClone(base);\n    more.graduationRates.seedToA = { graduate: 45, fail: 25, remain: 30, months: 18 };\n    const res2 = computeReservesFromGraduation(more);\n    expect(res2.totalReserves).toBeGreaterThan(res1.totalReserves);\n    expect(res2.reserveRatioPct).toBeGreaterThan(res1.reserveRatioPct);\n  });\n});\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\core\\reserves\\adapter\\__tests__\\finalizePayload.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\core\\reserves\\adapter\\toEngineGraduationRates.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useFundStore' is defined but never used.","line":7,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { clampPct, clampInt } from '@/lib/coerce';\nimport type { useFundStore } from '@/stores/useFundStore';\n\nexport interface Stage {\n  id: string;\n  name: string;\n  graduate: number; // %\n  exit: number;     // %\n  months: number;   // int >= 1\n}\n\nexport interface EngineRates {\n  [transitionId: string]: {\n    graduate: number;\n    fail: number;\n    remain: number;\n    months: number;\n  };\n}\n\n/**\n * Creates a fund creation payload from the store state or test input\n * NOTE: We already clamp in the store for UX. We keep this adapter clamp as a final\n * belt-and-suspenders safety net before hitting the API. Do not remove without\n * replacing with server-side validation.\n */\nexport function toFundCreationPayload(input: any) {\n  // Handle both store state format and test input format\n  const stagesList = input.stages || input.strategy?.stages || [];\n  const stages = stagesList.map((stage: any) => ({\n    id: stage.id || `stage-${Math.random().toString(36).substr(2, 9)}`,\n    name: (stage.name || '').toString().trim() || `Stage ${stage.id || 'Unknown'}`,\n    graduate: clampPct(stage.graduate),\n    exit: clampPct(stage.exit), \n    months: clampInt(stage.months, 1, 120)\n  }));\n\n  // If input has basics, use them, otherwise generate defaults\n  const basics = input.basics || {\n    name: `Fund from Store ${new Date().toISOString()}`,\n    size: 50000000,\n    modelVersion: 'reserves-ev1' as const\n  };\n\n  return {\n    basics,\n    strategy: {\n      stages\n    }\n  };\n}\n\n// Legacy compatibility\nexport const toEngineGraduationRates = toFundCreationPayload;\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\core\\reserves\\computeReservesFromGraduation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\core\\reserves\\errors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\core\\reserves\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\core\\utils\\allocate100.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\engines\\engine-selector.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":23,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":23,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'input' is defined but never used.","line":77,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used.","line":78,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":78,"endColumn":25}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Engine selector with shadow comparison capability\r\n * Intelligently chooses between TypeScript and WASM implementations\r\n * Supports A/B testing and gradual migration\r\n */\r\n\r\nimport { isEnabled } from '@/lib/feature-flags';\r\nimport { calculateReservesSafe } from '@/lib/reserves-v11';\r\nimport { metrics } from '@/metrics/reserves-metrics';\r\nimport type { \r\n  ReservesInput, \r\n  ReservesConfig, \r\n  ReservesResult,\r\n  Company \r\n} from '@shared/types/reserves-v11';\r\n\r\n// Mock WASM implementation (replace with actual when available)\r\nasync function calculateReservesWASM(\r\n  input: ReservesInput,\r\n  config: ReservesConfig\r\n): Promise<ReservesResult> {\r\n  // Simulate WASM call delay\r\n  await new Promise(resolve => setTimeout(resolve, 10));\r\n  \r\n  // For now, return TS implementation\r\n  // In production, this would call the actual WASM module\r\n  return calculateReservesSafe(input, config);\r\n}\r\n\r\n// TypeScript implementation wrapper\r\nasync function calculateReservesTS(\r\n  input: ReservesInput,\r\n  config: ReservesConfig\r\n): Promise<ReservesResult> {\r\n  return calculateReservesSafe(input, config);\r\n}\r\n\r\n// Check if results are different (for shadow comparison)\r\nfunction isDifferent(\r\n  tsResult: ReservesResult,\r\n  wasmResult: ReservesResult,\r\n  epsilonCents: number = 1\r\n): boolean {\r\n  if (!tsResult.ok || !wasmResult.ok) {\r\n    return tsResult.ok !== wasmResult.ok;\r\n  }\r\n  \r\n  const tsData = tsResult.data!;\r\n  const wasmData = wasmResult.data!;\r\n  \r\n  // Check remaining difference\r\n  if (Math.abs(tsData.remaining_cents - wasmData.remaining_cents) > epsilonCents) {\r\n    return true;\r\n  }\r\n  \r\n  // Check allocation count\r\n  if (tsData.allocations.length !== wasmData.allocations.length) {\r\n    return true;\r\n  }\r\n  \r\n  // Check each allocation\r\n  const tsMap = new Map(tsData.allocations.map(a => [a.company_id, a.planned_cents]));\r\n  const wasmMap = new Map(wasmData.allocations.map(a => [a.company_id, a.planned_cents]));\r\n  \r\n  for (const [id, tsCents] of tsMap) {\r\n    const wasmCents = wasmMap.get(id);\r\n    if (wasmCents === undefined || Math.abs(tsCents - wasmCents) > epsilonCents) {\r\n      return true;\r\n    }\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\n// Engine selection function\r\nexport type ReservesCalculator = (\r\n  input: ReservesInput,\r\n  config: ReservesConfig\r\n) => Promise<ReservesResult>;\r\n\r\n/**\r\n * Get the appropriate reserves calculator based on feature flags and user\r\n */\r\nexport async function getReservesCalculator(userId?: string): Promise<ReservesCalculator> {\r\n  const shadow = isEnabled('shadow_compare', userId);\r\n  const tsOn = isEnabled('ts_reserves', userId);\r\n  const wasmOn = isEnabled('wasm_reserves', userId);\r\n  \r\n  // Shadow comparison mode - run both and compare\r\n  if (shadow && tsOn && wasmOn) {\r\n    return async (input: ReservesInput, config: ReservesConfig) => {\r\n      const timer = metrics.startTimer('reserves.shadow_compare');\r\n      \r\n      try {\r\n        // Run both implementations in parallel\r\n        const [tsResult, wasmResult] = await Promise.all([\r\n          calculateReservesTS(input, config),\r\n          calculateReservesWASM(input, config).catch(error => {\r\n            // If WASM fails, log and continue with TS\r\n            metrics.recordError(`WASM error: ${error}`);\r\n            return null;\r\n          })\r\n        ]);\r\n        \r\n        // Compare results if both succeeded\r\n        if (wasmResult && isDifferent(tsResult, wasmResult)) {\r\n          metrics.recordDivergence(tsResult, wasmResult);\r\n          console.warn('Reserves calculation divergence detected', {\r\n            ts: tsResult.data,\r\n            wasm: wasmResult.data\r\n          });\r\n        }\r\n        \r\n        // Always return TS result during shadow mode\r\n        return tsResult;\r\n        \r\n      } finally {\r\n        timer.end();\r\n      }\r\n    };\r\n  }\r\n  \r\n  // WASM only mode\r\n  if (wasmOn && !tsOn) {\r\n    return async (input: ReservesInput, config: ReservesConfig) => {\r\n      const timer = metrics.startTimer('reserves.wasm');\r\n      try {\r\n        return await calculateReservesWASM(input, config);\r\n      } catch (error) {\r\n        // Fallback to TS if WASM fails\r\n        metrics.recordError(`WASM fallback: ${error}`);\r\n        return await calculateReservesTS(input, config);\r\n      } finally {\r\n        timer.end();\r\n      }\r\n    };\r\n  }\r\n  \r\n  // TypeScript mode (default)\r\n  return async (input: ReservesInput, config: ReservesConfig) => {\r\n    const timer = metrics.startTimer('reserves.typescript');\r\n    try {\r\n      return await calculateReservesTS(input, config);\r\n    } finally {\r\n      timer.end();\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Simple interface for common use cases\r\n */\r\nexport async function calculateReservesWithFlags(\r\n  companies: Company[],\r\n  reservePercent: number,\r\n  enableRemainPass: boolean = false,\r\n  userId?: string\r\n): Promise<ReservesResult> {\r\n  const calculator = await getReservesCalculator(userId);\r\n  \r\n  const input: ReservesInput = {\r\n    companies,\r\n    fund_size_cents: companies.reduce((sum, c) => sum + (c.invested_cents || 0), 0),\r\n    quarter_index: new Date().getFullYear() * 4 + Math.floor(new Date().getMonth() / 3)\r\n  };\r\n  \r\n  const config: ReservesConfig = {\r\n    reserve_bps: Math.round(reservePercent * 10000),\r\n    remain_passes: enableRemainPass ? 1 : 0,\r\n    cap_policy: {\r\n      kind: 'fixed_percent',\r\n      default_percent: 0.5\r\n    },\r\n    audit_level: 'basic'\r\n  };\r\n  \r\n  return calculator(input, config);\r\n}\r\n\r\n/**\r\n * Migration helper - gradually move users from old to new engine\r\n */\r\nexport async function migrateReservesCalculation(\r\n  legacyResult: any,\r\n  companies: Company[],\r\n  config: ReservesConfig,\r\n  userId?: string\r\n): Promise<any> {\r\n  // Check if user is in migration cohort\r\n  const shouldMigrate = isEnabled('reserves_v11', userId);\r\n  \r\n  if (!shouldMigrate) {\r\n    return legacyResult;\r\n  }\r\n  \r\n  // Run new calculation\r\n  const calculator = await getReservesCalculator(userId);\r\n  const input: ReservesInput = {\r\n    companies,\r\n    fund_size_cents: companies.reduce((sum, c) => sum + (c.invested_cents || 0), 0),\r\n    quarter_index: new Date().getFullYear() * 4 + Math.floor(new Date().getMonth() / 3)\r\n  };\r\n  \r\n  const newResult = await calculator(input, config);\r\n  \r\n  // Log migration for analysis\r\n  if (isEnabled('metrics_collection', userId)) {\r\n    metrics.recordDivergence(legacyResult, newResult);\r\n  }\r\n  \r\n  return newResult;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\hooks\\use-engine-data.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":18,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":37},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":51,"column":32,"nodeType":"Identifier","messageId":"undef","endLine":51,"endColumn":37}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from 'react';\nimport type { ReserveSummary, PacingSummary, ApiError } from '@shared/types';\n\nexport function useReserveData(fundId: number) {\n  const [data, setData] = useState<ReserveSummary | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchReserveData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(`/api/reserves/${fundId}`);\n        \n        if (!response.ok) {\n          const errorData = await response.json() as unknown as ApiError;\n          throw new Error(errorData.message || errorData.error || `HTTP ${response.status}`);\n        }\n        \n        const result = await response.json() as unknown as ReserveSummary;\n        setData(result);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch reserve data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (fundId) {\n      fetchReserveData();\n    }\n  }, [fundId]);\n\n  return { data, loading, error };\n}\n\nexport function usePacingData() {\n  const [data, setData] = useState<PacingSummary | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchPacingData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch('/api/pacing/summary');\n        \n        if (!response.ok) {\n          const errorData = await response.json() as unknown as ApiError;\n          throw new Error(errorData.message || errorData.error || `HTTP ${response.status}`);\n        }\n        \n        const result = await response.json() as unknown as PacingSummary;\n        setData(result);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch pacing data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPacingData();\n  }, []);\n\n  return { data, loading, error };\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\hooks\\use-fund-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\hooks\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\hooks\\use-toast.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":62,"column":57,"nodeType":"Identifier","messageId":"undef","endLine":62,"endColumn":67},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":69,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":69,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'state' is defined but never used.","line":135,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":135,"endColumn":37}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\nimport { forEach } from \"../utils/array-safety\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        forEach(state.toasts, (toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  forEach(listeners, (listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\hooks\\useFlags.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":31,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":31,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":44,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":44,"endColumn":31}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Feature Flag Hook for React\n * Client-side flag consumption with SWR caching\n */\n\nimport { useQuery } from '@tanstack/react-query';\n\ninterface FlagResponse {\n  flags: Record<string, boolean>;\n  timestamp: string;\n  _meta: {\n    note: string;\n  };\n}\n\ninterface FlagStatus {\n  cache: {\n    age: number;\n    hash: string;\n    flagCount: number;\n  };\n  killSwitchActive: boolean;\n  environment: string;\n  timestamp: string;\n}\n\n/**\n * Fetch client-safe flags from API\n */\nasync function fetchFlags(): Promise<FlagResponse> {\n  const response = await fetch('/api/flags');\n  \n  if (!response.ok) {\n    throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n  }\n  \n  return response.json();\n}\n\n/**\n * Fetch flag system status\n */\nasync function fetchFlagStatus(): Promise<FlagStatus> {\n  const response = await fetch('/api/flags/status');\n  \n  if (!response.ok) {\n    throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n  }\n  \n  return response.json();\n}\n\n/**\n * Hook to get all client-safe flags\n */\nexport function useFlags() {\n  return useQuery({\n    queryKey: ['flags'],\n    queryFn: fetchFlags,\n    staleTime: 25_000, // 25s (slightly less than server TTL of 30s)\n    refetchInterval: 30_000, // Refetch every 30s\n    refetchOnWindowFocus: true,\n    retry: (failureCount, error) => {\n      // Don't retry on 4xx errors, do retry on network/5xx errors\n      if (error && typeof error === 'object' && 'message' in error) {\n        const message = (error as Error).message;\n        if (message.includes('HTTP 4')) return false;\n      }\n      return failureCount < 3;\n    },\n    // Safe fallback on error\n    placeholderData: { flags: {}, timestamp: new Date().toISOString(), _meta: { note: 'Fallback - all flags disabled' } }\n  });\n}\n\n/**\n * Hook to check if a specific flag is enabled\n */\nexport function useFlag(key: string): boolean {\n  const { data } = useFlags();\n  return data?.flags[key] ?? false;\n}\n\n/**\n * Hook to get flag system status (for debugging/monitoring)\n */\nexport function useFlagStatus() {\n  return useQuery({\n    queryKey: ['flags', 'status'],\n    queryFn: fetchFlagStatus,\n    staleTime: 60_000, // 1 minute\n    refetchInterval: 120_000, // Every 2 minutes\n    retry: 2\n  });\n}\n\n/**\n * Component for flag debugging (development only)\n */\nexport function FlagDebugPanel() {\n  const { data: flags, isLoading: flagsLoading } = useFlags();\n  const { data: status, isLoading: statusLoading } = useFlagStatus();\n  \n  if (process.env['NODE_ENV'] !== 'development') {\n    return null;\n  }\n  \n  if (flagsLoading || statusLoading) {\n    return <div className=\"text-sm text-gray-500\">Loading flags...</div>;\n  }\n  \n  return (\n    <div className=\"fixed bottom-4 right-4 bg-black/80 text-white text-xs p-3 rounded max-w-sm\">\n      <div className=\"font-bold mb-2\">≡ƒÜ⌐ Feature Flags</div>\n      \n      <div className=\"space-y-1\">\n        {Object.entries(flags?.flags || {}).map(([key, enabled]) => (\n          <div key={key} className=\"flex justify-between\">\n            <span className=\"text-gray-300\">{key}:</span>\n            <span className={enabled ? 'text-green-400' : 'text-red-400'}>\n              {enabled ? 'ON' : 'OFF'}\n            </span>\n          </div>\n        ))}\n      </div>\n      \n      {status && (\n        <div className=\"mt-3 pt-2 border-t border-gray-600\">\n          <div className=\"text-gray-400\">\n            Cache: {Math.round(status.cache.age / 1000)}s ago ({status.cache.hash})\n          </div>\n          {status.killSwitchActive && (\n            <div className=\"text-red-400 font-bold\">≡ƒÜ¿ KILL SWITCH ACTIVE</div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\hooks\\useFundToggle.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'mode' is defined but never used.","line":15,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":45},{"ruleId":"no-unused-vars","severity":2,"message":"'transitioning' is defined but never used.","line":16,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":44}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { create } from 'zustand';\nimport { subscribeWithSelector } from 'zustand/middleware';\nimport { api } from '@/lib';\n\n// Local state for UI toggle\ninterface ToggleStore {\n  mode: 'construction' | 'current';\n  isTransitioning: boolean;\n  setMode: (mode: 'construction' | 'current') => void;\n  setTransitioning: (transitioning: boolean) => void;\n}\n\nconst useToggleStore = create<ToggleStore>()(subscribeWithSelector((set) => ({\n  mode: 'current',\n  isTransitioning: false,\n  setMode: (mode) => set({ mode }),\n  setTransitioning: (transitioning) => set({ isTransitioning: transitioning }),\n})));\n\n// API response with pre-computed delta\ninterface FundStateResponse {\n  fundId: number;\n  mode: 'construction' | 'current';\n  state: any;\n  delta?: {\n    capitalLeft: number;\n    irr: number;\n    tvpi: number;\n    companiesCount: number;\n  };\n  patch?: any[]; // Immer patches for efficient updates\n  checksum: string;\n}\n\nexport function useFundToggle(fundId: number) {\n  const queryClient = useQueryClient();\n  const { mode, isTransitioning, setMode, setTransitioning } = useToggleStore();\n\n  // Fetch both states with React Query caching\n  const constructionQuery = useQuery({\n    queryKey: ['fund', fundId, 'construction'],\n    queryFn: () => api.get<FundStateResponse>(`/funds/${fundId}/state/construction`),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    gcTime: 10 * 60 * 1000, // 10 minutes\n  });\n\n  const currentQuery = useQuery({\n    queryKey: ['fund', fundId, 'current'],\n    queryFn: () => api.get<FundStateResponse>(`/funds/${fundId}/state/current`),\n    staleTime: 1 * 60 * 1000, // 1 minute (more frequent updates)\n    gcTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Toggle mutation with optimistic updates\n  const toggleMutation = useMutation({\n    mutationFn: async (newMode: 'construction' | 'current') => {\n      // API returns the delta for UI to render immediately\n      return api.post<FundStateResponse>(`/funds/${fundId}/toggle`, { mode: newMode });\n    },\n    onMutate: async (newMode) => {\n      setTransitioning(true);\n      setMode(newMode);\n\n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey: ['fund', fundId] });\n\n      // Return context for rollback\n      return { previousMode: mode };\n    },\n    onError: (err, newMode, context) => {\n      // Rollback on error\n      if (context?.previousMode) {\n        setMode(context.previousMode);\n      }\n      setTransitioning(false);\n    },\n    onSuccess: (data) => {\n      // Update cache with new data\n      queryClient.setQueryData(['fund', fundId, data.mode], data);\n      setTransitioning(false);\n    },\n    onSettled: () => {\n      // Refetch to ensure consistency\n      queryClient.invalidateQueries({ queryKey: ['fund', fundId] });\n    },\n  });\n\n  // Get active state based on mode\n  const activeQuery = mode === 'construction' ? constructionQuery : currentQuery;\n  const activeState = activeQuery.data;\n\n  // Pre-compute UI values\n  const uiState = activeState ? {\n    fundId,\n    mode,\n    isLoading: activeQuery.isLoading || isTransitioning,\n    isError: activeQuery.isError,\n    error: activeQuery.error,\n    \n    // Direct values from pre-computed delta\n    capitalLeft: activeState.delta?.capitalLeft || 0,\n    irr: activeState.delta?.irr || 0,\n    tvpi: activeState.delta?.tvpi || 0,\n    companiesCount: activeState.delta?.companiesCount || 0,\n    \n    // Full state for detailed views\n    state: activeState.state,\n    checksum: activeState.checksum,\n  } : null;\n\n  return {\n    ...uiState,\n    toggle: (newMode: 'construction' | 'current') => {\n      if (newMode !== mode && !isTransitioning) {\n        toggleMutation.mutate(newMode);\n      }\n    },\n    prefetch: () => {\n      // Prefetch both states for instant switching\n      queryClient.prefetchQuery({\n        queryKey: ['fund', fundId, 'construction'],\n        queryFn: () => api.get<FundStateResponse>(`/funds/${fundId}/state/construction`),\n      });\n      queryClient.prefetchQuery({\n        queryKey: ['fund', fundId, 'current'],\n        queryFn: () => api.get<FundStateResponse>(`/funds/${fundId}/state/current`),\n      });\n    },\n  };\n}\n\n// Subscribe to mode changes for analytics\nuseToggleStore.subscribe(\n  (state) => state.mode,\n  (mode) => {\n    // Track mode changes\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', 'fund_mode_toggle', {\n        mode,\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n);\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\__tests__\\coerce.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\booleans.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\cache-strategy.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'maxSize' is assigned a value but never used.","line":8,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'ttlMs' is assigned a value but never used.","line":8,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":51},{"ruleId":"no-undef","severity":2,"message":"'TextEncoder' is not defined.","line":14,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":14,"endColumn":34}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * CalculationCache: LRU with TTL and stable hashing.\n * - Uses Web Crypto if available, falls back to Node 'crypto' in tests/SSR.\n * - Updates recency on get() via Map deletion+set.\n */\nexport class CalculationCache<TInput, TData> {\n  private cache = new Map<string, { data: TData; ts: number }>();\n  constructor(private maxSize = 100, private ttlMs = 5 * 60 * 1000) {}\n\n  private async hashJSON(obj: TInput): Promise<string> {\n    const json = JSON.stringify(obj);\n    // Browser path\n    if (typeof globalThis.crypto !== 'undefined' && (globalThis.crypto as any).subtle) {\n      const enc = new TextEncoder().encode(json);\n      const digest = await (globalThis.crypto as any).subtle.digest('SHA-256', enc);\n      return Array.from(new Uint8Array(digest)).map(b => b.toString(16).padStart(2, '0')).join('');\n    }\n    // Node path (tests/SSR)\n    try {\n      // @ts-ignore dynamic import for Node only\n      const { createHash } = await import('crypto');\n      return createHash('sha256').update(json).digest('hex');\n    } catch {\n      // Last-resort poor-man hash (non-cryptographic)\n      let h = 0;\n      for (let i = 0; i < json.length; i++) {\n        h = ((h << 5) - h) + json.charCodeAt(i);\n        h |= 0;\n      }\n      return String(h >>> 0);\n    }\n  }\n\n  private touch(k: string) {\n    const v = this.cache.get(k);\n    if (!v) return;\n    this.cache.delete(k);\n    this.cache.set(k, v); // move to MRU\n  }\n\n  async get(input: TInput): Promise<TData | null> {\n    const k = await this.hashJSON(input);\n    const v = this.cache.get(k);\n    if (!v) return null;\n    if (Date.now() - v.ts > this.ttlMs) {\n      this.cache.delete(k);\n      return null;\n    }\n    this.touch(k);\n    return v.data;\n  }\n\n  async set(input: TInput, data: TData): Promise<void> {\n    const k = await this.hashJSON(input);\n    if (this.cache.size >= this.maxSize) {\n      const oldest = this.cache.keys().next().value;\n      if (oldest !== undefined) {\n        this.cache.delete(oldest);\n      }\n    }\n    this.cache.set(k, { data, ts: Date.now() });\n  }\n\n  // Clear all cached data - useful for tests and manual cache management\n  clear(): void {\n    this.cache.clear();\n  }\n\n  // Get cache statistics\n  getStats() {\n    return {\n      size: this.cache.size,\n      maxSize: this.maxSize,\n      ttlMs: this.ttlMs\n    };\n  }\n}\n\n// Export a singleton instance for global cache clearing in tests\nexport const globalCalculationCache = new CalculationCache<any, any>();\n\n// Export function for clearing all caches (used in tests)\nexport const clearCache = () => {\n  globalCalculationCache.clear();\n};","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\coerce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\error-boundary.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":20,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":20,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":21,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":21,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":48}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Production-grade error handling and recovery system for reserves calculations\n * Provides graceful degradation, automatic retry, and comprehensive error reporting\n */\n\nimport { metrics } from '@/metrics/reserves-metrics';\nimport type { ReservesInput, ReservesConfig, ReservesResult } from '@shared/types/reserves-v11';\n\nexport interface ErrorContext {\n  operation: string;\n  input?: Partial<ReservesInput>;\n  config?: Partial<ReservesConfig>;\n  timestamp: Date;\n  userAgent?: string;\n  sessionId?: string;\n}\n\nexport interface RecoveryStrategy {\n  name: string;\n  canRecover: (error: Error, context: ErrorContext) => boolean;\n  recover: (error: Error, context: ErrorContext) => Promise<ReservesResult | null>;\n  priority: number;\n}\n\nexport class ReservesErrorBoundary {\n  private recoveryStrategies: RecoveryStrategy[] = [];\n  private errorHistory: Array<{ error: Error; context: ErrorContext; timestamp: Date }> = [];\n  private readonly MAX_HISTORY = 100;\n  private readonly CIRCUIT_BREAKER_THRESHOLD = 5;\n  private readonly CIRCUIT_BREAKER_WINDOW = 60000; // 1 minute\n  \n  constructor() {\n    this.initializeRecoveryStrategies();\n  }\n  \n  private initializeRecoveryStrategies(): void {\n    // Strategy 1: Simplified calculation for data errors\n    this.addRecoveryStrategy({\n      name: 'simplified_calculation',\n      priority: 1,\n      canRecover: (error: Error) => {\n        return error.message.includes('companies') || \n               error.message.includes('validation') ||\n               error.message.includes('data');\n      },\n      recover: async (error: Error, context: ErrorContext): Promise<ReservesResult | null> => {\n        if (!context.input || !context.config) return null;\n        \n        try {\n          // Simplified calculation with reduced complexity\n          const simplifiedInput = {\n            ...context.input,\n            companies: context.input.companies?.filter(c => \n              c.invested_cents > 0 && c.exit_moic_bps > 0\n            ).slice(0, 50) || [] // Limit to 50 companies\n          };\n          \n          const simplifiedConfig = {\n            ...context.config,\n            remain_passes: 0, // Disable remain passes\n            audit_level: 'basic' as const\n          };\n          \n          // Use basic calculation logic\n          return this.performSimplifiedCalculation(simplifiedInput as ReservesInput, simplifiedConfig as ReservesConfig);\n        } catch (recoveryError) {\n          console.error('Simplified calculation recovery failed:', recoveryError);\n          return null;\n        }\n      }\n    });\n    \n    // Strategy 2: Cached result fallback\n    this.addRecoveryStrategy({\n      name: 'cached_fallback',\n      priority: 2,\n      canRecover: (error: Error) => {\n        return !error.message.includes('critical') && \n               !error.message.includes('security');\n      },\n      recover: async (error: Error, context: ErrorContext): Promise<ReservesResult | null> => {\n        try {\n          // Attempt to find similar cached result\n          const cacheKey = this.generateFallbackCacheKey(context);\n          const cached = localStorage.getItem(`reserves_fallback_${cacheKey}`);\n          \n          if (cached) {\n            const result = JSON.parse(cached);\n            \n            // Add warning about using cached data\n            return {\n              ...result,\n              warnings: [...(result.warnings || []), 'Using cached fallback data due to calculation error']\n            };\n          }\n          \n          return null;\n        } catch (cacheError) {\n          console.error('Cache fallback recovery failed:', cacheError);\n          return null;\n        }\n      }\n    });\n    \n    // Strategy 3: Default conservative estimate\n    this.addRecoveryStrategy({\n      name: 'conservative_estimate',\n      priority: 3,\n      canRecover: () => true, // Last resort\n      recover: async (error: Error, context: ErrorContext): Promise<ReservesResult | null> => {\n        if (!context.input || !context.config) return null;\n        \n        try {\n          const totalInvested = context.input.companies?.reduce((sum, c) => sum + c.invested_cents, 0) || 0;\n          const reserveAmount = Math.floor(totalInvested * (context.config.reserve_bps || 1500) / 10000);\n          \n          return {\n            ok: true,\n            data: {\n              allocations: [],\n              remaining_cents: reserveAmount,\n              metadata: {\n                total_available_cents: reserveAmount,\n                total_allocated_cents: 0,\n                conservation_check: true,\n                exit_moic_ranking: [],\n                max_iterations: 1,\n                companies_funded: 0\n              }\n            },\n            warnings: [\n              'Conservative estimate used due to calculation error',\n              'No allocations calculated - manual review required',\n              `Original error: ${error.message}`\n            ]\n          };\n        } catch (estimateError) {\n          console.error('Conservative estimate recovery failed:', estimateError);\n          return null;\n        }\n      }\n    });\n  }\n  \n  async executeWithRecovery(\n    operation: () => Promise<ReservesResult>,\n    context: ErrorContext\n  ): Promise<ReservesResult> {\n    try {\n      // Check circuit breaker\n      if (this.isCircuitOpen(context)) {\n        throw new Error('Circuit breaker open - too many recent failures');\n      }\n      \n      const result = await operation();\n      \n      // Cache successful result for potential fallback\n      this.cacheSuccessfulResult(result, context);\n      \n      return result;\n      \n    } catch (error) {\n      console.error(`Error in ${context.operation}:`, error);\n      \n      // Record error\n      this.recordError(error as Error, context);\n      \n      // Report error to monitoring\n      metrics.recordError(`${context.operation}: ${(error as Error).message}`);\n      \n      // Attempt recovery\n      const recoveredResult = await this.attemptRecovery(error as Error, context);\n      \n      if (recoveredResult) {\n        metrics.recordRecovery(context.operation, true);\n        return recoveredResult;\n      }\n      \n      // Recovery failed - return error result\n      metrics.recordRecovery(context.operation, false);\n      \n      return {\n        ok: false,\n        error: JSON.stringify({\n          code: 'CALCULATION_FAILED',\n          message: (error as Error).message,\n          details: {\n            operation: context.operation,\n            timestamp: context.timestamp.toISOString(),\n            recoveryAttempted: true\n          }\n        }),\n        warnings: [\n          'Calculation failed and recovery unsuccessful',\n          'Please check input data and try again',\n          'Contact support if the issue persists'\n        ]\n      };\n    }\n  }\n  \n  private async attemptRecovery(error: Error, context: ErrorContext): Promise<ReservesResult | null> {\n    // Sort strategies by priority\n    const sortedStrategies = [...this.recoveryStrategies].sort((a, b) => a.priority - b.priority);\n    \n    for (const strategy of sortedStrategies) {\n      if (strategy.canRecover(error, context)) {\n        try {\n          console.log(`Attempting recovery with strategy: ${strategy.name}`);\n          const result = await strategy.recover(error, context);\n          \n          if (result) {\n            console.log(`Recovery successful with strategy: ${strategy.name}`);\n            return result;\n          }\n        } catch (recoveryError) {\n          console.error(`Recovery strategy ${strategy.name} failed:`, recoveryError);\n        }\n      }\n    }\n    \n    return null;\n  }\n  \n  private performSimplifiedCalculation(input: ReservesInput, config: ReservesConfig): ReservesResult {\n    const validCompanies = input.companies.filter(c => \n      c.invested_cents > 0 && c.exit_moic_bps > 0\n    );\n    \n    if (validCompanies.length === 0) {\n      throw new Error('No valid companies for simplified calculation');\n    }\n    \n    const totalInvested = validCompanies.reduce((sum, c) => sum + c.invested_cents, 0);\n    const reserveAmount = Math.floor(totalInvested * config.reserve_bps / 10000);\n    \n    // Simple equal allocation\n    const allocationPerCompany = Math.floor(reserveAmount / validCompanies.length);\n    const remainder = reserveAmount - (allocationPerCompany * validCompanies.length);\n    \n    const allocations = validCompanies.map((company, index) => ({\n      company_id: company.id,\n      planned_cents: allocationPerCompany + (index === 0 ? remainder : 0),\n      iteration: 1,\n      reason: 'Equal allocation in recovery mode',\n      cap_cents: allocationPerCompany + (index === 0 ? remainder : 0)\n    }));\n    \n    return {\n      ok: true,\n      data: {\n        allocations,\n        remaining_cents: 0,\n        metadata: {\n          total_available_cents: reserveAmount,\n          total_allocated_cents: reserveAmount,\n          conservation_check: true,\n          exit_moic_ranking: validCompanies.map(c => c.id),\n          max_iterations: 1,\n          companies_funded: validCompanies.length\n        }\n      },\n      warnings: ['Simplified calculation used - results may not reflect optimal allocation']\n    };\n  }\n  \n  private isCircuitOpen(context: ErrorContext): boolean {\n    const recentErrors = this.errorHistory.filter(\n      entry => Date.now() - entry.timestamp.getTime() < this.CIRCUIT_BREAKER_WINDOW &&\n               entry.context.operation === context.operation\n    );\n    \n    return recentErrors.length >= this.CIRCUIT_BREAKER_THRESHOLD;\n  }\n  \n  private recordError(error: Error, context: ErrorContext): void {\n    this.errorHistory.push({\n      error,\n      context,\n      timestamp: new Date()\n    });\n    \n    // Trim history\n    if (this.errorHistory.length > this.MAX_HISTORY) {\n      this.errorHistory = this.errorHistory.slice(-this.MAX_HISTORY);\n    }\n  }\n  \n  private cacheSuccessfulResult(result: ReservesResult, context: ErrorContext): void {\n    try {\n      const cacheKey = this.generateFallbackCacheKey(context);\n      const cacheData = {\n        ...result,\n        cachedAt: new Date().toISOString(),\n        context: {\n          operation: context.operation,\n          timestamp: context.timestamp.toISOString()\n        }\n      };\n      \n      localStorage.setItem(`reserves_fallback_${cacheKey}`, JSON.stringify(cacheData));\n    } catch (cacheError) {\n      console.error('Failed to cache successful result:', cacheError);\n    }\n  }\n  \n  private generateFallbackCacheKey(context: ErrorContext): string {\n    const parts = [\n      context.operation,\n      context.input?.companies?.length || 0,\n      context.input?.fund_size_cents || 0,\n      context.config?.reserve_bps || 0\n    ];\n    \n    return parts.join('_');\n  }\n  \n  private addRecoveryStrategy(strategy: RecoveryStrategy): void {\n    this.recoveryStrategies.push(strategy);\n  }\n  \n  // Analytics methods\n  getErrorStats() {\n    const now = Date.now();\n    const recentErrors = this.errorHistory.filter(\n      entry => now - entry.timestamp.getTime() < this.CIRCUIT_BREAKER_WINDOW\n    );\n    \n    const operationCounts = recentErrors.reduce((acc, entry) => {\n      acc[entry.context.operation] = (acc[entry.context.operation] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    return {\n      totalErrors: this.errorHistory.length,\n      recentErrors: recentErrors.length,\n      operationBreakdown: operationCounts,\n      circuitStatus: Object.keys(operationCounts).reduce((acc, op) => {\n        acc[op] = operationCounts[op] >= this.CIRCUIT_BREAKER_THRESHOLD ? 'OPEN' : 'CLOSED';\n        return acc;\n      }, {} as Record<string, string>)\n    };\n  }\n  \n  clearErrorHistory(): void {\n    this.errorHistory = [];\n  }\n}\n\n// Export singleton\nexport const reservesErrorBoundary = new ReservesErrorBoundary();","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\excel-parity-validator.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Stage' is defined but never used.","line":14,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'toCompany' is defined but never used.","line":79,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":79,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'toStagePolicy' is defined but never used.","line":89,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'toConstraints' is defined but never used.","line":97,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":97,"endColumn":23}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Excel Parity Validator\n * Validates that our calculations match Excel reference implementations\n * within acceptable tolerance levels\n */\n\nimport { ConstrainedReserveEngine } from '@/core/reserves/ConstrainedReserveEngine';\nimport type { Company, StagePolicy, ReserveConstraints } from '@/types/domain-min';\nimport {\n  EngineCompany,\n  EngineStagePolicy,\n  EngineInput,\n  EngineResult,\n  Stage,\n  normalizeStage,\n  isRawCompany,\n  isRawStagePolicy\n} from '@/core/reserves/types';\n\n// Extended Company type for parity validation\ninterface ParityCompany extends Company {\n  invested?: number;\n  ownership?: number;\n  currentValuation?: number;\n  reserveCap?: number;\n}\n\n// Extended StagePolicy for parity validation\ninterface ParityStagePolicy extends Omit<StagePolicy, 'max_check_size_cents' | 'reserve_ratio'> {\n  reserveMultiple?: number;\n  weight?: number;\n  maxInvestment?: number;\n  max_check_size_cents?: number;\n  reserve_ratio?: number;\n}\n\n// Extended constraints for parity\ninterface ParityConstraints {\n  minCheckSize?: number;\n  maxPerCompany?: number;\n  min_reserve_cents?: number;\n  max_reserve_cents?: number;\n  target_reserve_months?: number;\n  max_concentration_percent?: number;\n\n  maxPerStage?: Record<string, number>;\n}\n\n// Convert parity format to engine format\nfunction toEngineCompany(input: ParityCompany): EngineCompany {\n  if (!isRawCompany(input)) {\n    throw new Error(`Invalid company data structure: ${JSON.stringify(input)}`);\n  }\n\n  return {\n    id: String(input.id),\n    name: String(input.name ?? input.id),\n    stage: normalizeStage(input.stage),\n    invested: Number(input.invested ?? input.allocated ?? 0),\n    ownership: Number(input.ownership ?? 0),\n    reserveCap: input.reserveCap != null ? Number(input.reserveCap) : undefined\n  };\n}\n\nfunction toEngineStagePolicy(input: ParityStagePolicy): EngineStagePolicy {\n  if (!isRawStagePolicy(input)) {\n    throw new Error(`Invalid stage policy structure: ${JSON.stringify(input)}`);\n  }\n\n  return {\n    stage: normalizeStage(input.stage),\n    reserveMultiple: Number(input.reserveMultiple ?? input.reserve_ratio ?? 1.0),\n    weight: Number(input.weight ?? 1.0)\n  };\n}\n\n// Keep old functions for backward compatibility but mark as deprecated\n/** @deprecated Use toEngineCompany instead */\nfunction toCompany(input: ParityCompany): Company {\n  return {\n    id: input.id,\n    name: input.name,\n    stage: input.stage,\n    allocated: input.allocated\n  };\n}\n\n/** @deprecated Use toEngineStagePolicy instead */\nfunction toStagePolicy(input: ParityStagePolicy): StagePolicy {\n  return {\n    stage: input.stage,\n    max_check_size_cents: input.max_check_size_cents ?? (input.maxInvestment ? input.maxInvestment * 100 : 0),\n    reserve_ratio: input.reserve_ratio ?? input.reserveMultiple ?? 1.0\n  };\n}\n\nfunction toConstraints(input: ParityConstraints): ReserveConstraints {\n  return {\n    min_reserve_cents: input.min_reserve_cents ?? (input.minCheckSize ? input.minCheckSize * 100 : 0),\n    max_reserve_cents: input.max_reserve_cents ?? (input.maxPerCompany ? input.maxPerCompany * 100 : 0),\n    target_reserve_months: input.target_reserve_months ?? 18,\n    max_concentration_percent: input.max_concentration_percent ?? 20\n  };\n}\n\nexport interface ParityDataset {\n  name: string;\n  description: string;\n  input: {\n    companies: ParityCompany[];\n    availableReserves: number;\n    policies: ParityStagePolicy[];\n    constraints?: ParityConstraints;\n  };\n  expectedOutput: {\n    totalAllocated: number;\n    allocations?: Array<{\n      companyId: string;\n      allocation: number;\n    }>;\n    allocateds?: Array<{  // Legacy field name for backward compatibility\n      id: string;\n      allocated: number;\n    }>;\n  };\n  tolerance: number; // Acceptable drift percentage (e.g., 0.01 for 1%)\n}\n\nexport interface ParityValidationResult {\n  name: string;\n  passed: boolean;\n  drift: number; // Actual drift percentage\n  details: {\n    expectedTotal: number;\n    actualTotal: number;\n    difference: number;\n    companyMismatches: Array<{\n      companyId: string;\n      expected: number;\n      actual: number;\n      drift: number;\n    }>;\n  };\n}\n\nexport class ExcelParityValidator {\n  private datasets: ParityDataset[] = [];\n  private engine: ConstrainedReserveEngine;\n\n  constructor() {\n    this.engine = new ConstrainedReserveEngine();\n    this.loadBuiltInDatasets();\n  }\n\n  /**\n   * Add a custom dataset for validation\n   */\n  addDataset(dataset: ParityDataset): void {\n    this.datasets.push(dataset);\n  }\n\n  /**\n   * Load built-in test datasets\n   */\n  private loadBuiltInDatasets(): void {\n    // Basic seed portfolio test\n    this.datasets.push({\n      name: 'seed_portfolio_basic',\n      description: 'Basic seed portfolio with 3 companies',\n      input: {\n        companies: [\n          {\n            id: 'c1',\n            name: 'TechCo',\n            stage: 'seed',\n            invested: 1000000, // Parity-specific field\n            ownership: 0.15,\n            currentValuation: 5000000,\n          },\n          {\n            id: 'c2',\n            name: 'BioStartup',\n            stage: 'seed',\n            invested: 500000, // Parity-specific field\n            ownership: 0.10,\n            currentValuation: 2000000,\n          },\n          {\n            id: 'c3',\n            name: 'AIVenture',\n            stage: 'seed',\n            invested: 750000, // Parity-specific field\n            ownership: 0.12,\n            currentValuation: 3000000,\n          },\n        ],\n        availableReserves: 5000000,\n        policies: [\n          {\n            stage: 'seed',\n            reserveMultiple: 2.0,\n            weight: 1.0,\n            maxInvestment: 2000000,\n          },\n        ],\n        constraints: {\n          minCheckSize: 100000,\n          maxPerCompany: 2000000,\n        },\n      },\n      expectedOutput: {\n        totalAllocated: 4500000, // Expected from Excel calculation\n        allocations: [\n          { companyId: 'c1', allocation: 2000000 },\n          { companyId: 'c2', allocation: 1000000 },\n          { companyId: 'c3', allocation: 1500000 },\n        ],\n      },\n      tolerance: 0.01, // 1% tolerance\n    });\n\n    // Mixed stage portfolio test\n    this.datasets.push({\n      name: 'mixed_stage_portfolio',\n      description: 'Portfolio with companies at different stages',\n      input: {\n        companies: [\n          {\n            id: 'd1',\n            name: 'EarlyCo',\n            stage: 'preseed',\n            invested: 250000,\n            ownership: 0.20,\n          },\n          {\n            id: 'd2',\n            name: 'GrowthCo',\n            stage: 'series_a',\n            invested: 3000000,\n            ownership: 0.08,\n            currentValuation: 15000000,\n          },\n          {\n            id: 'd3',\n            name: 'MatureCo',\n            stage: 'series_b',\n            invested: 5000000,\n            ownership: 0.05,\n            currentValuation: 50000000,\n          },\n        ],\n        availableReserves: 10000000,\n        policies: [\n          {\n            stage: 'preseed',\n            reserveMultiple: 3.0,\n            weight: 0.8,\n          },\n          {\n            stage: 'series_a',\n            reserveMultiple: 1.5,\n            weight: 1.2,\n          },\n          {\n            stage: 'series_b',\n            reserveMultiple: 1.0,\n            weight: 1.0,\n          },\n        ],\n        constraints: {\n          minCheckSize: 100000,\n          maxPerStage: {\n            preseed: 1000000,\n            series_a: 5000000,\n            series_b: 5000000,\n          },\n        },\n      },\n      expectedOutput: {\n        totalAllocated: 9750000,\n        allocations: [\n          { companyId: 'd1', allocation: 750000 },\n          { companyId: 'd2', allocation: 4500000 },\n          { companyId: 'd3', allocation: 4500000 }, // Limited by remaining reserves\n        ],\n      },\n      tolerance: 0.015, // 1.5% tolerance\n    });\n  }\n\n  /**\n   * Validate all datasets\n   */\n  async validateAll(): Promise<{\n    passed: number;\n    failed: number;\n    results: ParityValidationResult[];\n    overallPassRate: number;\n  }> {\n    const results: ParityValidationResult[] = [];\n\n    for (const dataset of this.datasets) {\n      const result = await this.validateDataset(dataset);\n      results.push(result);\n    }\n\n    const passed = results.filter(r => r.passed).length;\n    const failed = results.filter(r => !r.passed).length;\n\n    return {\n      passed,\n      failed,\n      results,\n      overallPassRate: passed / (passed + failed),\n    };\n  }\n\n  /**\n   * Validate a single dataset\n   */\n  async validateDataset(dataset: ParityDataset): Promise<ParityValidationResult> {\n    const { input, expectedOutput, tolerance } = dataset;\n\n    // Validate and transform input data\n    const validCompanies = input.companies.filter(isRawCompany);\n    const validPolicies = input.policies.filter(isRawStagePolicy);\n    \n    if (validCompanies.length !== input.companies.length) {\n      console.warn(`Filtered out ${input.companies.length - validCompanies.length} invalid companies`);\n    }\n    \n    if (validPolicies.length !== input.policies.length) {\n      console.warn(`Filtered out ${input.policies.length - validPolicies.length} invalid policies`);\n    }\n\n    // Create properly typed engine input\n    const engineInput: EngineInput = {\n      companies: validCompanies.map(c => toEngineCompany(c)),\n      availableReserves: Number(input.availableReserves),\n      stagePolicies: validPolicies.map(p => toEngineStagePolicy(p)),\n      constraints: input.constraints || {}\n    };\n\n    // Run calculation with typed result\n    const result = this.engine.calculate(engineInput) as EngineResult;\n\n    // Compare totals\n    const actualTotal = result.totalAllocated;\n    const expectedTotal = expectedOutput.totalAllocated;\n    const totalDifference = Math.abs(actualTotal - expectedTotal);\n    const totalDrift = expectedTotal !== 0 ? totalDifference / expectedTotal : 0;\n\n    // Compare individual allocations\n    const companyMismatches: Array<{\n      companyId: string;\n      expected: number;\n      actual: number;\n      drift: number;\n    }> = [];\n\n    // Handle both 'allocateds' (legacy) and 'allocations' field names\n    const expectedAllocationsRaw = expectedOutput.allocateds || expectedOutput.allocations || [];\n    \n    // Normalize to a common format for processing\n    const expectedAllocations = expectedAllocationsRaw.map((alloc: any) => ({\n      id: alloc.id || alloc.companyId,\n      allocated: alloc.allocated ?? alloc.allocation ?? 0\n    }));\n    \n    for (const expectedAlloc of expectedAllocations) {\n      const actualAlloc = result.allocations.find(\n        a => a.id === expectedAlloc.id\n      );\n      \n      const actual = actualAlloc?.allocated || 0;\n      const expected = expectedAlloc.allocated;\n      const difference = Math.abs(actual - expected);\n      const drift = expected !== 0 ? difference / expected : 0;\n\n      if (drift > tolerance) {\n        companyMismatches.push({\n          companyId: expectedAlloc.id,\n          expected,\n          actual,\n          drift,\n        });\n      }\n    }\n\n    const passed = totalDrift <= tolerance && companyMismatches.length === 0;\n\n    return {\n      name: dataset.name,\n      passed,\n      drift: totalDrift,\n      details: {\n        expectedTotal,\n        actualTotal,\n        difference: totalDifference,\n        companyMismatches,\n      },\n    };\n  }\n\n  /**\n   * Generate a detailed parity report\n   */\n  generateReport(results: ParityValidationResult[]): string {\n    const lines: string[] = [];\n    \n    lines.push('Excel Parity Validation Report');\n    lines.push('=' .repeat(50));\n    lines.push('');\n\n    for (const result of results) {\n      lines.push(`Dataset: ${result.name}`);\n      lines.push(`Status: ${result.passed ? 'Γ£à PASSED' : 'Γ¥î FAILED'}`);\n      lines.push(`Drift: ${(result.drift * 100).toFixed(2)}%`);\n      \n      if (!result.passed) {\n        lines.push('Details:');\n        lines.push(`  Expected Total: $${result.details.expectedTotal.toLocaleString()}`);\n        lines.push(`  Actual Total: $${result.details.actualTotal.toLocaleString()}`);\n        lines.push(`  Difference: $${result.details.difference.toLocaleString()}`);\n        \n        if (result.details.companyMismatches.length > 0) {\n          lines.push('  Company Mismatches:');\n          for (const mismatch of result.details.companyMismatches) {\n            lines.push(`    ${mismatch.companyId}:`);\n            lines.push(`      Expected: $${mismatch.expected.toLocaleString()}`);\n            lines.push(`      Actual: $${mismatch.actual.toLocaleString()}`);\n            lines.push(`      Drift: ${(mismatch.drift * 100).toFixed(2)}%`);\n          }\n        }\n      }\n      \n      lines.push('');\n    }\n\n    const summary = results.reduce(\n      (acc, r) => ({\n        passed: acc.passed + (r.passed ? 1 : 0),\n        failed: acc.failed + (r.passed ? 0 : 1),\n      }),\n      { passed: 0, failed: 0 }\n    );\n\n    lines.push('Summary');\n    lines.push('-'.repeat(50));\n    lines.push(`Total Tests: ${results.length}`);\n    lines.push(`Passed: ${summary.passed}`);\n    lines.push(`Failed: ${summary.failed}`);\n    lines.push(`Pass Rate: ${((summary.passed / results.length) * 100).toFixed(1)}%`);\n\n    return lines.join('\\n');\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\excel-parity.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'ExcelParityError' is defined but never used.","line":2,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'originalError' is defined but never used.","line":3,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":62}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Custom error class for Excel parity\r\nclass ExcelParityError extends Error {\r\n  constructor(message: string, public originalError?: unknown) {\r\n    super(message);\r\n    this.name = 'ExcelParityError';\r\n  }\r\n}\r\n\r\n/**\r\n * Excel Parity System\r\n * Validates web application results against Excel/Google Sheets benchmarks\r\n * Ensures deterministic financial calculations match reference implementations\r\n */\r\n\r\nimport {\r\n  type ExcelParityInput,\r\n  type ExcelParityOutput,\r\n  ExcelParityInputSchema,\r\n  ParityValidationError,\r\n} from '@shared/schemas/reserves-schemas';\r\nimport { logger } from '@/lib/logger';\r\nimport { performanceMonitor } from '@/lib/performance-monitor';\r\n\r\n// Configuration constants\r\nconst DEFAULT_TOLERANCE = 0.01; // 1% tolerance\r\nconst CRITICAL_TOLERANCE = 0.005; // 0.5% for critical metrics\r\nconst MAX_ACCEPTABLE_DRIFT = 0.05; // 5% maximum drift\r\n\r\n// Critical metrics that must have tighter tolerance\r\nconst CRITICAL_METRICS = [\r\n  'nav',\r\n  'dpi',\r\n  'tvpi',\r\n  'total_moic',\r\n  'portfolio_irr',\r\n  'fund_irr'\r\n];\r\n\r\ninterface MetricComparison {\r\n  metric: string;\r\n  excelValue: number;\r\n  webAppValue: number;\r\n  absoluteDifference: number;\r\n  percentageDrift: number;\r\n  withinTolerance: boolean;\r\n  tolerance: number;\r\n  isCritical: boolean;\r\n}\r\n\r\ninterface ParityValidationConfig {\r\n  defaultTolerance: number;\r\n  criticalTolerance: number;\r\n  maxDrift: number;\r\n  enableStrictMode: boolean;\r\n  logDetailedResults: boolean;\r\n}\r\n\r\nexport class ExcelParityValidator {\r\n  private config: ParityValidationConfig;\r\n  private validationHistory: ExcelParityOutput[] = [];\r\n\r\n  constructor(config: Partial<ParityValidationConfig> = {}) {\r\n    this.config = {\r\n      defaultTolerance: DEFAULT_TOLERANCE,\r\n      criticalTolerance: CRITICAL_TOLERANCE,\r\n      maxDrift: MAX_ACCEPTABLE_DRIFT,\r\n      enableStrictMode: false,\r\n      logDetailedResults: true,\r\n      ...config,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Main validation function - compares web app results with Excel benchmark\r\n   */\r\n  async validateParity(\r\n    excelData: ExcelParityInput,\r\n    webAppData: ExcelParityInput\r\n  ): Promise<ExcelParityOutput> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      // Validate inputs\r\n      const validatedExcelData = ExcelParityInputSchema.parse(excelData);\r\n      const validatedWebAppData = ExcelParityInputSchema.parse(webAppData);\r\n\r\n      // Perform detailed comparison\r\n      const comparisons = await this.performDetailedComparison(\r\n        validatedExcelData,\r\n        validatedWebAppData\r\n      );\r\n\r\n      // Generate comprehensive results\r\n      const result = this.generateParityResults(comparisons);\r\n\r\n      // Log and track results\r\n      this.validationHistory.push(result);\r\n      \r\n      if (this.config.logDetailedResults) {\r\n        this.logDetailedResults(result);\r\n      }\r\n\r\n      // Performance tracking\r\n      const duration = Date.now() - startTime;\r\n      performanceMonitor.recordMetric(\r\n        'parity_validation_duration',\r\n        duration,\r\n        'ms',\r\n        {\r\n          metricsCompared: comparisons.length,\r\n          passRate: result.overallParity.parityPercentage,\r\n        }\r\n      );\r\n\r\n      logger.info('Excel parity validation completed', {\r\n        duration,\r\n        metricsCompared: comparisons.length,\r\n        passRate: result.overallParity.parityPercentage,\r\n        maxDrift: result.overallParity.maxDrift,\r\n      });\r\n\r\n      // Throw error if parity fails in strict mode\r\n      if (this.config.enableStrictMode && !result.overallParity.passesParityTest) {\r\n        throw new ParityValidationError(\r\n          `Parity validation failed: ${result.overallParity.parityPercentage.toFixed(1)}% pass rate`,\r\n          result.overallParity.maxDrift,\r\n          'overall'\r\n        );\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      const duration = Date.now() - startTime;\r\n      \r\n      logger.error(\r\n        'Excel parity validation failed',\r\n        error instanceof Error ? error : new Error(String(error)),\r\n        { duration, config: this.config }\r\n      );\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform detailed metric-by-metric comparison\r\n   */\r\n  private async performDetailedComparison(\r\n    excelData: ExcelParityInput,\r\n    webAppData: ExcelParityInput\r\n  ): Promise<MetricComparison[]> {\r\n    const comparisons: MetricComparison[] = [];\r\n\r\n    // Compare fund-level metrics\r\n    comparisons.push(...this.compareFundMetrics(excelData.fundMetrics, webAppData.fundMetrics));\r\n\r\n    // Compare company-level metrics\r\n    comparisons.push(...this.compareCompanyMetrics(excelData.companyData, webAppData.companyData));\r\n\r\n    // Compare timeline metrics\r\n    comparisons.push(...this.compareTimelineMetrics(excelData.timeline, webAppData.timeline));\r\n\r\n    return comparisons;\r\n  }\r\n\r\n  /**\r\n   * Compare fund-level metrics (NAV, DPI, TVPI, etc.)\r\n   */\r\n  private compareFundMetrics(\r\n    excelMetrics: ExcelParityInput['fundMetrics'],\r\n    webAppMetrics: ExcelParityInput['fundMetrics']\r\n  ): MetricComparison[] {\r\n    const comparisons: MetricComparison[] = [];\r\n\r\n    // Direct metric comparisons\r\n    const metricPairs = [\r\n      { key: 'totalCommitted', name: 'total_committed' },\r\n      { key: 'totalCalled', name: 'total_called' },\r\n      { key: 'totalDistributed', name: 'total_distributed' },\r\n      { key: 'netAssetValue', name: 'nav' },\r\n      { key: 'managementFees', name: 'management_fees' },\r\n      { key: 'carriedInterest', name: 'carried_interest' },\r\n    ] as const;\r\n\r\n    for (const { key, name } of metricPairs) {\r\n      const comparison = this.compareMetric(\r\n        name,\r\n        excelMetrics[key],\r\n        webAppMetrics[key]\r\n      );\r\n      comparisons.push(comparison);\r\n    }\r\n\r\n    // Calculated metrics\r\n    const excelDPI = excelMetrics.totalDistributed / excelMetrics.totalCalled || 0;\r\n    const webAppDPI = webAppMetrics.totalDistributed / webAppMetrics.totalCalled || 0;\r\n    comparisons.push(this.compareMetric('dpi', excelDPI, webAppDPI));\r\n\r\n    const excelTVPI = (excelMetrics.totalDistributed + excelMetrics.netAssetValue) / excelMetrics.totalCalled || 0;\r\n    const webAppTVPI = (webAppMetrics.totalDistributed + webAppMetrics.netAssetValue) / webAppMetrics.totalCalled || 0;\r\n    comparisons.push(this.compareMetric('tvpi', excelTVPI, webAppTVPI));\r\n\r\n    return comparisons;\r\n  }\r\n\r\n  /**\r\n   * Compare company-level metrics\r\n   */\r\n  private compareCompanyMetrics(\r\n    excelCompanies: ExcelParityInput['companyData'],\r\n    webAppCompanies: ExcelParityInput['companyData']\r\n  ): MetricComparison[] {\r\n    const comparisons: MetricComparison[] = [];\r\n\r\n    // Create lookup map for web app companies\r\n    const webAppLookup = new Map(\r\n      webAppCompanies.map(company => [company.companyName, company])\r\n    );\r\n\r\n    for (const excelCompany of excelCompanies) {\r\n      const webAppCompany = webAppLookup.get(excelCompany.companyName);\r\n      \r\n      if (!webAppCompany) {\r\n        logger.warn(`Company ${excelCompany.companyName} not found in web app data`);\r\n        continue;\r\n      }\r\n\r\n      const companyPrefix = `${excelCompany.companyName}_`;\r\n\r\n      // Compare company metrics\r\n      comparisons.push(\r\n        this.compareMetric(\r\n          `${companyPrefix}invested`,\r\n          excelCompany.invested,\r\n          webAppCompany.invested\r\n        ),\r\n        this.compareMetric(\r\n          `${companyPrefix}current_value`,\r\n          excelCompany.currentValue,\r\n          webAppCompany.currentValue\r\n        ),\r\n        this.compareMetric(\r\n          `${companyPrefix}distributed`,\r\n          excelCompany.distributed,\r\n          webAppCompany.distributed\r\n        ),\r\n        this.compareMetric(\r\n          `${companyPrefix}moic`,\r\n          excelCompany.moic,\r\n          webAppCompany.moic\r\n        ),\r\n        this.compareMetric(\r\n          `${companyPrefix}irr`,\r\n          excelCompany.irr,\r\n          webAppCompany.irr\r\n        )\r\n      );\r\n    }\r\n\r\n    return comparisons;\r\n  }\r\n\r\n  /**\r\n   * Compare timeline metrics (quarterly data)\r\n   */\r\n  private compareTimelineMetrics(\r\n    excelTimeline: ExcelParityInput['timeline'],\r\n    webAppTimeline: ExcelParityInput['timeline']\r\n  ): MetricComparison[] {\r\n    const comparisons: MetricComparison[] = [];\r\n\r\n    // Create lookup map for web app timeline\r\n    const webAppLookup = new Map(\r\n      webAppTimeline.map(quarter => [quarter.quarter, quarter])\r\n    );\r\n\r\n    for (const excelQuarter of excelTimeline) {\r\n      const webAppQuarter = webAppLookup.get(excelQuarter.quarter);\r\n      \r\n      if (!webAppQuarter) {\r\n        logger.warn(`Quarter ${excelQuarter.quarter} not found in web app data`);\r\n        continue;\r\n      }\r\n\r\n      const quarterPrefix = `${excelQuarter.quarter}_`;\r\n\r\n      // Compare quarterly metrics\r\n      comparisons.push(\r\n        this.compareMetric(\r\n          `${quarterPrefix}nav_value`,\r\n          excelQuarter.navValue,\r\n          webAppQuarter.navValue\r\n        ),\r\n        this.compareMetric(\r\n          `${quarterPrefix}distributions`,\r\n          excelQuarter.distributions,\r\n          webAppQuarter.distributions\r\n        ),\r\n        this.compareMetric(\r\n          `${quarterPrefix}calls`,\r\n          excelQuarter.calls,\r\n          webAppQuarter.calls\r\n        ),\r\n        this.compareMetric(\r\n          `${quarterPrefix}dpi`,\r\n          excelQuarter.dpi,\r\n          webAppQuarter.dpi\r\n        ),\r\n        this.compareMetric(\r\n          `${quarterPrefix}tvpi`,\r\n          excelQuarter.tvpi,\r\n          webAppQuarter.tvpi\r\n        ),\r\n        this.compareMetric(\r\n          `${quarterPrefix}irr`,\r\n          excelQuarter.irr,\r\n          webAppQuarter.irr\r\n        )\r\n      );\r\n    }\r\n\r\n    return comparisons;\r\n  }\r\n\r\n  /**\r\n   * Compare individual metric values\r\n   */\r\n  private compareMetric(\r\n    metricName: string,\r\n    excelValue: number,\r\n    webAppValue: number\r\n  ): MetricComparison {\r\n    const isCritical = CRITICAL_METRICS.some(critical => \r\n      metricName.toLowerCase().includes(critical)\r\n    );\r\n    \r\n    const tolerance = isCritical ? this.config.criticalTolerance : this.config.defaultTolerance;\r\n    \r\n    const absoluteDifference = Math.abs(excelValue - webAppValue);\r\n    const percentageDrift = excelValue !== 0 ? absoluteDifference / Math.abs(excelValue) : 0;\r\n    const withinTolerance = percentageDrift <= tolerance;\r\n\r\n    return {\r\n      metric: metricName,\r\n      excelValue,\r\n      webAppValue,\r\n      absoluteDifference,\r\n      percentageDrift,\r\n      withinTolerance,\r\n      tolerance,\r\n      isCritical,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive parity results\r\n   */\r\n  private generateParityResults(comparisons: MetricComparison[]): ExcelParityOutput {\r\n    const totalMetrics = comparisons.length;\r\n    const withinTolerance = comparisons.filter(c => c.withinTolerance).length;\r\n    const parityPercentage = totalMetrics > 0 ? withinTolerance / totalMetrics : 0;\r\n    const maxDrift = Math.max(...comparisons.map(c => c.percentageDrift));\r\n\r\n    // Detailed breakdown for key metrics\r\n    const detailedBreakdown = this.generateDetailedBreakdown(comparisons);\r\n\r\n    return {\r\n      comparisonResults: comparisons.map(c => ({\r\n        metric: c.metric,\r\n        excelValue: c.excelValue,\r\n        webAppValue: c.webAppValue,\r\n        percentageDrift: c.percentageDrift,\r\n        withinTolerance: c.withinTolerance,\r\n        tolerance: c.tolerance,\r\n      })),\r\n      overallParity: {\r\n        totalMetricsCompared: totalMetrics,\r\n        metricsWithinTolerance: withinTolerance,\r\n        parityPercentage,\r\n        maxDrift,\r\n        passesParityTest: parityPercentage >= 0.95 && maxDrift <= this.config.maxDrift,\r\n      },\r\n      detailedBreakdown,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate detailed breakdown for key financial metrics\r\n   */\r\n  private generateDetailedBreakdown(\r\n    comparisons: MetricComparison[]\r\n  ): ExcelParityOutput['detailedBreakdown'] {\r\n    const findComparison = (searchTerm: string) => \r\n      comparisons.find(c => c.metric.toLowerCase().includes(searchTerm.toLowerCase()));\r\n\r\n    const navComparison = findComparison('nav') || this.createEmptyComparison();\r\n    const dpiComparison = findComparison('dpi') || this.createEmptyComparison();\r\n    const tvpiComparison = findComparison('tvpi') || this.createEmptyComparison();\r\n    const irrComparison = findComparison('irr') || this.createEmptyComparison();\r\n    const moicComparison = findComparison('moic') || this.createEmptyComparison();\r\n\r\n    return {\r\n      navComparison: {\r\n        match: navComparison.withinTolerance,\r\n        drift: navComparison.percentageDrift,\r\n      },\r\n      dpiComparison: {\r\n        match: dpiComparison.withinTolerance,\r\n        drift: dpiComparison.percentageDrift,\r\n      },\r\n      tvpiComparison: {\r\n        match: tvpiComparison.withinTolerance,\r\n        drift: tvpiComparison.percentageDrift,\r\n      },\r\n      irrComparison: {\r\n        match: irrComparison.withinTolerance,\r\n        drift: irrComparison.percentageDrift,\r\n      },\r\n      moicComparison: {\r\n        match: moicComparison.withinTolerance,\r\n        drift: moicComparison.percentageDrift,\r\n      },\r\n    };\r\n  }\r\n\r\n  private createEmptyComparison(): MetricComparison {\r\n    return {\r\n      metric: 'not_found',\r\n      excelValue: 0,\r\n      webAppValue: 0,\r\n      absoluteDifference: 0,\r\n      percentageDrift: 0,\r\n      withinTolerance: true,\r\n      tolerance: 0,\r\n      isCritical: false,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Log detailed parity results for debugging\r\n   */\r\n  private logDetailedResults(result: ExcelParityOutput): void {\r\n    logger.info('Excel Parity Validation Results', {\r\n      overallParity: result.overallParity,\r\n      detailedBreakdown: result.detailedBreakdown,\r\n    });\r\n\r\n    // Log failures for investigation\r\n    const failures = result.comparisonResults.filter(r => !r.withinTolerance);\r\n    if (failures.length > 0) {\r\n      logger.warn('Parity validation failures detected', {\r\n        failureCount: failures.length,\r\n        failures: failures.map(f => ({\r\n          metric: f.metric,\r\n          drift: (f.percentageDrift * 100).toFixed(2) + '%',\r\n          excel: f.excelValue,\r\n          webApp: f.webAppValue,\r\n        })),\r\n      });\r\n    }\r\n\r\n    // Log critical metric performance\r\n    const criticalMetrics = result.comparisonResults.filter(r => \r\n      CRITICAL_METRICS.some(critical => r.metric.toLowerCase().includes(critical))\r\n    );\r\n    \r\n    if (criticalMetrics.length > 0) {\r\n      const criticalPassRate = criticalMetrics.filter(m => m.withinTolerance).length / criticalMetrics.length;\r\n      logger.info('Critical metrics performance', {\r\n        criticalPassRate: (criticalPassRate * 100).toFixed(1) + '%',\r\n        criticalMetrics: criticalMetrics.map(m => ({\r\n          metric: m.metric,\r\n          passed: m.withinTolerance,\r\n          drift: (m.percentageDrift * 100).toFixed(2) + '%',\r\n        })),\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get validation history for trend analysis\r\n   */\r\n  getValidationHistory(): ExcelParityOutput[] {\r\n    return [...this.validationHistory];\r\n  }\r\n\r\n  /**\r\n   * Clear validation history\r\n   */\r\n  clearHistory(): void {\r\n    this.validationHistory = [];\r\n  }\r\n\r\n  /**\r\n   * Generate parity report\r\n   */\r\n  generateParityReport(): {\r\n    summary: {\r\n      totalValidations: number;\r\n      averagePassRate: number;\r\n      trendDirection: 'improving' | 'declining' | 'stable';\r\n    };\r\n    recentResults: ExcelParityOutput[];\r\n    recommendations: string[];\r\n  } {\r\n    const history = this.validationHistory;\r\n    const recentResults = history.slice(-5); // Last 5 validations\r\n\r\n    if (history.length === 0) {\r\n      return {\r\n        summary: {\r\n          totalValidations: 0,\r\n          averagePassRate: 0,\r\n          trendDirection: 'stable',\r\n        },\r\n        recentResults: [],\r\n        recommendations: ['No validation history available'],\r\n      };\r\n    }\r\n\r\n    const averagePassRate = history.reduce(\r\n      (sum, result) => sum + result.overallParity.parityPercentage,\r\n      0\r\n    ) / history.length;\r\n\r\n    // Determine trend\r\n    let trendDirection: 'improving' | 'declining' | 'stable' = 'stable';\r\n    if (history.length >= 3) {\r\n      const recent = history.slice(-3).map(r => r.overallParity.parityPercentage);\r\n      const isImproving = recent[2] > recent[1] && recent[1] > recent[0];\r\n      const isDeclining = recent[2] < recent[1] && recent[1] < recent[0];\r\n      \r\n      if (isImproving) trendDirection = 'improving';\r\n      else if (isDeclining) trendDirection = 'declining';\r\n    }\r\n\r\n    // Generate recommendations\r\n    const recommendations = this.generateRecommendations(history);\r\n\r\n    return {\r\n      summary: {\r\n        totalValidations: history.length,\r\n        averagePassRate,\r\n        trendDirection,\r\n      },\r\n      recentResults,\r\n      recommendations,\r\n    };\r\n  }\r\n\r\n  private generateRecommendations(history: ExcelParityOutput[]): string[] {\r\n    const recommendations: string[] = [];\r\n    \r\n    if (history.length === 0) return recommendations;\r\n\r\n    const latestResult = history[history.length - 1];\r\n    \r\n    if (latestResult.overallParity.parityPercentage < 0.9) {\r\n      recommendations.push('Parity rate below 90% - investigate calculation differences');\r\n    }\r\n\r\n    if (latestResult.overallParity.maxDrift > 0.02) {\r\n      recommendations.push('High drift detected - review precision and rounding logic');\r\n    }\r\n\r\n    if (!latestResult.detailedBreakdown.navComparison.match) {\r\n      recommendations.push('NAV calculation mismatch - validate asset valuation logic');\r\n    }\r\n\r\n    if (!latestResult.detailedBreakdown.dpiComparison.match) {\r\n      recommendations.push('DPI calculation mismatch - review distribution calculations');\r\n    }\r\n\r\n    if (!latestResult.detailedBreakdown.irrComparison.match) {\r\n      recommendations.push('IRR calculation mismatch - validate cash flow timing and IRR algorithm');\r\n    }\r\n\r\n    if (recommendations.length === 0) {\r\n      recommendations.push('Parity validation passing - continue monitoring');\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n}\r\n\r\n// Utility functions for common parity testing scenarios\r\nexport async function validateFundParity(\r\n  excelFundData: ExcelParityInput['fundMetrics'],\r\n  webAppFundData: ExcelParityInput['fundMetrics'],\r\n  tolerance = DEFAULT_TOLERANCE\r\n): Promise<boolean> {\r\n  const validator = new ExcelParityValidator({\r\n    defaultTolerance: tolerance,\r\n    enableStrictMode: false,\r\n  });\r\n\r\n  const mockExcelInput: ExcelParityInput = {\r\n    fundMetrics: excelFundData,\r\n    companyData: [],\r\n    timeline: [],\r\n  };\r\n\r\n  const mockWebAppInput: ExcelParityInput = {\r\n    fundMetrics: webAppFundData,\r\n    companyData: [],\r\n    timeline: [],\r\n  };\r\n\r\n  try {\r\n    const result = await validator.validateParity(mockExcelInput, mockWebAppInput);\r\n    return result.overallParity.passesParityTest;\r\n  } catch (error) {\r\n    logger.error(\r\n      'Fund parity validation failed',\r\n      error instanceof Error ? error : new Error(String(error))\r\n    );\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function validateCompanyParity(\r\n  excelCompanies: ExcelParityInput['companyData'],\r\n  webAppCompanies: ExcelParityInput['companyData'],\r\n  tolerance = DEFAULT_TOLERANCE\r\n): Promise<ExcelParityOutput> {\r\n  const validator = new ExcelParityValidator({\r\n    defaultTolerance: tolerance,\r\n    enableStrictMode: false,\r\n  });\r\n\r\n  const mockExcelInput: ExcelParityInput = {\r\n    fundMetrics: {\r\n      totalCommitted: 0,\r\n      totalCalled: 0,\r\n      totalDistributed: 0,\r\n      netAssetValue: 0,\r\n      managementFees: 0,\r\n      carriedInterest: 0,\r\n    },\r\n    companyData: excelCompanies,\r\n    timeline: [],\r\n  };\r\n\r\n  const mockWebAppInput: ExcelParityInput = {\r\n    fundMetrics: {\r\n      totalCommitted: 0,\r\n      totalCalled: 0,\r\n      totalDistributed: 0,\r\n      netAssetValue: 0,\r\n      managementFees: 0,\r\n      carriedInterest: 0,\r\n    },\r\n    companyData: webAppCompanies,\r\n    timeline: [],\r\n  };\r\n\r\n  return await validator.validateParity(mockExcelInput, mockWebAppInput);\r\n}\r\n\r\n// Export singleton instance for common usage\r\nexport const defaultParityValidator = new ExcelParityValidator();","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\feature-flags.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'URLSearchParams' is not defined.","line":80,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":80,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'URLSearchParams' is not defined.","line":81,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":81,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'setInterval' is not defined.","line":238,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":238,"endColumn":14}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Feature flag system with user-level overrides\r\n * Supports URL parameters for testing and gradual rollout\r\n */\r\n\r\nexport type FlagName = \r\n  | 'ts_reserves'\r\n  | 'wasm_reserves'\r\n  | 'shadow_compare'\r\n  | 'reserves_v11'\r\n  | 'remain_pass'\r\n  | 'stage_based_caps'\r\n  | 'export_async'\r\n  | 'metrics_collection';\r\n\r\ninterface FlagConfig {\r\n  defaultValue: boolean;\r\n  rolloutPercent: number;\r\n  description: string;\r\n  allowOverride: boolean;\r\n}\r\n\r\n// Flag configurations\r\nconst FLAGS: Record<FlagName, FlagConfig> = {\r\n  ts_reserves: {\r\n    defaultValue: true,\r\n    rolloutPercent: 100,\r\n    description: 'Use TypeScript reserves calculation engine',\r\n    allowOverride: true\r\n  },\r\n  wasm_reserves: {\r\n    defaultValue: false,\r\n    rolloutPercent: 0,\r\n    description: 'Use WASM reserves calculation engine',\r\n    allowOverride: true\r\n  },\r\n  shadow_compare: {\r\n    defaultValue: false,\r\n    rolloutPercent: 10,\r\n    description: 'Run shadow comparison between engines',\r\n    allowOverride: true\r\n  },\r\n  reserves_v11: {\r\n    defaultValue: true,\r\n    rolloutPercent: 100,\r\n    description: 'Enable reserves v1.1 features',\r\n    allowOverride: true\r\n  },\r\n  remain_pass: {\r\n    defaultValue: true,\r\n    rolloutPercent: 100,\r\n    description: 'Enable remain pass in reserves calculation',\r\n    allowOverride: true\r\n  },\r\n  stage_based_caps: {\r\n    defaultValue: true,\r\n    rolloutPercent: 100,\r\n    description: 'Enable stage-based cap policies',\r\n    allowOverride: true\r\n  },\r\n  export_async: {\r\n    defaultValue: true,\r\n    rolloutPercent: 100,\r\n    description: 'Use async export with dynamic imports',\r\n    allowOverride: true\r\n  },\r\n  metrics_collection: {\r\n    defaultValue: true,\r\n    rolloutPercent: 100,\r\n    description: 'Enable metrics collection',\r\n    allowOverride: true\r\n  }\r\n};\r\n\r\n// Cache for overrides\r\nconst overrideCache = new Map<FlagName, boolean>();\r\n\r\n// Parse URL parameters once\r\nconst urlParams = typeof window !== 'undefined' \r\n  ? new URLSearchParams(window.location.search)\r\n  : new URLSearchParams();\r\n\r\n// Check for engine override\r\nconst engineOverride = urlParams.get('force_reserves_engine');\r\n\r\n/**\r\n * Check if a feature flag is enabled for a user\r\n */\r\nexport function isEnabled(flag: FlagName, userId?: string): boolean {\r\n  // Check cache first\r\n  if (overrideCache.has(flag)) {\r\n    return overrideCache.get(flag)!;\r\n  }\r\n  \r\n  const config = FLAGS[flag];\r\n  if (!config) {\r\n    console.warn(`Unknown feature flag: ${flag}`);\r\n    return false;\r\n  }\r\n  \r\n  // Handle engine-specific overrides\r\n  if (engineOverride) {\r\n    if (flag === 'ts_reserves' && engineOverride === 'ts') {\r\n      overrideCache.set(flag, true);\r\n      return true;\r\n    }\r\n    if (flag === 'wasm_reserves' && engineOverride === 'wasm') {\r\n      overrideCache.set(flag, true);\r\n      return true;\r\n    }\r\n    if (flag === 'ts_reserves' && engineOverride === 'wasm') {\r\n      overrideCache.set(flag, false);\r\n      return false;\r\n    }\r\n    if (flag === 'wasm_reserves' && engineOverride === 'ts') {\r\n      overrideCache.set(flag, false);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  // Check URL parameter override\r\n  if (config.allowOverride) {\r\n    const paramValue = urlParams.get(`ff_${flag}`);\r\n    if (paramValue === '1' || paramValue === 'true') {\r\n      overrideCache.set(flag, true);\r\n      return true;\r\n    }\r\n    if (paramValue === '0' || paramValue === 'false') {\r\n      overrideCache.set(flag, false);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  // Check localStorage override (for persistent testing)\r\n  if (typeof localStorage !== 'undefined' && config.allowOverride) {\r\n    const stored = localStorage.getItem(`ff_${flag}`);\r\n    if (stored === 'true') {\r\n      overrideCache.set(flag, true);\r\n      return true;\r\n    }\r\n    if (stored === 'false') {\r\n      overrideCache.set(flag, false);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  // Check rollout percentage with user ID\r\n  if (userId && config.rolloutPercent < 100) {\r\n    const hash = hashUserId(userId);\r\n    const bucket = hash % 100;\r\n    const enabled = bucket < config.rolloutPercent;\r\n    overrideCache.set(flag, enabled);\r\n    return enabled;\r\n  }\r\n  \r\n  // Return default value\r\n  return config.defaultValue;\r\n}\r\n\r\n/**\r\n * Set a feature flag override (for testing)\r\n */\r\nexport function setFlag(flag: FlagName, value: boolean): void {\r\n  const config = FLAGS[flag];\r\n  if (!config) {\r\n    console.warn(`Unknown feature flag: ${flag}`);\r\n    return;\r\n  }\r\n  \r\n  if (!config.allowOverride) {\r\n    console.warn(`Flag ${flag} does not allow overrides`);\r\n    return;\r\n  }\r\n  \r\n  overrideCache.set(flag, value);\r\n  \r\n  if (typeof localStorage !== 'undefined') {\r\n    localStorage.setItem(`ff_${flag}`, String(value));\r\n  }\r\n}\r\n\r\n/**\r\n * Clear all flag overrides\r\n */\r\nexport function clearOverrides(): void {\r\n  overrideCache.clear();\r\n  \r\n  if (typeof localStorage !== 'undefined') {\r\n    Object.keys(FLAGS).forEach(flag => {\r\n      localStorage.removeItem(`ff_${flag}`);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Get all flag states for debugging\r\n */\r\nexport function getAllFlags(userId?: string): Record<FlagName, boolean> {\r\n  const result: Partial<Record<FlagName, boolean>> = {};\r\n  \r\n  Object.keys(FLAGS).forEach(flag => {\r\n    result[flag as FlagName] = isEnabled(flag as FlagName, userId);\r\n  });\r\n  \r\n  return result as Record<FlagName, boolean>;\r\n}\r\n\r\n/**\r\n * Simple hash function for user ID bucketing\r\n */\r\nfunction hashUserId(userId: string): number {\r\n  let hash = 0;\r\n  for (let i = 0; i < userId.length; i++) {\r\n    const char = userId.charCodeAt(i);\r\n    hash = ((hash << 5) - hash) + char;\r\n    hash = hash & hash; // Convert to 32-bit integer\r\n  }\r\n  return Math.abs(hash);\r\n}\r\n\r\n// Export kill switch function for emergency rollback\r\nexport function killSwitch(flag: FlagName): void {\r\n  setFlag(flag, false);\r\n  console.warn(`Kill switch activated for flag: ${flag}`);\r\n  \r\n  // Send beacon to server if configured\r\n  if (typeof navigator !== 'undefined' && navigator.sendBeacon) {\r\n    const killSwitchUrl = document.querySelector('meta[name=\"kill-switch-url\"]')?.getAttribute('content');\r\n    if (killSwitchUrl) {\r\n      navigator.sendBeacon(killSwitchUrl, JSON.stringify({ flag, action: 'kill' }));\r\n    }\r\n  }\r\n}\r\n\r\n// Auto-check for kill switch commands\r\nif (typeof window !== 'undefined') {\r\n  // Check every 30 seconds for kill switch updates\r\n  setInterval(() => {\r\n    const killSwitchMeta = document.querySelector('meta[name=\"kill-switch-flags\"]');\r\n    if (killSwitchMeta) {\r\n      const flags = killSwitchMeta.getAttribute('content')?.split(',') || [];\r\n      flags.forEach(flag => {\r\n        if (FLAGS[flag as FlagName]) {\r\n          killSwitch(flag as FlagName);\r\n        }\r\n      });\r\n    }\r\n  }, 30000);\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\fund-calc.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\hash.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'TextEncoder' is not defined.","line":30,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":30,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n// client/src/lib/hash.ts\n/**\n * Simple FNV-1a hash for stable key generation\n * Fast and good enough for client-side deduplication\n */\nexport async function stableHash(data: unknown): Promise<string> {\n  const str = JSON.stringify(data, Object.keys(data as any).sort());\n  \n  // FNV-1a hash implementation\n  let hash = 2166136261;\n  for (let i = 0; i < str.length; i++) {\n    hash ^= str.charCodeAt(i);\n    hash = Math.imul(hash, 16777619);\n  }\n  \n  // Convert to hex string\n  return (hash >>> 0).toString(16);\n}\n\n/**\n * Alternative: Use Web Crypto API for stronger hash (if needed)\n */\nexport async function sha256Hash(data: unknown): Promise<string> {\n  const str = JSON.stringify(data, Object.keys(data as any).sort());\n  const encoder = new TextEncoder();\n  const dataBuffer = encoder.encode(str);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', dataBuffer);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\horizon.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\index.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":11,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":24,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":33}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nexport * from '../utils/async-iteration';\n\n// Simple API client\nexport const api = {\n  async get<T>(url: string): Promise<T> {\n    const response = await fetch(url, {\n      method: 'GET',\n      credentials: 'include',\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    return response.json() as unknown as T;\n  },\n\n  async post<T>(url: string, data?: any): Promise<T> {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: data ? JSON.stringify(data) : undefined,\n      credentials: 'include',\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    return response.json() as unknown as T;\n  }\n};\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\inflight.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'AbortController' is not defined.","line":9,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'AbortSignal' is not defined.","line":37,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":40},{"ruleId":"no-undef","severity":2,"message":"'AbortSignal' is not defined.","line":37,"column":45,"nodeType":"Identifier","messageId":"undef","endLine":37,"endColumn":56},{"ruleId":"no-undef","severity":2,"message":"'AbortController' is not defined.","line":39,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'AbortSignal' is not defined.","line":67,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":67,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'ctx' is defined but never used.","line":74,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":74,"endColumn":40},{"ruleId":"no-undef","severity":2,"message":"'AbortSignal' is not defined.","line":74,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":74,"endColumn":38},{"ruleId":"no-undef","severity":2,"message":"'AbortController' is not defined.","line":92,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":92,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":97,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":97,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'clearTimeout' is not defined.","line":103,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":103,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":110,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":110,"endColumn":31},{"ruleId":"no-undef","severity":2,"message":"'queueMicrotask' is not defined.","line":111,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":111,"endColumn":26}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n// Deterministic in-flight registry with dedupe, capacity, timeout, and cleanup\ntype Entry<T> = {\n  promise: Promise<T>;\n  controllers: Set<AbortController>;\n  createdAt: number;\n};\n\nconst inflight = new Map<string, Entry<any>>();\nlet totalInflight = 0;\nconst waiters: Array<() => void> = [];\n\nconst MAX_INFLIGHT =\n  Number(import.meta.env['VITE_MAX_INFLIGHT'] ?? '6'); // default capacity\nconst DEFAULT_TIMEOUT_MS =\n  Number(import.meta.env['VITE_INFLIGHT_TIMEOUT_MS'] ?? '15000');\n\nfunction ns() {\n  return (import.meta.env.MODE ?? 'development') as string;\n}\nfunction nsKey(hash: string) {\n  return `${ns()}|${hash}`;\n}\n\nfunction wakeOne() {\n  const w = waiters.shift();\n  if (w) w();\n}\nfunction waitForSlot(): Promise<void> {\n  return new Promise((resolve) => waiters.push(resolve));\n}\n\nfunction anySignal(signals: AbortSignal[]): AbortSignal {\n  if (signals.length === 1) return signals[0];\n  const controller = new AbortController();\n  const onAbort = () => controller.abort();\n  signals.forEach((s) => s.addEventListener('abort', onAbort, { once: true }));\n  if (signals.some((s) => s.aborted)) controller.abort();\n  return controller.signal;\n}\n\nexport function isInFlight(hash: string): boolean {\n  return inflight.has(nsKey(hash));\n}\n\nexport function cancelInFlight(hash: string): boolean {\n  const key = nsKey(hash);\n  const e = inflight.get(key);\n  if (!e) return false;\n  e.controllers.forEach((c) => c.abort());\n  inflight.delete(key);\n  totalInflight = Math.max(0, totalInflight - 1);\n  wakeOne();\n  return true;\n}\n\nexport function inFlightSize() {\n  return totalInflight;\n}\n\ntype StartOpts = {\n  dedupe?: boolean;\n  signal?: AbortSignal;\n  timeoutMs?: number;\n  holdForMs?: number;\n};\n\nexport async function startInFlight<T>(\n  hash: string,\n  worker: (ctx: { signal: AbortSignal }) => Promise<T>,\n  opts: StartOpts = {}\n): Promise<T> {\n  const key = nsKey(hash);\n  const dedupe = opts.dedupe !== false;\n\n  if (dedupe) {\n    const existing = inflight.get(key);\n    if (existing) return existing.promise;\n  }\n\n  // Capacity gating\n  if (totalInflight >= MAX_INFLIGHT) {\n    await waitForSlot();\n  }\n  totalInflight++;\n\n  // Timeout + abort wiring\n  const local = new AbortController();\n  const combined = opts.signal\n    ? anySignal([local.signal, opts.signal])\n    : local.signal;\n  const timeoutMs = opts.timeoutMs ?? DEFAULT_TIMEOUT_MS;\n  const timeout = setTimeout(() => local.abort(), timeoutMs);\n\n  const p = (async () => {\n    try {\n      return await worker({ signal: combined });\n    } finally {\n      clearTimeout(timeout);\n      const hold = Math.max(0, opts.holdForMs ?? 0);\n      const cleanup = () => {\n        inflight.delete(key);\n        totalInflight = Math.max(0, totalInflight - 1);\n        wakeOne();\n      };\n      if (hold > 0) setTimeout(cleanup, hold);\n      else queueMicrotask(cleanup);\n    }\n  })();\n\n  inflight.set(key, {\n    promise: p,\n    controllers: new Set([local]),\n    createdAt: Date.now(),\n  });\n\n  return p;\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\performance-monitor.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'PerformanceObserver' is not defined.","line":391,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":391,"endColumn":47},{"ruleId":"no-undef","severity":2,"message":"'clearInterval' is not defined.","line":427,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":427,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Real-time performance monitoring and alerting system\n * Provides comprehensive metrics collection, threshold monitoring, and automated alerts\n */\n\nimport { metrics } from '@/metrics/reserves-metrics';\n\nexport interface PerformanceThresholds {\n  calculationTime: {\n    warning: number;    // ms\n    critical: number;   // ms\n  };\n  memoryUsage: {\n    warning: number;    // MB\n    critical: number;   // MB\n  };\n  cacheHitRate: {\n    warning: number;    // percentage (0-100)\n    critical: number;   // percentage (0-100)\n  };\n  errorRate: {\n    warning: number;    // percentage (0-100)\n    critical: number;   // percentage (0-100)\n  };\n}\n\nexport interface PerformanceMetric {\n  name: string;\n  value: number;\n  unit: string;\n  timestamp: Date;\n  threshold?: 'normal' | 'warning' | 'critical';\n  context?: Record<string, any>;\n}\n\nexport interface PerformanceAlert {\n  id: string;\n  level: 'warning' | 'critical';\n  metric: string;\n  value: number;\n  threshold: number;\n  message: string;\n  timestamp: Date;\n  resolved?: Date;\n  context?: Record<string, any>;\n}\n\nexport class PerformanceMonitor {\n  private metrics: PerformanceMetric[] = [];\n  private alerts: PerformanceAlert[] = [];\n  private activeAlerts = new Map<string, PerformanceAlert>();\n  \n  private readonly thresholds: PerformanceThresholds = {\n    calculationTime: {\n      warning: 500,   // 500ms\n      critical: 2000  // 2s\n    },\n    memoryUsage: {\n      warning: 100,   // 100MB\n      critical: 250   // 250MB\n    },\n    cacheHitRate: {\n      warning: 70,    // Below 70%\n      critical: 50    // Below 50%\n    },\n    errorRate: {\n      warning: 1,     // Above 1%\n      critical: 5     // Above 5%\n    }\n  };\n  \n  private readonly MAX_METRICS = 1000;\n  private readonly METRIC_RETENTION = 60 * 60 * 1000; // 1 hour\n  private cleanupTimer: number | null = null;\n  \n  constructor() {\n    this.startCleanupTimer();\n    this.initializePerformanceObserver();\n  }\n  \n  /**\n   * Record a performance measurement with automatic threshold checking\n   */\n  recordMetric(name: string, value: number, unit: string, context?: Record<string, any>): void {\n    const metric: PerformanceMetric = {\n      name,\n      value,\n      unit,\n      timestamp: new Date(),\n      context\n    };\n    \n    // Determine threshold level\n    metric.threshold = this.evaluateThreshold(name, value);\n    \n    // Store metric\n    this.metrics.push(metric);\n    \n    // Trim metrics if needed\n    if (this.metrics.length > this.MAX_METRICS) {\n      this.metrics = this.metrics.slice(-this.MAX_METRICS);\n    }\n    \n    // Check for alerts\n    this.checkThresholds(metric);\n    \n    // Report to external metrics system (only 3 params supported)\n    metrics.recordPerformanceMetric(name, value, unit);\n  }\n  \n  /**\n   * Record calculation performance with comprehensive context\n   */\n  recordCalculationPerformance(\n    duration: number,\n    companyCount: number,\n    success: boolean,\n    cacheHit: boolean = false\n  ): void {\n    this.recordMetric('calculation_duration', duration, 'ms', {\n      companyCount,\n      success,\n      cacheHit,\n      throughput: companyCount / (duration / 1000) // companies per second\n    });\n    \n    // Record memory usage if available\n    if (typeof performance !== 'undefined' && 'memory' in performance) {\n      const memory = (performance as any).memory;\n      this.recordMetric('memory_used', memory.usedJSHeapSize / 1024 / 1024, 'MB', {\n        total: memory.totalJSHeapSize / 1024 / 1024,\n        limit: memory.jsHeapSizeLimit / 1024 / 1024\n      });\n    }\n  }\n  \n  /**\n   * Record cache performance metrics\n   */\n  recordCachePerformance(hits: number, misses: number, totalSize: number): void {\n    const total = hits + misses;\n    const hitRate = total > 0 ? (hits / total) * 100 : 100;\n    \n    this.recordMetric('cache_hit_rate', hitRate, '%', {\n      hits,\n      misses,\n      total,\n      cacheSize: totalSize\n    });\n    \n    this.recordMetric('cache_size', totalSize, 'entries');\n  }\n  \n  /**\n   * Record error rate over time window\n   */\n  recordErrorRate(errors: number, total: number, windowMs: number): void {\n    const errorRate = total > 0 ? (errors / total) * 100 : 0;\n    \n    this.recordMetric('error_rate', errorRate, '%', {\n      errors,\n      total,\n      windowMs,\n      errorCount: errors\n    });\n  }\n  \n  /**\n   * Get current performance summary\n   */\n  getPerformanceSummary(windowMs: number = 5 * 60 * 1000): {\n    averages: Record<string, number>;\n    peaks: Record<string, number>;\n    alerts: PerformanceAlert[];\n    health: 'good' | 'warning' | 'critical';\n  } {\n    const cutoff = Date.now() - windowMs;\n    const recentMetrics = this.metrics.filter(m => m.timestamp.getTime() > cutoff);\n    \n    // Calculate averages and peaks\n    const averages: Record<string, number> = {};\n    const peaks: Record<string, number> = {};\n    \n    const metricGroups = recentMetrics.reduce((acc, metric) => {\n      if (!acc[metric.name]) acc[metric.name] = [];\n      acc[metric.name].push(metric.value);\n      return acc;\n    }, {} as Record<string, number[]>);\n    \n    for (const [name, values] of Object.entries(metricGroups)) {\n      averages[name] = values.reduce((sum, val) => sum + val, 0) / values.length;\n      peaks[name] = Math.max(...values);\n    }\n    \n    // Get recent alerts\n    const recentAlerts = this.alerts.filter(a => a.timestamp.getTime() > cutoff);\n    \n    // Determine overall health\n    const criticalAlerts = recentAlerts.filter(a => a.level === 'critical' && !a.resolved);\n    const warningAlerts = recentAlerts.filter(a => a.level === 'warning' && !a.resolved);\n    \n    let health: 'good' | 'warning' | 'critical' = 'good';\n    if (criticalAlerts.length > 0) health = 'critical';\n    else if (warningAlerts.length > 0) health = 'warning';\n    \n    return {\n      averages,\n      peaks,\n      alerts: recentAlerts,\n      health\n    };\n  }\n  \n  /**\n   * Get detailed performance report\n   */\n  generatePerformanceReport(): {\n    summary: any;\n    trends: Record<string, number[]>;\n    recommendations: string[];\n    alerts: PerformanceAlert[];\n  } {\n    const summary = this.getPerformanceSummary();\n    \n    // Calculate trends (last hour vs previous hour)\n    const hourMs = 60 * 60 * 1000;\n    const now = Date.now();\n    \n    const trends: Record<string, number[]> = {};\n    const recommendations: string[] = [];\n    \n    // Generate hourly buckets for trends\n    for (let i = 23; i >= 0; i--) {\n      const bucketStart = now - (i + 1) * hourMs;\n      const bucketEnd = now - i * hourMs;\n      \n      const bucketMetrics = this.metrics.filter(m => \n        m.timestamp.getTime() >= bucketStart && m.timestamp.getTime() < bucketEnd\n      );\n      \n      const bucketAverages = this.calculateAverages(bucketMetrics);\n      \n      for (const [metric, value] of Object.entries(bucketAverages)) {\n        if (!trends[metric]) trends[metric] = [];\n        trends[metric].push(value);\n      }\n    }\n    \n    // Generate recommendations\n    if (summary.averages['calculation_duration'] > this.thresholds.calculationTime.warning) {\n      recommendations.push('Consider optimizing calculation algorithms or implementing better caching');\n    }\n    \n    if (summary.averages['cache_hit_rate'] < this.thresholds.cacheHitRate.warning) {\n      recommendations.push('Review cache strategy - hit rate is below optimal levels');\n    }\n    \n    if (summary.averages['error_rate'] > this.thresholds.errorRate.warning) {\n      recommendations.push('Investigate error patterns and improve error handling');\n    }\n    \n    if (summary.averages['memory_used'] > this.thresholds.memoryUsage.warning) {\n      recommendations.push('Monitor memory usage - consider implementing memory optimization');\n    }\n    \n    return {\n      summary,\n      trends,\n      recommendations,\n      alerts: this.alerts.slice(-50) // Last 50 alerts\n    };\n  }\n  \n  private evaluateThreshold(metricName: string, value: number): 'normal' | 'warning' | 'critical' {\n    const thresholdKey = this.getThresholdKey(metricName);\n    if (!thresholdKey) return 'normal';\n    \n    const threshold = this.thresholds[thresholdKey];\n    if (!threshold) return 'normal';\n    \n    // For cache hit rate, lower is worse\n    if (metricName.includes('cache_hit_rate')) {\n      if (value < threshold.critical) return 'critical';\n      if (value < threshold.warning) return 'warning';\n      return 'normal';\n    }\n    \n    // For most other metrics, higher is worse\n    if (value > threshold.critical) return 'critical';\n    if (value > threshold.warning) return 'warning';\n    return 'normal';\n  }\n  \n  private getThresholdKey(metricName: string): keyof PerformanceThresholds | null {\n    if (metricName.includes('duration') || metricName.includes('time')) return 'calculationTime';\n    if (metricName.includes('memory')) return 'memoryUsage';\n    if (metricName.includes('cache')) return 'cacheHitRate';\n    if (metricName.includes('error')) return 'errorRate';\n    return null;\n  }\n  \n  private checkThresholds(metric: PerformanceMetric): void {\n    if (metric.threshold === 'warning' || metric.threshold === 'critical') {\n      const alertId = `${metric.name}_${metric.threshold}`;\n      \n      // Check if we already have an active alert for this\n      if (!this.activeAlerts.has(alertId)) {\n        const alert: PerformanceAlert = {\n          id: alertId,\n          level: metric.threshold,\n          metric: metric.name,\n          value: metric.value,\n          threshold: this.getThresholdValue(metric.name, metric.threshold),\n          message: this.generateAlertMessage(metric),\n          timestamp: new Date(),\n          context: metric.context\n        };\n        \n        this.alerts.push(alert);\n        this.activeAlerts.set(alertId, alert);\n        \n        // Send to external alerting system\n        this.sendAlert(alert);\n      }\n    } else {\n      // Check if we can resolve any active alerts\n      const alertsToResolve = Array.from(this.activeAlerts.keys()).filter(id => \n        id.startsWith(metric.name)\n      );\n      \n      alertsToResolve.forEach(alertId => {\n        const alert = this.activeAlerts.get(alertId);\n        if (alert) {\n          alert.resolved = new Date();\n          this.activeAlerts.delete(alertId);\n        }\n      });\n    }\n  }\n  \n  private getThresholdValue(metricName: string, level: 'warning' | 'critical'): number {\n    const thresholdKey = this.getThresholdKey(metricName);\n    if (!thresholdKey) return 0;\n    return this.thresholds[thresholdKey][level];\n  }\n  \n  private generateAlertMessage(metric: PerformanceMetric): string {\n    const threshold = this.getThresholdValue(metric.name, metric.threshold as 'warning' | 'critical');\n    \n    return `${metric.name} ${metric.threshold}: ${metric.value}${metric.unit} (threshold: ${threshold}${metric.unit})`;\n  }\n  \n  private sendAlert(alert: PerformanceAlert): void {\n    // Send to console for development\n    console.warn(`Performance Alert [${alert.level.toUpperCase()}]:`, alert.message);\n    \n    // Send to external alerting system (webhook, monitoring service, etc.)\n    if (typeof navigator !== 'undefined' && navigator.sendBeacon) {\n      const alertData = {\n        type: 'performance_alert',\n        ...alert,\n        timestamp: alert.timestamp.toISOString()\n      };\n      \n      const alertUrl = document.querySelector('meta[name=\"alert-endpoint\"]')?.getAttribute('content');\n      if (alertUrl) {\n        navigator.sendBeacon(alertUrl, JSON.stringify(alertData));\n      }\n    }\n  }\n  \n  private calculateAverages(metrics: PerformanceMetric[]): Record<string, number> {\n    const groups = metrics.reduce((acc, metric) => {\n      if (!acc[metric.name]) acc[metric.name] = [];\n      acc[metric.name].push(metric.value);\n      return acc;\n    }, {} as Record<string, number[]>);\n    \n    const averages: Record<string, number> = {};\n    for (const [name, values] of Object.entries(groups)) {\n      if (values.length > 0) {\n        averages[name] = values.reduce((sum, val) => sum + val, 0) / values.length;\n      }\n    }\n    \n    return averages;\n  }\n  \n  private initializePerformanceObserver(): void {\n    if (typeof PerformanceObserver !== 'undefined') {\n      const observer = new PerformanceObserver((list) => {\n        list.getEntries().forEach((entry) => {\n          if (entry.entryType === 'measure') {\n            this.recordMetric(entry.name, entry.duration, 'ms', {\n              entryType: entry.entryType,\n              startTime: entry.startTime\n            });\n          }\n        });\n      });\n      \n      observer.observe({ entryTypes: ['measure'] });\n    }\n  }\n  \n  private startCleanupTimer(): void {\n    this.cleanupTimer = window.setInterval(() => {\n      this.cleanup();\n    }, 5 * 60 * 1000); // Cleanup every 5 minutes\n  }\n  \n  private cleanup(): void {\n    const cutoff = Date.now() - this.METRIC_RETENTION;\n    \n    // Remove old metrics\n    this.metrics = this.metrics.filter(m => m.timestamp.getTime() > cutoff);\n    \n    // Remove old resolved alerts\n    this.alerts = this.alerts.filter(a => \n      a.timestamp.getTime() > cutoff || (!a.resolved || a.resolved.getTime() > cutoff)\n    );\n  }\n  \n  // Cleanup on destruction\n  destroy(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n    }\n  }\n}\n\n// Export singleton\nexport const performanceMonitor = new PerformanceMonitor();","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\predictive-cache.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'result' is defined but never used.","line":30,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":31,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'setInterval' is not defined.","line":54,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":54,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'input' is defined but never used.","line":59,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used.","line":59,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":59,"endColumn":62},{"ruleId":"no-unused-vars","severity":2,"message":"'startTime' is assigned a value but never used.","line":63,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'clearTimeout' is not defined.","line":136,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":136,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'isHit' is defined but never used.","line":253,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":253,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'input' is defined but never used.","line":284,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":284,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'config' is defined but never used.","line":285,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":285,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":356,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":356,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'prefetchKey' is assigned a value but never used.","line":359,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":359,"endColumn":29}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Intelligent Predictive Cache for Reserves Calculations\n * Uses access patterns to prefetch and optimize cache performance\n */\n\nimport { metrics } from '@/metrics/reserves-metrics';\nimport type { ReservesInput, ReservesConfig, ReservesResult } from '@shared/types/reserves-v11';\n\ninterface CacheEntry {\n  key: string;\n  value: ReservesResult;\n  timestamp: number;\n  accessCount: number;\n  lastAccess: number;\n  ttl: number;\n}\n\ninterface AccessPattern {\n  key: string;\n  frequency: number;\n  relatedKeys: Set<string>;\n  avgComputeTime: number;\n  lastPattern: string[];\n}\n\ninterface BatchRequest {\n  key: string;\n  input: ReservesInput;\n  config: ReservesConfig;\n  resolver: (result: ReservesResult) => void;\n  rejecter: (error: Error) => void;\n}\n\nexport class IntelligentReservesCache {\n  private cache = new Map<string, CacheEntry>();\n  private accessPatterns = new Map<string, AccessPattern>();\n  private batchQueue: BatchRequest[] = [];\n  private batchTimer: number | null = null;\n  \n  // Configuration\n  private readonly MAX_CACHE_SIZE = 1000;\n  private readonly MIN_TTL = 60 * 1000; // 1 minute\n  private readonly MAX_TTL = 10 * 60 * 1000; // 10 minutes\n  private readonly BATCH_DELAY = 10; // 10ms\n  private readonly BATCH_SIZE = 20;\n  private readonly PREFETCH_THRESHOLD = 3; // Prefetch after 3 accesses\n  \n  // Pattern detection\n  private accessSequence: string[] = [];\n  private readonly SEQUENCE_LENGTH = 10;\n  \n  constructor() {\n    // Periodic cleanup\n    setInterval(() => this.cleanup(), 60 * 1000);\n  }\n  \n  async get(\n    key: string,\n    calculator: (input: ReservesInput, config: ReservesConfig) => Promise<ReservesResult>,\n    input: ReservesInput,\n    config: ReservesConfig\n  ): Promise<ReservesResult> {\n    const startTime = performance.now();\n    \n    try {\n      // Check cache\n      const cached = this.getFromCache(key);\n      if (cached) {\n        this.recordAccess(key, true);\n        metrics.recordCacheHit(key);\n        \n        // Trigger predictive prefetch\n        this.triggerPrefetch(key, calculator, input, config);\n        \n        return cached;\n      }\n      \n      // Add to batch queue\n      const result = await this.addToBatch(key, input, config, calculator);\n      \n      this.recordAccess(key, false);\n      metrics.recordCacheMiss(key);\n      \n      return result;\n      \n    } catch (error) {\n      metrics.recordError(`Cache error: ${error}`);\n      throw error;\n    }\n  }\n  \n  private getFromCache(key: string): ReservesResult | null {\n    const entry = this.cache.get(key);\n    \n    if (!entry) return null;\n    \n    // Check TTL\n    if (Date.now() - entry.timestamp > entry.ttl) {\n      this.cache.delete(key);\n      return null;\n    }\n    \n    // Update access info\n    entry.accessCount++;\n    entry.lastAccess = Date.now();\n    \n    return entry.value;\n  }\n  \n  private async addToBatch(\n    key: string,\n    input: ReservesInput,\n    config: ReservesConfig,\n    calculator: Function\n  ): Promise<ReservesResult> {\n    return new Promise((resolve, reject) => {\n      // Add to batch queue\n      this.batchQueue.push({\n        key,\n        input,\n        config,\n        resolver: resolve,\n        rejecter: reject\n      });\n      \n      // Schedule batch processing\n      if (!this.batchTimer) {\n        this.batchTimer = window.setTimeout(() => {\n          this.processBatch(calculator);\n        }, this.BATCH_DELAY);\n      }\n      \n      // Process immediately if batch is full\n      if (this.batchQueue.length >= this.BATCH_SIZE) {\n        if (this.batchTimer) {\n          clearTimeout(this.batchTimer);\n          this.batchTimer = null;\n        }\n        this.processBatch(calculator);\n      }\n    });\n  }\n  \n  private async processBatch(calculator: Function): Promise<void> {\n    const batch = this.batchQueue.splice(0, this.BATCH_SIZE);\n    this.batchTimer = null;\n    \n    if (batch.length === 0) return;\n    \n    const startTime = performance.now();\n    \n    try {\n      // Process batch in parallel\n      const promises = batch.map(async (request) => {\n        try {\n          const result = await calculator(request.input, request.config);\n          \n          // Cache result\n          this.set(request.key, result, request.input, request.config);\n          \n          request.resolver(result);\n        } catch (error) {\n          request.rejecter(error as Error);\n        }\n      });\n      \n      await Promise.all(promises);\n      \n      metrics.recordBatchProcessing(batch.length, performance.now() - startTime);\n      \n    } catch (error) {\n      console.error('Batch processing error:', error);\n      \n      // Reject all pending requests\n      batch.forEach(request => {\n        request.rejecter(new Error('Batch processing failed'));\n      });\n    }\n    \n    // Process remaining items if any\n    if (this.batchQueue.length > 0) {\n      this.batchTimer = window.setTimeout(() => {\n        this.processBatch(calculator);\n      }, this.BATCH_DELAY);\n    }\n  }\n  \n  private set(\n    key: string,\n    value: ReservesResult,\n    input: ReservesInput,\n    config: ReservesConfig\n  ): void {\n    // Calculate adaptive TTL\n    const ttl = this.calculateAdaptiveTTL(key);\n    \n    // Store in cache with metadata\n    const cacheEntry: CacheEntry = {\n      key,\n      value,\n      timestamp: Date.now(),\n      accessCount: 0,\n      lastAccess: Date.now(),\n      ttl\n    };\n    this.cache.set(key, cacheEntry);\n    \n    // Manage cache size\n    if (this.cache.size > this.MAX_CACHE_SIZE) {\n      this.evictLRU();\n    }\n    \n    // Update access patterns\n    this.updateAccessPattern(key, input, config);\n  }\n  \n  private calculateAdaptiveTTL(key: string): number {\n    const pattern = this.accessPatterns.get(key);\n    \n    if (!pattern) {\n      return this.MIN_TTL;\n    }\n    \n    // High frequency items get longer TTL\n    if (pattern.frequency > 10) {\n      return this.MAX_TTL;\n    }\n    \n    if (pattern.frequency > 5) {\n      return this.MAX_TTL / 2;\n    }\n    \n    return this.MIN_TTL;\n  }\n  \n  private evictLRU(): void {\n    let lruKey = '';\n    let lruTime = Date.now();\n    \n    // Find least recently used\n    for (const [key, entry] of this.cache) {\n      if (entry.lastAccess < lruTime) {\n        lruTime = entry.lastAccess;\n        lruKey = key;\n      }\n    }\n    \n    if (lruKey) {\n      this.cache.delete(lruKey);\n    }\n  }\n  \n  private recordAccess(key: string, isHit: boolean): void {\n    // Update access sequence\n    this.accessSequence.push(key);\n    if (this.accessSequence.length > this.SEQUENCE_LENGTH) {\n      this.accessSequence.shift();\n    }\n    \n    // Update pattern\n    const pattern = this.accessPatterns.get(key) || {\n      key,\n      frequency: 0,\n      relatedKeys: new Set(),\n      avgComputeTime: 0,\n      lastPattern: []\n    };\n    \n    pattern.frequency++;\n    pattern.lastPattern = [...this.accessSequence];\n    \n    // Find related keys (accessed together)\n    this.accessSequence.forEach(k => {\n      if (k !== key) {\n        pattern.relatedKeys.add(k);\n      }\n    });\n    \n    this.accessPatterns.set(key, pattern);\n  }\n  \n  private updateAccessPattern(\n    key: string,\n    input: ReservesInput,\n    config: ReservesConfig\n  ): void {\n    const pattern = this.accessPatterns.get(key) || {\n      key,\n      frequency: 1,\n      relatedKeys: new Set(),\n      avgComputeTime: 0,\n      lastPattern: []\n    };\n    \n    // Identify related calculations (similar inputs)\n    for (const [otherKey, otherPattern] of this.accessPatterns) {\n      if (otherKey !== key && this.areSimilar(key, otherKey)) {\n        pattern.relatedKeys.add(otherKey);\n        otherPattern.relatedKeys.add(key);\n      }\n    }\n    \n    this.accessPatterns.set(key, pattern);\n  }\n  \n  private areSimilar(key1: string, key2: string): boolean {\n    // Simple similarity check based on key structure\n    // In production, this would compare actual input parameters\n    const parts1 = key1.split(':');\n    const parts2 = key2.split(':');\n    \n    if (parts1.length !== parts2.length) return false;\n    \n    // Check if most parts match (e.g., same fund, different config)\n    let matches = 0;\n    for (let i = 0; i < parts1.length; i++) {\n      if (parts1[i] === parts2[i]) matches++;\n    }\n    \n    return matches >= parts1.length - 1;\n  }\n  \n  private async triggerPrefetch(\n    key: string,\n    calculator: Function,\n    baseInput: ReservesInput,\n    baseConfig: ReservesConfig\n  ): Promise<void> {\n    const pattern = this.accessPatterns.get(key);\n    \n    if (!pattern || pattern.frequency < this.PREFETCH_THRESHOLD) {\n      return;\n    }\n    \n    // Identify keys to prefetch\n    const toPrefetch: string[] = [];\n    \n    // 1. Related keys that aren't cached\n    for (const relatedKey of pattern.relatedKeys) {\n      if (!this.cache.has(relatedKey) && toPrefetch.length < 5) {\n        toPrefetch.push(relatedKey);\n      }\n    }\n    \n    // 2. Predicted next keys based on sequence\n    const predicted = this.predictNextKeys(key);\n    for (const predictedKey of predicted) {\n      if (!this.cache.has(predictedKey) && toPrefetch.length < 5) {\n        toPrefetch.push(predictedKey);\n      }\n    }\n    \n    if (toPrefetch.length === 0) return;\n    \n    // Prefetch in background\n    setTimeout(async () => {\n      console.log(`Prefetching ${toPrefetch.length} related calculations`);\n      \n      for (const prefetchKey of toPrefetch) {\n        try {\n          // Generate variations of input for prefetch\n          const variations = this.generateInputVariations(baseInput, baseConfig);\n          \n          for (const [varInput, varConfig] of variations) {\n            const result = await calculator(varInput, varConfig);\n            const varKey = this.generateKey(varInput, varConfig);\n            this.set(varKey, result, varInput, varConfig);\n          }\n        } catch (error) {\n          console.debug('Prefetch error:', error);\n        }\n      }\n    }, 0);\n  }\n  \n  private predictNextKeys(currentKey: string): string[] {\n    const predictions: string[] = [];\n    \n    // Look for patterns in access sequence\n    for (let i = 0; i < this.accessSequence.length - 1; i++) {\n      if (this.accessSequence[i] === currentKey) {\n        const nextKey = this.accessSequence[i + 1];\n        if (nextKey && !predictions.includes(nextKey)) {\n          predictions.push(nextKey);\n        }\n      }\n    }\n    \n    return predictions.slice(0, 3); // Top 3 predictions\n  }\n  \n  private generateInputVariations(\n    input: ReservesInput,\n    config: ReservesConfig\n  ): Array<[ReservesInput, ReservesConfig]> {\n    const variations: Array<[ReservesInput, ReservesConfig]> = [];\n    \n    // Common variations to prefetch\n    const reserveVariations = [\n      config.reserve_bps - 100, // 1% less\n      config.reserve_bps + 100  // 1% more\n    ];\n    \n    for (const reserve_bps of reserveVariations) {\n      if (reserve_bps >= 0 && reserve_bps <= 10000) {\n        variations.push([\n          input,\n          { ...config, reserve_bps }\n        ]);\n      }\n    }\n    \n    // Toggle remain pass\n    variations.push([\n      input,\n      { ...config, remain_passes: config.remain_passes === 0 ? 1 : 0 }\n    ]);\n    \n    return variations.slice(0, 3); // Limit prefetch\n  }\n  \n  private generateKey(input: ReservesInput, config: ReservesConfig): string {\n    // Generate stable cache key\n    const parts = [\n      'reserves',\n      input.companies.length,\n      input.fund_size_cents,\n      config.reserve_bps,\n      config.remain_passes,\n      config.cap_policy.kind\n    ];\n    \n    return parts.join(':');\n  }\n  \n  private cleanup(): void {\n    const now = Date.now();\n    const toDelete: string[] = [];\n    \n    // Remove expired entries\n    for (const [key, entry] of this.cache) {\n      if (now - entry.timestamp > entry.ttl) {\n        toDelete.push(key);\n      }\n    }\n    \n    toDelete.forEach(key => this.cache.delete(key));\n    \n    // Clean up old patterns\n    for (const [key, pattern] of this.accessPatterns) {\n      if (pattern.frequency === 0 && !this.cache.has(key)) {\n        this.accessPatterns.delete(key);\n      }\n    }\n  }\n  \n  // Analytics methods\n  getCacheStats() {\n    const stats = {\n      size: this.cache.size,\n      patterns: this.accessPatterns.size,\n      avgFrequency: 0,\n      avgTTL: 0,\n      hitRate: 0\n    };\n    \n    if (this.accessPatterns.size > 0) {\n      let totalFreq = 0;\n      for (const pattern of this.accessPatterns.values()) {\n        totalFreq += pattern.frequency;\n      }\n      stats.avgFrequency = totalFreq / this.accessPatterns.size;\n    }\n    \n    if (this.cache.size > 0) {\n      let totalTTL = 0;\n      for (const entry of this.cache.values()) {\n        totalTTL += entry.ttl;\n      }\n      stats.avgTTL = totalTTL / this.cache.size;\n    }\n    \n    return stats;\n  }\n  \n  clearCache(): void {\n    this.cache.clear();\n    this.accessPatterns.clear();\n    this.accessSequence = [];\n  }\n}\n\n// Export singleton\nexport const predictiveCache = new IntelligentReservesCache();","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\quarter-time.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\queryClient.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Response' is not defined.","line":8,"column":37,"nodeType":"Identifier","messageId":"undef","endLine":8,"endColumn":45},{"ruleId":"no-undef","severity":2,"message":"'Response' is not defined.","line":19,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":20,"column":21,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":36,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":36,"endColumn":28}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport function getQueryFn<T>(options: {\n  on401: UnauthorizedBehavior;\n}): QueryFunction<T | null> {\n  return async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (options.on401 === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json() as unknown as T;\n  };\n}\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\reserves-v11.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'CapPolicy' is defined but never used.","line":17,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Reserves v1.1 Calculation Engine\r\n * - Configurable reserve percentage\r\n * - Optional \"remain\" pass for additional allocation\r\n * - Integer cents for precision\r\n * - Exit MOIC-based ranking\r\n * - Comprehensive audit trail\r\n */\r\n\r\nimport type {\r\n  Company,\r\n  ReservesConfig,\r\n  ReservesInput,\r\n  ReservesOutput,\r\n  ReservesResult,\r\n  AllocationDecision,\r\n  CapPolicy\r\n} from '@shared/types/reserves-v11';\r\n\r\n// Helper function to calculate cap for a company\r\nfunction calculateCap(company: Company, config: ReservesConfig): number {\r\n  const { cap_policy } = config;\r\n  \r\n  switch (cap_policy.kind) {\r\n    case 'fixed_percent': {\r\n      const percent = cap_policy.default_percent || 0.5; // Default 50%\r\n      return Math.floor((company.invested_cents || 0) * percent);\r\n    }\r\n    \r\n    case 'stage_based': {\r\n      const stage = company.stage || 'unknown';\r\n      const caps = cap_policy.stage_caps || {};\r\n      const percent = caps[stage] || cap_policy.default_percent || 0.5;\r\n      return Math.floor((company.invested_cents || 0) * percent);\r\n    }\r\n    \r\n    case 'custom': {\r\n      if (cap_policy.custom_fn) {\r\n        return cap_policy.custom_fn(company);\r\n      }\r\n      return Math.floor((company.invested_cents || 0) * 0.5);\r\n    }\r\n    \r\n    default:\r\n      return Math.floor((company.invested_cents || 0) * 0.5);\r\n  }\r\n}\r\n\r\n// Main calculation function with safety and invariants\r\nexport function calculateReservesSafe(\r\n  input: ReservesInput,\r\n  config: ReservesConfig\r\n): ReservesResult {\r\n  const startTime = performance.now();\r\n  const warnings: string[] = [];\r\n  \r\n  try {\r\n    // Input validation\r\n    if (!input.companies || input.companies.length === 0) {\r\n      return {\r\n        ok: true,\r\n        data: {\r\n          allocations: [],\r\n          remaining_cents: 0,\r\n          metadata: {\r\n            total_available_cents: 0,\r\n            total_allocated_cents: 0,\r\n            companies_funded: 0,\r\n            max_iterations: 0,\r\n            conservation_check: true,\r\n            exit_moic_ranking: []\r\n          }\r\n        },\r\n        warnings: ['No companies provided'],\r\n        metrics: {\r\n          duration_ms: performance.now() - startTime,\r\n          company_count: 0,\r\n          policy_type: config.cap_policy.kind\r\n        }\r\n      };\r\n    }\r\n    \r\n    // Calculate total available reserves\r\n    const totalInitial = input.companies.reduce((sum, c) => sum + (c.invested_cents || 0), 0);\r\n    const available = Math.floor((totalInitial * config.reserve_bps) / 10_000);\r\n    let remaining = available;\r\n    \r\n    // Rank companies by Exit MOIC (descending)\r\n    const ranked = [...input.companies].sort((a, b) => {\r\n      const moicA = a.exit_moic_bps || 0;\r\n      const moicB = b.exit_moic_bps || 0;\r\n      if (moicB !== moicA) return moicB - moicA;\r\n      // Secondary sort by invested amount for stability\r\n      return (b.invested_cents || 0) - (a.invested_cents || 0);\r\n    });\r\n    \r\n    const exitMoicRanking = ranked.map(c => c.id);\r\n    const allocations: AllocationDecision[] = [];\r\n    const companyAllocations = new Map<string, number>();\r\n    \r\n    // Single allocation pass\r\n    const performAllocationPass = (iteration: number) => {\r\n      for (const company of ranked) {\r\n        if (remaining <= 0) break;\r\n        \r\n        const cap = calculateCap(company, config);\r\n        const already = companyAllocations.get(company.id) || 0;\r\n        const room = Math.max(0, cap - already);\r\n        \r\n        if (room <= 0) continue;\r\n        \r\n        const allot = Math.min(remaining, room);\r\n        \r\n        if (allot > 0) {\r\n          const newTotal = already + allot;\r\n          companyAllocations.set(company.id, newTotal);\r\n          \r\n          // Find and update existing allocation or create new\r\n          const existingIndex = allocations.findIndex(a => a.company_id === company.id);\r\n          \r\n          if (existingIndex >= 0) {\r\n            allocations[existingIndex] = {\r\n              company_id: company.id,\r\n              planned_cents: newTotal,\r\n              reason: `Ranked #${exitMoicRanking.indexOf(company.id) + 1} by Exit MOIC (${(company.exit_moic_bps || 0) / 100}%), iteration ${iteration}`,\r\n              cap_cents: cap,\r\n              iteration\r\n            };\r\n          } else {\r\n            allocations.push({\r\n              company_id: company.id,\r\n              planned_cents: allot,\r\n              reason: `Ranked #${exitMoicRanking.indexOf(company.id) + 1} by Exit MOIC (${(company.exit_moic_bps || 0) / 100}%), iteration ${iteration}`,\r\n              cap_cents: cap,\r\n              iteration\r\n            });\r\n          }\r\n          \r\n          remaining -= allot;\r\n        }\r\n      }\r\n    };\r\n    \r\n    // First pass\r\n    performAllocationPass(1);\r\n    \r\n    // Optional \"remain\" pass\r\n    if (config.remain_passes === 1 && remaining > 0) {\r\n      performAllocationPass(2);\r\n    }\r\n    \r\n    // Calculate totals for invariant checking\r\n    const totalAllocated = allocations.reduce((sum, a) => sum + a.planned_cents, 0);\r\n    \r\n    // Conservation invariant check\r\n    const conservationCheck = Math.abs((totalAllocated + remaining) - available) <= 1; // Allow 1 cent rounding\r\n    \r\n    if (!conservationCheck) {\r\n      warnings.push(`Conservation check failed: allocated=${totalAllocated}, remaining=${remaining}, available=${available}`);\r\n      // Normalize to maintain invariant\r\n      remaining = Math.max(0, available - totalAllocated);\r\n    }\r\n    \r\n    const output: ReservesOutput = {\r\n      allocations,\r\n      remaining_cents: remaining,\r\n      metadata: {\r\n        total_available_cents: available,\r\n        total_allocated_cents: totalAllocated,\r\n        companies_funded: allocations.length,\r\n        max_iterations: config.remain_passes === 1 ? 2 : 1,\r\n        conservation_check: conservationCheck,\r\n        exit_moic_ranking: exitMoicRanking\r\n      }\r\n    };\r\n    \r\n    return {\r\n      ok: true,\r\n      data: output,\r\n      warnings: warnings.length > 0 ? warnings : undefined,\r\n      metrics: {\r\n        duration_ms: performance.now() - startTime,\r\n        company_count: input.companies.length,\r\n        policy_type: config.cap_policy.kind\r\n      }\r\n    };\r\n    \r\n  } catch (error) {\r\n    return {\r\n      ok: false,\r\n      error: error instanceof Error ? error.message : 'Unknown error',\r\n      metrics: {\r\n        duration_ms: performance.now() - startTime,\r\n        company_count: input.companies.length,\r\n        policy_type: config.cap_policy.kind\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n// Export a simpler interface for common use cases\r\nexport function calculateReserves(\r\n  companies: Company[],\r\n  reservePercent: number,\r\n  enableRemainPass: boolean = false\r\n): ReservesResult {\r\n  const config: ReservesConfig = {\r\n    reserve_bps: Math.round(reservePercent * 10000),\r\n    remain_passes: enableRemainPass ? 1 : 0,\r\n    cap_policy: {\r\n      kind: 'fixed_percent',\r\n      default_percent: 0.5\r\n    },\r\n    audit_level: 'basic'\r\n  };\r\n  \r\n  const input: ReservesInput = {\r\n    companies,\r\n    fund_size_cents: companies.reduce((sum, c) => sum + (c.invested_cents || 0), 0),\r\n    quarter_index: new Date().getFullYear() * 4 + Math.floor(new Date().getMonth() / 3)\r\n  };\r\n  \r\n  return calculateReservesSafe(input, config);\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\resilient-api-client.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'AbortController' is not defined.","line":147,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":147,"endColumn":43},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":148,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":148,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":151,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":151,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'clearTimeout' is not defined.","line":170,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":170,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'AbortController' is not defined.","line":178,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":178,"endColumn":43},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":179,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":179,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":182,"column":30,"nodeType":"Identifier","messageId":"undef","endLine":182,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'clearTimeout' is not defined.","line":199,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":199,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":250,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":250,"endColumn":45}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Resilient API Client with Exponential Backoff and Circuit Breaker\r\n * Provides reliable communication with the backend API\r\n */\r\n\r\ninterface ApiClientConfig {\r\n  baseUrl?: string;\r\n  timeoutMs?: number;\r\n  maxRetries?: number;\r\n  baseDelayMs?: number;\r\n  maxDelayMs?: number;\r\n  circuitBreakerThreshold?: number;\r\n  circuitBreakerResetMs?: number;\r\n}\r\n\r\ninterface CircuitBreakerState {\r\n  failures: number;\r\n  lastFailureTime: number;\r\n  state: 'CLOSED' | 'OPEN' | 'HALF_OPEN';\r\n}\r\n\r\nfunction isRetryableError(error: any): boolean {\r\n  // Network errors\r\n  if (error.name === 'AbortError' || error.name === 'TypeError') return true;\r\n  \r\n  // HTTP status codes that should be retried\r\n  const status = error.status;\r\n  return status >= 500 || status === 429 || status === 408 || status === 0;\r\n}\r\n\r\nfunction calculateBackoffDelay(attempt: number, baseDelay: number, maxDelay: number): number {\r\n  const exponentialDelay = baseDelay * Math.pow(2, attempt);\r\n  const jitter = Math.random() * 0.1 * exponentialDelay; // 10% jitter\r\n  return Math.min(exponentialDelay + jitter, maxDelay);\r\n}\r\n\r\nexport class ResilientApiClient {\r\n  private config: Required<ApiClientConfig>;\r\n  private circuitBreaker: CircuitBreakerState = {\r\n    failures: 0,\r\n    lastFailureTime: 0,\r\n    state: 'CLOSED',\r\n  };\r\n\r\n  constructor(config: ApiClientConfig = {}) {\r\n    this.config = {\r\n      baseUrl: config.baseUrl || import.meta.env.VITE_API_BASE_URL || '',\r\n      timeoutMs: config.timeoutMs || 15000,\r\n      maxRetries: config.maxRetries || 3,\r\n      baseDelayMs: config.baseDelayMs || 1000,\r\n      maxDelayMs: config.maxDelayMs || 8000,\r\n      circuitBreakerThreshold: config.circuitBreakerThreshold || 5,\r\n      circuitBreakerResetMs: config.circuitBreakerResetMs || 60000, // 1 minute\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Make a POST request with retry logic and circuit breaker\r\n   */\r\n  async post<T>(path: string, body: unknown): Promise<T> {\r\n    // Check circuit breaker\r\n    if (this.isCircuitOpen()) {\r\n      throw new Error('Circuit breaker is OPEN - service unavailable');\r\n    }\r\n\r\n    let lastError: Error;\r\n    \r\n    for (let attempt = 0; attempt < this.config.maxRetries; attempt++) {\r\n      try {\r\n        const response = await this.makeRequest<T>(path, body);\r\n        this.onSuccess();\r\n        return response;\r\n      } catch (error) {\r\n        lastError = error as Error;\r\n        this.onFailure();\r\n        \r\n        // Don't retry if circuit is now open or error is not retryable\r\n        if (this.isCircuitOpen() || !isRetryableError(error)) {\r\n          throw lastError;\r\n        }\r\n        \r\n        // Don't retry on last attempt\r\n        if (attempt === this.config.maxRetries - 1) {\r\n          throw lastError;\r\n        }\r\n        \r\n        // Calculate delay and wait before retry\r\n        const delay = calculateBackoffDelay(\r\n          attempt,\r\n          this.config.baseDelayMs,\r\n          this.config.maxDelayMs\r\n        );\r\n        \r\n        console.log(`Retrying request (attempt ${attempt + 1}/${this.config.maxRetries}) after ${delay}ms`);\r\n        await this.sleep(delay);\r\n      }\r\n    }\r\n    \r\n    throw lastError!;\r\n  }\r\n\r\n  /**\r\n   * Make a GET request with retry logic\r\n   */\r\n  async get<T>(path: string): Promise<T> {\r\n    // Check circuit breaker\r\n    if (this.isCircuitOpen()) {\r\n      throw new Error('Circuit breaker is OPEN - service unavailable');\r\n    }\r\n\r\n    let lastError: Error;\r\n    \r\n    for (let attempt = 0; attempt < this.config.maxRetries; attempt++) {\r\n      try {\r\n        const response = await this.makeGetRequest<T>(path);\r\n        this.onSuccess();\r\n        return response;\r\n      } catch (error) {\r\n        lastError = error as Error;\r\n        this.onFailure();\r\n        \r\n        if (this.isCircuitOpen() || !isRetryableError(error)) {\r\n          throw lastError;\r\n        }\r\n        \r\n        if (attempt === this.config.maxRetries - 1) {\r\n          throw lastError;\r\n        }\r\n        \r\n        const delay = calculateBackoffDelay(\r\n          attempt,\r\n          this.config.baseDelayMs,\r\n          this.config.maxDelayMs\r\n        );\r\n        \r\n        await this.sleep(delay);\r\n      }\r\n    }\r\n    \r\n    throw lastError!;\r\n  }\r\n\r\n  /**\r\n   * Make actual HTTP request\r\n   */\r\n  private async makeRequest<T>(path: string, body: unknown): Promise<T> {\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), this.config.timeoutMs);\r\n    \r\n    try {\r\n      const response = await fetch(`${this.config.baseUrl}${path}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-Request-ID': crypto.randomUUID(),\r\n        },\r\n        body: JSON.stringify(body),\r\n        signal: controller.signal,\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text().catch(() => response.statusText);\r\n        const error = new Error(errorText) as any;\r\n        error.status = response.status;\r\n        throw error;\r\n      }\r\n      \r\n      return await response.json();\r\n    } finally {\r\n      clearTimeout(timeoutId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make GET request\r\n   */\r\n  private async makeGetRequest<T>(path: string): Promise<T> {\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), this.config.timeoutMs);\r\n    \r\n    try {\r\n      const response = await fetch(`${this.config.baseUrl}${path}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'X-Request-ID': crypto.randomUUID(),\r\n        },\r\n        signal: controller.signal,\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text().catch(() => response.statusText);\r\n        const error = new Error(errorText) as any;\r\n        error.status = response.status;\r\n        throw error;\r\n      }\r\n      \r\n      return await response.json();\r\n    } finally {\r\n      clearTimeout(timeoutId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Circuit breaker: check if circuit is open\r\n   */\r\n  private isCircuitOpen(): boolean {\r\n    const now = Date.now();\r\n    \r\n    // Check if we should transition from OPEN to HALF_OPEN\r\n    if (this.circuitBreaker.state === 'OPEN') {\r\n      if (now - this.circuitBreaker.lastFailureTime > this.config.circuitBreakerResetMs) {\r\n        this.circuitBreaker.state = 'HALF_OPEN';\r\n        console.log('Circuit breaker transitioned to HALF_OPEN');\r\n      }\r\n    }\r\n    \r\n    return this.circuitBreaker.state === 'OPEN';\r\n  }\r\n\r\n  /**\r\n   * Circuit breaker: record success\r\n   */\r\n  private onSuccess(): void {\r\n    if (this.circuitBreaker.state === 'HALF_OPEN') {\r\n      this.circuitBreaker.state = 'CLOSED';\r\n      this.circuitBreaker.failures = 0;\r\n      console.log('Circuit breaker transitioned to CLOSED');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Circuit breaker: record failure\r\n   */\r\n  private onFailure(): void {\r\n    this.circuitBreaker.failures++;\r\n    this.circuitBreaker.lastFailureTime = Date.now();\r\n    \r\n    if (this.circuitBreaker.failures >= this.config.circuitBreakerThreshold) {\r\n      if (this.circuitBreaker.state !== 'OPEN') {\r\n        this.circuitBreaker.state = 'OPEN';\r\n        console.error(`Circuit breaker OPENED after ${this.circuitBreaker.failures} failures`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sleep utility\r\n   */\r\n  private sleep(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n  /**\r\n   * Reset circuit breaker (for testing or manual intervention)\r\n   */\r\n  resetCircuitBreaker(): void {\r\n    this.circuitBreaker = {\r\n      failures: 0,\r\n      lastFailureTime: 0,\r\n      state: 'CLOSED',\r\n    };\r\n    console.log('Circuit breaker reset to CLOSED');\r\n  }\r\n}\r\n\r\n// Singleton instance with default configuration\r\nexport const apiClient = new ResilientApiClient();\r\n\r\n// Typed API methods for reserves\r\nexport const reservesApi = {\r\n  /**\r\n   * Calculate reserve allocations\r\n   */\r\n  calculate: async (data: {\r\n    companies: any[];\r\n    availableReserves: number;\r\n    policies: any[];\r\n    constraints?: any;\r\n  }) => {\r\n    return apiClient.post<any>('/v1/reserves/calculate', data);\r\n  },\r\n\r\n  /**\r\n   * Validate parity with Excel\r\n   */\r\n  validateParity: async (dataset?: any) => {\r\n    return apiClient.post<any>('/v1/reserves/validate-parity', { dataset });\r\n  },\r\n\r\n  /**\r\n   * Get API health status\r\n   */\r\n  health: async () => {\r\n    return apiClient.get<any>('/v1/reserves/health');\r\n  },\r\n\r\n  /**\r\n   * Get API configuration\r\n   */\r\n  config: async () => {\r\n    return apiClient.get<any>('/v1/reserves/config');\r\n  },\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\rollout-orchestrator.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isEnabled' is defined but never used.","line":6,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":216,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":216,"endColumn":33},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":320,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":320,"endColumn":16},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":420,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":420,"endColumn":45}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Automated Rollout Orchestrator\n * Handles progressive deployment with automatic gate progression\n */\n\nimport { setFlag, isEnabled } from '@/lib/feature-flags';\nimport { metrics } from '@/metrics/reserves-metrics';\n\ninterface RolloutStage {\n  name: string;\n  percent: number;\n  duration: number; // milliseconds\n  criteria: {\n    maxErrorRate: number;\n    maxP95: number;\n    minConservationRate: number;\n    maxDivergenceRate?: number;\n  };\n  userGroups?: string[]; // Optional specific user targeting\n}\n\ninterface RolloutMetrics {\n  errorRate: number;\n  p95Latency: number;\n  p99Latency: number;\n  conservationRate: number;\n  divergenceRate: number;\n  sampleSize: number;\n  timestamp: Date;\n}\n\nexport class AutomatedRolloutOrchestrator {\n  private readonly stages: RolloutStage[] = [\n    {\n      name: 'Internal Testing',\n      percent: 0.1,\n      duration: 4 * 60 * 60 * 1000, // 4 hours\n      criteria: {\n        maxErrorRate: 0,\n        maxP95: 50,\n        minConservationRate: 1.0,\n        maxDivergenceRate: 0\n      },\n      userGroups: ['internal-team']\n    },\n    {\n      name: 'Canary',\n      percent: 1,\n      duration: 24 * 60 * 60 * 1000, // 24 hours\n      criteria: {\n        maxErrorRate: 0.001,\n        maxP95: 100,\n        minConservationRate: 0.999,\n        maxDivergenceRate: 0.01\n      }\n    },\n    {\n      name: 'Early Adopters',\n      percent: 10,\n      duration: 24 * 60 * 60 * 1000, // 24 hours\n      criteria: {\n        maxErrorRate: 0.01,\n        maxP95: 150,\n        minConservationRate: 0.99,\n        maxDivergenceRate: 0.05\n      }\n    },\n    {\n      name: 'Broad Rollout',\n      percent: 50,\n      duration: 12 * 60 * 60 * 1000, // 12 hours\n      criteria: {\n        maxErrorRate: 0.01,\n        maxP95: 200,\n        minConservationRate: 0.99,\n        maxDivergenceRate: 0.05\n      }\n    },\n    {\n      name: 'Full Deployment',\n      percent: 100,\n      duration: 0, // Immediate\n      criteria: {\n        maxErrorRate: 0.01,\n        maxP95: 300,\n        minConservationRate: 0.99,\n        maxDivergenceRate: 0.05\n      }\n    }\n  ];\n  \n  private currentStage = -1;\n  private rolloutStartTime?: Date;\n  private stageStartTime?: Date;\n  private abortSignal = false;\n  private metrics: RolloutMetrics[] = [];\n  \n  // Configuration\n  private readonly METRIC_POLL_INTERVAL = 60 * 1000; // 1 minute\n  private readonly STABILITY_THRESHOLD = 0.95; // 95% stable metrics required\n  \n  async orchestrate(flagName: string = 'reserves_v11'): Promise<void> {\n    console.log('≡ƒÜÇ Starting automated rollout orchestration');\n    this.rolloutStartTime = new Date();\n    \n    try {\n      for (let i = 0; i < this.stages.length; i++) {\n        if (this.abortSignal) {\n          console.log('Γ¢ö Rollout aborted by signal');\n          break;\n        }\n        \n        const stage = this.stages[i];\n        this.currentStage = i;\n        this.stageStartTime = new Date();\n        \n        console.log(`\\n≡ƒôè Stage ${i + 1}/${this.stages.length}: ${stage.name}`);\n        console.log(`   Target: ${stage.percent}% | Duration: ${stage.duration / 1000}s`);\n        \n        // Enable for percentage\n        await this.enableStage(flagName, stage);\n        \n        // Skip monitoring for immediate stages\n        if (stage.duration === 0) {\n          console.log('   Γ£à Immediate stage - no monitoring required');\n          continue;\n        }\n        \n        // Monitor for duration\n        const success = await this.monitorStage(stage);\n        \n        if (success) {\n          console.log(`   Γ£à Stage ${stage.name} completed successfully`);\n          await this.recordStageSuccess(stage);\n        } else {\n          console.log(`   Γ¥î Stage ${stage.name} failed criteria`);\n          await this.handleStageFailure(stage, i);\n          break;\n        }\n      }\n      \n      // Final report\n      await this.generateFinalReport();\n      \n    } catch (error) {\n      console.error('Orchestration error:', error);\n      await this.emergencyRollback();\n      throw error;\n    }\n  }\n  \n  private async enableStage(flagName: string, stage: RolloutStage): Promise<void> {\n    // Set feature flag percentage\n    setFlag(flagName as any, true);\n    \n    // Configure rollout\n    const config = {\n      percent: stage.percent,\n      userGroups: stage.userGroups,\n      shadowMode: stage.percent < 10 // Keep shadow mode for early stages\n    };\n    \n    // Apply configuration\n    await this.applyRolloutConfig(flagName, config);\n    \n    // Log activation\n    metrics.recordRolloutStage(stage.name, stage.percent);\n  }\n  \n  private async monitorStage(stage: RolloutStage): Promise<boolean> {\n    const endTime = Date.now() + stage.duration;\n    const metricsBuffer: RolloutMetrics[] = [];\n    \n    while (Date.now() < endTime) {\n      if (this.abortSignal) return false;\n      \n      // Collect metrics\n      const currentMetrics = await this.collectMetrics();\n      metricsBuffer.push(currentMetrics);\n      this.metrics.push(currentMetrics);\n      \n      // Check criteria continuously\n      const meetsGateCriteria = this.evaluateCriteria(currentMetrics, stage.criteria);\n      \n      if (!meetsGateCriteria) {\n        console.log(`   ΓÜá∩╕Å Criteria violation detected at ${new Date().toISOString()}`);\n        console.log(`      Error Rate: ${currentMetrics.errorRate} (max: ${stage.criteria.maxErrorRate})`);\n        console.log(`      P95 Latency: ${currentMetrics.p95Latency}ms (max: ${stage.criteria.maxP95}ms)`);\n        \n        // Check if it's a transient issue\n        const isTransient = await this.checkTransientIssue(metricsBuffer);\n        \n        if (!isTransient) {\n          return false; // Fail the stage\n        }\n      }\n      \n      // Progress indicator\n      const progress = ((Date.now() - (this.stageStartTime?.getTime() || 0)) / stage.duration) * 100;\n      if (progress % 25 < 1) {\n        console.log(`   ≡ƒôê Progress: ${Math.floor(progress)}%`);\n      }\n      \n      // Wait before next poll\n      await this.sleep(this.METRIC_POLL_INTERVAL);\n    }\n    \n    // Final stability check\n    return this.evaluateStageStability(metricsBuffer, stage.criteria);\n  }\n  \n  private async collectMetrics(): Promise<RolloutMetrics> {\n    // In production, this would query your metrics backend\n    // For now, return simulated metrics\n    \n    const response = await fetch('/api/metrics/reserves/current');\n    const data = await response.json();\n    \n    return {\n      errorRate: data.errorRate || 0,\n      p95Latency: data.p95Latency || 0,\n      p99Latency: data.p99Latency || 0,\n      conservationRate: data.conservationRate || 1,\n      divergenceRate: data.divergenceRate || 0,\n      sampleSize: data.sampleSize || 0,\n      timestamp: new Date()\n    };\n  }\n  \n  private evaluateCriteria(metrics: RolloutMetrics, criteria: any): boolean {\n    if (metrics.errorRate > criteria.maxErrorRate) return false;\n    if (metrics.p95Latency > criteria.maxP95) return false;\n    if (metrics.conservationRate < criteria.minConservationRate) return false;\n    if (criteria.maxDivergenceRate && metrics.divergenceRate > criteria.maxDivergenceRate) return false;\n    \n    return true;\n  }\n  \n  private async checkTransientIssue(buffer: RolloutMetrics[]): Promise<boolean> {\n    // Look at last 5 metrics to determine if issue is transient\n    const recent = buffer.slice(-5);\n    if (recent.length < 3) return true; // Not enough data, assume transient\n    \n    // Count violations\n    const violations = recent.filter(m => \n      m.errorRate > 0.01 || m.p95Latency > 500\n    ).length;\n    \n    // If most recent metrics are good, it was transient\n    return violations <= 1;\n  }\n  \n  private evaluateStageStability(buffer: RolloutMetrics[], criteria: any): boolean {\n    if (buffer.length === 0) return false;\n    \n    // Calculate percentage of metrics that meet criteria\n    const meetsCriteria = buffer.filter(m => \n      this.evaluateCriteria(m, criteria)\n    ).length;\n    \n    const stabilityRate = meetsCriteria / buffer.length;\n    \n    return stabilityRate >= this.STABILITY_THRESHOLD;\n  }\n  \n  private async handleStageFailure(stage: RolloutStage, stageIndex: number): Promise<void> {\n    console.log(`\\n≡ƒöä Initiating rollback for stage: ${stage.name}`);\n    \n    // Determine rollback target\n    const rollbackTarget = stageIndex > 0 \n      ? this.stages[stageIndex - 1].percent / 2  // Roll back to half of previous stage\n      : 0; // Complete rollback\n    \n    // Intelligent rollback based on severity\n    const lastMetrics = this.metrics[this.metrics.length - 1];\n    \n    if (lastMetrics.errorRate > stage.criteria.maxErrorRate * 10) {\n      // Critical failure - immediate full rollback\n      console.log('   ≡ƒÜ¿ Critical failure detected - emergency rollback');\n      await this.emergencyRollback();\n    } else {\n      // Staged rollback\n      console.log(`   ≡ƒôë Rolling back to ${rollbackTarget}%`);\n      await this.stagedRollback(rollbackTarget);\n    }\n    \n    // Generate failure report\n    await this.generateFailureReport(stage, lastMetrics);\n  }\n  \n  private async emergencyRollback(): Promise<void> {\n    // Kill switch\n    setFlag('reserves_v11' as any, false);\n    setFlag('shadow_compare' as any, false);\n    \n    // Alert\n    await this.sendAlert('EMERGENCY_ROLLBACK', 'Critical failure in reserves v1.1 rollout');\n    \n    // Record\n    metrics.recordRollback('emergency', String(this.currentStage), '0');\n  }\n  \n  private async stagedRollback(targetPercent: number): Promise<void> {\n    // Gradual rollback\n    setFlag('reserves_v11' as any, true);\n    await this.applyRolloutConfig('reserves_v11', { percent: targetPercent });\n    \n    // Record\n    metrics.recordRollback('staged', String(this.currentStage), String(targetPercent));\n  }\n  \n  private async applyRolloutConfig(flagName: string, config: any): Promise<void> {\n    // In production, this would update your feature flag service\n    const payload = {\n      flag: flagName,\n      ...config,\n      timestamp: new Date().toISOString()\n    };\n    \n    await fetch('/api/features/rollout', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload)\n    });\n  }\n  \n  private async recordStageSuccess(stage: RolloutStage): Promise<void> {\n    const duration = Date.now() - (this.stageStartTime?.getTime() || 0);\n    \n    const record = {\n      stage: stage.name,\n      percent: stage.percent,\n      duration,\n      metrics: this.metrics.slice(-10), // Last 10 metrics\n      timestamp: new Date().toISOString()\n    };\n    \n    // Store for analysis\n    localStorage.setItem(`rollout_stage_${stage.name}`, JSON.stringify(record));\n  }\n  \n  private async generateFinalReport(): Promise<void> {\n    const totalDuration = Date.now() - (this.rolloutStartTime?.getTime() || 0);\n    \n    const report = {\n      success: this.currentStage === this.stages.length - 1,\n      stages: this.stages.map((s, i) => ({\n        ...s,\n        completed: i <= this.currentStage\n      })),\n      totalDuration,\n      metrics: {\n        avgErrorRate: this.calculateAverage(this.metrics, 'errorRate'),\n        avgP95: this.calculateAverage(this.metrics, 'p95Latency'),\n        minConservationRate: Math.min(...this.metrics.map(m => m.conservationRate))\n      },\n      timestamp: new Date().toISOString()\n    };\n    \n    console.log('\\n≡ƒôè Rollout Complete!');\n    console.log('Final Report:', report);\n    \n    // Store report\n    localStorage.setItem('rollout_final_report', JSON.stringify(report));\n  }\n  \n  private async generateFailureReport(stage: RolloutStage, metrics: RolloutMetrics): Promise<void> {\n    const report = {\n      stage: stage.name,\n      failureMetrics: metrics,\n      criteria: stage.criteria,\n      violations: this.identifyViolations(metrics, stage.criteria),\n      timestamp: new Date().toISOString()\n    };\n    \n    console.error('Rollout Failure Report:', report);\n    \n    // Send alert\n    await this.sendAlert('ROLLOUT_FAILURE', JSON.stringify(report));\n  }\n  \n  private identifyViolations(metrics: RolloutMetrics, criteria: any): string[] {\n    const violations = [];\n    \n    if (metrics.errorRate > criteria.maxErrorRate) {\n      violations.push(`Error rate ${metrics.errorRate} > ${criteria.maxErrorRate}`);\n    }\n    if (metrics.p95Latency > criteria.maxP95) {\n      violations.push(`P95 latency ${metrics.p95Latency}ms > ${criteria.maxP95}ms`);\n    }\n    if (metrics.conservationRate < criteria.minConservationRate) {\n      violations.push(`Conservation rate ${metrics.conservationRate} < ${criteria.minConservationRate}`);\n    }\n    \n    return violations;\n  }\n  \n  private calculateAverage(metrics: RolloutMetrics[], field: keyof RolloutMetrics): number {\n    if (metrics.length === 0) return 0;\n    const sum = metrics.reduce((acc, m) => acc + (m[field] as number), 0);\n    return sum / metrics.length;\n  }\n  \n  private async sendAlert(type: string, message: string): Promise<void> {\n    // Send to alerting system\n    const alert = {\n      type,\n      message,\n      severity: 'critical',\n      timestamp: new Date().toISOString()\n    };\n    \n    if (typeof navigator !== 'undefined' && navigator.sendBeacon) {\n      const alertUrl = '/api/alerts';\n      navigator.sendBeacon(alertUrl, JSON.stringify(alert));\n    }\n  }\n  \n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  \n  // Control methods\n  abort(): void {\n    this.abortSignal = true;\n  }\n  \n  getCurrentStage(): string {\n    return this.currentStage >= 0 ? this.stages[this.currentStage].name : 'Not started';\n  }\n  \n  getMetrics(): RolloutMetrics[] {\n    return [...this.metrics];\n  }\n}\n\n// Export singleton\nexport const rolloutOrchestrator = new AutomatedRolloutOrchestrator();","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\sentry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\shadow-intelligence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\stable-serialize.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'AbortSignal' is not defined.","line":56,"column":44,"nodeType":"Identifier","messageId":"undef","endLine":56,"endColumn":55},{"ruleId":"no-undef","severity":2,"message":"'AbortSignal' is not defined.","line":56,"column":73,"nodeType":"Identifier","messageId":"undef","endLine":56,"endColumn":84},{"ruleId":"no-undef","severity":2,"message":"'AbortSignal' is not defined.","line":57,"column":45,"nodeType":"Identifier","messageId":"undef","endLine":57,"endColumn":56},{"ruleId":"no-undef","severity":2,"message":"'DOMException' is not defined.","line":61,"column":63,"nodeType":"Identifier","messageId":"undef","endLine":61,"endColumn":75},{"ruleId":"no-undef","severity":2,"message":"'AbortController' is not defined.","line":62,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":62,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'AbortController' is not defined.","line":67,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":67,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'Event' is not defined.","line":68,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":68,"endColumn":28},{"ruleId":"no-undef","severity":2,"message":"'AbortSignal' is not defined.","line":68,"column":54,"nodeType":"Identifier","messageId":"undef","endLine":68,"endColumn":65}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n/**\n * Canonical JSON serialization for stable hashing\n * - Sorts object keys for deterministic ordering\n * - Handles circular references\n * - Ensures consistent hash regardless of key order\n */\nexport function stableSerialize(input: unknown): string {\n  const seen = new WeakSet();\n\n  const sortKeys = (v: any): any => {\n    if (v && typeof v === 'object') {\n      if (seen.has(v)) return null; // break cycles\n      seen.add(v);\n\n      if (Array.isArray(v)) return v.map(sortKeys);\n\n      // Sort keys for deterministic ordering\n      return Object.keys(v)\n        .sort()\n        .reduce((acc: any, k) => {\n          acc[k] = sortKeys(v[k]);\n          return acc;\n        }, {});\n    }\n    return v;\n  };\n\n  return JSON.stringify(sortKeys(input));\n}\n\n/**\n * FNV-1a hash for stable idempotency keys\n * Produces consistent hash from canonicalized JSON\n */\nexport function stableHash(payload: unknown): string {\n  const s = stableSerialize(payload);\n  let h = 0x811c9dc5;\n  for (let i = 0; i < s.length; i++) {\n    h ^= s.charCodeAt(i);\n    h = (h + ((h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24))) >>> 0;\n  }\n  return `idemp_${h.toString(16)}`;\n}\n\n/**\n * Compose multiple AbortSignals safely\n * - Short-circuits if any signal already aborted\n * - Cleans up listeners properly\n * - Preserves abort reasons\n */\nexport function composeSignal(...signals: (AbortSignal | undefined)[]): AbortSignal {\n  const active = signals.filter(Boolean) as AbortSignal[];\n  \n  // Short-circuit if any signal already aborted\n  if (active.some(s => s.aborted)) {\n    const reason = active.find(s => s.aborted)?.reason ?? new DOMException('Aborted', 'AbortError');\n    const c = new AbortController();\n    c.abort(reason);\n    return c.signal;\n  }\n  \n  const c = new AbortController();\n  const onAbort = (e: Event) => c.abort((e.target as AbortSignal).reason);\n  \n  // Add listeners with cleanup\n  active.forEach(s => s.addEventListener('abort', onAbort, { once: true }));\n  \n  return c.signal;\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\telemetry.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\testIds.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\toast.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":23,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":23,"endColumn":13},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":25,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":37,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":34}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n// client/src/lib/toast.ts\nexport function toast(message: string, type: 'success' | 'error' | 'info' = 'success') {\n  const existingToasts = document.querySelectorAll('.simple-toast').length;\n  const div = document.createElement('div');\n  \n  const bgColor = type === 'success' ? 'bg-green-500' : \n                  type === 'error' ? 'bg-red-500' : \n                  'bg-blue-500';\n  \n  div.className = `simple-toast fixed top-4 right-4 px-4 py-2 rounded shadow-lg z-50 ${bgColor} text-white transition-transform duration-300`;\n  \n  // Offset new toasts from existing ones\n  div.style.transform = `translateY(${existingToasts * 60}px)`;\n\n  div.textContent = message;\n  document.body.appendChild(div);\n\n  setTimeout(() => {\n    div.style.transform = `translateX(150%)`; // Slide out\n    setTimeout(() => div.remove(), 300);\n  }, 3000);\n}\n\n/**\n * Wrap a promise with toast notifications\n */\nexport async function withToast<T>(\n  promise: Promise<T>,\n  messages: {\n    pending?: string;\n    success?: string;\n    error?: string | ((err: Error) => string);\n  } = {}\n): Promise<T> {\n  const {\n    pending = 'Processing...',\n    success = 'Success!',\n    error = 'Something went wrong'\n  } = messages;\n  \n  // Show pending toast\n  if (pending) {\n    toast(pending, 'info');\n  }\n  \n  try {\n    const result = await promise;\n    if (success) {\n      toast(success, 'success');\n    }\n    return result;\n  } catch (err) {\n    const errorMessage = typeof error === 'function' \n      ? error(err as Error)\n      : error;\n    toast(errorMessage, 'error');\n    throw err;\n  }\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\main.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'URLSearchParams' is not defined.","line":15,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":15,"endColumn":42},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":38,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":38,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'requestIdleCallback' is not defined.","line":59,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":59,"endColumn":22}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n// Vitals loaded dynamically in production\n\n// Emergency rollback failsafe - provides backdoor even if env vars are stuck\nfunction checkEmergencyRollback() {\n  try {\n    // Check URL parameter first (highest priority)\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('emergency_rollback') === 'true') {\n      (window as any).__FORCE_LEGACY_STATE = true;\n      console.warn('≡ƒÜ¿ Emergency rollback activated via URL parameter');\n      return;\n    }\n\n    // Check localStorage (persistent emergency rollback)\n    if (localStorage.getItem('emergency_rollback') === 'true') {\n      (window as any).__FORCE_LEGACY_STATE = true;\n      console.warn('≡ƒÜ¿ Emergency rollback activated via localStorage');\n      \n      // Show user-friendly notification\n      const notification = document.createElement('div');\n      notification.innerHTML = `\n        <div style=\"position: fixed; top: 10px; right: 10px; z-index: 9999; background: #ff4444; color: white; padding: 12px 16px; border-radius: 4px; font-family: monospace; max-width: 300px;\">\n          ≡ƒÜ¿ Emergency Mode Active<br>\n          <small>Using legacy state system. Contact support if this persists.</small>\n        </div>\n      `;\n      document.body.appendChild(notification);\n      \n      // Auto-remove notification after 10 seconds\n      setTimeout(() => notification.remove(), 10000);\n    }\n  } catch (e) {\n    console.warn('Emergency rollback check failed:', e);\n  }\n}\n\n// Check for emergency rollback before app initialization\ncheckEmergencyRollback();\n\n// Initialize monitoring in production\nif (import.meta.env.PROD) {\n  // Code-split Sentry - only load when DSN is configured\n  if (import.meta.env.VITE_SENTRY_DSN) {\n    import('./sentry').then(({ initSentry }) => {\n      initSentry();\n    }).catch(err => {\n      console.warn('Failed to load Sentry:', err);\n    });\n  }\n  // Start Web Vitals collection after app mounts\n  requestIdleCallback(() => {\n    import('./vitals').then(({ startVitals }) => startVitals());\n  });\n}\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement) {\n  createRoot(rootElement).render(<App />);\n} else {\n  console.error(\"Root element not found\");\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\metrics\\reserves-metrics.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":232,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":232,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'clearTimeout' is not defined.","line":246,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":246,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":346,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":346,"endColumn":12}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Metrics collection and audit logging for Reserves v1.1\r\n * Browser-compatible with graceful degradation\r\n */\r\n\r\ninterface MetricEvent {\r\n  type: string;\r\n  value: number | string;\r\n  metadata?: Record<string, any>;\r\n  timestamp: number;\r\n}\r\n\r\ninterface AuditEntry {\r\n  operation: string;\r\n  input_hash: string;\r\n  output_hash: string;\r\n  duration_ms: number;\r\n  warnings?: string[];\r\n  timestamp: string;\r\n  user_id?: string;\r\n}\r\n\r\nclass ReservesMetrics {\r\n  private events: MetricEvent[] = [];\r\n  private beaconUrl: string | null = null;\r\n  private batchTimer: number | null = null;\r\n  private readonly BATCH_INTERVAL = 5000; // 5 seconds\r\n  \r\n  constructor() {\r\n    // Get beacon URL from environment or meta tag\r\n    if (typeof window !== 'undefined') {\r\n      const metaTag = document.querySelector('meta[name=\"metrics-beacon-url\"]');\r\n      this.beaconUrl = metaTag?.getAttribute('content') || null;\r\n    }\r\n  }\r\n  \r\n  // Timer utilities\r\n  startTimer(operation: string): { end: () => void } {\r\n    const startTime = performance.now();\r\n    \r\n    return {\r\n      end: () => {\r\n        const duration = performance.now() - startTime;\r\n        this.recordDuration(operation, duration);\r\n      }\r\n    };\r\n  }\r\n  \r\n  // Record metrics\r\n  recordDuration(operation: string, durationMs: number): void {\r\n    this.addEvent({\r\n      type: 'duration',\r\n      value: durationMs,\r\n      metadata: { operation },\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n  \r\n  recordCompanyCount(count: number): void {\r\n    this.addEvent({\r\n      type: 'company_count',\r\n      value: count,\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n  \r\n  recordCapPolicy(kind: string): void {\r\n    this.addEvent({\r\n      type: 'cap_policy',\r\n      value: kind,\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n  \r\n  recordWarning(message: string): void {\r\n    this.addEvent({\r\n      type: 'warning',\r\n      value: message,\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n  \r\n  recordDivergence(tsResult: any, wasmResult: any): void {\r\n    const divergence = this.calculateDivergence(tsResult, wasmResult);\r\n    \r\n    this.addEvent({\r\n      type: 'divergence',\r\n      value: divergence,\r\n      metadata: {\r\n        ts_hash: this.hashLite(tsResult),\r\n        wasm_hash: this.hashLite(wasmResult)\r\n      },\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n  \r\n  recordRecovery(strategy: string, success: boolean): void {\r\n    this.addEvent({\r\n      type: 'recovery',\r\n      value: strategy,\r\n      metadata: { success },\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n  \r\n  recordPerformanceMetric(metric: string, value: number, unit?: string): void {\r\n    this.addEvent({\r\n      type: 'performance',\r\n      value: value,\r\n      metadata: { metric, unit },\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n  \r\n  recordCacheHit(cacheKey: string): void {\r\n    this.addEvent({\r\n      type: 'cache_hit',\r\n      value: cacheKey,\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n  \r\n  recordCacheMiss(cacheKey: string): void {\r\n    this.addEvent({\r\n      type: 'cache_miss',\r\n      value: cacheKey,\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n  \r\n  recordBatchProcessing(size: number, duration: number): void {\r\n    this.addEvent({\r\n      type: 'batch_processing',\r\n      value: size,\r\n      metadata: { duration },\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n  \r\n  recordRolloutStage(stage: string, percentage: number): void {\r\n    this.addEvent({\r\n      type: 'rollout_stage',\r\n      value: stage,\r\n      metadata: { percentage },\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n  \r\n  recordRollback(reason: string, fromVersion: string, toVersion: string): void {\r\n    this.addEvent({\r\n      type: 'rollback',\r\n      value: reason,\r\n      metadata: { fromVersion, toVersion },\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n  \r\n  recordError(error: string): void {\r\n    this.addEvent({\r\n      type: 'error',\r\n      value: error,\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n  \r\n  // Calculate divergence between results\r\n  private calculateDivergence(a: any, b: any): number {\r\n    if (!a?.data || !b?.data) return 1.0;\r\n    \r\n    const allocationsA = a.data.allocations || [];\r\n    const allocationsB = b.data.allocations || [];\r\n    \r\n    if (allocationsA.length !== allocationsB.length) {\r\n      return Math.abs(allocationsA.length - allocationsB.length) / Math.max(allocationsA.length, allocationsB.length, 1);\r\n    }\r\n    \r\n    let totalDiff = 0;\r\n    let totalAmount = 0;\r\n    \r\n    allocationsA.forEach((alloc: any, i: number) => {\r\n      const otherAlloc = allocationsB[i];\r\n      if (otherAlloc) {\r\n        totalDiff += Math.abs(alloc.planned_cents - otherAlloc.planned_cents);\r\n        totalAmount += alloc.planned_cents;\r\n      }\r\n    });\r\n    \r\n    return totalAmount > 0 ? totalDiff / totalAmount : 0;\r\n  }\r\n  \r\n  // Lightweight hash for comparison\r\n  hashLite(obj: any): string {\r\n    const str = JSON.stringify(obj, Object.keys(obj).sort());\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n    return hash.toString(36);\r\n  }\r\n  \r\n  // Add event and schedule batch send\r\n  private addEvent(event: MetricEvent): void {\r\n    this.events.push(event);\r\n    \r\n    // Schedule batch send if not already scheduled\r\n    if (!this.batchTimer && this.beaconUrl) {\r\n      this.batchTimer = window.setTimeout(() => {\r\n        this.sendBatch();\r\n      }, this.BATCH_INTERVAL);\r\n    }\r\n  }\r\n  \r\n  // Send batch of events\r\n  private sendBatch(): void {\r\n    if (this.events.length === 0 || !this.beaconUrl) {\r\n      this.batchTimer = null;\r\n      return;\r\n    }\r\n    \r\n    const batch = [...this.events];\r\n    this.events = [];\r\n    this.batchTimer = null;\r\n    \r\n    // Use sendBeacon for reliability\r\n    if (typeof navigator !== 'undefined' && navigator.sendBeacon) {\r\n      const payload = JSON.stringify({ events: batch });\r\n      navigator.sendBeacon(this.beaconUrl, payload);\r\n    } else {\r\n      // Fallback to fetch\r\n      fetch(this.beaconUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ events: batch }),\r\n        keepalive: true\r\n      }).catch(() => {\r\n        // Silently fail - metrics are best-effort\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Force send all pending events\r\n  flush(): void {\r\n    if (this.batchTimer) {\r\n      clearTimeout(this.batchTimer);\r\n      this.batchTimer = null;\r\n    }\r\n    this.sendBatch();\r\n  }\r\n}\r\n\r\n// Audit logger\r\nclass ReservesAuditLog {\r\n  private readonly STORAGE_KEY = 'reserves_audit_log';\r\n  private readonly MAX_ENTRIES = 100;\r\n  \r\n  record(entry: {\r\n    operation: string;\r\n    input: any;\r\n    output: any;\r\n    config: any;\r\n    duration_ms: number;\r\n    warnings?: string[];\r\n    user_id?: string;\r\n  }): void {\r\n    const auditEntry: AuditEntry = {\r\n      operation: entry.operation,\r\n      input_hash: this.hashLite(entry.input),\r\n      output_hash: this.hashLite(entry.output),\r\n      duration_ms: entry.duration_ms,\r\n      warnings: entry.warnings,\r\n      timestamp: new Date().toISOString(),\r\n      user_id: entry.user_id || this.getUserId()\r\n    };\r\n    \r\n    // Store in localStorage for debugging (in production, send to server)\r\n    if (typeof localStorage !== 'undefined') {\r\n      try {\r\n        const existing = this.getEntries();\r\n        existing.push(auditEntry);\r\n        \r\n        // Keep only recent entries\r\n        const trimmed = existing.slice(-this.MAX_ENTRIES);\r\n        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(trimmed));\r\n      } catch (e) {\r\n        // Storage might be full or disabled\r\n        console.debug('Failed to store audit entry', e);\r\n      }\r\n    }\r\n    \r\n    // Send to server if configured\r\n    this.sendToServer(auditEntry);\r\n  }\r\n  \r\n  getEntries(): AuditEntry[] {\r\n    if (typeof localStorage === 'undefined') return [];\r\n    \r\n    try {\r\n      const stored = localStorage.getItem(this.STORAGE_KEY);\r\n      return stored ? JSON.parse(stored) : [];\r\n    } catch {\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  clear(): void {\r\n    if (typeof localStorage !== 'undefined') {\r\n      localStorage.removeItem(this.STORAGE_KEY);\r\n    }\r\n  }\r\n  \r\n  private hashLite(obj: any): string {\r\n    const str = JSON.stringify(obj, Object.keys(obj).sort());\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash;\r\n    }\r\n    return hash.toString(36);\r\n  }\r\n  \r\n  private getUserId(): string | undefined {\r\n    // Try to get user ID from various sources\r\n    if (typeof window !== 'undefined') {\r\n      // Check meta tag\r\n      const metaTag = document.querySelector('meta[name=\"user-id\"]');\r\n      if (metaTag) return metaTag.getAttribute('content') || undefined;\r\n      \r\n      // Check session storage\r\n      const stored = sessionStorage.getItem('user_id');\r\n      if (stored) return stored;\r\n    }\r\n    return undefined;\r\n  }\r\n  \r\n  private sendToServer(entry: AuditEntry): void {\r\n    const auditUrl = this.getAuditUrl();\r\n    if (!auditUrl) return;\r\n    \r\n    // Best-effort send\r\n    if (typeof navigator !== 'undefined' && navigator.sendBeacon) {\r\n      navigator.sendBeacon(auditUrl, JSON.stringify(entry));\r\n    } else if (typeof fetch !== 'undefined') {\r\n      fetch(auditUrl, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(entry),\r\n        keepalive: true\r\n      }).catch(() => {\r\n        // Silently fail\r\n      });\r\n    }\r\n  }\r\n  \r\n  private getAuditUrl(): string | null {\r\n    if (typeof window !== 'undefined') {\r\n      const metaTag = document.querySelector('meta[name=\"audit-log-url\"]');\r\n      return metaTag?.getAttribute('content') || null;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\n// Export singleton instances\r\nexport const metrics = new ReservesMetrics();\r\nexport const auditLog = new ReservesAuditLog();\r\n\r\n// Auto-flush metrics on page unload\r\nif (typeof window !== 'undefined') {\r\n  window.addEventListener('beforeunload', () => {\r\n    metrics.flush();\r\n  });\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\monitoring\\index.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used.","line":22,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":22,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":46},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used.","line":23,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":23,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used.","line":24,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":24,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is defined but never used.","line":25,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'level' is defined but never used.","line":26,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":30,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":31,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":31,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":47},{"ruleId":"no-unused-vars","severity":2,"message":"'message' is defined but never used.","line":32,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":35},{"ruleId":"no-unused-vars","severity":2,"message":"'level' is defined but never used.","line":32,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'breadcrumb' is defined but never used.","line":33,"column":19,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'callback' is defined but never used.","line":34,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":51},{"ruleId":"no-unused-vars","severity":2,"message":"'scope' is defined but never used.","line":34,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'user' is defined but never used.","line":35,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used.","line":36,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":36,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":38},{"ruleId":"no-unused-vars","severity":2,"message":"'key' is defined but never used.","line":37,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":37,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'callback' is defined but never used.","line":38,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":56},{"ruleId":"no-unused-vars","severity":2,"message":"'scope' is defined but never used.","line":38,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":47},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":40,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'hint' is defined but never used.","line":96,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":96,"endColumn":31}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Centralized monitoring wrapper with compile-time exclusion\n * This module provides a Sentry-compatible API that can be completely\n * excluded from the production bundle when VITE_SENTRY_DSN is not set\n */\n\n// Check Do Not Track setting\nconst isDNT = typeof navigator !== 'undefined' && \n  (navigator.doNotTrack === '1' || \n   (navigator as any).msDoNotTrack === '1' ||\n   (window as any).doNotTrack === '1');\n\n// Check user opt-out preference\nconst isOptedOut = typeof localStorage !== 'undefined' && \n  localStorage.getItem('analyticsOptOut') === '1';\n\n// Compile-time flag set by Vite based on VITE_SENTRY_DSN\ndeclare const __SENTRY__: boolean;\n\n// Type definitions for when Sentry is excluded\ninterface MockScope {\n  setMeasurement: (key: string, value: number) => void;\n  setTag: (key: string, value: string) => void;\n  setContext: (key: string, value: any) => void;\n  setUser: (user: any) => void;\n  setLevel: (level: string) => void;\n}\n\ninterface MockSentry {\n  init: (options?: any) => void;\n  captureException: (error: any, context?: any) => string;\n  captureMessage: (message: string, level?: string) => string;\n  addBreadcrumb: (breadcrumb: any) => void;\n  withScope: (callback: (scope: MockScope) => void) => void;\n  setUser: (user: any) => void;\n  setTag: (key: string, value: string) => void;\n  setContext: (key: string, value: any) => void;\n  configureScope: (callback: (scope: MockScope) => void) => void;\n  browserTracingIntegration: () => any;\n  replayIntegration: (options?: any) => any;\n}\n\n// No-op implementations when Sentry is excluded\nconst noopScope: MockScope = {\n  setMeasurement: () => {},\n  setTag: () => {},\n  setContext: () => {},\n  setUser: () => {},\n  setLevel: () => {},\n};\n\nconst noopSentry: MockSentry = {\n  init: () => {},\n  captureException: () => 'noop',\n  captureMessage: () => 'noop',\n  addBreadcrumb: () => {},\n  withScope: (callback) => callback(noopScope),\n  setUser: () => {},\n  setTag: () => {},\n  setContext: () => {},\n  configureScope: (callback) => callback(noopScope),\n  browserTracingIntegration: () => ({}),\n  replayIntegration: () => ({}),\n};\n\n// Export Sentry conditionally based on compile-time flag\nlet Sentry: MockSentry = noopSentry;\nlet isSentryEnabled = false;\n\n// Only load real Sentry if compile-time flag is true\nif (typeof __SENTRY__ !== 'undefined' && __SENTRY__ && !isDNT && !isOptedOut) {\n  // Dynamic import to enable code splitting - but ONLY if flag is true\n  import(/* webpackChunkName: \"sentry\" */ '@sentry/browser').then((SentryModule) => {\n    const sentryDSN = import.meta.env.VITE_SENTRY_DSN;\n    if (sentryDSN) {\n      SentryModule.init({\n        dsn: sentryDSN,\n        environment: import.meta.env.MODE || 'development',\n        release: import.meta.env.VITE_GIT_SHA || 'unknown',\n        tracesSampleRate: Number(import.meta.env.VITE_SENTRY_TRACES_RATE || '0.1'),\n        \n        // Performance monitoring\n        integrations: [\n          SentryModule.browserTracingIntegration(),\n          SentryModule.replayIntegration({\n            maskAllText: true,\n            blockAllMedia: true,\n          }),\n        ],\n        \n        // Session replay sampling\n        replaysSessionSampleRate: 0.1,\n        replaysOnErrorSampleRate: 1.0,\n        \n        // Privacy: Scrub sensitive data\n        beforeSend(event, hint) {\n          // Remove PII from URLs\n          if (event.request?.url) {\n            event.request.url = event.request.url.replace(/\\/users\\/\\d+/g, '/users/[id]');\n          }\n          \n          // Remove email addresses\n          if (event.extra) {\n            const stringified = JSON.stringify(event.extra);\n            const scrubbed = stringified.replace(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g, '[email]');\n            event.extra = JSON.parse(scrubbed);\n          }\n          \n          return event;\n        },\n        \n        // Ignore specific errors\n        ignoreErrors: [\n          'ResizeObserver loop limit exceeded',\n          'Non-Error promise rejection captured',\n          /extension\\//i,\n          /^chrome:\\/\\//i,\n        ],\n      });\n      \n      // Replace the no-op with real Sentry\n      Sentry = SentryModule as any;\n      isSentryEnabled = true;\n      \n      // Also set on window for vitals.ts compatibility\n      (window as any).Sentry = SentryModule;\n    }\n  });\n}\n\n/**\n * Check if Sentry is enabled\n */\nexport function getIsSentryEnabled(): boolean {\n  return isSentryEnabled;\n}\n\n/**\n * Enable/disable analytics (including Sentry)\n * @param enabled - Whether to enable analytics\n */\nexport function setAnalyticsEnabled(enabled: boolean): void {\n  if (enabled) {\n    localStorage.removeItem('analyticsOptOut');\n  } else {\n    localStorage.setItem('analyticsOptOut', '1');\n  }\n  \n  // Reload to apply changes\n  if (typeof window !== 'undefined') {\n    window.location.reload();\n  }\n}\n\n// Export the conditional Sentry instance\nexport { Sentry };\nexport default Sentry;","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\monitoring\\noop.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\CapTables.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":18,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":18,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":21,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":54},{"ruleId":"no-unused-vars","severity":2,"message":"'setScenarios' is assigned a value but never used.","line":85,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":85,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedScenario' is assigned a value but never used.","line":86,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":86,"endColumn":26}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from 'react';\nimport { useFundContext } from '@/contexts/FundContext';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport CapTableCalculator from '@/components/cap-table/cap-table-calculator';\nimport { Plus, Search, Calculator, Download, Calendar, Building2, TrendingUp, DollarSign } from 'lucide-react';\n\ninterface CapTableScenario {\n  id: string;\n  name: string;\n  investmentCompany: string;\n  investmentId: string;\n  status: 'draft' | 'active' | 'archived';\n  lastModified: string;\n  createdBy: string;\n  preMoneyValuation: number;\n  roundSize: number;\n  totalSAFEs: number;\n  totalNotes: number;\n  dilution: number;\n}\n\nconst SAMPLE_CAP_TABLE_SCENARIOS: CapTableScenario[] = [\n  {\n    id: 'ct-1',\n    name: 'Series A Modeling',\n    investmentCompany: 'AirChair',\n    investmentId: 'inv-1',\n    status: 'active',\n    lastModified: '2025-01-20T15:30:00Z',\n    createdBy: 'Sarah Chen',\n    preMoneyValuation: 15000000,\n    roundSize: 5000000,\n    totalSAFEs: 750000,\n    totalNotes: 500000,\n    dilution: 23.5\n  },\n  {\n    id: 'ct-2',\n    name: 'Seed Extension',\n    investmentCompany: 'DataFlow Systems',\n    investmentId: 'inv-2',\n    status: 'draft',\n    lastModified: '2025-01-19T10:15:00Z',\n    createdBy: 'Mike Rodriguez',\n    preMoneyValuation: 8000000,\n    roundSize: 2500000,\n    totalSAFEs: 300000,\n    totalNotes: 200000,\n    dilution: 28.2\n  },\n  {\n    id: 'ct-3',\n    name: 'Bridge Round Analysis',\n    investmentCompany: 'TechFlow',\n    investmentId: 'inv-3',\n    status: 'archived',\n    lastModified: '2025-01-18T14:45:00Z',\n    createdBy: 'Jennifer Liu',\n    preMoneyValuation: 12000000,\n    roundSize: 1500000,\n    totalSAFEs: 450000,\n    totalNotes: 350000,\n    dilution: 15.8\n  }\n];\n\nexport default function CapTables() {\n  const { currentFund } = useFundContext();\n  const [scenarios, setScenarios] = useState<CapTableScenario[]>(SAMPLE_CAP_TABLE_SCENARIOS);\n  const [selectedScenario, setSelectedScenario] = useState<CapTableScenario | null>(null);\n  const [showCalculator, setShowCalculator] = useState(false);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n\n  const filteredScenarios = scenarios.filter(scenario => {\n    const matchesSearch = scenario.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         scenario.investmentCompany.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = filterStatus === 'all' || scenario.status === filterStatus;\n    return matchesSearch && matchesStatus;\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'draft': return 'bg-yellow-100 text-yellow-800';\n      case 'archived': return 'bg-gray-100 text-gray-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (showCalculator) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"p-6\">\n          <div className=\"mb-6\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => setShowCalculator(false)}\n              className=\"mb-4\"\n            >\n              ΓåÉ Back to Cap Tables\n            </Button>\n          </div>\n          <CapTableCalculator />\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentFund) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <p className=\"text-gray-500\">Please select a fund to manage cap tables.</p>\n          <Button className=\"mt-4\" onClick={() => window.location.href = '/setup'}>\n            Set Up Fund\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Cap Tables</h1>\n            <p className=\"text-gray-600\">Model SAFE/Note conversions and analyze dilution scenarios</p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" onClick={() => setShowCalculator(true)}>\n              <Calculator className=\"h-4 w-4 mr-2\" />\n              Cap Table Calculator\n            </Button>\n            <Button onClick={() => setShowCreateDialog(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Cap Table\n            </Button>\n          </div>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Calculator className=\"h-5 w-5 text-blue-600\" />\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Scenarios</p>\n                  <p className=\"text-lg font-bold\">{scenarios.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"h-5 w-5 text-green-600\" />\n                <div>\n                  <p className=\"text-sm text-gray-600\">Active Models</p>\n                  <p className=\"text-lg font-bold\">{scenarios.filter(s => s.status === 'active').length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <DollarSign className=\"h-5 w-5 text-purple-600\" />\n                <div>\n                  <p className=\"text-sm text-gray-600\">Avg Pre-Money</p>\n                  <p className=\"text-lg font-bold\">\n                    {formatCurrency(scenarios.reduce((sum, s) => sum + s.preMoneyValuation, 0) / scenarios.length)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Building2 className=\"h-5 w-5 text-orange-600\" />\n                <div>\n                  <p className=\"text-sm text-gray-600\">Companies Modeled</p>\n                  <p className=\"text-lg font-bold\">{new Set(scenarios.map(s => s.investmentCompany)).size}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"h-4 w-4 absolute left-3 top-3 text-gray-400\" />\n            <Input\n              placeholder=\"Search cap table scenarios...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          <Select value={filterStatus} onValueChange={setFilterStatus}>\n            <SelectTrigger className=\"w-[180px]\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Statuses</SelectItem>\n              <SelectItem value=\"active\">Active</SelectItem>\n              <SelectItem value=\"draft\">Draft</SelectItem>\n              <SelectItem value=\"archived\">Archived</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Cap Table Scenarios Grid */}\n        {filteredScenarios.length === 0 ? (\n          <Card className=\"text-center py-16\">\n            <CardHeader>\n              <div className=\"mx-auto w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4\">\n                <Calculator className=\"h-8 w-8 text-blue-600\" />\n              </div>\n              <CardTitle>No Cap Table Scenarios</CardTitle>\n              <p className=\"text-gray-600\">\n                Create your first cap table scenario to model SAFE/Note conversions.\n              </p>\n            </CardHeader>\n            <CardContent>\n              <Button onClick={() => setShowCreateDialog(true)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Cap Table\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredScenarios.map((scenario) => (\n              <Card key={scenario.id} className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg\">{scenario.name}</CardTitle>\n                      <p className=\"text-sm text-gray-600\">{scenario.investmentCompany}</p>\n                    </div>\n                    <Badge className={getStatusColor(scenario.status)}>\n                      {scenario.status}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-gray-500\">Pre-Money</p>\n                      <p className=\"font-medium\">{formatCurrency(scenario.preMoneyValuation)}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-500\">Round Size</p>\n                      <p className=\"font-medium\">{formatCurrency(scenario.roundSize)}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-gray-500\">SAFEs/Notes</p>\n                      <p className=\"font-medium\">{formatCurrency(scenario.totalSAFEs + scenario.totalNotes)}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-500\">Dilution</p>\n                      <p className=\"font-medium\">{scenario.dilution.toFixed(1)}%</p>\n                    </div>\n                  </div>\n\n                  <div className=\"pt-3 border-t\">\n                    <p className=\"text-xs text-gray-500\">\n                      Modified by {scenario.createdBy} ΓÇó {new Date(scenario.lastModified).toLocaleDateString()}\n                    </p>\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      className=\"flex-1\"\n                      onClick={() => {\n                        setSelectedScenario(scenario);\n                        setShowCalculator(true);\n                      }}\n                    >\n                      Open Calculator\n                    </Button>\n                    <Button size=\"sm\" variant=\"ghost\">\n                      <Download className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Create Cap Table Dialog */}\n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add Cap Table Scenario</DialogTitle>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Select Investment</label>\n                <Select>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose a portfolio company\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"airchair\">AirChair</SelectItem>\n                    <SelectItem value=\"dataflow\">DataFlow Systems</SelectItem>\n                    <SelectItem value=\"techflow\">TechFlow</SelectItem>\n                    <SelectItem value=\"fintech-co\">FinTech Co</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium\">Scenario Name</label>\n                <Input placeholder=\"e.g., Series A Modeling\" />\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button variant=\"outline\" onClick={() => setShowCreateDialog(false)}>\n                  Cancel\n                </Button>\n                <Button onClick={() => {\n                  setShowCreateDialog(false);\n                  setShowCalculator(true);\n                }}>\n                  Create & Open Calculator\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\CustomFields.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":6,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from 'react';\nimport { useFundContext } from '@/contexts/FundContext';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport CustomFieldsManager, { CustomField } from '@/components/custom-fields/custom-fields-manager';\n\n// Sample custom fields for demonstration\nconst SAMPLE_CUSTOM_FIELDS: CustomField[] = [\n  {\n    id: 'field-1',\n    name: 'Internal Status',\n    type: 'color',\n    required: false,\n  },\n  {\n    id: 'field-2',\n    name: 'Founding Year',\n    type: 'number',\n    required: false,\n  },\n  {\n    id: 'field-3',\n    name: 'Lead Status',\n    type: 'text',\n    required: false,\n  },\n  {\n    id: 'field-4',\n    name: 'Years of Operation',\n    type: 'number',\n    required: false,\n  },\n  {\n    id: 'field-5',\n    name: 'Internal Code',\n    type: 'text',\n    required: false,\n  },\n  {\n    id: 'field-6',\n    name: 'Internal FMV',\n    type: 'number',\n    required: false,\n  },\n  {\n    id: 'field-7',\n    name: 'Strategic',\n    type: 'tags',\n    required: false,\n  },\n  {\n    id: 'field-8',\n    name: 'Deal Source',\n    type: 'text',\n    required: false,\n  },\n];\n\nexport default function CustomFields() {\n  const { currentFund } = useFundContext();\n  const [, setLocation] = useLocation();\n  const [customFields, setCustomFields] = useState<CustomField[]>(SAMPLE_CUSTOM_FIELDS);\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n\n  const handleFieldsChange = (fields: CustomField[]) => {\n    setCustomFields(fields);\n    setHasUnsavedChanges(true);\n  };\n\n  const handleSave = () => {\n    // Here you would typically save to the backend\n    console.log('Saving custom fields:', customFields);\n    setHasUnsavedChanges(false);\n    \n    // Show success message\n    // toast.success('Custom fields saved successfully');\n  };\n\n  const handleCancel = () => {\n    if (hasUnsavedChanges) {\n      const confirmed = window.confirm('You have unsaved changes. Are you sure you want to leave?');\n      if (!confirmed) return;\n    }\n    setLocation('/investments');\n  };\n\n  if (!currentFund) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <p className=\"text-gray-500\">Please select a fund to manage custom fields.</p>\n          <Button className=\"mt-4\" onClick={() => setLocation('/setup')}>\n            Set Up Fund\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleCancel}\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Investments\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Custom Fields</h1>\n                <p className=\"text-sm text-gray-600\">\n                  Create and manage custom tracking fields for portfolio companies\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              {hasUnsavedChanges && (\n                <div className=\"text-sm text-orange-600 bg-orange-50 px-3 py-1 rounded-md\">\n                  Unsaved changes\n                </div>\n              )}\n              <Button variant=\"outline\" onClick={handleCancel}>\n                Cancel\n              </Button>\n              <Button onClick={handleSave} disabled={!hasUnsavedChanges}>\n                Save\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <CustomFieldsManager\n          fields={customFields}\n          onFieldsChange={handleFieldsChange}\n        />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\ExitRecyclingStep.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":17,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":33}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport type { ExitRecycling } from \"@shared/types\";\n\ninterface ExitRecyclingStepProps {\n  data: ExitRecycling;\n  onChange: (data: ExitRecycling) => void;\n}\n\nexport default function ExitRecyclingStep({ data, onChange }: ExitRecyclingStepProps) {\n  const handleChange = (field: keyof ExitRecycling, value: any) => {\n    onChange({\n      ...data,\n      [field]: value\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold text-charcoal\">Exit Recycling</h2>\n        <p className=\"text-gray-600 mt-2\">Configure how exit proceeds will be recycled back into new investments</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Exit Recycling Settings</CardTitle>\n          <CardDescription>\n            Allow exit proceeds to be re-invested into new opportunities within the fund's investment period.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Enable/Disable Toggle */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label className=\"text-base font-medium\">Enable Exit Recycling</Label>\n              <p className=\"text-sm text-gray-600\">\n                Allow the fund to reinvest exit proceeds into new investments\n              </p>\n            </div>\n            <Switch\n              checked={data.enabled}\n              onCheckedChange={(checked) => handleChange('enabled', checked)}\n            />\n          </div>\n\n          {data.enabled && (\n            <div className=\"space-y-6 pt-4 border-t\">\n              {/* Recycle Percentage */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-base font-medium\">Recycle Percentage (%)</Label>\n                  <div className=\"relative\">\n                    <Input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"100\"\n                      value={data.recyclePercentage}\n                      onChange={(e) => handleChange('recyclePercentage', parseFloat(e.target.value) || 0)}\n                      className=\"pr-8\"\n                      placeholder=\"0\"\n                    />\n                    <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500\">%</span>\n                  </div>\n                  <p className=\"text-sm text-gray-600\">\n                    Percentage of exit proceeds to recycle into new investments\n                  </p>\n                  {data.recyclePercentage === 0 && (\n                    <p className=\"text-sm text-red-500\">\n                      Recycle percentage must be greater than 0% when recycling is enabled\n                    </p>\n                  )}\n                </div>\n\n                {/* Max Recycle Amount */}\n                <div className=\"space-y-2\">\n                  <Label className=\"text-base font-medium\">Maximum Recycle Amount (Optional)</Label>\n                  <div className=\"relative\">\n                    <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500\">$</span>\n                    <Input\n                      type=\"number\"\n                      min=\"0\"\n                      value={data.maxRecycleAmount || ''}\n                      onChange={(e) => handleChange('maxRecycleAmount', parseFloat(e.target.value) || undefined)}\n                      className=\"pl-8\"\n                      placeholder=\"No limit\"\n                    />\n                  </div>\n                  <p className=\"text-sm text-gray-600\">\n                    Cap the total amount that can be recycled (leave empty for no limit)\n                  </p>\n                </div>\n              </div>\n\n              {/* Recycle Window */}\n              <div className=\"space-y-2\">\n                <Label className=\"text-base font-medium\">Recycling Window</Label>\n                <Select \n                  value={data.recycleWindowMonths.toString()} \n                  onValueChange={(value) => handleChange('recycleWindowMonths', parseInt(value))}\n                >\n                  <SelectTrigger className=\"max-w-xs\">\n                    <SelectValue placeholder=\"Select window\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"12\">12 months</SelectItem>\n                    <SelectItem value=\"18\">18 months</SelectItem>\n                    <SelectItem value=\"24\">24 months</SelectItem>\n                    <SelectItem value=\"36\">36 months</SelectItem>\n                    <SelectItem value=\"48\">48 months</SelectItem>\n                    <SelectItem value=\"60\">60 months</SelectItem>\n                  </SelectContent>\n                </Select>\n                <p className=\"text-sm text-gray-600\">\n                  Time window during which exit proceeds can be recycled\n                </p>\n              </div>\n\n              {/* Restrictions */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium text-charcoal\">Investment Restrictions</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-base font-medium\">Restrict to Same Sector</Label>\n                      <p className=\"text-sm text-gray-600\">\n                        Only recycle into companies in the same sector as the exited investment\n                      </p>\n                    </div>\n                    <Switch\n                      checked={data.restrictToSameSector}\n                      onCheckedChange={(checked) => handleChange('restrictToSameSector', checked)}\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-base font-medium\">Restrict to Same Stage</Label>\n                      <p className=\"text-sm text-gray-600\">\n                        Only recycle into companies in the same investment stage as the exited investment\n                      </p>\n                    </div>\n                    <Switch\n                      checked={data.restrictToSameStage}\n                      onCheckedChange={(checked) => handleChange('restrictToSameStage', checked)}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {!data.enabled && (\n            <div className=\"py-8 text-center text-gray-500\">\n              <p>Exit recycling is disabled. Exit proceeds will be distributed to LPs as normal.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\InvestmentStrategyStep.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'allValid' is assigned a value but never used.","line":24,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Trash2 } from \"lucide-react\";\nimport { useFundStore } from \"@/stores/useFundStore\";\nimport type { Stage, SectorProfile, Allocation } from \"@shared/types\";\n\nexport default function InvestmentStrategyStep() {\n  const data = useFundStore(state => state.toInvestmentStrategy());\n  const storeAddStage = useFundStore(state => state.addStage);\n  const storeRemoveStage = useFundStore(state => state.removeStage);\n  const storeUpdateStageName = useFundStore(state => state.updateStageName);\n  const storeUpdateStageRate = useFundStore(state => state.updateStageRate);\n  const fromInvestmentStrategy = useFundStore(state => state.fromInvestmentStrategy);\n  const { allValid } = useFundStore(state => state.stageValidation());\n  const [activeTab, setActiveTab] = useState(\"stages\");\n\n  const addStage = () => {\n    storeAddStage();\n  };\n\n  const updateStage = (index: number, updates: Partial<Stage>) => {\n    if ('name' in updates && updates.name !== undefined) {\n      storeUpdateStageName(index, updates.name);\n    }\n    if ('graduationRate' in updates || 'exitRate' in updates) {\n      storeUpdateStageRate(index, {\n        graduate: updates.graduationRate,\n        exit: updates.exitRate\n      });\n    }\n  };\n\n  const removeStage = (index: number) => {\n    storeRemoveStage(index);\n  };\n\n  const addSectorProfile = () => {\n    const newSector: SectorProfile = {\n      id: `sector-${Date.now()}`,\n      name: '',\n      targetPercentage: 0,\n      description: '',\n    };\n    fromInvestmentStrategy({\n      ...data,\n      sectorProfiles: [...data.sectorProfiles, newSector]\n    });\n  };\n\n  const updateSectorProfile = (index: number, updates: Partial<SectorProfile>) => {\n    const updatedSectors = data.sectorProfiles.map((sector, i) => \n      i === index ? { ...sector, ...updates } : sector\n    );\n    fromInvestmentStrategy({\n      ...data,\n      sectorProfiles: updatedSectors\n    });\n  };\n\n  const removeSectorProfile = (index: number) => {\n    const updatedSectors = data.sectorProfiles.filter((_, i) => i !== index);\n    fromInvestmentStrategy({\n      ...data,\n      sectorProfiles: updatedSectors\n    });\n  };\n\n  const addAllocation = () => {\n    const newAllocation: Allocation = {\n      id: `allocation-${Date.now()}`,\n      category: '',\n      percentage: 0,\n      description: '',\n    };\n    fromInvestmentStrategy({\n      ...data,\n      allocations: [...data.allocations, newAllocation]\n    });\n  };\n\n  const updateAllocation = (index: number, updates: Partial<Allocation>) => {\n    const updatedAllocations = data.allocations.map((allocation, i) => \n      i === index ? { ...allocation, ...updates } : allocation\n    );\n    fromInvestmentStrategy({\n      ...data,\n      allocations: updatedAllocations\n    });\n  };\n\n  const removeAllocation = (index: number) => {\n    const updatedAllocations = data.allocations.filter((_, i) => i !== index);\n    fromInvestmentStrategy({\n      ...data,\n      allocations: updatedAllocations\n    });\n  };\n\n  const totalSectorAllocation = data.sectorProfiles.reduce((sum, sector) => sum + sector.targetPercentage, 0);\n  const totalAllocation = data.allocations.reduce((sum, alloc) => sum + alloc.percentage, 0);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold text-charcoal\">Investment Strategy</h2>\n        <p className=\"text-gray-600 mt-2\">Define your investment stages, sector focus, and capital allocation</p>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"stages\">Investment Stages</TabsTrigger>\n          <TabsTrigger value=\"sectors\">Sector Profiles</TabsTrigger>\n          <TabsTrigger value=\"allocations\">Capital Allocation</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"stages\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Investment Stages</CardTitle>\n              <CardDescription>\n                Define the stages of investment and their graduation/exit rates. Last stage must have 0% graduation rate.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {data.stages.map((stage, index) => (\n                <div key={stage.id} className=\"border rounded-lg p-4 space-y-4\" data-testid={`stage-${index}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-medium\">Stage {index + 1}</h3>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeStage(index)}\n                      className=\"text-red-500 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Stage Name</Label>\n                      <Input\n                        data-testid={`stage-${index}-name`}\n                        value={stage.name}\n                        onChange={(e) => updateStage(index, { name: e.target.value })}\n                        placeholder=\"e.g., Seed, Series A\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Graduation Rate (%)</Label>\n                      <Input\n                        data-testid={`stage-${index}-graduate`}\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"100\"\n                        value={stage.graduationRate}\n                        onChange={(e) => updateStage(index, { graduationRate: parseFloat(e.target.value) || 0 })}\n                        disabled={index === data.stages.length - 1}\n                      />\n                      {index === data.stages.length - 1 && stage.graduationRate > 0 && (\n                        <p className=\"text-sm text-red-500\">Last stage must have 0% graduation rate</p>\n                      )}\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Exit Rate (%)</Label>\n                      <Input\n                        data-testid={`stage-${index}-exit`}\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"100\"\n                        value={stage.exitRate}\n                        onChange={(e) => updateStage(index, { exitRate: parseFloat(e.target.value) || 0 })}\n                      />\n                      {(stage.graduationRate + stage.exitRate) > 100 && (\n                        <p className=\"text-sm text-red-500\">Graduation + Exit rates cannot exceed 100%</p>\n                      )}\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Remain (%)</Label>\n                      <div className=\"p-2 bg-gray-50 rounded h-10 flex items-center\">\n                        <span className=\"text-gray-700\" data-testid={`stage-${index}-remain`}>\n                          {Math.max(0, 100 - stage.graduationRate - stage.exitRate)}%\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n              \n              <Button onClick={addStage} variant=\"outline\" className=\"w-full\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Stage\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"sectors\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Sector Profiles</CardTitle>\n              <CardDescription>\n                Define target allocation percentages by sector. Total: {totalSectorAllocation.toFixed(1)}%\n                {totalSectorAllocation > 100 && <span className=\"text-red-500\"> (exceeds 100%)</span>}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {data.sectorProfiles.map((sector, index) => (\n                <div key={sector.id} className=\"border rounded-lg p-4 space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-medium\">Sector {index + 1}</h3>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeSectorProfile(index)}\n                      className=\"text-red-500 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Sector Name</Label>\n                      <Input\n                        value={sector.name}\n                        onChange={(e) => updateSectorProfile(index, { name: e.target.value })}\n                        placeholder=\"e.g., FinTech, HealthTech\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Target Allocation (%)</Label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"100\"\n                        value={sector.targetPercentage}\n                        onChange={(e) => updateSectorProfile(index, { targetPercentage: parseFloat(e.target.value) || 0 })}\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Description (Optional)</Label>\n                    <Textarea\n                      value={sector.description || ''}\n                      onChange={(e) => updateSectorProfile(index, { description: e.target.value })}\n                      placeholder=\"Describe your focus and thesis for this sector\"\n                    />\n                  </div>\n                </div>\n              ))}\n              \n              <Button onClick={addSectorProfile} variant=\"outline\" className=\"w-full\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Sector\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"allocations\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Capital Allocation</CardTitle>\n              <CardDescription>\n                Define how capital will be allocated across different categories. Total: {totalAllocation.toFixed(1)}%\n                {totalAllocation > 100 && <span className=\"text-red-500\"> (exceeds 100%)</span>}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {data.allocations.map((allocation, index) => (\n                <div key={allocation.id} className=\"border rounded-lg p-4 space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-medium\">Allocation {index + 1}</h3>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeAllocation(index)}\n                      className=\"text-red-500 hover:text-red-700\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Category</Label>\n                      <Input\n                        value={allocation.category}\n                        onChange={(e) => updateAllocation(index, { category: e.target.value })}\n                        placeholder=\"e.g., New Investments, Reserves\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Allocation (%)</Label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"100\"\n                        value={allocation.percentage}\n                        onChange={(e) => updateAllocation(index, { percentage: parseFloat(e.target.value) || 0 })}\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label>Description (Optional)</Label>\n                    <Textarea\n                      value={allocation.description || ''}\n                      onChange={(e) => updateAllocation(index, { description: e.target.value })}\n                      placeholder=\"Describe this allocation category\"\n                    />\n                  </div>\n                </div>\n              ))}\n              \n              <Button onClick={addAllocation} variant=\"outline\" className=\"w-full\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Allocation\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\WaterfallStep.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":16,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport type { Waterfall } from \"@shared/types\";\n\ninterface WaterfallStepProps {\n  data: Waterfall;\n  onChange: (data: Waterfall) => void;\n}\n\nexport default function WaterfallStep({ data, onChange }: WaterfallStepProps) {\n  const handleChange = (field: keyof Waterfall, value: any) => {\n    onChange({\n      ...data,\n      [field]: value\n    });\n  };\n\n  const handleCarryVestingChange = (field: 'cliffYears' | 'vestingYears', value: number) => {\n    onChange({\n      ...data,\n      carryVesting: {\n        ...data.carryVesting,\n        [field]: value\n      }\n    });\n  };\n\n  const formatPercentage = (decimal: number) => {\n    return (decimal * 100).toFixed(1);\n  };\n\n  const parsePercentage = (percentageString: string) => {\n    return parseFloat(percentageString) / 100 || 0;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"mb-6 space-y-1 text-center\">\n        <h2 className=\"text-2xl font-bold text-charcoal\">Waterfall Structure</h2>\n        <p className=\"text-gray-600\">Define the distribution waterfall and carry terms</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Waterfall Type */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Waterfall Type</CardTitle>\n            <CardDescription>\n              Choose between European (deal-by-deal) or American (fund-level) waterfall\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <RadioGroup \n              value={data.type} \n              onValueChange={(value: 'EUROPEAN' | 'AMERICAN') => handleChange('type', value)}\n            >\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3 p-4 border rounded-lg\">\n                  <RadioGroupItem value=\"EUROPEAN\" id=\"european\" className=\"mt-1\" />\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"european\" className=\"text-base font-medium cursor-pointer\">\n                      European Waterfall\n                    </Label>\n                    <p className=\"text-sm text-gray-600\">\n                      Deal-by-deal carry distribution. GPs receive carry on each individual exit \n                      after returning invested capital plus hurdle for that specific investment.\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3 p-4 border rounded-lg\">\n                  <RadioGroupItem value=\"AMERICAN\" id=\"american\" className=\"mt-1\" />\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"american\" className=\"text-base font-medium cursor-pointer\">\n                      American Waterfall\n                    </Label>\n                    <p className=\"text-sm text-gray-600\">\n                      Fund-level carry distribution. GPs receive carry only after the entire fund \n                      has returned capital plus hurdle to LPs.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </RadioGroup>\n          </CardContent>\n        </Card>\n\n        {/* Financial Terms - Only show for European waterfall */}\n        {data.type === 'EUROPEAN' && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Financial Terms</CardTitle>\n              <CardDescription>\n                Set the hurdle rate and catch-up provisions for European waterfall\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label className=\"text-base font-medium\">Hurdle Rate (%)</Label>\n                <div className=\"relative\">\n                  <Input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"100\"\n                    step=\"0.1\"\n                    value={formatPercentage(data.hurdle)}\n                    onChange={(e) => handleChange('hurdle', parsePercentage(e.target.value))}\n                    className=\"pr-8\"\n                    placeholder=\"8.0\"\n                  />\n                  <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500\">%</span>\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  Minimum annual return LPs must receive before GPs earn carry\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-base font-medium\">Catch-Up Rate (%)</Label>\n                <div className=\"relative\">\n                  <Input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"100\"\n                    step=\"0.1\"\n                    value={formatPercentage(data.catchUp)}\n                    onChange={(e) => handleChange('catchUp', parsePercentage(e.target.value))}\n                    className=\"pr-8\"\n                    placeholder=\"8.0\"\n                  />\n                  <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500\">%</span>\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  Rate at which GPs catch up to their full carry percentage after hurdle is met\n                </p>\n                {data.catchUp < data.hurdle && (\n                  <p className=\"text-sm text-red-500\">\n                    Catch-up rate should be greater than or equal to hurdle rate\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Carry Vesting */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Carry Vesting</CardTitle>\n          <CardDescription>\n            Define the vesting schedule for GP carry\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <Label className=\"text-base font-medium\">Cliff Period</Label>\n              <Select \n                value={data.carryVesting.cliffYears.toString()} \n                onValueChange={(value) => handleCarryVestingChange('cliffYears', parseInt(value))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select cliff\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"0\">No cliff</SelectItem>\n                  <SelectItem value=\"1\">1 year</SelectItem>\n                  <SelectItem value=\"2\">2 years</SelectItem>\n                  <SelectItem value=\"3\">3 years</SelectItem>\n                  <SelectItem value=\"4\">4 years</SelectItem>\n                </SelectContent>\n              </Select>\n              <p className=\"text-sm text-gray-600\">\n                Period before any carry vests\n              </p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label className=\"text-base font-medium\">Vesting Period</Label>\n              <Select \n                value={data.carryVesting.vestingYears.toString()} \n                onValueChange={(value) => handleCarryVestingChange('vestingYears', parseInt(value))}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select vesting\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"1\">1 year</SelectItem>\n                  <SelectItem value=\"2\">2 years</SelectItem>\n                  <SelectItem value=\"3\">3 years</SelectItem>\n                  <SelectItem value=\"4\">4 years</SelectItem>\n                  <SelectItem value=\"5\">5 years</SelectItem>\n                </SelectContent>\n              </Select>\n              <p className=\"text-sm text-gray-600\">\n                Total period over which carry vests\n              </p>\n            </div>\n          </div>\n\n          <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n            <h4 className=\"font-medium text-charcoal mb-2\">Vesting Summary</h4>\n            <p className=\"text-sm text-gray-600\">\n              {data.carryVesting.cliffYears === 0 \n                ? \"Carry vests immediately over \" \n                : `After a ${data.carryVesting.cliffYears}-year cliff, carry vests over `}\n              {data.carryVesting.vestingYears} year{data.carryVesting.vestingYears > 1 ? 's' : ''}.\n              {data.carryVesting.cliffYears > 0 && \n                ` No carry is earned in the first ${data.carryVesting.cliffYears} year${data.carryVesting.cliffYears > 1 ? 's' : ''}.`}\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\admin\\telemetry.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":26,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":46},{"ruleId":"no-undef","severity":2,"message":"'CustomEvent' is not defined.","line":26,"column":35,"nodeType":"Identifier","messageId":"undef","endLine":26,"endColumn":46},{"ruleId":"no-undef","severity":2,"message":"'StorageEvent' is not defined.","line":32,"column":33,"nodeType":"Identifier","messageId":"undef","endLine":32,"endColumn":45},{"ruleId":"no-undef","severity":2,"message":"'EventListener' is not defined.","line":39,"column":70,"nodeType":"Identifier","messageId":"undef","endLine":39,"endColumn":83},{"ruleId":"no-undef","severity":2,"message":"'EventListener' is not defined.","line":43,"column":75,"nodeType":"Identifier","messageId":"undef","endLine":43,"endColumn":88}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from 'react';\nimport { readTelemetry, type TelemetryEvent } from '../../lib/telemetry';\n\n/**\n * Live telemetry dashboard for monitoring deployments\n * \n * Features:\n * - Real-time updates via storage events\n * - Migration success tracking\n * - Error rate monitoring\n * - Quick stats summary\n * \n * Access: /admin/telemetry (should be gated behind auth/feature flag)\n */\nexport default function TelemetryDashboard() {\n  const [events, setEvents] = useState<TelemetryEvent[]>(() => readTelemetry());\n  const [lastUpdate, setLastUpdate] = useState(Date.now());\n\n  useEffect(() => {\n    // Listen for new telemetry events (same tab)\n    const onTelemetryAppend = (e: CustomEvent) => {\n      setEvents(readTelemetry());\n      setLastUpdate(Date.now());\n    };\n\n    // Listen for storage changes (other tabs)\n    const onStorageChange = (e: StorageEvent) => {\n      if (e.key === '__telemetry_events') {\n        setEvents(readTelemetry());\n        setLastUpdate(Date.now());\n      }\n    };\n\n    window.addEventListener('telemetry:append', onTelemetryAppend as EventListener);\n    window.addEventListener('storage', onStorageChange);\n\n    return () => {\n      window.removeEventListener('telemetry:append', onTelemetryAppend as EventListener);\n      window.removeEventListener('storage', onStorageChange);\n    };\n  }, []);\n\n  // Calculate stats\n  const now = Date.now();\n  const last24h = events.filter(e => now - e['t'] < 24 * 60 * 60 * 1000);\n  const lastHour = events.filter(e => now - e['t'] < 60 * 60 * 1000);\n  \n  const migrations = events.filter(e => e['category'] === 'migration');\n  const errors = events.filter(e => e['category'] === 'error');\n  const features = events.filter(e => e['category'] === 'feature');\n  \n  const migrationSuccess = migrations.filter(e => e['ok'] !== false).length;\n  const migrationErrors = migrations.filter(e => e['ok'] === false).length;\n  \n  const recentErrors = errors.filter(e => now - e['t'] < 60 * 60 * 1000);\n  const errorRate = lastHour.length > 0 ? (recentErrors.length / lastHour.length) * 100 : 0;\n\n  return (\n    <div className=\"p-6 max-w-6xl mx-auto space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">Telemetry Dashboard</h1>\n        <div className=\"text-sm text-gray-500\">\n          Last updated: {new Date(lastUpdate).toLocaleTimeString()}\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"text-2xl font-bold text-blue-600\">{migrations.length}</div>\n          <div className=\"text-gray-600\">Total Migrations</div>\n          <div className=\"text-sm text-green-600 mt-1\">\n            {migrationSuccess} successful, {migrationErrors} failed\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"text-2xl font-bold text-green-600\">{features.length}</div>\n          <div className=\"text-gray-600\">Feature Events</div>\n          <div className=\"text-sm text-gray-500 mt-1\">\n            Last 24h: {last24h.filter(e => e['category'] === 'feature').length}\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className={`text-2xl font-bold ${errors.length === 0 ? 'text-green-600' : 'text-red-600'}`}>\n            {errors.length}\n          </div>\n          <div className=\"text-gray-600\">Total Errors</div>\n          <div className=\"text-sm text-red-600 mt-1\">\n            Last hour: {recentErrors.length}\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className={`text-2xl font-bold ${errorRate < 1 ? 'text-green-600' : 'text-red-600'}`}>\n            {errorRate.toFixed(1)}%\n          </div>\n          <div className=\"text-gray-600\">Error Rate (1h)</div>\n          <div className=\"text-sm text-gray-500 mt-1\">\n            {recentErrors.length}/{lastHour.length} events\n          </div>\n        </div>\n      </div>\n\n      {/* Recent Events */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">Recent Events</h2>\n        </div>\n        <div className=\"max-h-96 overflow-y-auto\">\n          {events.length === 0 ? (\n            <div className=\"p-6 text-center text-gray-500\">\n              No telemetry events yet\n            </div>\n          ) : (\n            <div className=\"divide-y divide-gray-200\">\n              {events.slice(-20).reverse().map((event, idx) => (\n                <div key={`${event['t']}-${idx}`} className=\"px-6 py-4 hover:bg-gray-50\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-2 h-2 rounded-full ${\n                        event['category'] === 'error' ? 'bg-red-500' :\n                        event['category'] === 'migration' ? 'bg-blue-500' :\n                        'bg-green-500'\n                      }`} />\n                      <span className=\"font-medium text-gray-900\">\n                        [{event['category']}] {event.event}\n                      </span>\n                      {event['ok'] === false && (\n                        <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n                          Failed\n                        </span>\n                      )}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      {new Date(event['t']).toLocaleTimeString()}\n                    </div>\n                  </div>\n                  {event['meta'] && Object.keys(event['meta']).length > 0 && (\n                    <div className=\"mt-2 text-sm text-gray-600 ml-5\">\n                      <pre className=\"whitespace-pre-wrap\">\n                        {JSON.stringify(event['meta'], null, 2)}\n                      </pre>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Health Status */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">System Health</h2>\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between\">\n            <span>Migration Success Rate:</span>\n            <span className={`font-medium ${\n              migrationErrors === 0 ? 'text-green-600' : \n              migrationSuccess / Math.max(migrations.length, 1) > 0.99 ? 'text-yellow-600' : 'text-red-600'\n            }`}>\n              {migrations.length === 0 ? 'N/A' : \n               `${((migrationSuccess / migrations.length) * 100).toFixed(1)}%`}\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Recent Activity:</span>\n            <span className=\"font-medium\">\n              {lastHour.length} events in last hour\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span>Buffer Usage:</span>\n            <span className=\"font-medium\">\n              {events.length}/200 events\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\allocation-manager.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsContent' is defined but never used.","line":11,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsList' is defined but never used.","line":11,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsTrigger' is defined but never used.","line":11,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'remainingCapital' is assigned a value but never used.","line":82,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":25}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport TactycAllocationUI from \"@/components/allocation/tactyc-allocation-ui\";\nimport SectorProfileBuilder from \"@/components/allocation/sector-profile-builder\";\nimport { computeReservesFromGraduation, type FundDataForReserves } from \"@/core/reserves/computeReservesFromGraduation\";\nimport { \n  ArrowLeft, \n  Plus, \n  Settings, \n  Target, \n  TrendingUp, \n  BarChart3,\n  Calculator,\n  Info\n} from \"lucide-react\";\n\ninterface AllocationSummary {\n  id: string;\n  name: string;\n  stage: string;\n  capitalAllocated: number;\n  initialCapital: number;\n  followOnCapital: number;\n  reserveRatio: number;\n  numberOfDeals: number;\n  expectedMOIC: number;\n  status: 'active' | 'draft' | 'archived';\n}\n\nexport default function AllocationManager() {\n  const [selectedAllocation, setSelectedAllocation] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState<'allocations' | 'sector-profiles'>('allocations');\n  \n  // Authentic Tactyc \"Deploy ALL Capital\" Methodology - No Unused Capital Allowed\n  const calculatePreciseAllocation = () => {\n    const totalFundSize = 55000000; // $55M fund\n    const managementFees = totalFundSize * 0.2; // 20% management fees over life\n    const fundCosts = 850000; // $850K fund costs\n    const totalInvestableCapital = totalFundSize - managementFees - fundCosts;\n    \n    // Market-driven graduation rates (NOT fixed exit multiples)\n    const stages = [\n      {\n        name: \"Pre-Seed\",\n        avgCheckSize: 737868, // Auto-calculated for precise deployment\n        graduationRate: 0.35,\n        exitRate: 0.65,\n        avgRoundSize: 2000000,\n        avgPreMoney: 8000000,\n        followOnParticipation: 0.85\n      },\n      {\n        name: \"Seed\", \n        avgCheckSize: 1000000,\n        graduationRate: 0.50,\n        exitRate: 0.50,\n        avgRoundSize: 5000000,\n        avgPreMoney: 15000000,\n        followOnParticipation: 0.80\n      },\n      {\n        name: \"Series A\",\n        avgCheckSize: 2000000,\n        graduationRate: 0.60,\n        exitRate: 0.40,\n        avgRoundSize: 12000000,\n        avgPreMoney: 30000000,\n        followOnParticipation: 0.50\n      }\n    ];\n\n    // Calculate exact number of deals to deploy ALL capital (with decimals)\n    let remainingCapital = totalInvestableCapital;\n    const calculatedAllocations = stages.map(stage => {\n      const stagePercentage = stage.name === \"Pre-Seed\" ? 0.27 : stage.name === \"Seed\" ? 0.40 : 0.33;\n      const stageCapital = totalInvestableCapital * stagePercentage;\n      \n      // CRITICAL: Precise decimal deals calculation to deploy ALL capital\n      const exactNumberOfDeals = stageCapital / stage.avgCheckSize;\n      \n      // Calculate follow-on requirements using graduation-driven reserves engine\n      const fundData: FundDataForReserves = {\n        totalCommitment: stageCapital,\n        targetCompanies: Math.round(exactNumberOfDeals),\n        avgCheckSize: stage.avgCheckSize,\n        deploymentPacePerYear: Math.round(exactNumberOfDeals / 2.5), // 2.5 year deployment\n        graduationRates: {\n          seedToA: { graduate: 35, fail: 45, remain: 20, months: 18 },\n          aToB: { graduate: 50, fail: 30, remain: 20, months: 24 },\n          bToC: { graduate: 60, fail: 25, remain: 15, months: 18 }\n        },\n        followOnChecks: { A: 800000, B: 1500000, C: 2500000 }\n      };\n      \n      const reservesResult = computeReservesFromGraduation(fundData);\n      const followOnCapital = reservesResult.totalReserves;\n      const initialCapital = stageCapital - followOnCapital;\n      const reserveRatio = reservesResult.reserveRatioPct;\n      \n      // Build MOIC from granular market assumptions, not fixed exit multiples\n      const expectedMOIC = (\n        (stage.graduationRate * 5.0) + // Graduated companies\n        (stage.exitRate * 2.5) + // Early exits\n        ((1 - stage.graduationRate - stage.exitRate) * 0.2) // Write-offs\n      );\n\n      remainingCapital -= stageCapital;\n      \n      return {\n        id: stage.name.toLowerCase().replace(' ', '-'),\n        name: stage.name,\n        stage: stage.name,\n        capitalAllocated: stageCapital,\n        initialCapital: initialCapital,\n        followOnCapital: followOnCapital,\n        reserveRatio: reserveRatio,\n        numberOfDeals: exactNumberOfDeals, // Exact decimal calculation\n        expectedMOIC: expectedMOIC,\n        status: 'active' as const,\n        graduationRate: stage.graduationRate,\n        exitRate: stage.exitRate,\n        avgCheckSize: stage.avgCheckSize\n      };\n    });\n\n    return {\n      allocations: calculatedAllocations,\n      totalDeployed: totalInvestableCapital,\n      unusedCapital: 0, // ZERO unused capital per Tactyc principle\n      deploymentEfficiency: 100.0\n    };\n  };\n\n  const allocationResults = calculatePreciseAllocation();\n  const allocations: AllocationSummary[] = allocationResults.allocations;\n\n  const totalCapitalAllocated = allocations.reduce((sum, alloc) => sum + alloc.capitalAllocated, 0);\n  const totalInitialCapital = allocations.reduce((sum, alloc) => sum + alloc.initialCapital, 0);\n  const totalFollowOnCapital = allocations.reduce((sum, alloc) => sum + alloc.followOnCapital, 0);\n  const averageReserveRatio = (totalFollowOnCapital / totalCapitalAllocated) * 100;\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  if (selectedAllocation) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"container mx-auto p-6\">\n          <div className=\"mb-6\">\n            <Button \n              variant=\"ghost\" \n              onClick={() => setSelectedAllocation(null)}\n              className=\"mb-4\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Allocations\n            </Button>\n            <TactycAllocationUI />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (activeTab === 'sector-profiles') {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"container mx-auto p-6\">\n          <div className=\"mb-6\">\n            <Button \n              variant=\"ghost\" \n              onClick={() => setActiveTab('allocations')}\n              className=\"mb-4\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Allocations\n            </Button>\n            <SectorProfileBuilder />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto p-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Allocation Manager</h1>\n              <p className=\"text-gray-600 mt-2\">\n                Configure fund allocations with automatic reserve calculation using Tactyc methodology\n              </p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700\">\n                <Calculator className=\"w-3 h-3 mr-1\" />\n                Auto-Calculated Reserves\n              </Badge>\n              <Button \n                variant=\"outline\" \n                onClick={() => setActiveTab('sector-profiles')}\n              >\n                <Settings className=\"w-4 h-4 mr-2\" />\n                Sector Profiles\n              </Button>\n              <Button>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Allocation\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Fund Summary */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Target className=\"w-8 h-8 text-blue-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Allocated</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {formatCurrency(totalCapitalAllocated)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <TrendingUp className=\"w-8 h-8 text-green-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Initial Capital</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {formatCurrency(totalInitialCapital)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <BarChart3 className=\"w-8 h-8 text-purple-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Follow-On Reserves</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {formatCurrency(totalFollowOnCapital)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Calculator className=\"w-8 h-8 text-orange-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Reserve Ratio</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {averageReserveRatio.toFixed(1)}%\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Tactyc Methodology Info */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start\">\n              <Info className=\"w-5 h-5 text-blue-600 mt-0.5 mr-3\" />\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Tactyc Reserve Sizing Methodology</h3>\n                <p className=\"text-sm text-gray-600 mb-3\">\n                  Tactyc calculates your fund's expected reserve ratios instead of having you enter them directly. \n                  This ensures there is no \"left-over\" capital and enables you to \"build up\" to the ideal reserve ratio from more granular assumptions.\n                </p>\n                <div className=\"text-sm text-gray-600\">\n                  <strong>Follow-on reserves are calculated based on:</strong>\n                  <ul className=\"list-disc ml-6 mt-1 space-y-1\">\n                    <li>Number of graduations (from Sector Profile graduation rates)</li>\n                    <li>Follow-on strategy defined in each allocation (check sizes, participation %)</li>\n                    <li>How many rounds your fund will follow-on for each allocation</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Allocations Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-xl\">Current Allocations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Allocation</th>\n                    <th className=\"text-right py-3 px-4 font-medium text-gray-600\">Capital Allocated</th>\n                    <th className=\"text-right py-3 px-4 font-medium text-gray-600\">Initial Capital</th>\n                    <th className=\"text-right py-3 px-4 font-medium text-gray-600\">Follow-On Reserves</th>\n                    <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Reserve Ratio</th>\n                    <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Deals</th>\n                    <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Expected MOIC</th>\n                    <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Status</th>\n                    <th className=\"text-center py-3 px-4 font-medium text-gray-600\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {allocations.map((allocation) => (\n                    <tr key={allocation.id} className=\"border-b hover:bg-gray-50\">\n                      <td className=\"py-4 px-4\">\n                        <div>\n                          <div className=\"font-medium text-gray-900\">{allocation.name}</div>\n                          <div className=\"text-sm text-gray-500\">{allocation.stage}</div>\n                        </div>\n                      </td>\n                      <td className=\"py-4 px-4 text-right font-medium\">\n                        {formatCurrency(allocation.capitalAllocated)}\n                      </td>\n                      <td className=\"py-4 px-4 text-right\">\n                        {formatCurrency(allocation.initialCapital)}\n                      </td>\n                      <td className=\"py-4 px-4 text-right\">\n                        {formatCurrency(allocation.followOnCapital)}\n                      </td>\n                      <td className=\"py-4 px-4 text-center\">\n                        <Badge variant=\"outline\" className=\"bg-blue-50 text-blue-700\">\n                          {allocation.reserveRatio.toFixed(1)}%\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-4 text-center\">\n                        {allocation.numberOfDeals.toFixed(1)}\n                      </td>\n                      <td className=\"py-4 px-4 text-center font-medium\">\n                        {allocation.expectedMOIC.toFixed(2)}x\n                      </td>\n                      <td className=\"py-4 px-4 text-center\">\n                        <Badge \n                          variant={allocation.status === 'active' ? 'default' : 'secondary'}\n                          className={allocation.status === 'active' ? 'bg-green-100 text-green-800' : ''}\n                        >\n                          {allocation.status}\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-4 text-center\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setSelectedAllocation(allocation.id)}\n                        >\n                          <Settings className=\"w-4 h-4 mr-1\" />\n                          Configure\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Reserve Adjustment Tips */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Reserve Ratio Adjustment Tips</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                <h4 className=\"font-medium text-yellow-800 mb-2\">If your reserves are too low:</h4>\n                <ul className=\"text-sm text-yellow-700 space-y-1\">\n                  <li>ΓÇó Increase the follow-on check sizes</li>\n                  <li>ΓÇó Increase follow-on participation percentages</li>\n                </ul>\n              </div>\n              \n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <h4 className=\"font-medium text-blue-800 mb-2\">If your reserves are too high:</h4>\n                <ul className=\"text-sm text-blue-700 space-y-1\">\n                  <li>ΓÇó Revisit Sector Profiles and adjust Graduation Rates</li>\n                  <li>ΓÇó Adjust Exit Rates (Tactyc only follows-on into graduated companies)</li>\n                  <li>ΓÇó This is a \"macro\" change that implies your sector view has changed</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\analytics.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'PieChart' is defined but never used.","line":23,"column":40,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":24,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'performanceMetrics' is assigned a value but never used.","line":39,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'quarterlyMetrics' is assigned a value but never used.","line":46,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":46,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'sectorPerformance' is assigned a value but never used.","line":53,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":53,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'cohortComparison' is assigned a value but never used.","line":68,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedMetric' is assigned a value but never used.","line":77,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'setSelectedMetric' is assigned a value but never used.","line":77,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":77,"endColumn":43}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n// Chart libraries removed for bundle optimization\nconst ChartPlaceholder = ({ title, height = \"h-80\" }: { title: string; height?: string }) => (\n  <div className={`${height} bg-gray-50 rounded-lg flex flex-col items-center justify-center`}>\n    <div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mb-4\">\n      <BarChart3 className=\"h-8 w-8 text-gray-400\" />\n    </div>\n    <p className=\"text-gray-500 font-medium\">{title}</p>\n    <p className=\"text-gray-400 text-sm mt-1\">Chart placeholder - data available via API</p>\n  </div>\n);\nimport { useState, lazy, Suspense } from \"react\";\nimport { useFundContext } from \"@/contexts/FundContext\";\nimport { \n  TrendingUp, TrendingDown, BarChart3, PieChart, Activity, \n  Target, Calendar, Filter, Download \n} from \"lucide-react\";\n\n// Lazy load chart components to prevent Recharts from loading in analytics chunk\nconst ReserveAllocationChart = lazy(() => import(\"@/components/charts/reserve-allocation-chart\"));\nconst PacingTimelineChart = lazy(() => import(\"@/components/charts/pacing-timeline-chart\"));\n\n// Chart loading skeleton\nconst ChartSkeleton = () => (\n  <div className=\"animate-pulse\">\n    <div className=\"h-80 bg-gray-200 rounded-lg\"></div>\n  </div>\n);\n\n// Sample analytics data\nconst performanceMetrics = [\n  { metric: 'IRR', current: 28.4, benchmark: 24.5, target: 25.0 },\n  { metric: 'Multiple', current: 2.85, benchmark: 2.2, target: 2.5 },\n  { metric: 'DPI', current: 1.45, benchmark: 1.2, target: 1.5 },\n  { metric: 'TVPI', current: 2.85, benchmark: 2.1, target: 2.5 },\n];\n\nconst quarterlyMetrics = [\n  { quarter: 'Q1 2023', irr: 22.1, multiple: 2.1, deploymentRate: 45 },\n  { quarter: 'Q2 2023', irr: 24.8, multiple: 2.3, deploymentRate: 58 },\n  { quarter: 'Q3 2023', irr: 26.4, multiple: 2.6, deploymentRate: 65 },\n  { quarter: 'Q4 2023', irr: 28.4, multiple: 2.85, deploymentRate: 72 },\n];\n\nconst sectorPerformance = [\n  { sector: 'Fintech', irr: 32.1, multiple: 3.2, companies: 8, totalInvested: 28.5 },\n  { sector: 'Healthcare', irr: 28.7, multiple: 2.8, companies: 6, totalInvested: 22.1 },\n  { sector: 'SaaS', irr: 25.3, multiple: 2.4, companies: 7, totalInvested: 18.9 },\n  { sector: 'Enterprise', irr: 22.9, multiple: 2.1, companies: 3, totalInvested: 12.5 },\n];\n\nconst riskMetrics = [\n  { category: 'Market Risk', score: 7.2, benchmark: 6.5 },\n  { category: 'Concentration Risk', score: 5.8, benchmark: 7.0 },\n  { category: 'Liquidity Risk', score: 4.3, benchmark: 5.5 },\n  { category: 'Operational Risk', score: 6.1, benchmark: 6.2 },\n  { category: 'Technology Risk', score: 8.1, benchmark: 7.8 },\n];\n\nconst cohortComparison = [\n  { vintage: '2020', year1: 15, year2: 28, year3: 42, year4: 45 },\n  { vintage: '2021', year1: 12, year2: 24, year3: 35, year4: null },\n  { vintage: '2022', year1: 18, year2: 32, year3: null, year4: null },\n  { vintage: '2023', year1: 22, year2: null, year3: null, year4: null },\n];\n\nexport default function Analytics() {\n  const [timeRange, setTimeRange] = useState('12m');\n  const [selectedMetric, setSelectedMetric] = useState('irr');\n  const [activeTab, setActiveTab] = useState('performance');\n  const { currentFund, isLoading } = useFundContext();\n\n  if (isLoading) {\n    return (\n      <main className=\"flex-1 overflow-y-auto p-6 custom-scrollbar\">\n        <div className=\"animate-pulse space-y-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded-xl\"></div>\n            ))}\n          </div>\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"flex-1 overflow-y-auto p-6 custom-scrollbar\">\n      {/* Key Performance Indicators */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-sm font-medium\">Portfolio IRR</p>\n                <p className=\"text-2xl font-bold text-gray-800 mt-1\">28.4%</p>\n                <div className=\"flex items-center mt-2\">\n                  <TrendingUp className=\"h-4 w-4 text-green-500 mr-1\" />\n                  <span className=\"text-green-600 text-sm font-medium\">+3.9%</span>\n                </div>\n              </div>\n              <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"h-6 w-6 text-green-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-sm font-medium\">Risk-Adj. Return</p>\n                <p className=\"text-2xl font-bold text-gray-800 mt-1\">2.1</p>\n                <div className=\"flex items-center mt-2\">\n                  <TrendingUp className=\"h-4 w-4 text-blue-500 mr-1\" />\n                  <span className=\"text-blue-600 text-sm font-medium\">Sharpe Ratio</span>\n                </div>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center\">\n                <BarChart3 className=\"h-6 w-6 text-blue-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-sm font-medium\">Portfolio Beta</p>\n                <p className=\"text-2xl font-bold text-gray-800 mt-1\">0.87</p>\n                <div className=\"flex items-center mt-2\">\n                  <TrendingDown className=\"h-4 w-4 text-orange-500 mr-1\" />\n                  <span className=\"text-orange-600 text-sm font-medium\">Low volatility</span>\n                </div>\n              </div>\n              <div className=\"w-12 h-12 bg-orange-50 rounded-lg flex items-center justify-center\">\n                <Activity className=\"h-6 w-6 text-orange-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-sm font-medium\">Alpha Generation</p>\n                <p className=\"text-2xl font-bold text-gray-800 mt-1\">+4.7%</p>\n                <div className=\"flex items-center mt-2\">\n                  <Target className=\"h-4 w-4 text-cyan-500 mr-1\" />\n                  <span className=\"text-cyan-600 text-sm font-medium\">vs benchmark</span>\n                </div>\n              </div>\n              <div className=\"w-12 h-12 bg-cyan-50 rounded-lg flex items-center justify-center\">\n                <Target className=\"h-6 w-6 text-cyan-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Analytics Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <TabsList className=\"grid w-full max-w-md grid-cols-4\">\n            <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n            <TabsTrigger value=\"risk\">Risk</TabsTrigger>\n            <TabsTrigger value=\"benchmarks\">Benchmarks</TabsTrigger>\n            <TabsTrigger value=\"attribution\">Attribution</TabsTrigger>\n          </TabsList>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Select value={timeRange} onValueChange={setTimeRange}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"3m\">3 Months</SelectItem>\n                <SelectItem value=\"6m\">6 Months</SelectItem>\n                <SelectItem value=\"12m\">12 Months</SelectItem>\n                <SelectItem value=\"all\">All Time</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button variant=\"outline\" size=\"sm\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              Filter\n            </Button>\n            <Button size=\"sm\" className=\"povc-bg-accent\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n        </div>\n\n        <TabsContent value=\"performance\" className=\"space-y-6\">\n          {/* Engine-Powered Reserve Allocations */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"lg:col-span-1\">\n              <Suspense fallback={<ChartSkeleton />}>\n                <ReserveAllocationChart fundId={currentFund?.id || 1} />\n              </Suspense>\n            </div>\n            <div className=\"lg:col-span-1\">\n              <Suspense fallback={<ChartSkeleton />}>\n                <PacingTimelineChart />\n              </Suspense>\n            </div>\n          </div>\n\n          {/* Traditional Performance Charts */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-gray-800\">\n                  Performance vs Benchmarks\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ChartPlaceholder title=\"Performance vs Benchmarks Bar Chart\" />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-gray-800\">\n                  Quarterly Trends\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ChartPlaceholder title=\"Quarterly Trends Composed Chart\" />\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-gray-800\">\n                Sector Performance Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ChartPlaceholder title=\"Sector Performance Scatter Chart\" />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"risk\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-gray-800\">\n                  Risk Assessment Radar\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ChartPlaceholder title=\"Risk Assessment Radar Chart\" />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-gray-800\">\n                  Risk Metrics Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {riskMetrics.map((metric, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-800\">{metric.category}</p>\n                        <p className=\"text-sm text-gray-600\">Score: {metric.score}/10</p>\n                      </div>\n                      <div className={`px-3 py-1 rounded-full text-sm font-medium ${\n                        metric.score > metric.benchmark \n                          ? 'bg-red-50 text-red-700' \n                          : 'bg-green-50 text-green-700'\n                      }`}>\n                        {metric.score > metric.benchmark ? 'Above' : 'Below'} Benchmark\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"benchmarks\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-gray-800\">\n                Vintage Year Cohort Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ChartPlaceholder title=\"Vintage Year Cohort Line Chart\" />\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base font-semibold text-gray-800\">\n                  Peer Comparison\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Top Quartile:</span>\n                    <span className=\"font-medium text-green-600\">32%+ IRR</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Fund Position:</span>\n                    <span className=\"font-medium text-blue-600\">28.4% IRR</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Median:</span>\n                    <span className=\"font-medium text-gray-600\">24.5% IRR</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base font-semibold text-gray-800\">\n                  Industry Benchmarks\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">VC Average:</span>\n                    <span className=\"font-medium\">22.1% IRR</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Growth Equity:</span>\n                    <span className=\"font-medium\">18.5% IRR</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Public Markets:</span>\n                    <span className=\"font-medium\">11.2% IRR</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base font-semibold text-gray-800\">\n                  Risk Metrics\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Volatility:</span>\n                    <span className=\"font-medium\">15.2%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Max Drawdown:</span>\n                    <span className=\"font-medium text-red-600\">-8.5%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">VaR (95%):</span>\n                    <span className=\"font-medium\">-12.3%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"attribution\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold text-gray-800\">\n                Performance Attribution Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                <div>\n                  <h4 className=\"font-medium text-gray-800 mb-4\">Top Contributors</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-800\">TechCorp (Fintech)</p>\n                        <p className=\"text-sm text-gray-600\">Series B ΓåÆ C valuation</p>\n                      </div>\n                      <span className=\"font-bold text-green-600\">+4.2% IRR</span>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-800\">DataFlow (SaaS)</p>\n                        <p className=\"text-sm text-gray-600\">Revenue growth acceleration</p>\n                      </div>\n                      <span className=\"font-bold text-green-600\">+3.8% IRR</span>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-800\">HealthAI (Healthcare)</p>\n                        <p className=\"text-sm text-gray-600\">Regulatory approval milestone</p>\n                      </div>\n                      <span className=\"font-bold text-green-600\">+2.9% IRR</span>\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-gray-800 mb-4\">Key Detractors</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-red-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-800\">RetailTech Co</p>\n                        <p className=\"text-sm text-gray-600\">Market downturn impact</p>\n                      </div>\n                      <span className=\"font-bold text-red-600\">-1.2% IRR</span>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-red-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-800\">EnergyStart</p>\n                        <p className=\"text-sm text-gray-600\">Regulatory challenges</p>\n                      </div>\n                      <span className=\"font-bold text-red-600\">-0.8% IRR</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </main>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\cash-management.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\dashboard-modern.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'BarChart' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Bar' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'POVIcon' is defined but never used.","line":23,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":34,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":12},{"ruleId":"no-unused-vars","severity":2,"message":"'Activity' is defined but never used.","line":37,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":11}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { LineChart } from 'recharts/es6/chart/LineChart';\nimport { Line } from 'recharts/es6/cartesian/Line';\nimport { AreaChart } from 'recharts/es6/chart/AreaChart';\nimport { Area } from 'recharts/es6/cartesian/Area';\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { PieChart as RechartsPieChart } from 'recharts/es6/chart/PieChart';\nimport { Pie } from 'recharts/es6/polar/Pie';\nimport { Cell } from 'recharts/es6/component/Cell';\nimport React, { useState } from 'react';\nimport { useFundContext } from \"@/contexts/FundContext\";\nimport { PremiumCard } from \"@/components/ui/PremiumCard\";\nimport { POVBrandHeader, POVIcon } from \"@/components/ui/POVLogo\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  TrendingUp, \n  TrendingDown, \n  DollarSign, \n  Target, \n  Users, \n  Calendar,\n  PieChart,\n  BarChart3,\n  Activity,\n  Filter,\n  Download,\n  Eye,\n  Settings,\n  Plus\n} from \"lucide-react\";\n\nexport default function ModernDashboard() {\n  const { currentFund, isLoading } = useFundContext();\n  const [timeframe, setTimeframe] = useState('12m');\n  const [activeView, setActiveView] = useState('overview');\n\n  if (isLoading || !currentFund) {\n    return (\n      <div className=\"min-h-screen bg-pov-gray\">\n        <POVBrandHeader \n          title=\"Dashboard\"\n          subtitle=\"Real-time fund performance and portfolio analytics\"\n          variant=\"light\"\n        />\n        <div className=\"max-w-7xl mx-auto px-6 py-8\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-pov-white rounded-lg shadow-card\"></div>\n              ))}\n            </div>\n            <div className=\"h-96 bg-pov-white rounded-lg shadow-card\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Sample data - in real app this would come from API\n  const fundMetrics = {\n    totalCommitted: currentFund.size || 125000000,\n    totalInvested: 85000000,\n    totalValue: 240000000,\n    irr: 28.5,\n    moic: 2.82,\n    dpi: 0.85,\n    activeInvestments: 24,\n    exitedInvestments: 8,\n    deploymentRate: 68\n  };\n\n  const portfolioData = [\n    { month: 'Jan', deployed: 5.2, committed: 8.1 },\n    { month: 'Feb', deployed: 8.7, committed: 12.3 },\n    { month: 'Mar', deployed: 12.1, committed: 18.7 },\n    { month: 'Apr', deployed: 15.8, committed: 25.2 },\n    { month: 'May', deployed: 22.3, committed: 32.1 },\n    { month: 'Jun', deployed: 28.9, committed: 38.7 },\n    { month: 'Jul', deployed: 35.2, committed: 45.8 },\n    { month: 'Aug', deployed: 42.1, committed: 52.3 },\n    { month: 'Sep', deployed: 48.7, committed: 58.9 },\n    { month: 'Oct', deployed: 55.2, committed: 65.1 },\n    { month: 'Nov', deployed: 62.8, committed: 72.4 },\n    { month: 'Dec', deployed: 68.0, committed: 78.2 }\n  ];\n\n  const sectorData = [\n    { name: 'FinTech', value: 35, color: '#292929' },\n    { name: 'HealthTech', value: 28, color: '#E0D8D1' },\n    { name: 'Enterprise SaaS', value: 22, color: '#10B981' },\n    { name: 'Consumer', value: 15, color: '#F59E0B' }\n  ];\n\n  const performanceData = [\n    { quarter: 'Q1 23', value: 125000000, growth: 0 },\n    { quarter: 'Q2 23', value: 145000000, growth: 16 },\n    { quarter: 'Q3 23', value: 178000000, growth: 23 },\n    { quarter: 'Q4 23', value: 203000000, growth: 14 },\n    { quarter: 'Q1 24', value: 240000000, growth: 18 }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-slate-100\">\n      <POVBrandHeader\n        title=\"Dashboard\"\n        subtitle=\"Real-time fund performance and portfolio analytics\"\n        variant=\"light\"\n      />\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        \n        {/* Top Controls */}\n        <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8\">\n          <div className=\"flex items-center space-x-4\">\n            <Tabs value={activeView} onValueChange={setActiveView} className=\"w-full\">\n              <TabsList className=\"bg-pov-white border border-pov-gray\">\n                <TabsTrigger value=\"overview\" className=\"data-[state=active]:bg-pov-charcoal data-[state=active]:text-pov-white\">\n                  Overview\n                </TabsTrigger>\n                <TabsTrigger value=\"portfolio\" className=\"data-[state=active]:bg-pov-charcoal data-[state=active]:text-pov-white\">\n                  Portfolio\n                </TabsTrigger>\n                <TabsTrigger value=\"performance\" className=\"data-[state=active]:bg-pov-charcoal data-[state=active]:text-pov-white\">\n                  Performance\n                </TabsTrigger>\n              </TabsList>\n            </Tabs>\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            <Select value={timeframe} onValueChange={setTimeframe}>\n              <SelectTrigger className=\"w-32 bg-pov-white border-pov-gray\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"3m\">3 Months</SelectItem>\n                <SelectItem value=\"6m\">6 Months</SelectItem>\n                <SelectItem value=\"12m\">12 Months</SelectItem>\n                <SelectItem value=\"all\">All Time</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Button variant=\"outline\" size=\"sm\" className=\"border-pov-gray hover:bg-pov-charcoal hover:text-pov-white\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              Filter\n            </Button>\n            \n            <Button variant=\"outline\" size=\"sm\" className=\"border-pov-gray hover:bg-pov-charcoal hover:text-pov-white\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n        </div>\n\n        <Tabs value={activeView} className=\"space-y-8\">\n          \n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-8\">\n            \n            {/* Key Metrics Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <PremiumCard className=\"border-0 shadow-elevated hover:shadow-lg transition-all duration-300\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"p-2 bg-pov-charcoal/10 rounded-lg\">\n                    <DollarSign className=\"h-5 w-5 text-pov-charcoal\" />\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-pov-success border-pov-success/20 bg-pov-success/5\">\n                    +15.2%\n                  </Badge>\n                </div>\n                <div className=\"space-y-2\">\n                  <p className=\"font-poppins text-sm text-gray-600\">Total Value</p>\n                  <p className=\"font-inter font-bold text-3xl text-pov-charcoal\">\n                    ${(fundMetrics.totalValue / 1000000).toFixed(1)}M\n                  </p>\n                  <p className=\"font-mono text-xs text-gray-500\">\n                    {fundMetrics.moic.toFixed(2)}x MOIC\n                  </p>\n                </div>\n              </PremiumCard>\n\n              <PremiumCard className=\"border-0 shadow-elevated hover:shadow-lg transition-all duration-300\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"p-2 bg-pov-success/10 rounded-lg\">\n                    <TrendingUp className=\"h-5 w-5 text-pov-success\" />\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-pov-success border-pov-success/20 bg-pov-success/5\">\n                    {fundMetrics.irr}%\n                  </Badge>\n                </div>\n                <div className=\"space-y-2\">\n                  <p className=\"font-poppins text-sm text-gray-600\">IRR</p>\n                  <p className=\"font-inter font-bold text-3xl text-pov-charcoal\">\n                    {fundMetrics.irr}%\n                  </p>\n                  <p className=\"font-mono text-xs text-gray-500\">\n                    Net IRR to LPs\n                  </p>\n                </div>\n              </PremiumCard>\n\n              <PremiumCard className=\"border-0 shadow-elevated hover:shadow-lg transition-all duration-300\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"p-2 bg-pov-beige/50 rounded-lg\">\n                    <Target className=\"h-5 w-5 text-pov-charcoal\" />\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-pov-charcoal border-pov-beige bg-pov-beige/20\">\n                    {fundMetrics.deploymentRate}%\n                  </Badge>\n                </div>\n                <div className=\"space-y-2\">\n                  <p className=\"font-poppins text-sm text-gray-600\">Deployed</p>\n                  <p className=\"font-inter font-bold text-3xl text-pov-charcoal\">\n                    ${(fundMetrics.totalInvested / 1000000).toFixed(1)}M\n                  </p>\n                  <p className=\"font-mono text-xs text-gray-500\">\n                    of ${(fundMetrics.totalCommitted / 1000000).toFixed(1)}M committed\n                  </p>\n                </div>\n              </PremiumCard>\n\n              <PremiumCard className=\"border-0 shadow-elevated hover:shadow-lg transition-all duration-300\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"p-2 bg-pov-charcoal/10 rounded-lg\">\n                    <Users className=\"h-5 w-5 text-pov-charcoal\" />\n                  </div>\n                  <div className=\"flex items-center space-x-1 text-xs text-gray-500\">\n                    <span>{fundMetrics.exitedInvestments} exited</span>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <p className=\"font-poppins text-sm text-gray-600\">Portfolio</p>\n                  <p className=\"font-inter font-bold text-3xl text-pov-charcoal\">\n                    {fundMetrics.activeInvestments}\n                  </p>\n                  <p className=\"font-mono text-xs text-gray-500\">\n                    Active companies\n                  </p>\n                </div>\n              </PremiumCard>\n            </div>\n\n            {/* Charts Section */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              \n              {/* Portfolio Value Over Time */}\n              <PremiumCard \n                title=\"Portfolio Value Trend\"\n                subtitle=\"12-month performance trajectory\"\n                className=\"lg:col-span-2\"\n                headerActions={\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <Eye className=\"h-4 w-4\" />\n                  </Button>\n                }\n              >\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <AreaChart data={performanceData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E0D8D1\" opacity={0.3} />\n                      <XAxis dataKey=\"quarter\" stroke=\"#666\" fontSize={12} />\n                      <YAxis stroke=\"#666\" fontSize={12} tickFormatter={(value) => `$${value/1000000}M`} />\n                      <Tooltip \n                        formatter={(value: any) => [`$${(value/1000000).toFixed(1)}M`, 'Portfolio Value']}\n                        labelStyle={{color: '#292929'}}\n                        contentStyle={{\n                          backgroundColor: '#FFFFFF', \n                          border: '1px solid #E0D8D1',\n                          borderRadius: '8px',\n                          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.08)'\n                        }}\n                      />\n                      <Area \n                        type=\"monotone\" \n                        dataKey=\"value\" \n                        stroke=\"#292929\" \n                        fill=\"url(#gradient)\"\n                        strokeWidth={3}\n                      />\n                      <defs>\n                        <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                          <stop offset=\"0%\" stopColor=\"#292929\" stopOpacity={0.2}/>\n                          <stop offset=\"100%\" stopColor=\"#E0D8D1\" stopOpacity={0.1}/>\n                        </linearGradient>\n                      </defs>\n                    </AreaChart>\n                  </ResponsiveContainer>\n                </div>\n              </PremiumCard>\n\n              {/* Sector Allocation */}\n              <PremiumCard \n                title=\"Sector Allocation\"\n                subtitle=\"Portfolio concentration by sector\"\n                headerActions={\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <PieChart className=\"h-4 w-4\" />\n                  </Button>\n                }\n              >\n                <div className=\"h-80\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <RechartsPieChart>\n                      <Pie\n                        data={sectorData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius={60}\n                        outerRadius={100}\n                        paddingAngle={5}\n                        dataKey=\"value\"\n                      >\n                        {sectorData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip \n                        formatter={(value: any) => [`${value}%`, 'Allocation']}\n                        contentStyle={{\n                          backgroundColor: '#FFFFFF', \n                          border: '1px solid #E0D8D1',\n                          borderRadius: '8px'\n                        }}\n                      />\n                    </RechartsPieChart>\n                  </ResponsiveContainer>\n                </div>\n                <div className=\"grid grid-cols-2 gap-3 mt-4\">\n                  {sectorData.map((sector, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <div \n                        className=\"w-3 h-3 rounded-full\" \n                        style={{ backgroundColor: sector.color }}\n                      ></div>\n                      <span className=\"font-poppins text-sm text-gray-700\">{sector.name}</span>\n                      <span className=\"font-mono text-xs text-gray-500\">{sector.value}%</span>\n                    </div>\n                  ))}\n                </div>\n              </PremiumCard>\n            </div>\n          </TabsContent>\n\n          {/* Portfolio Tab */}\n          <TabsContent value=\"portfolio\" className=\"space-y-8\">\n            <PremiumCard \n              title=\"Capital Deployment\"\n              subtitle=\"Monthly deployment vs. commitment schedule\"\n              headerActions={\n                <div className=\"flex items-center space-x-2\">\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <Settings className=\"h-4 w-4\" />\n                  </Button>\n                  <Button size=\"sm\" className=\"bg-pov-charcoal hover:bg-pov-charcoal/90 text-pov-white\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Investment\n                  </Button>\n                </div>\n              }\n            >\n              <div className=\"h-96\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart data={portfolioData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E0D8D1\" opacity={0.3} />\n                    <XAxis dataKey=\"month\" stroke=\"#666\" fontSize={12} />\n                    <YAxis stroke=\"#666\" fontSize={12} tickFormatter={(value) => `$${value}M`} />\n                    <Tooltip \n                      formatter={(value: any, name: string) => [`$${value}M`, name === 'deployed' ? 'Deployed' : 'Committed']}\n                      contentStyle={{\n                        backgroundColor: '#FFFFFF', \n                        border: '1px solid #E0D8D1',\n                        borderRadius: '8px'\n                      }}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"committed\" \n                      stackId=\"1\"\n                      stroke=\"#E0D8D1\" \n                      fill=\"#E0D8D1\"\n                      fillOpacity={0.6}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"deployed\" \n                      stackId=\"1\"\n                      stroke=\"#292929\" \n                      fill=\"#292929\"\n                      fillOpacity={0.8}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </PremiumCard>\n          </TabsContent>\n\n          {/* Performance Tab */}\n          <TabsContent value=\"performance\" className=\"space-y-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <PremiumCard \n                title=\"DPI\"\n                className=\"text-center\"\n              >\n                <div className=\"space-y-2\">\n                  <div className=\"font-inter font-bold text-4xl text-pov-charcoal\">\n                    {fundMetrics.dpi.toFixed(2)}x\n                  </div>\n                  <p className=\"font-poppins text-sm text-gray-600\">\n                    Distributions to Paid-In\n                  </p>\n                  <Badge variant=\"outline\" className=\"text-pov-success border-pov-success/20 bg-pov-success/5\">\n                    +12.5% QoQ\n                  </Badge>\n                </div>\n              </PremiumCard>\n\n              <PremiumCard \n                title=\"TVPI\"\n                className=\"text-center\"\n              >\n                <div className=\"space-y-2\">\n                  <div className=\"font-inter font-bold text-4xl text-pov-charcoal\">\n                    {fundMetrics.moic.toFixed(2)}x\n                  </div>\n                  <p className=\"font-poppins text-sm text-gray-600\">\n                    Total Value to Paid-In\n                  </p>\n                  <Badge variant=\"outline\" className=\"text-pov-success border-pov-success/20 bg-pov-success/5\">\n                    +8.3% QoQ\n                  </Badge>\n                </div>\n              </PremiumCard>\n\n              <PremiumCard \n                title=\"Net IRR\"\n                className=\"text-center\"\n              >\n                <div className=\"space-y-2\">\n                  <div className=\"font-inter font-bold text-4xl text-pov-charcoal\">\n                    {fundMetrics.irr}%\n                  </div>\n                  <p className=\"font-poppins text-sm text-gray-600\">\n                    Internal Rate of Return\n                  </p>\n                  <Badge variant=\"outline\" className=\"text-pov-success border-pov-success/20 bg-pov-success/5\">\n                    Top Quartile\n                  </Badge>\n                </div>\n              </PremiumCard>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\design-system.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Building2' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":15,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":43}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState } from 'react';\nimport { WizardProgress } from \"@/components/wizard/WizardProgress\";\nimport { FinancialInput } from \"@/components/wizard/FinancialInput\";\nimport { PremiumCard } from \"@/components/ui/PremiumCard\";\nimport { PremiumSelect } from \"@/components/wizard/PremiumSelect\";\nimport { PremiumToggle } from \"@/components/wizard/PremiumToggle\";\nimport { Button } from \"@/components/ui/button\";\nimport { POVBrandHeader } from \"@/components/ui/POVLogo\";\nimport { BrandComplianceShowcase } from \"@/components/ui/BrandShowcase\";\nimport { Building2, TrendingUp, DollarSign, Users, Target } from 'lucide-react';\n\nexport default function DesignSystem() {\n  const [fundName, setFundName] = useState('Acme Ventures Fund I');\n  const [fundSize, setFundSize] = useState('100000000');\n  const [currency, setCurrency] = useState('USD');\n  const [isEvergreen, setIsEvergreen] = useState(false);\n  \n  const sampleSteps = [\n    { id: 'basics', label: 'Fund Basics', description: 'Name, currency, and structure', icon: '1' },\n    { id: 'capital', label: 'Capital Structure', description: 'LP/GP commitments', icon: '2' },\n    { id: 'strategy', label: 'Investment Strategy', description: 'Sectors and stages', icon: '3' },\n    { id: 'terms', label: 'Terms & Waterfall', description: 'Distribution terms', icon: '4' },\n    { id: 'review', label: 'Review', description: 'Final review', icon: 'Γ£ô' },\n  ];\n\n  const currencyOptions = [\n    { value: 'USD', label: 'United States Dollar ($)', description: 'Primary global reserve currency' },\n    { value: 'EUR', label: 'Euro (Γé¼)', description: 'European Union currency' },\n    { value: 'GBP', label: 'British Pound (┬ú)', description: 'United Kingdom currency' },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-slate-100\">\n      <POVBrandHeader\n        title=\"Design System\"\n        subtitle=\"Premium venture capital fund modeling platform with institutional-grade design standards\"\n        variant=\"light\"\n      />\n\n      {/* Wizard Progress Showcase */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <WizardProgress\n          steps={sampleSteps}\n          currentStep=\"strategy\"\n          completedSteps={['basics', 'capital']}\n        />\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-6xl mx-auto px-6 py-8 space-y-8\">\n        \n        {/* Hero Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <PremiumCard\n            title=\"Fund Metrics\"\n            subtitle=\"Real-time portfolio performance\"\n            variant=\"highlight\"\n            headerActions={<TrendingUp className=\"h-5 w-5 text-pov-success\" />}\n          >\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"font-mono text-2xl font-bold text-pov-charcoal\">$125M</div>\n                <div className=\"font-poppins text-sm text-gray-600\">Total Committed</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"font-mono text-2xl font-bold text-pov-success\">2.8x</div>\n                <div className=\"font-poppins text-sm text-gray-600\">Current MOIC</div>\n              </div>\n            </div>\n          </PremiumCard>\n\n          <PremiumCard\n            title=\"Portfolio Companies\"\n            subtitle=\"Active investments overview\"\n            headerActions={<Users className=\"h-5 w-5 text-pov-charcoal\" />}\n          >\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-poppins text-sm\">Active</span>\n                <span className=\"font-mono font-bold text-pov-charcoal\">24</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-poppins text-sm\">Exited</span>\n                <span className=\"font-mono font-bold text-pov-success\">8</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-poppins text-sm\">Written Off</span>\n                <span className=\"font-mono font-bold text-pov-error\">3</span>\n              </div>\n            </div>\n          </PremiumCard>\n\n          <PremiumCard\n            title=\"Capital Deployment\"\n            subtitle=\"Investment pacing analysis\"\n            headerActions={<Target className=\"h-5 w-5 text-pov-warning\" />}\n          >\n            <div className=\"space-y-3\">\n              <div className=\"w-full bg-pov-gray rounded-full h-2\">\n                <div className=\"bg-gradient-to-r from-pov-charcoal to-pov-beige h-2 rounded-full\" style={{ width: '68%' }}></div>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"font-poppins text-xs text-gray-600\">Deployed</span>\n                <span className=\"font-mono text-xs font-bold\">68%</span>\n              </div>\n            </div>\n          </PremiumCard>\n        </div>\n\n        {/* Form Components Showcase */}\n        <PremiumCard\n          title=\"Premium Form Components\"\n          subtitle=\"Enhanced input components with validation and styling\"\n          variant=\"default\"\n        >\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            <div className=\"space-y-6\">\n              <FinancialInput\n                label=\"Fund Name\"\n                value={fundName}\n                onChange={setFundName}\n                type=\"text\"\n                placeholder=\"Enter fund name\"\n                required\n                description=\"The official name of your venture capital fund\"\n              />\n              \n              <FinancialInput\n                label=\"Fund Size\"\n                value={fundSize}\n                onChange={setFundSize}\n                type=\"currency\"\n                placeholder=\"100000000\"\n                required\n                description=\"Total committed capital from all limited partners\"\n              />\n            </div>\n            \n            <div className=\"space-y-6\">\n              <PremiumSelect\n                label=\"Fund Currency\"\n                value={currency}\n                onChange={setCurrency}\n                options={currencyOptions}\n                placeholder=\"Select currency\"\n                required\n                description=\"Primary currency for fund operations\"\n              />\n              \n              <PremiumToggle\n                label=\"Evergreen Fund\"\n                description=\"Fund with no fixed end date, can invest indefinitely\"\n                checked={isEvergreen}\n                onChange={setIsEvergreen}\n              />\n            </div>\n          </div>\n        </PremiumCard>\n\n        {/* Button Showcase */}\n        <PremiumCard\n          title=\"Button Components\"\n          subtitle=\"Consistent button styling across the platform\"\n        >\n          <div className=\"flex flex-wrap gap-4\">\n            <Button className=\"bg-pov-charcoal hover:bg-pov-charcoal/90 text-pov-white\">\n              Primary Action\n            </Button>\n            <Button variant=\"outline\" className=\"border-pov-charcoal/20 hover:bg-pov-charcoal hover:text-pov-white\">\n              Secondary Action\n            </Button>\n            <Button variant=\"secondary\" className=\"bg-pov-beige text-pov-charcoal hover:bg-pov-beige/80\">\n              Tertiary Action\n            </Button>\n            <Button variant=\"ghost\" className=\"hover:bg-pov-beige/20 text-pov-charcoal\">\n              Ghost Button\n            </Button>\n          </div>\n        </PremiumCard>\n\n        {/* Typography Showcase */}\n        <PremiumCard\n          title=\"Typography System\"\n          subtitle=\"Consistent typography with Inter and Poppins fonts\"\n        >\n          <div className=\"space-y-6\">\n            <div>\n              <h1 className=\"font-inter font-bold text-4xl text-pov-charcoal mb-2\">Heading 1</h1>\n              <p className=\"font-poppins text-gray-600\">Large heading for main page titles</p>\n            </div>\n            <div>\n              <h2 className=\"font-inter font-bold text-3xl text-pov-charcoal mb-2\">Heading 2</h2>\n              <p className=\"font-poppins text-gray-600\">Section headers and important content</p>\n            </div>\n            <div>\n              <h3 className=\"font-inter font-bold text-2xl text-pov-charcoal mb-2\">Heading 3</h3>\n              <p className=\"font-poppins text-gray-600\">Subsection headers and card titles</p>\n            </div>\n            <div>\n              <p className=\"font-poppins text-base text-gray-700 mb-2\">Body Text</p>\n              <p className=\"font-poppins text-gray-600\">Main content and descriptions</p>\n            </div>\n            <div>\n              <p className=\"font-mono text-base text-pov-charcoal mb-2\">$125,000,000</p>\n              <p className=\"font-poppins text-gray-600\">Financial data and numeric values</p>\n            </div>\n          </div>\n        </PremiumCard>\n\n        {/* Brand Identity Showcase */}\n        <PremiumCard\n          title=\"Press On Ventures Brand Identity\"\n          subtitle=\"Official logo variations and brand applications\"\n        >\n          <div className=\"space-y-8\">\n            {/* Logo Variations */}\n            <div>\n              <h4 className=\"font-inter font-semibold text-lg text-pov-charcoal mb-6\">Logo Variations</h4>\n              {/* Logo and Icon Grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {/* Icon Variations */}\n                <div className=\"space-y-6\">\n                  <h5 className=\"font-inter font-semibold text-sm text-pov-charcoal\">Icon Only</h5>\n\n                  <div className=\"bg-pov-white border border-pov-gray rounded-lg p-6 text-center\">\n                    <img\n                      src=\"https://cdn.builder.io/api/v1/image/assets%2Fad9cb6f2f4a54f5aa9ea2c391202901f%2Fbe1ff0f489c346bb87e5a21a3de55ae4?format=webp&width=800\"\n                      alt=\"POV Icon - Dark\"\n                      className=\"h-12 w-12 mx-auto mb-3 object-contain\"\n                    />\n                    <p className=\"font-poppins text-xs text-gray-600\">Dark Icon</p>\n                  </div>\n\n                  <div className=\"bg-pov-beige rounded-lg p-6 text-center\">\n                    <img\n                      src=\"https://cdn.builder.io/api/v1/image/assets%2Fad9cb6f2f4a54f5aa9ea2c391202901f%2Fa02554ba930546fa8bb20213ec027712?format=webp&width=800\"\n                      alt=\"POV Icon - Light\"\n                      className=\"h-12 w-12 mx-auto mb-3 object-contain\"\n                    />\n                    <p className=\"font-poppins text-xs text-pov-charcoal/70\">Light Icon</p>\n                  </div>\n\n                  <div className=\"bg-pov-charcoal rounded-lg p-6 text-center\">\n                    <img\n                      src=\"https://cdn.builder.io/api/v1/image/assets%2Fad9cb6f2f4a54f5aa9ea2c391202901f%2F832e7518a4a94541bf981160d3e94afd?format=webp&width=800\"\n                      alt=\"POV Icon - White\"\n                      className=\"h-12 w-12 mx-auto mb-3 object-contain\"\n                    />\n                    <p className=\"font-poppins text-xs text-pov-white/80\">White Icon</p>\n                  </div>\n                </div>\n\n                {/* Full Logo Variations */}\n                <div className=\"md:col-span-2 space-y-6\">\n                  <h5 className=\"font-inter font-semibold text-sm text-pov-charcoal\">Full Logo</h5>\n\n                  <div className=\"bg-pov-white border border-pov-gray rounded-lg p-8 text-center\">\n                    <img\n                      src=\"https://cdn.builder.io/api/v1/image/assets%2Fad9cb6f2f4a54f5aa9ea2c391202901f%2F2e9c074662e8408c8bf0fd2e6f62254f?format=webp&width=800\"\n                      alt=\"POV Logo - Dark on Light\"\n                      className=\"h-12 mx-auto mb-3 object-contain\"\n                    />\n                    <p className=\"font-poppins text-sm text-gray-600\">Primary - Dark Logo on Light Background</p>\n                  </div>\n\n                  <div className=\"bg-pov-beige rounded-lg p-8 text-center\">\n                    <img\n                      src=\"https://cdn.builder.io/api/v1/image/assets%2Fad9cb6f2f4a54f5aa9ea2c391202901f%2Ff49ea40289bd4c9f935555b532cb6506?format=webp&width=800\"\n                      alt=\"POV Logo - Light on Beige\"\n                      className=\"h-12 mx-auto mb-3 object-contain\"\n                    />\n                    <p className=\"font-poppins text-sm text-pov-charcoal/80\">Secondary - Light Logo on Brand Background</p>\n                  </div>\n\n                  <div className=\"bg-pov-charcoal rounded-lg p-8 text-center\">\n                    <img\n                      src=\"https://cdn.builder.io/api/v1/image/assets%2Fad9cb6f2f4a54f5aa9ea2c391202901f%2Fb3de3760e5924b7caf12011c893cbadd?format=webp&width=800\"\n                      alt=\"POV Logo - White on Dark\"\n                      className=\"h-12 mx-auto mb-3 object-contain\"\n                    />\n                    <p className=\"font-poppins text-sm text-pov-white/80\">Inverse - White Logo on Dark Background</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </PremiumCard>\n\n        {/* Color Palette */}\n        <PremiumCard\n          title=\"Brand Color Palette\"\n          subtitle=\"Press On Ventures brand colors and their usage\"\n        >\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-pov-charcoal rounded-lg mx-auto mb-3 shadow-sm\"></div>\n              <h4 className=\"font-poppins font-medium text-sm text-pov-charcoal\">Charcoal</h4>\n              <p className=\"font-mono text-xs text-gray-600\">#292929</p>\n              <p className=\"font-poppins text-xs text-gray-500 mt-1\">Primary brand color</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-pov-beige rounded-lg mx-auto mb-3 shadow-sm\"></div>\n              <h4 className=\"font-poppins font-medium text-sm text-pov-charcoal\">Beige</h4>\n              <p className=\"font-mono text-xs text-gray-600\">#E0D8D1</p>\n              <p className=\"font-poppins text-xs text-gray-500 mt-1\">Secondary accent</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-pov-success rounded-lg mx-auto mb-3 shadow-sm\"></div>\n              <h4 className=\"font-poppins font-medium text-sm text-pov-charcoal\">Success</h4>\n              <p className=\"font-mono text-xs text-gray-600\">#10B981</p>\n              <p className=\"font-poppins text-xs text-gray-500 mt-1\">Positive metrics</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-pov-error rounded-lg mx-auto mb-3 shadow-sm\"></div>\n              <h4 className=\"font-poppins font-medium text-sm text-pov-charcoal\">Error</h4>\n              <p className=\"font-mono text-xs text-gray-600\">#EF4444</p>\n              <p className=\"font-poppins text-xs text-gray-500 mt-1\">Alerts & warnings</p>\n            </div>\n          </div>\n        </PremiumCard>\n\n        {/* Brand Compliance Showcase */}\n        <BrandComplianceShowcase />\n      </div>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\financial-modeling.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'projectionData' is assigned a value but never used.","line":25,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'cohortData' is assigned a value but never used.","line":33,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":17}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n// Chart libraries removed for bundle optimization\nconst ChartPlaceholder = ({ title, height = \"h-80\" }: { title: string; height?: string }) => (\n  <div className={`${height} bg-gray-50 rounded-lg flex flex-col items-center justify-center`}>\n    <div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mb-4\">\n      <Calculator className=\"h-8 w-8 text-gray-400\" />\n    </div>\n    <p className=\"text-gray-500 font-medium\">{title}</p>\n    <p className=\"text-gray-400 text-sm mt-1\">Chart placeholder - data available via API</p>\n  </div>\n);\nimport { useState } from \"react\";\nimport { Calculator, TrendingUp, DollarSign, Target } from \"lucide-react\";\nimport DualForecastDashboard from '@/components/dashboard/dual-forecast-dashboard';\nimport { ErrorBoundary } from '@/components/ui/error-boundary';\n\nconst projectionData = [\n  { year: '2024', investment: 25, exits: 0, nav: 125, irr: 15.2 },\n  { year: '2025', investment: 35, exits: 5, nav: 180, irr: 22.8 },\n  { year: '2026', investment: 20, exits: 15, nav: 220, irr: 28.5 },\n  { year: '2027', investment: 15, exits: 35, nav: 280, irr: 35.2 },\n  { year: '2028', investment: 5, exits: 45, nav: 320, irr: 38.7 },\n];\n\nconst cohortData = [\n  { cohort: '2020', invested: 45, currentValue: 125, projectedValue: 180, irr: 42.1 },\n  { cohort: '2021', invested: 38, currentValue: 89, projectedValue: 145, irr: 35.8 },\n  { cohort: '2022', invested: 32, currentValue: 55, projectedValue: 98, irr: 28.4 },\n  { cohort: '2023', invested: 28, currentValue: 35, projectedValue: 78, irr: 22.9 },\n];\n\nconst scenarioData = {\n  conservative: { totalReturns: 2.8, irr: 22.5, dpi: 1.8 },\n  base: { totalReturns: 3.5, irr: 28.4, dpi: 2.2 },\n  optimistic: { totalReturns: 4.8, irr: 35.7, dpi: 2.9 },\n};\n\nexport default function FinancialModeling() {\n  const [selectedScenario, setSelectedScenario] = useState('base');\n  const [selectedCohort, setSelectedCohort] = useState('all');\n\n  return (\n    <main className=\"flex-1 overflow-y-auto p-6 custom-scrollbar\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold\">Financial Modeling & Forecasting</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Advanced scenario planning with live fund performance data\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"forecast\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"forecast\">Live Forecasting</TabsTrigger>\n          <TabsTrigger value=\"modeling\">Scenario Modeling</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"forecast\">\n          <ErrorBoundary>\n            <DualForecastDashboard />\n          </ErrorBoundary>\n        </TabsContent>\n        \n        <TabsContent value=\"modeling\">\n      {/* Key Metrics Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-sm font-medium\">Projected IRR</p>\n                <p className=\"text-2xl font-bold text-gray-800 mt-1\">28.4%</p>\n                <p className=\"text-green-600 text-sm mt-1\">Above target</p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"h-6 w-6 text-green-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-sm font-medium\">Total Multiple</p>\n                <p className=\"text-2xl font-bold text-gray-800 mt-1\">3.5x</p>\n                <p className=\"text-green-600 text-sm mt-1\">Base case</p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center\">\n                <Calculator className=\"h-6 w-6 text-blue-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-sm font-medium\">DPI Target</p>\n                <p className=\"text-2xl font-bold text-gray-800 mt-1\">2.2x</p>\n                <p className=\"text-blue-600 text-sm mt-1\">Expected</p>\n              </div>\n              <div className=\"w-12 h-12 bg-cyan-50 rounded-lg flex items-center justify-center\">\n                <Target className=\"h-6 w-6 text-cyan-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-sm font-medium\">Reserve Ratio</p>\n                <p className=\"text-2xl font-bold text-gray-800 mt-1\">35%</p>\n                <p className=\"text-orange-600 text-sm mt-1\">Follow-on ready</p>\n              </div>\n              <div className=\"w-12 h-12 bg-orange-50 rounded-lg flex items-center justify-center\">\n                <DollarSign className=\"h-6 w-6 text-orange-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Fund Projection Model */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg font-semibold text-gray-800\">\n              Fund Projection Model\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ChartPlaceholder title=\"Fund Projection Model Area Chart\" />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg font-semibold text-gray-800\">\n                Cohort Analysis\n              </CardTitle>\n              <Select value={selectedCohort} onValueChange={setSelectedCohort}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Cohorts</SelectItem>\n                  <SelectItem value=\"2020\">2020</SelectItem>\n                  <SelectItem value=\"2021\">2021</SelectItem>\n                  <SelectItem value=\"2022\">2022</SelectItem>\n                  <SelectItem value=\"2023\">2023</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <ChartPlaceholder title=\"Cohort Analysis Bar Chart\" />\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Scenario Analysis */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-semibold text-gray-800\">\n              Scenario Analysis\n            </CardTitle>\n            <Select value={selectedScenario} onValueChange={setSelectedScenario}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"conservative\">Conservative</SelectItem>\n                <SelectItem value=\"base\">Base Case</SelectItem>\n                <SelectItem value=\"optimistic\">Optimistic</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {Object.entries(scenarioData).map(([scenario, metrics]) => (\n              <div \n                key={scenario}\n                className={`p-6 rounded-lg border-2 transition-colors ${\n                  selectedScenario === scenario \n                    ? 'border-blue-500 bg-blue-50' \n                    : 'border-gray-200 bg-gray-50'\n                }`}\n              >\n                <h4 className=\"font-semibold text-gray-800 capitalize mb-4\">{scenario}</h4>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Total Returns:</span>\n                    <span className=\"font-medium\">{metrics.totalReturns}x</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Net IRR:</span>\n                    <span className=\"font-medium\">{metrics.irr}%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">DPI:</span>\n                    <span className=\"font-medium\">{metrics.dpi}x</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Reserve Analysis */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-gray-800\">\n            Reserve Analysis & Follow-on Strategy\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-800\">Reserve Allocation</h4>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                  <span className=\"text-gray-700\">Follow-on Reserve:</span>\n                  <span className=\"font-semibold\">$35M (35%)</span>\n                </div>\n                <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                  <span className=\"text-gray-700\">Deployed Reserves:</span>\n                  <span className=\"font-semibold\">$12M (34%)</span>\n                </div>\n                <div className=\"flex justify-between items-center p-3 bg-green-50 rounded-lg\">\n                  <span className=\"text-gray-700\">Available Reserves:</span>\n                  <span className=\"font-semibold text-green-600\">$23M (66%)</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-800\">Follow-on Strategy</h4>\n              <div className=\"space-y-3 text-sm\">\n                <p className=\"text-gray-600\">\n                  ΓÇó Target 2-3x follow-on investments in top quartile performers\n                </p>\n                <p className=\"text-gray-600\">\n                  ΓÇó Reserve 35% of fund size for follow-on rounds\n                </p>\n                <p className=\"text-gray-600\">\n                  ΓÇó Maintain pro-rata rights in Series B+ rounds\n                </p>\n                <p className=\"text-gray-600\">\n                  ΓÇó Deploy reserves over 3-4 year period post initial investment\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n        </TabsContent>\n      </Tabs>\n    </main>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\forecasting.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used.","line":8,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'co' is defined but never used.","line":80,"column":59,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":61}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport InvestableCapitalSummary from \"@/components/forecasting/investable-capital-summary\";\nimport ProjectedPerformance from \"@/components/forecasting/projected-performance\";\nimport PortfolioInsights from \"@/components/forecasting/portfolio-insights\";\nimport AllocationModeling from \"@/components/forecasting/allocation-modeling\";\nimport PortfolioFlowChart from \"@/components/forecasting/portfolio-flow-chart\";\nimport { \n  TrendingUp, \n  BarChart3, \n  PieChart, \n  Target,\n  Calendar,\n  DollarSign\n} from \"lucide-react\";\n\nexport default function ForecastingPage() {\n  const { data: funds } = useQuery({\n    queryKey: [\"/api/funds\"],\n  });\n\n  // Use first fund or default data\n  const fund = (Array.isArray(funds) ? funds[0] : null) || {\n    id: \"1\",\n    name: \"Press On Ventures Fund I\",\n    size: 55000000,\n    investableCapital: 50000000\n  };\n\n  // Enhanced Deal-Level + Fund-Level Forecasting with Current Forecast Logic\n  const generateDealLevelForecasts = () => {\n    const portfolioCompanies = [\n      {\n        company: \"TechCorp\",\n        currentRound: \"Series A\",\n        historicalRounds: [\"Seed ($1.5M)\", \"Series A ($3M)\"],\n        projectedRounds: [\n          { round: \"Series B\", graduationRate: 0.7, checkSize: 1050000, ownership: \"4.2%ΓåÆ3.8%\" },\n          { round: \"Series C\", graduationRate: 0.65, checkSize: 2500000, ownership: \"3.8%ΓåÆ3.5%\" }\n        ],\n        riskWeightedScenarios: {\n          downside: { probability: 0.25, exitMOIC: 1.5, proceeds: 4200000 },\n          base: { probability: 0.50, exitMOIC: 3.0, proceeds: 15600000 },\n          upside: { probability: 0.25, exitMOIC: 8.0, proceeds: 45200000 }\n        },\n        expectedProceeds: 18200000, // Probability-weighted\n        expectedMOIC: 2.3,\n        reserveEfficiency: 3.5\n      },\n      {\n        company: \"FinanceAI\",\n        currentRound: \"Seed\",\n        historicalRounds: [\"Seed ($2M)\"],\n        projectedRounds: [\n          { round: \"Series A\", graduationRate: 0.5, checkSize: 800000, ownership: \"3.1%ΓåÆ2.8%\" },\n          { round: \"Series B\", graduationRate: 0.6, checkSize: 1800000, ownership: \"2.8%ΓåÆ2.5%\" }\n        ],\n        riskWeightedScenarios: {\n          downside: { probability: 0.30, exitMOIC: 1.2, proceeds: 2800000 },\n          base: { probability: 0.50, exitMOIC: 4.0, proceeds: 12800000 },\n          upside: { probability: 0.20, exitMOIC: 10.0, proceeds: 32000000 }\n        },\n        expectedProceeds: 14400000,\n        expectedMOIC: 4.5,\n        reserveEfficiency: 4.2\n      }\n    ];\n\n    // Fund-Level Aggregation from Deal-Level Forecasts\n    const totalExpectedProceeds = portfolioCompanies.reduce((sum, co) => sum + co.expectedProceeds, 0);\n    const totalInvested = portfolioCompanies.reduce((sum, co) => sum + 4500000, 0); // Sample invested amounts\n    const fundLevelMOIC = totalExpectedProceeds / totalInvested;\n    \n    return {\n      portfolioCompanies,\n      fundLevel: {\n        totalExpectedProceeds,\n        totalInvested,\n        fundLevelMOIC,\n        averageReserveEfficiency: portfolioCompanies.reduce((sum, co) => sum + co.reserveEfficiency, 0) / portfolioCompanies.length\n      },\n      investmentCycle: 36, // months\n      monthlyInvestmentRate: 1.2, // deals per month\n      totalDeals: 45 // total portfolio companies\n    };\n  };\n\n  const forecastingData = generateDealLevelForecasts();\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Fund Forecasting</h1>\n          <p className=\"text-muted-foreground\">\n            Portfolio construction modeling based on Tactyc methodology\n          </p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-lg px-4 py-2\">\n          {fund.name}\n        </Badge>\n      </div>\n\n      {/* Fund Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Fund Size</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">${(fund.size / 1000000).toFixed(0)}M</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Total committed capital\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Investable Capital</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">${(fund.investableCapital / 1000000).toFixed(0)}M</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Net of fees and expenses\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Investment Cycle</CardTitle>\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{forecastingData.investmentCycle} months</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Portfolio construction period\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Monthly Rate</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{forecastingData.monthlyInvestmentRate}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Deals per month\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Forecasting Interface */}\n      <Tabs defaultValue=\"capital\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"capital\" className=\"flex items-center space-x-2\">\n            <DollarSign className=\"h-4 w-4\" />\n            <span>Capital Summary</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"performance\" className=\"flex items-center space-x-2\">\n            <TrendingUp className=\"h-4 w-4\" />\n            <span>Performance</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"insights\" className=\"flex items-center space-x-2\">\n            <PieChart className=\"h-4 w-4\" />\n            <span>Portfolio Insights</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"flow-model\" className=\"flex items-center space-x-2\">\n            <BarChart3 className=\"h-4 w-4\" />\n            <span>Flow Model</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"allocation-model\" className=\"flex items-center space-x-2\">\n            <Target className=\"h-4 w-4\" />\n            <span>Allocation</span>\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Capital Summary Tab */}\n        <TabsContent value=\"capital\">\n          <InvestableCapitalSummary />\n        </TabsContent>\n\n        {/* Performance Tab */}\n        <TabsContent value=\"performance\">\n          <ProjectedPerformance />\n        </TabsContent>\n\n        {/* Portfolio Insights Tab */}\n        <TabsContent value=\"insights\">\n          <PortfolioInsights />\n        </TabsContent>\n\n        {/* Portfolio Flow Tab */}\n        <TabsContent value=\"flow-model\">\n          <PortfolioFlowChart \n            fundData={{\n              id: fund.id,\n              name: fund.name,\n              totalDeals: forecastingData.totalDeals,\n              monthlyInvestmentRate: forecastingData.monthlyInvestmentRate\n            }}\n          />\n        </TabsContent>\n\n        {/* Allocation Model Tab */}\n        <TabsContent value=\"allocation-model\">\n          <AllocationModeling \n            fundData={{\n              id: fund.id,\n              name: fund.name,\n              size: fund.size,\n              investableCapital: fund.investableCapital\n            }}\n          />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\fund-setup.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useRef' is defined but never used.","line":7,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'startCreateFund' is defined but never used.","line":8,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'cancelCreateFund' is defined but never used.","line":8,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'computeCreateFundHash' is defined but never used.","line":8,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":8,"endColumn":66},{"ruleId":"no-unused-vars","severity":2,"message":"'toast' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'Card' is defined but never used.","line":12,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'CardContent' is defined but never used.","line":12,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'CardHeader' is defined but never used.","line":12,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'CardTitle' is defined but never used.","line":12,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'Label' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'POVLogo' is defined but never used.","line":22,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'WizardSectionHeading' is defined but never used.","line":25,"column":27,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":47},{"ruleId":"no-unused-vars","severity":2,"message":"'WizardInputLabel' is defined but never used.","line":25,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":65},{"ruleId":"no-unused-vars","severity":2,"message":"'CheckCircle' is defined but never used.","line":32,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'Circle' is defined but never used.","line":32,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'X' is defined but never used.","line":32,"column":86,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":87},{"ruleId":"no-unused-vars","severity":2,"message":"'BudgetCreator' is defined but never used.","line":36,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'migrationCount' is assigned a value but never used.","line":464,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":464,"endColumn":25},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":471,"column":42,"nodeType":"Identifier","messageId":"undef","endLine":471,"endColumn":52}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'calculateFundLifeFromDates' and 'fundData'. Either include them or remove the dependency array.","line":283,"column":6,"nodeType":"ArrayExpression","endLine":283,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [calculateFundLifeFromDates, fundData]","fix":{"range":[11614,11616],"text":"[calculateFundLifeFromDates, fundData]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { mapAsync } from \"@/lib\";\nimport { useState, useEffect, useRef } from 'react';\nimport { startCreateFund, cancelCreateFund, computeCreateFundHash } from '@/services/funds';\nimport { toFundCreationPayload } from '@/core/reserves/adapter/toEngineGraduationRates';\nimport { toast } from '@/lib/toast';\nimport { useFundStore } from '@/stores/useFundStore';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { PremiumCard } from \"@/components/ui/PremiumCard\";\nimport { FinancialInput } from \"@/components/wizard/FinancialInput\";\nimport { POVLogo } from \"@/components/ui/POVLogo\";\nimport { WizardHeader } from \"@/components/wizard/WizardHeader\";\nimport { WizardProgressRedesigned } from \"@/components/wizard/WizardProgressRedesigned\";\nimport { WizardContainer, WizardSectionHeading, WizardInputLabel } from \"@/components/wizard/WizardContainer\";\n\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useFundContext } from \"@/contexts/FundContext\";\nimport { CheckCircle, Circle, ArrowRight, ArrowLeft, Building2, Plus, Edit2, Trash2, X } from \"lucide-react\";\nimport { resilientLimit } from \"@/utils/resilientLimit\";\n// Removed server import - use shared types or client-side metrics instead\n// import { asyncRepl } from \"../../../server/metrics\";\nimport BudgetCreator from \"@/components/budget/budget-creator\";\nimport InvestmentStrategyStep from \"./InvestmentStrategyStep\";\nimport ExitRecyclingStep from \"./ExitRecyclingStep\";\nimport WaterfallStep from \"./WaterfallStep\";\nimport type { InvestmentStrategy, ExitRecycling, Waterfall } from \"@shared/types\";\nimport type { Fund as DatabaseFund } from \"@shared/schema\";\nimport type { Fund } from \"@/contexts/FundContext\";\n\ntype WizardStep = 'fund-basics' | 'committed-capital' | 'investment-strategy' | 'exit-recycling' | 'waterfall' | 'advanced-settings' | 'review';\n\ninterface LPClass {\n  id: string;\n  name: string;\n  totalCommitment: number;\n  excludedFromManagementFees: boolean;\n  sideLetterProvisions?: string;\n}\n\ninterface CapitalCall {\n  id: string;\n  callNumber: number;\n  date: string;\n  percentage: number;\n  amounts: { [classId: string]: number };\n}\n\nconst WIZARD_STEPS: { id: WizardStep; label: string; description: string; icon: string }[] = [\n  { id: 'fund-basics', label: 'Fund Basics', description: 'Name, currency, and fund lifecycle', icon: '1' },\n  { id: 'committed-capital', label: 'Capital Structure', description: 'LP/GP commitments and capital calls', icon: '2' },\n  { id: 'investment-strategy', label: 'Investment Strategy', description: 'Stages, sectors, and allocations', icon: '3' },\n  { id: 'exit-recycling', label: 'Exit Recycling', description: 'Proceeds recycling configuration', icon: '4' },\n  { id: 'waterfall', label: 'Waterfall & Carry', description: 'Distribution terms and carry structure', icon: '5' },\n  { id: 'advanced-settings', label: 'Advanced Settings', description: 'Fund structure and expenses', icon: '6' },\n  { id: 'review', label: 'Review & Create', description: 'Final review and fund creation', icon: 'Γ£ô' },\n];\n\n// Helper function to convert database fund to context fund type\nconst convertDatabaseFundToContextFund = (dbFund: DatabaseFund): Fund => ({\n  id: dbFund.id,\n  name: dbFund.name,\n  size: parseFloat(dbFund.size || \"0\"),\n  managementFee: parseFloat(dbFund.managementFee || \"0\"),\n  carryPercentage: parseFloat(dbFund.carryPercentage || \"0\"),\n  vintageYear: dbFund.vintageYear,\n  deployedCapital: parseFloat(dbFund.deployedCapital || \"0\"),\n  status: dbFund.status,\n  createdAt: dbFund.createdAt?.toISOString() || new Date().toISOString(),\n  updatedAt: new Date().toISOString(), // API doesn't return updatedAt, so use current time\n});\n\nexport default function FundSetup() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { setCurrentFund } = useFundContext();\n  const [currentStep, setCurrentStep] = useState<WizardStep>('fund-basics');\n\n  // LP Class modal state\n  const [isLPClassModalOpen, setIsLPClassModalOpen] = useState(false);\n  const [editingLPClass, setEditingLPClass] = useState<LPClass | null>(null);\n  const [lpClassForm, setLPClassForm] = useState({\n    name: '',\n    totalCommitment: '',\n    excludedFromManagementFees: false,\n    sideLetterProvisions: ''\n  });\n  \n  const [fundData, setFundData] = useState({\n    // Fund Basics\n    name: \"\",\n    currency: \"USD\",\n    startDate: \"2023-04-15\",\n    endDate: \"2033-04-15\",\n    hasEndDate: true,\n    isEvergreen: false,\n    lifeYears: 10,\n    investmentHorizonYears: 5,\n    \n    // Committed Capital\n    totalCommittedCapital: \"100000000\",\n    gpCommitmentPercent: \"2\",\n    gpCommitment: \"2\",\n    gpCommitmentAmount: \"2000000\",\n    lpCommitmentAmount: \"98000000\",\n    // Investment Parameters\n    investmentStage: \"seed\",\n    followOnStrategy: \"maintain_ownership\",\n    checkSizeMin: \"100000\",\n    checkSizeMax: \"2000000\",\n    followOnRate: \"50\",\n    allocations: [\n      { id: 'alloc-1', name: 'Initial Investments', stage: 'seed', allocation: '60', sector: 'Generalist' },\n      { id: 'alloc-2', name: 'Follow-On', stage: 'series_a', allocation: '40', sector: 'Generalist' }\n    ],\n    \n    // Cashless GP Commit (Optional)\n    cashlessGPPercent: \"0\",\n    \n    // Capital Call Schedule\n    capitalCallSchedule: \"12\",\n    \n    // GP Commitment in Management Fees\n    includeGPInManagementFees: false,\n    \n    // Investment Strategy\n    investmentStrategy: {\n      stages: [\n        { id: 'stage-1', name: 'Seed', graduationRate: 30, exitRate: 20 },\n        { id: 'stage-2', name: 'Series A', graduationRate: 40, exitRate: 25 },\n        { id: 'stage-3', name: 'Series B+', graduationRate: 0, exitRate: 35 }\n      ],\n      sectorProfiles: [\n        { id: 'sector-1', name: 'FinTech', targetPercentage: 40, description: 'Financial technology companies' },\n        { id: 'sector-2', name: 'HealthTech', targetPercentage: 30, description: 'Healthcare technology companies' },\n        { id: 'sector-3', name: 'Enterprise SaaS', targetPercentage: 30, description: 'B2B software solutions' }\n      ],\n      allocations: [\n        { id: 'alloc-1', category: 'New Investments', percentage: 75, description: 'Fresh capital for new portfolio companies' },\n        { id: 'alloc-2', category: 'Reserves', percentage: 20, description: 'Follow-on investments for existing portfolio' },\n        { id: 'alloc-3', category: 'Operating Expenses', percentage: 5, description: 'Fund management and operations' }\n      ]\n    } as InvestmentStrategy,\n    \n    // Exit Recycling\n    exitRecycling: {\n      enabled: false,\n      recyclePercentage: 0,\n      recycleWindowMonths: 24,\n      restrictToSameSector: false,\n      restrictToSameStage: false\n    } as ExitRecycling,\n    \n    // Waterfall\n    waterfall: {\n      type: 'EUROPEAN' as const,\n      hurdle: 0.08, // 8%\n      catchUp: 0.08, // 8%\n      carryVesting: {\n        cliffYears: 0,\n        vestingYears: 4\n      }\n    } as Waterfall,\n    \n    // Advanced Settings\n    vehicleStructure: \"traditional_fund\", // traditional_fund or spv\n    \n    // Fees and Expenses\n    fundExpenses: [\n      { id: 'exp-1', name: 'Legal Fees', amount: '200000', timing: 'upfront', category: 'Legal Fees', monthlyAmount: '16667', startMonth: '1', endMonth: '12' },\n      { id: 'exp-2', name: 'Audit & Tax', amount: '50000', timing: 'annual', category: 'Audit & Tax', monthlyAmount: '4167', startMonth: '1', endMonth: '120' },\n      { id: 'exp-3', name: 'Administration', amount: '100000', timing: 'annual', category: 'Administration', monthlyAmount: '8333', startMonth: '1', endMonth: '120' }\n    ],\n    feeStructure: \"2.0\",\n    feeStepDown: false,\n    feeStepDownYear: \"5\",\n    feeStepDownRate: \"1.5\",\n    \n    // Exit Recycling Fields\n    exitRecyclingRate: \"50\",\n    exitRecyclingCap: \"100\",\n    exitRecyclingTerm: \"5\",\n    \n    // Waterfall Fields\n    waterfallType: \"EUROPEAN\",\n    \n    // Preferred Return\n    preferredReturn: false,\n    preferredReturnRate: \"8\",\n    \n    // Limited Partners\n    limitedPartners: [] as Array<{\n      id: string;\n      name: string;\n      investment: string;\n      feeProfile: string;\n      profitSplit: string;\n    }>,\n    \n    // Default values for fund creation\n    size: \"100000000\",\n    managementFee: \"2.0\",\n    carryPercentage: \"20\",\n    vintageYear: \"2023\",\n    fundLife: \"10\",\n    investmentPeriod: \"5\",\n    status: \"active\",\n    deployedCapital: 0,\n    showCommitmentSchedule: false,\n    lpCommitmentCloses: [\n      { month: 1, percentage: 50, calendarMonth: 'Jan 2024' },\n      { month: 2, percentage: 50, calendarMonth: 'Feb 2024' }\n    ],\n    lpClasses: [] as LPClass[],\n    capitalCalls: [] as CapitalCall[],\n    capitalCallFrequency: 'Quarterly'\n  });\n\n  const createFundMutation = useMutation<Fund, Error, any>({\n    mutationFn: async (data: any): Promise<Fund> => {\n      // Extract only the fields required by CompleteFundSetupSchema\n      const fundPayload = {\n        name: data.name,\n        size: parseFloat(data.size || data.totalCommittedCapital),\n        deployedCapital: 0,\n        managementFee: parseFloat(data.managementFee) / 100,\n        carryPercentage: parseFloat(data.carryPercentage) / 100,\n        vintageYear: parseInt(data.vintageYear),\n        isEvergreen: data.isEvergreen || false,\n        lifeYears: data.isEvergreen ? undefined : parseInt(data.lifeYears || data.fundLife || \"10\"),\n        investmentHorizonYears: parseInt(data.investmentHorizonYears || data.investmentPeriod || \"5\"),\n        investmentStrategy: data.investmentStrategy,\n        exitRecycling: data.exitRecycling,\n        waterfall: data.waterfall\n      };\n      \n      const response = await apiRequest('POST', '/api/funds', fundPayload);\n      const databaseFund = await response.json() as unknown as DatabaseFund;\n      return convertDatabaseFundToContextFund(databaseFund);\n    },\n    onSuccess: (newFund: Fund) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/funds'] });\n      setCurrentFund(newFund);\n      toast({\n        title: \"Fund Created Successfully\",\n        description: \"Your fund has been set up and you can now access all features.\",\n      });\n      setLocation('/dashboard');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Creating Fund\",\n        description: error.message || \"Failed to create fund. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const currentStepIndex = WIZARD_STEPS.findIndex(s => s.id === currentStep);\n\n  // Initialize fund life calculation on component mount\n  useEffect(() => {\n    if (fundData.hasEndDate && fundData.startDate && fundData.endDate) {\n      const updatedData = calculateFundLifeFromDates(fundData);\n      if (updatedData !== fundData) {\n        setFundData(updatedData);\n      }\n    }\n  }, []); // Empty dependency array to run only on mount\n\n  const handleInputChange = (field: string, value: string | boolean | number) => {\n    setFundData(prev => {\n      // Ensure proper type handling for boolean fields\n      let processedValue = value;\n      const booleanFields = ['hasEndDate', 'isEvergreen', 'includeGPInManagementFees', 'feeStepDown', 'preferredReturn'];\n      \n      if (booleanFields.includes(field)) {\n        processedValue = Boolean(value);\n      }\n      \n      const updated = { ...prev, [field]: processedValue };\n      \n      // Auto-calculate dependent fields\n      if (field === 'totalCommittedCapital' || field === 'gpCommitmentPercent') {\n        return updateCalculatedFields(updated);\n      }\n      \n      // Auto-calculate fund life when dates change\n      if (field === 'startDate' || field === 'endDate') {\n        return calculateFundLifeFromDates(updated);\n      }\n      \n      return updated;\n    });\n  };\n\n  const handleComplexDataChange = (field: string, value: any) => {\n    setFundData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleNext = () => {\n    const stepOrder: WizardStep[] = ['fund-basics', 'committed-capital', 'investment-strategy', 'exit-recycling', 'waterfall', 'advanced-settings', 'review'];\n    const currentIndex = stepOrder.indexOf(currentStep);\n    if (currentIndex < stepOrder.length - 1) {\n      setCurrentStep(stepOrder[currentIndex + 1]);\n    }\n  };\n\n  const handleBack = () => {\n    const stepOrder: WizardStep[] = ['fund-basics', 'committed-capital', 'investment-strategy', 'exit-recycling', 'waterfall', 'advanced-settings', 'review'];\n    const currentIndex = stepOrder.indexOf(currentStep);\n    if (currentIndex > 0) {\n      setCurrentStep(stepOrder[currentIndex - 1]);\n    }\n  };\n\n  const calculateFundLifeFromDates = (data: any) => {\n    if (data.startDate && data.endDate && data.hasEndDate) {\n      const startDate = new Date(data.startDate);\n      const endDate = new Date(data.endDate);\n      \n      if (endDate <= startDate) {\n        toast({\n          title: \"Invalid Date Range\",\n          description: \"Fund end date must be after the start date.\",\n          variant: \"destructive\",\n        });\n        return data;\n      }\n      \n      const diffInMs = endDate.getTime() - startDate.getTime();\n      const diffInYears = diffInMs / (1000 * 60 * 60 * 24 * 365.25);\n      const fundLifeYears = Math.round(diffInYears);\n      \n      return {\n        ...data,\n        lifeYears: fundLifeYears,\n        vintageYear: startDate.getFullYear().toString()\n      };\n    }\n    \n    return {\n      ...data,\n      vintageYear: data.startDate ? new Date(data.startDate).getFullYear().toString() : data.vintageYear\n    };\n  };\n\n  const updateCalculatedFields = (data: any) => {\n    const totalCommitted = parseFloat(data.totalCommittedCapital || \"0\");\n    const gpPercent = parseFloat(data.gpCommitmentPercent || \"0\");\n    const gpAmount = (totalCommitted * gpPercent / 100).toString();\n    const lpAmount = (totalCommitted - parseFloat(gpAmount)).toString();\n    \n    return {\n      ...data,\n      gpCommitmentAmount: gpAmount,\n      lpCommitmentAmount: lpAmount,\n      size: data.totalCommittedCapital,\n      vintageYear: new Date(data.startDate).getFullYear().toString()\n    };\n  };\n\n  const canSkipStep = () => {\n    return currentStep === 'advanced-settings'; // Only advanced settings can be skipped\n  };\n\n  // LP Class management functions\n  const resetLPClassForm = () => {\n    setLPClassForm({\n      name: '',\n      totalCommitment: '',\n      excludedFromManagementFees: false,\n      sideLetterProvisions: ''\n    });\n    setEditingLPClass(null);\n  };\n\n  const openAddLPClassModal = () => {\n    resetLPClassForm();\n    setIsLPClassModalOpen(true);\n  };\n\n  const openEditLPClassModal = (lpClass: LPClass) => {\n    setLPClassForm({\n      name: lpClass.name,\n      totalCommitment: lpClass.totalCommitment.toString(),\n      excludedFromManagementFees: lpClass.excludedFromManagementFees,\n      sideLetterProvisions: lpClass.sideLetterProvisions || ''\n    });\n    setEditingLPClass(lpClass);\n    setIsLPClassModalOpen(true);\n  };\n\n  const saveLPClass = () => {\n    const newClass: LPClass = {\n      id: editingLPClass?.id || `lp-class-${Date.now()}`,\n      name: lpClassForm.name,\n      totalCommitment: parseFloat(lpClassForm.totalCommitment) || 0,\n      excludedFromManagementFees: lpClassForm.excludedFromManagementFees,\n      sideLetterProvisions: lpClassForm.sideLetterProvisions\n    };\n\n    if (editingLPClass) {\n      // Update existing class\n      const updatedClasses = fundData.lpClasses.map(cls =>\n        cls.id === editingLPClass.id ? newClass : cls\n      );\n      setFundData(prev => ({ ...prev, lpClasses: updatedClasses }));\n    } else {\n      // Add new class\n      setFundData(prev => ({ ...prev, lpClasses: [...prev.lpClasses, newClass] }));\n    }\n\n    setIsLPClassModalOpen(false);\n    resetLPClassForm();\n  };\n\n  const deleteLPClass = (classId: string) => {\n    const updatedClasses = fundData.lpClasses.filter(cls => cls.id !== classId);\n    setFundData(prev => ({ ...prev, lpClasses: updatedClasses }));\n  };\n\n  // Calculate summary metrics\n  const calculateSummaryMetrics = () => {\n    const totalLPCommitment = fundData.lpClasses.reduce((sum, cls) => sum + cls.totalCommitment, 0);\n    const totalCommittedCapital = parseFloat(fundData.totalCommittedCapital.replace(/,/g, '')) || 0;\n    // Use the total committed capital from Fund Basics as the official fund size\n    const totalFundSize = totalCommittedCapital;\n    const excludedFromFees = fundData.lpClasses.filter(cls => cls.excludedFromManagementFees).length;\n    const includedInFees = fundData.lpClasses.filter(cls => !cls.excludedFromManagementFees).length;\n\n    return {\n      totalFundSize,\n      totalLPCommitment,\n      numberOfClasses: fundData.lpClasses.length,\n      excludedFromFees,\n      includedInFees\n    };\n  };\n\n  // refactor(async): Replace forEach with controlled concurrency + circuit breaker\n  const processPortfolioAllocations = async (allocations: any[]) => {\n    const limit = resilientLimit({ \n      concurrency: 3,      // Max 3 concurrent validations\n      maxFailures: 3,      // Circuit breaker after 3 failures\n      resetOnSuccess: true // Reset failure count on success\n    });\n    \n    // Batch increment counter for this operation\n    const migrationCount = 1; // Number of forEach patterns replaced in this function\n    \n    try {\n      const results = await Promise.all(\n        await mapAsync(allocations, allocation => \n          limit(async () => {\n            // Simulate async validation/processing\n            await new Promise(resolve => setTimeout(resolve, 50));\n            return {\n              ...allocation,\n              validated: true,\n              processedAt: new Date().toISOString()\n            };\n          }))\n      );\n      \n      // Track successful async forEach replacement\n      // asyncRepl.inc({ file: 'fund-setup.tsx' }, migrationCount); // Removed server dependency\n      \n      return results;\n    } catch (error) {\n      console.error('Portfolio allocation processing failed:', error);\n      throw error;\n    }\n  };\n\n  const [saving, setSaving] = useState(false);\n  \n  const handleSave = async () => {\n    if (saving) return; // UI re-entrancy guard\n    setSaving(true);\n    \n    try {\n      // Get current state from the fund store\n      const storeState = useFundStore.getState();\n      \n      // Create payload using the centralized adapter\n      const payload = toFundCreationPayload(storeState);\n      \n      // Process allocations with controlled concurrency if needed\n      if (fundData.allocations?.length) {\n        const processedAllocations = await processPortfolioAllocations(fundData.allocations);\n        payload.basics = { ...payload.basics, allocations: processedAllocations };\n      }\n      \n      // Use the new service with toast feedback and idempotency\n      const { createFundWithToast } = await import('@/services/funds');\n      // Fix type issue by using a proper options object\n      const fund = await createFundWithToast(payload, { reuseExisting: true });\n      \n      // Update context and navigate\n      setCurrentFund(fund as unknown as Fund);\n      queryClient.invalidateQueries({ queryKey: ['/api/funds'] });\n      setLocation('/dashboard');\n      \n    } catch (error: any) {\n      if (error?.name === 'AbortError') {\n        // UX-friendly: don't treat cancellations as failures\n        console.info('Save cancelled:', error.message);\n        return;\n      }\n      console.error('Fund creation failed:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const isFormValid = fundData.name && fundData.totalCommittedCapital && parseFloat(fundData.totalCommittedCapital) > 0;\n  const canProceed = currentStep === 'fund-basics' ? isFormValid : true;\n\n  const completedSteps = WIZARD_STEPS.slice(0, currentStepIndex).map(step => step.id);\n\n  return (\n    <div className=\"min-h-screen bg-slate-100 overflow-y-auto\">\n      {/* Header with Logo Lockup and Centered Title */}\n      <WizardHeader\n        title=\"Fund Construction Wizard\"\n        subtitle=\"Configure your venture capital fund with institutional-grade precision and professional standards\"\n      />\n\n      {/* Wizard Progress with Octagonal Icons */}\n      <WizardProgressRedesigned\n        steps={WIZARD_STEPS}\n        currentStep={currentStep}\n        completedSteps={completedSteps}\n      />\n\n      <div className=\"max-w-6xl mx-auto px-6 py-8 pb-32\">\n        <WizardContainer\n          title={WIZARD_STEPS[currentStepIndex].label}\n          subtitle={WIZARD_STEPS[currentStepIndex].description}\n          className=\"mb-8\"\n        >\n            {/* Fund Basics Step */}\n            {currentStep === 'fund-basics' && (\n              <div className=\"space-y-6\">\n                {/* Fund Name - Full Width */}\n                <div className=\"bg-white rounded-2xl shadow-sm p-6\">\n                  <div className=\"space-y-3\">\n                    <label className=\"font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-widest block\">\n                      Fund Name *\n                    </label>\n                    <Input\n                      value={fundData.name}\n                      onChange={(e) => handleInputChange('name', e.target.value)}\n                      placeholder=\"Enter your fund name\"\n                      className=\"h-12 border-beige-300 rounded-2xl focus:border-pov-charcoal transition-colors w-full\"\n                    />\n                    <p className=\"text-xs text-charcoal-500 font-poppins\">\n                      The official name of your venture capital fund\n                    </p>\n                  </div>\n                </div>\n\n                {/* Fund Timeline & Commitments - Re-architected */}\n                <div className=\"bg-white rounded-2xl shadow-sm\" style={{ padding: '16px' }}>\n                  {/* Section Heading */}\n                  <div className=\"mb-4\">\n                    <h3 className=\"font-inter font-bold\" style={{ fontSize: '20px', color: '#292929' }}>\n                      Fund Timeline & Commitments\n                    </h3>\n                    <div className=\"h-px bg-charcoal-400 w-full mt-2\"></div>\n                  </div>\n\n                  {/* Timeline Section - 2├ù2 Grid */}\n                  <div style={{ marginBottom: '16px' }}>\n                    <h4 className=\"font-poppins text-xs font-medium uppercase tracking-widest mb-3\" style={{ color: '#4A4A4A' }}>\n                      Timeline\n                    </h4>\n                    {/* Evergreen Toggle - Above the grid */}\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <label className=\"font-poppins text-xs font-medium uppercase tracking-widest\" style={{ color: '#4A4A4A' }}>\n                        Evergreen Fund?\n                      </label>\n                      <Switch\n                        checked={fundData.isEvergreen}\n                        onCheckedChange={(checked) => {\n                          handleInputChange('isEvergreen', checked);\n                          if (checked) {\n                            handleInputChange('hasEndDate', false);\n                            handleInputChange('endDate', '');\n                          }\n                        }}\n                        className=\"w-10 h-5 data-[state=checked]:bg-pov-charcoal\"\n                      />\n                      <span className=\"text-sm font-poppins text-charcoal-600\">\n                        {fundData.isEvergreen ? 'ON' : 'OFF'}\n                      </span>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2\" style={{ gap: '12px' }}>\n                      {/* Top Row */}\n                      <div className=\"space-y-3\">\n                        <label className=\"font-poppins text-xs font-medium uppercase tracking-widest block\" style={{ color: '#4A4A4A' }}>\n                          Fund Start Date\n                        </label>\n                        <Input\n                          type=\"date\"\n                          value={fundData.startDate}\n                          onChange={(e) => handleInputChange('startDate', e.target.value)}\n                          className=\"h-12 rounded-2xl w-full\"\n                          style={{ border: '1px solid #E0D8D1' }}\n                        />\n                      </div>\n\n                      <div className=\"space-y-3\">\n                        <label className=\"font-poppins text-xs font-medium uppercase tracking-widest block\" style={{ color: '#4A4A4A' }}>\n                          Fund End Date\n                        </label>\n                        <Input\n                          type=\"date\"\n                          value={fundData.endDate}\n                          onChange={(e) => handleInputChange('endDate', e.target.value)}\n                          disabled={fundData.isEvergreen}\n                          className={`h-12 rounded-2xl w-full ${\n                            fundData.isEvergreen ? 'bg-pov-gray text-charcoal-400 cursor-not-allowed' : ''\n                          }`}\n                          style={{ border: '1px solid #E0D8D1' }}\n                          min={fundData.startDate}\n                        />\n                      </div>\n\n                      {/* Bottom Row */}\n                      <div className=\"space-y-3\">\n                        <label className=\"font-poppins text-xs font-medium uppercase tracking-widest block\" style={{ color: '#4A4A4A' }}>\n                          Investment Horizon (Years)\n                        </label>\n                        <Input\n                          type=\"number\"\n                          min=\"1\"\n                          max={fundData.lifeYears || 20}\n                          value={fundData.investmentHorizonYears}\n                          onChange={(e) => handleInputChange('investmentHorizonYears', e.target.value)}\n                          placeholder=\"5\"\n                          className=\"h-12 rounded-2xl w-full\"\n                          style={{ border: '1px solid #E0D8D1' }}\n                        />\n                        <p className=\"text-xs text-charcoal-500 font-poppins\">\n                          Period for making new investments (typically 3-5 years)\n                        </p>\n                      </div>\n\n                      <div className=\"space-y-3\">\n                        <label className=\"font-poppins text-xs font-medium uppercase tracking-widest block\" style={{ color: '#4A4A4A' }}>\n                          Fund Term\n                        </label>\n                        <div className=\"h-12 rounded-2xl w-full bg-pov-gray flex items-center px-4\" style={{ border: '1px solid #E0D8D1' }}>\n                          <span className=\"text-charcoal-600 font-poppins text-sm\">\n                            {(() => {\n                              if (!fundData.startDate || !fundData.endDate || fundData.isEvergreen) {\n                                return fundData.isEvergreen ? 'Evergreen' : 'Set dates to calculate';\n                              }\n                              const start = new Date(fundData.startDate);\n                              const end = new Date(fundData.endDate);\n                              const years = Math.round((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24 * 365.25));\n                              return `${years} years`;\n                            })()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Commitments Section - 2├ù2 Grid */}\n                  <div style={{ marginBottom: '16px' }}>\n                    <h4 className=\"font-poppins text-xs font-medium uppercase tracking-widest mb-3\" style={{ color: '#4A4A4A' }}>\n                      Commitments\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2\" style={{ gap: '12px' }}>\n                      {/* Top Row */}\n                      <div className=\"space-y-3\">\n                        <label className=\"font-poppins text-xs font-medium uppercase tracking-widest block\" style={{ color: '#4A4A4A' }}>\n                          Total Committed Capital\n                        </label>\n                        <div className=\"relative\">\n                          <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-charcoal-600 font-medium\">$</span>\n                          <Input\n                            type=\"text\"\n                            value={fundData.totalCommittedCapital.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n                            onChange={(e) => {\n                              const value = e.target.value.replace(/,/g, '');\n                              handleInputChange('totalCommittedCapital', value);\n                            }}\n                            placeholder=\"100,000,000\"\n                            className=\"h-12 rounded-2xl w-full pl-8\"\n                            style={{ border: '1px solid #E0D8D1' }}\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-3\">\n                        <label className=\"font-poppins text-xs font-medium uppercase tracking-widest block\" style={{ color: '#4A4A4A' }}>\n                          Capital Call Frequency\n                        </label>\n                        <Select value={fundData.capitalCallFrequency} onValueChange={(value) => handleInputChange('capitalCallFrequency', value)}>\n                          <SelectTrigger className=\"h-12 rounded-2xl w-full\" style={{ border: '1px solid #E0D8D1' }}>\n                            <SelectValue placeholder=\"Select frequency\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Upfront\">Upfront</SelectItem>\n                            <SelectItem value=\"Quarterly\">Quarterly</SelectItem>\n                            <SelectItem value=\"Semi-Annually\">Semi-Annually</SelectItem>\n                            <SelectItem value=\"Annually\">Annually</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      {/* Bottom Row */}\n                      <div className=\"space-y-3\">\n                        <label className=\"font-poppins text-xs font-medium uppercase tracking-widest block\" style={{ color: '#4A4A4A' }}>\n                          GP Commitment %\n                        </label>\n                        <div className=\"relative\">\n                          <Input\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"100\"\n                            step=\"0.1\"\n                            value={fundData.gpCommitmentPercent}\n                            onChange={(e) => handleInputChange('gpCommitmentPercent', e.target.value)}\n                            placeholder=\"2.0\"\n                            className=\"h-12 rounded-2xl w-full pr-8\"\n                            style={{ border: '1px solid #E0D8D1' }}\n                          />\n                          <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-charcoal-600 font-medium\">%</span>\n                        </div>\n                        {/* Calculated Commitments */}\n                        {fundData.totalCommittedCapital && fundData.gpCommitmentPercent && (\n                          <div className=\"space-y-1 text-xs text-charcoal-600 font-poppins\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-2 h-2 rounded-full bg-charcoal-400\"></div>\n                              <span>GP Commitment is ${(() => {\n                                const total = parseFloat(fundData.totalCommittedCapital.replace(/,/g, '')) || 0;\n                                const gpPercent = parseFloat(fundData.gpCommitmentPercent) || 0;\n                                const gpAmount = (total * gpPercent / 100);\n                                return gpAmount.toLocaleString();\n                              })()}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-2 h-2 rounded-full bg-charcoal-400\"></div>\n                              <span>LP Commitment is ${(() => {\n                                const total = parseFloat(fundData.totalCommittedCapital.replace(/,/g, '')) || 0;\n                                const gpPercent = parseFloat(fundData.gpCommitmentPercent) || 0;\n                                const lpAmount = (total * (100 - gpPercent) / 100);\n                                return lpAmount.toLocaleString();\n                              })()}</span>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-3\">\n                        <label className=\"font-poppins text-xs font-medium uppercase tracking-widest block\" style={{ color: '#4A4A4A' }}>\n                          Cashless GP Contribution %\n                        </label>\n                        <div className=\"relative\">\n                          <Input\n                            type=\"number\"\n                            min=\"0\"\n                            max=\"100\"\n                            step=\"0.1\"\n                            value={fundData.cashlessGPPercent}\n                            onChange={(e) => handleInputChange('cashlessGPPercent', e.target.value)}\n                            placeholder=\"0\"\n                            className=\"h-12 rounded-2xl w-full pr-8\"\n                            style={{ border: '1px solid #E0D8D1' }}\n                          />\n                          <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-charcoal-600 font-medium\">%</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Optional Commitment Schedule */}\n                  <div>\n                    <button\n                      className=\"flex items-center space-x-2 mb-3 text-pov-charcoal hover:text-charcoal-700 transition-colors duration-200\"\n                      onClick={() => setFundData(prev => ({ ...prev, showCommitmentSchedule: !prev.showCommitmentSchedule }))}\n                    >\n                      <svg\n                        className={`w-4 h-4 transition-transform duration-200 ${\n                          fundData.showCommitmentSchedule ? 'rotate-90' : ''\n                        }`}\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                      </svg>\n                      <span className=\"font-poppins text-sm font-medium\">\n                        Optional: Define Timing of LP Commitment Closes\n                      </span>\n                    </button>\n\n                    {fundData.showCommitmentSchedule && (\n                      <div className=\"bg-slate-50 rounded-2xl p-4 border border-slate-200\">\n                        <div className=\"mb-4\">\n                          <h5 className=\"font-poppins text-xs font-medium uppercase tracking-widest mb-3\" style={{ color: '#4A4A4A' }}>\n                            LP Commitment Schedule\n                            <button className=\"ml-2 text-charcoal-500 hover:text-charcoal-700\">\n                              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                              </svg>\n                            </button>\n                          </h5>\n                        </div>\n\n                        <div className=\"overflow-x-auto\">\n                          <table className=\"w-full\">\n                            <thead>\n                              <tr className=\"border-b border-slate-300\">\n                                <th className=\"text-left py-2 px-3 font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-wider\">Month</th>\n                                <th className=\"text-left py-2 px-3 font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-wider\">Calendar Month</th>\n                                <th className=\"text-left py-2 px-3 font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-wider\">% of this LP's Entire Commitment</th>\n                                <th className=\"text-left py-2 px-3 font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-wider\">Amount Committed</th>\n                                <th className=\"w-8\"></th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {(fundData.lpCommitmentCloses || [{ month: 1, percentage: 50, calendarMonth: 'Jan 2024' }, { month: 2, percentage: 50, calendarMonth: 'Feb 2024' }]).map((close, index) => (\n                                <tr key={index} className=\"border-b border-slate-200\">\n                                  <td className=\"py-3 px-3\">\n                                    <Input\n                                      type=\"number\"\n                                      value={close.month || index + 1}\n                                      className=\"w-16 h-8 text-sm rounded-lg\"\n                                      style={{ border: '1px solid #E0D8D1' }}\n                                      readOnly\n                                    />\n                                  </td>\n                                  <td className=\"py-3 px-3\">\n                                    <span className=\"text-sm text-charcoal-600 font-poppins\">\n                                      {close.calendarMonth || `Jan 202${4 + index}`}\n                                    </span>\n                                  </td>\n                                  <td className=\"py-3 px-3\">\n                                    <div className=\"flex items-center space-x-2\">\n                                      <Input\n                                        type=\"number\"\n                                        value={close.percentage || 50}\n                                        onChange={(e) => {\n                                          const newCloses = [...(fundData.lpCommitmentCloses || [{ month: 1, percentage: 50, calendarMonth: 'Jan 2024' }, { month: 2, percentage: 50, calendarMonth: 'Feb 2024' }])];\n                                          newCloses[index] = { ...newCloses[index], percentage: parseInt(e.target.value) || 0 };\n                                          handleComplexDataChange('lpCommitmentCloses', newCloses);\n                                        }}\n                                        className=\"w-20 h-8 text-sm rounded-lg\"\n                                        style={{ border: '1px solid #E0D8D1' }}\n                                      />\n                                      <span className=\"text-sm text-charcoal-600\">%</span>\n                                    </div>\n                                  </td>\n                                  <td className=\"py-3 px-3\">\n                                    <button className=\"px-3 py-1 text-sm text-blue-600 border border-blue-600 rounded-lg hover:bg-blue-50 transition-colors font-poppins\">\n                                      Enter Amount\n                                    </button>\n                                  </td>\n                                  <td className=\"py-3 px-3\">\n                                    {index > 0 && (\n                                      <button className=\"text-red-500 hover:text-red-700\">\n                                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                                        </svg>\n                                      </button>\n                                    )}\n                                  </td>\n                                </tr>\n                              ))}\n                            </tbody>\n                          </table>\n                        </div>\n\n                        <div className=\"mt-4\">\n                          <button className=\"px-4 py-2 bg-slate-200 hover:bg-slate-300 text-pov-charcoal text-sm font-poppins font-medium rounded-lg transition-all duration-200\">\n                            Add Close\n                          </button>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Capital Structure Step */}\n            {currentStep === 'committed-capital' && (\n              <div className=\"space-y-6\">\n                {/* Summary Metrics Cards */}\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  {(() => {\n                    const metrics = calculateSummaryMetrics();\n                    return (\n                      <>\n                        <PremiumCard className=\"p-4\">\n                          <div className=\"text-center\">\n                            <h3 className=\"font-inter font-bold text-2xl text-pov-charcoal\">\n                              ${metrics.totalFundSize.toLocaleString()}\n                            </h3>\n                            <p className=\"text-sm text-charcoal-600 font-poppins\">Total Fund Size</p>\n                          </div>\n                        </PremiumCard>\n                        <PremiumCard className=\"p-4\">\n                          <div className=\"text-center\">\n                            <h3 className=\"font-inter font-bold text-2xl text-pov-charcoal\">\n                              {metrics.numberOfClasses}\n                            </h3>\n                            <p className=\"text-sm text-charcoal-600 font-poppins\">LP Classes</p>\n                          </div>\n                        </PremiumCard>\n                        <PremiumCard className=\"p-4\">\n                          <div className=\"text-center\">\n                            <h3 className=\"font-inter font-bold text-2xl text-pov-charcoal\">\n                              {metrics.excludedFromFees}\n                            </h3>\n                            <p className=\"text-sm text-charcoal-600 font-poppins\">Excluded from Fees</p>\n                          </div>\n                        </PremiumCard>\n                        <PremiumCard className=\"p-4\">\n                          <div className=\"text-center\">\n                            <h3 className=\"font-inter font-bold text-2xl text-pov-charcoal\">\n                              {metrics.includedInFees}\n                            </h3>\n                            <p className=\"text-sm text-charcoal-600 font-poppins\">Included in Fees</p>\n                          </div>\n                        </PremiumCard>\n                      </>\n                    );\n                  })()}\n                </div>\n\n                {/* LP Classes Management Section */}\n                <PremiumCard\n                  title=\"LP Classes\"\n                  className=\"p-6\"\n                  headerActions={\n                    <Button\n                      onClick={openAddLPClassModal}\n                      className=\"flex items-center space-x-2 bg-pov-charcoal hover:bg-pov-charcoal/90 text-white rounded-2xl h-10 px-4 transition-all duration-200\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                      <span className=\"font-poppins font-medium\">Add LP Class</span>\n                    </Button>\n                  }\n                >\n                  {/* LP Classes Table */}\n                  {fundData.lpClasses.length > 0 ? (\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b border-charcoal-200\">\n                            <th className=\"text-left py-3 px-3 font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-wider\">Class</th>\n                            <th className=\"text-left py-3 px-3 font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-wider\">LP Commitment</th>\n                            <th className=\"text-left py-3 px-3 font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-wider\">Commit %</th>\n                            <th className=\"text-left py-3 px-3 font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-wider\">Fee Status</th>\n                            <th className=\"text-left py-3 px-3 font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-wider\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {fundData.lpClasses.map((lpClass) => {\n                            const totalCommittedCapital = parseFloat(fundData.totalCommittedCapital.replace(/,/g, '')) || 0;\n                            const commitPercent = totalCommittedCapital > 0 ? ((lpClass.totalCommitment / totalCommittedCapital) * 100).toFixed(2) : '0.00';\n                            return (\n                              <tr key={lpClass.id} className=\"border-b border-charcoal-100\">\n                                <td className=\"py-3 px-3 font-poppins text-sm text-charcoal-700\">{lpClass.name}</td>\n                                <td className=\"py-3 px-3 font-poppins text-sm text-charcoal-700\">${lpClass.totalCommitment.toLocaleString()}</td>\n                                <td className=\"py-3 px-3 font-poppins text-sm text-charcoal-700\">{commitPercent}%</td>\n                                <td className=\"py-3 px-3 font-poppins text-sm text-charcoal-700\">\n                                  <span className={`px-2 py-1 rounded-full text-xs ${\n                                    lpClass.excludedFromManagementFees\n                                      ? 'bg-amber-100 text-amber-800'\n                                      : 'bg-green-100 text-green-800'\n                                  }`}>\n                                    {lpClass.excludedFromManagementFees ? 'Excluded' : 'Included'}\n                                  </span>\n                                </td>\n                                <td className=\"py-3 px-3\">\n                                  <div className=\"flex space-x-2\">\n                                    <button\n                                      onClick={() => openEditLPClassModal(lpClass)}\n                                      className=\"text-blue-600 hover:text-blue-800\"\n                                    >\n                                      <Edit2 className=\"w-4 h-4\" />\n                                    </button>\n                                    <button\n                                      onClick={() => deleteLPClass(lpClass.id)}\n                                      className=\"text-red-600 hover:text-red-800\"\n                                    >\n                                      <Trash2 className=\"w-4 h-4\" />\n                                    </button>\n                                  </div>\n                                </td>\n                              </tr>\n                            );\n                          })}\n                          {/* Footer Row with Totals */}\n                          <tr className=\"bg-slate-50 border-t-2 border-charcoal-300\">\n                            <td className=\"py-3 px-3 font-poppins text-sm font-medium text-charcoal-700\">Totals</td>\n                            <td className=\"py-3 px-3 font-poppins text-sm font-medium text-charcoal-700\">\n                              ${fundData.lpClasses.reduce((sum, cls) => sum + cls.totalCommitment, 0).toLocaleString()}\n                            </td>\n                            <td className=\"py-3 px-3 font-poppins text-sm font-medium text-charcoal-700\">\n                              100.00%\n                            </td>\n                            <td className=\"py-3 px-3 font-poppins text-sm font-medium text-charcoal-700\">\n                              {calculateSummaryMetrics().excludedFromFees}E / {calculateSummaryMetrics().includedInFees}I\n                            </td>\n                            <td className=\"py-3 px-3\"></td>\n                          </tr>\n                        </tbody>\n                      </table>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-12 text-charcoal-500\">\n                      <Building2 className=\"w-12 h-12 mx-auto mb-4 text-charcoal-300\" />\n                      <p className=\"font-poppins text-lg mb-2\">No LP Classes Yet</p>\n                      <p className=\"font-poppins text-sm\">Add your first LP class to get started</p>\n                    </div>\n                  )}\n                </PremiumCard>\n\n                {/* GP Commitment Section */}\n                <PremiumCard title=\"GP Commitment\" className=\"p-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-3\">\n                      <label className=\"font-poppins text-xs font-medium uppercase tracking-widest block\" style={{ color: '#4A4A4A' }}>\n                        GP Commitment %\n                      </label>\n                      <div className=\"relative\">\n                        <Input\n                          type=\"number\"\n                          min=\"0\"\n                          max=\"100\"\n                          step=\"0.1\"\n                          value={fundData.gpCommitmentPercent}\n                          onChange={(e) => handleInputChange('gpCommitmentPercent', e.target.value)}\n                          placeholder=\"2.0\"\n                          className=\"h-12 rounded-2xl w-full pr-8\"\n                          style={{ border: '1px solid #E0D8D1' }}\n                        />\n                        <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-charcoal-600 font-medium\">%</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-3\">\n                      <label className=\"font-poppins text-xs font-medium uppercase tracking-widest block\" style={{ color: '#4A4A4A' }}>\n                        GP Commitment Amount\n                      </label>\n                      <div className=\"h-12 rounded-2xl w-full bg-pov-gray flex items-center px-4\" style={{ border: '1px solid #E0D8D1' }}>\n                        <span className=\"text-charcoal-600 font-poppins text-sm\">\n                          ${(() => {\n                            const totalCommittedCapital = parseFloat(fundData.totalCommittedCapital.replace(/,/g, '')) || 0;\n                            const gpPercent = parseFloat(fundData.gpCommitmentPercent) || 0;\n                            const gpAmount = (totalCommittedCapital * gpPercent / 100);\n                            return gpAmount.toLocaleString();\n                          })()}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </PremiumCard>\n\n                {/* Capital Call Schedule Builder */}\n                <PremiumCard title=\"Capital Call Schedule\" className=\"p-6\">\n                  <div className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-3\">\n                        <label className=\"font-poppins text-xs font-medium uppercase tracking-widest block\" style={{ color: '#4A4A4A' }}>\n                          Call Frequency\n                        </label>\n                        <Select\n                          value={fundData.capitalCallFrequency}\n                          onValueChange={(value) => handleInputChange('capitalCallFrequency', value)}\n                        >\n                          <SelectTrigger className=\"h-12 rounded-2xl w-full\" style={{ border: '1px solid #E0D8D1' }}>\n                            <SelectValue placeholder=\"Select frequency\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Quarterly\">Quarterly</SelectItem>\n                            <SelectItem value=\"Semi-Annual\">Semi-Annual</SelectItem>\n                            <SelectItem value=\"Annual\">Annual</SelectItem>\n                            <SelectItem value=\"As Needed\">As Needed</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    {fundData.capitalCallFrequency !== 'As Needed' && (\n                      <div className=\"bg-slate-50 rounded-2xl p-4 border border-slate-200\">\n                        <h5 className=\"font-poppins text-xs font-medium uppercase tracking-widest mb-3\" style={{ color: '#4A4A4A' }}>\n                          Projected Call Schedule\n                        </h5>\n                        <div className=\"text-center py-8 text-charcoal-500\">\n                          <p className=\"font-poppins text-sm\">Capital call schedule will be generated based on frequency and LP classes</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </PremiumCard>\n              </div>\n            )}\n\n            {/* Investment Strategy Step */}\n            {currentStep === 'investment-strategy' && (\n              <InvestmentStrategyStep />\n            )}\n\n            {/* Exit Recycling Step */}\n            {currentStep === 'exit-recycling' && (\n              <ExitRecyclingStep\n                data={fundData.exitRecycling}\n                onChange={(data) => handleComplexDataChange('exitRecycling', data)}\n              />\n            )}\n\n            {/* Waterfall Step */}\n            {currentStep === 'waterfall' && (\n              <WaterfallStep\n                data={fundData.waterfall}\n                onChange={(data) => handleComplexDataChange('waterfall', data)}\n              />\n            )}\n\n            {/* Advanced Settings Step */}\n            {currentStep === 'advanced-settings' && (\n              <div className=\"space-y-6\">\n                <div className=\"bg-white rounded-2xl shadow-sm p-6\">\n                  <div className=\"space-y-3\">\n                    <label className=\"font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-widest block\">\n                      Vehicle Structure\n                    </label>\n                    <select\n                      value={fundData.vehicleStructure}\n                      onChange={(e) => handleInputChange('vehicleStructure', e.target.value)}\n                      className=\"h-12 border-beige-300 rounded-2xl focus:border-pov-charcoal transition-colors w-full px-3\"\n                    >\n                      <option value=\"traditional_fund\">Traditional Fund</option>\n                      <option value=\"spv\">Special Purpose Vehicle</option>\n                    </select>\n                  </div>\n                </div>\n\n                <div className=\"bg-white rounded-2xl shadow-sm p-6\">\n                  <div className=\"space-y-3\">\n                    <label className=\"font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-widest block\">\n                      Management Fee Structure\n                    </label>\n                    <div className=\"relative\">\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"5\"\n                        step=\"0.1\"\n                        value={fundData.feeStructure}\n                        onChange={(e) => handleInputChange('feeStructure', e.target.value)}\n                        placeholder=\"2.0\"\n                        className=\"h-12 rounded-2xl w-full pr-8\"\n                        style={{ border: '1px solid #E0D8D1' }}\n                      />\n                      <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-charcoal-600 font-medium\">%</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Review Step */}\n            {currentStep === 'review' && (\n              <div className=\"space-y-6\">\n                <div className=\"bg-white rounded-2xl shadow-sm p-6\">\n                  <h3 className=\"font-inter font-bold text-xl text-pov-charcoal mb-4\">Fund Summary</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-widest\">Fund Name</label>\n                      <p className=\"text-lg font-medium text-charcoal-700\">{fundData.name}</p>\n                    </div>\n                    <div>\n                      <label className=\"font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-widest\">Total Size</label>\n                      <p className=\"text-lg font-medium text-charcoal-700\">${parseFloat(fundData.totalCommittedCapital.replace(/,/g, '')).toLocaleString()}</p>\n                    </div>\n                    <div>\n                      <label className=\"font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-widest\">Management Fee</label>\n                      <p className=\"text-lg font-medium text-charcoal-700\">{fundData.feeStructure}%</p>\n                    </div>\n                    <div>\n                      <label className=\"font-poppins text-xs font-medium text-charcoal-600 uppercase tracking-widest\">Investment Strategy</label>\n                      <p className=\"text-lg font-medium text-charcoal-700\">{fundData.investmentStrategy.stages.length} stages defined</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n        </WizardContainer>\n\n        {/* LP Class Modal */}\n        <Dialog open={isLPClassModalOpen} onOpenChange={setIsLPClassModalOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"font-inter font-bold text-xl text-pov-charcoal\">\n                {editingLPClass ? 'Edit LP Class' : 'Add New LP Class'}\n              </DialogTitle>\n            </DialogHeader>\n\n            <div className=\"space-y-6 py-4\">\n              <div className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <label className=\"font-poppins text-xs font-medium uppercase tracking-widest block\" style={{ color: '#4A4A4A' }}>\n                    Class Name *\n                  </label>\n                  <Input\n                    type=\"text\"\n                    value={lpClassForm.name}\n                    onChange={(e) => setLPClassForm(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"e.g., Class A - Strategic Partners\"\n                    className=\"h-12 rounded-2xl w-full\"\n                    style={{ border: '1px solid #E0D8D1' }}\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <label className=\"font-poppins text-xs font-medium uppercase tracking-widest block\" style={{ color: '#4A4A4A' }}>\n                    Total Commitment *\n                  </label>\n                  <FinancialInput\n                    label=\"\"\n                    value={lpClassForm.totalCommitment}\n                    onChange={(value) => setLPClassForm(prev => ({ ...prev, totalCommitment: value }))}\n                    type=\"currency\"\n                    placeholder=\"50000000\"\n                    className=\"h-12 rounded-2xl\"\n                  />\n                  {/* Show commitment percentage */}\n                  {lpClassForm.totalCommitment && (\n                    <p className=\"text-xs text-charcoal-500 font-poppins\">\n                      {(() => {\n                        const currentCommitment = parseFloat(lpClassForm.totalCommitment) || 0;\n                        const totalCommittedCapital = parseFloat(fundData.totalCommittedCapital.replace(/,/g, '')) || 0;\n                        const commitPercent = totalCommittedCapital > 0 ? ((currentCommitment / totalCommittedCapital) * 100).toFixed(2) : '0.00';\n                        return `${commitPercent}% of total committed capital`;\n                      })()}\n                    </p>\n                  )}\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <label className=\"font-poppins text-xs font-medium uppercase tracking-widest\" style={{ color: '#4A4A4A' }}>\n                      Excluded from Management Fees\n                    </label>\n                    <Switch\n                      checked={lpClassForm.excludedFromManagementFees}\n                      onCheckedChange={(checked) => setLPClassForm(prev => ({ ...prev, excludedFromManagementFees: checked }))}\n                      className=\"w-10 h-5 data-[state=checked]:bg-pov-charcoal\"\n                    />\n                  </div>\n                  <p className=\"text-xs text-charcoal-500 font-poppins\">\n                    {lpClassForm.excludedFromManagementFees\n                      ? 'This LP class will not pay management fees'\n                      : 'This LP class will pay standard management fees'\n                    }\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <label className=\"font-poppins text-xs font-medium uppercase tracking-widest block\" style={{ color: '#4A4A4A' }}>\n                  Side Letter Provisions (Optional)\n                </label>\n                <Textarea\n                  value={lpClassForm.sideLetterProvisions}\n                  onChange={(e) => setLPClassForm(prev => ({ ...prev, sideLetterProvisions: e.target.value }))}\n                  placeholder=\"Enter any special provisions, fee arrangements, or terms specific to this LP class...\"\n                  className=\"min-h-[100px] rounded-2xl\"\n                  style={{ border: '1px solid #E0D8D1' }}\n                />\n              </div>\n            </div>\n\n            <DialogFooter className=\"space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsLPClassModalOpen(false)}\n                className=\"border-charcoal-300 text-charcoal-600 hover:bg-charcoal-50\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={saveLPClass}\n                disabled={!lpClassForm.name || !lpClassForm.totalCommitment}\n                className=\"bg-pov-charcoal hover:bg-pov-charcoal/90 text-white\"\n              >\n                {editingLPClass ? 'Update Class' : 'Add Class'}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* Sticky Footer Bar */}\n        <div className=\"fixed bottom-0 left-0 right-0 bg-charcoal-100 border-t border-charcoal-200 shadow-lg z-50\">\n          <div className=\"max-w-6xl mx-auto px-6 py-4\">\n            <div className=\"flex justify-between items-center\">\n              {/* Left side - Step indicator and Save draft */}\n              <div className=\"flex items-center space-x-6\">\n                <span className=\"text-charcoal-600 font-poppins text-sm font-medium\">\n                  Step {currentStepIndex + 1} of {WIZARD_STEPS.length}\n                </span>\n                <button className=\"text-charcoal-500 hover:text-pov-charcoal text-sm font-poppins transition-colors duration-200\">\n                  Save draft\n                </button>\n              </div>\n\n              {/* Right side - Navigation buttons */}\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={handleBack}\n                  disabled={currentStep === 'fund-basics'}\n                  className=\"flex items-center space-x-2 border border-pov-charcoal text-pov-charcoal hover:bg-pov-charcoal hover:text-white rounded-2xl h-12 px-6 transition-all duration-200 font-poppins font-medium\"\n                >\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  <span>Back</span>\n                </Button>\n\n                {canSkipStep() && currentStep !== 'review' && (\n                  <Button\n                    variant=\"ghost\"\n                    onClick={handleNext}\n                    className=\"text-charcoal-500 hover:text-pov-charcoal hover:bg-pov-beige/20 transition-all duration-200 font-poppins font-medium rounded-2xl h-12 px-6\"\n                  >\n                    Skip for now\n                  </Button>\n                )}\n\n                {currentStep !== 'review' ? (\n                  <Button\n                    onClick={handleNext}\n                    disabled={!canProceed}\n                    className=\"flex items-center space-x-2 bg-pov-charcoal hover:bg-gradient-to-r hover:from-pov-charcoal hover:to-pov-beige text-white rounded-2xl h-12 px-8 shadow-elevated hover:shadow-lg transition-all duration-200 disabled:opacity-50 font-poppins font-medium\"\n                  >\n                    <span>Next</span>\n                    <ArrowRight className=\"h-4 w-4\" />\n                  </Button>\n                ) : (\n                  <Button\n                    onClick={handleSave}\n                    disabled={createFundMutation.isPending}\n                    className=\"bg-pov-charcoal hover:bg-gradient-to-r hover:from-pov-charcoal hover:to-pov-beige text-white rounded-2xl h-12 px-8 shadow-elevated hover:shadow-lg transition-all duration-200 font-poppins font-medium\"\n                  >\n                    {createFundMutation.isPending ? (\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                        <span>Creating Fund...</span>\n                      </div>\n                    ) : (\n                      \"Create Fund & Continue\"\n                    )}\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\investment-detail.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useFundContext' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'CapTableCalculator' is defined but never used.","line":30,"column":8,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute , Link } from \"wouter\";\nimport { useFundContext } from \"@/contexts/FundContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns/format\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  ArrowLeft, Edit3, Plus, Calendar, DollarSign, TrendingUp, \n  Target, Building, MapPin, Tag, Users, BarChart3, TrendingDown, Calculator \n} from \"lucide-react\";\nimport LiquidationPreferencesDialog from \"@/components/investments/liquidation-preferences-dialog\";\nimport PerformanceCaseTabs from \"@/components/investments/performance-case-tabs\";\nimport CapTableCalculator from \"@/components/cap-table/cap-table-calculator\";\nimport CapTableIntegration from \"@/components/investments/cap-table-integration\";\n\nconst roundSchema = z.object({\n  name: z.string().min(1, \"Round name is required\"),\n  date: z.string().min(1, \"Date is required\"),\n  valuation: z.string().min(1, \"Valuation is required\"),\n  amount: z.string().min(1, \"Amount is required\"),\n  ownership: z.string().min(1, \"Ownership is required\"),\n  leadInvestor: z.string().optional(),\n  status: z.string().default(\"completed\"),\n  type: z.string().default(\"equity\")\n});\n\nconst performanceCaseSchema = z.object({\n  name: z.string().min(1, \"Case name is required\"),\n  exitValuation: z.string().min(1, \"Exit valuation is required\"),\n  exitDate: z.string().min(1, \"Exit date is required\"),\n  probability: z.string().min(1, \"Probability is required\"),\n  type: z.string().default(\"exit\"),\n  description: z.string().optional()\n});\n\ntype RoundData = z.infer<typeof roundSchema>;\ntype PerformanceCaseData = z.infer<typeof performanceCaseSchema>;\n\ninterface Investment {\n  id: number;\n  name: string;\n  geography: string;\n  sector: string;\n  stage: string;\n  amount: number;\n  investmentDate: string;\n  ownershipPercentage: number;\n  valuationAtInvestment: number;\n  leadInvestor?: string;\n  rounds?: any[];\n  performanceCases?: any[];\n}\n\nexport default function InvestmentDetail() {\n  const [, params] = useRoute(\"/investments/:id\");\n  const investmentId = params?.id ? parseInt(params.id) : null;\n  const queryClient = useQueryClient();\n  const [showRoundDialog, setShowRoundDialog] = useState(false);\n  const [showCaseDialog, setShowCaseDialog] = useState(false);\n  const [showLiqPrefsDialog, setShowLiqPrefsDialog] = useState(false);\n  const [selectedPerformanceCase, setSelectedPerformanceCase] = useState<any>(null);\n  const [showCapTableCalculator, setShowCapTableCalculator] = useState(false);\n\n  const { data: investment, isLoading } = useQuery<Investment>({\n    queryKey: ['/api/investments', investmentId],\n    enabled: !!investmentId\n  });\n\n  const addRoundMutation = useMutation({\n    mutationFn: (data: RoundData) => \n      apiRequest('POST', `/api/investments/${investmentId}/rounds`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/investments', investmentId] });\n      setShowRoundDialog(false);\n      roundForm.reset();\n    }\n  });\n\n  const addCaseMutation = useMutation({\n    mutationFn: (data: PerformanceCaseData) => \n      apiRequest('POST', `/api/investments/${investmentId}/cases`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/investments', investmentId] });\n      setShowCaseDialog(false);\n      caseForm.reset();\n    }\n  });\n\n  const roundForm = useForm<RoundData>({\n    resolver: zodResolver(roundSchema),\n    defaultValues: {\n      name: \"\",\n      date: \"\",\n      valuation: \"\",\n      amount: \"\",\n      ownership: \"\",\n      leadInvestor: \"\",\n      status: \"completed\",\n      type: \"equity\"\n    }\n  });\n\n  const caseForm = useForm<PerformanceCaseData>({\n    resolver: zodResolver(performanceCaseSchema),\n    defaultValues: {\n      name: \"\",\n      exitValuation: \"\",\n      exitDate: \"\",\n      probability: \"\",\n      type: \"exit\",\n      description: \"\"\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!investment) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold\">Investment Not Found</h2>\n          <p className=\"text-muted-foreground mt-2\">The requested investment could not be found.</p>\n          <Link href=\"/investments\">\n            <Button className=\"mt-4\">Back to Investments</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 space-y-6 p-8 overflow-auto\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/investments\">\n            <Button variant=\"outline\" size=\"sm\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">{investment.name}</h1>\n            <p className=\"text-muted-foreground\">{investment.geography} ΓÇó {investment.sector}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" onClick={() => window.open('/cap-tables', '_blank')}>\n            <Calculator className=\"h-4 w-4 mr-2\" />\n            Cap Table\n          </Button>\n          <Badge variant=\"secondary\" className=\"text-sm\">\n            {investment.stage}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Investment Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Investment Amount</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">${(investment.amount / 1000000).toFixed(1)}M</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {format(new Date(investment.investmentDate), 'MMM dd, yyyy')}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Ownership</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{investment.ownershipPercentage}%</div>\n            <p className=\"text-xs text-muted-foreground\">Equity stake</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Entry Valuation</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">${(investment.valuationAtInvestment / 1000000).toFixed(1)}M</div>\n            <p className=\"text-xs text-muted-foreground\">Post-money</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Current Status</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">Active</div>\n            <p className=\"text-xs text-muted-foreground\">Portfolio company</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Tabs */}\n      <Tabs defaultValue=\"rounds\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"rounds\">Investment Rounds</TabsTrigger>\n          <TabsTrigger value=\"performance\">Performance Cases</TabsTrigger>\n          <TabsTrigger value=\"cap-table\">Cap Table</TabsTrigger>\n          <TabsTrigger value=\"future\">Future</TabsTrigger>\n          <TabsTrigger value=\"details\">Investment Details</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"rounds\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-lg font-medium\">Investment Rounds</h3>\n              <p className=\"text-sm text-muted-foreground\">Track all rounds for this investment</p>\n            </div>\n            <Dialog open={showRoundDialog} onOpenChange={setShowRoundDialog}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Add Round\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Add Investment Round</DialogTitle>\n                  <DialogDescription>\n                    Add a new funding round for this investment\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...roundForm}>\n                  <form onSubmit={roundForm.handleSubmit((data) => addRoundMutation.mutate(data))} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={roundForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Round Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., Series B\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={roundForm.control}\n                        name=\"date\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Date</FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={roundForm.control}\n                        name=\"valuation\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Valuation ($)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., 50000000\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={roundForm.control}\n                        name=\"amount\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Round Amount ($)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., 10000000\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={roundForm.control}\n                        name=\"ownership\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Our Ownership (%)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., 12.5\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={roundForm.control}\n                        name=\"leadInvestor\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Lead Investor</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., Acme Capital\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={roundForm.control}\n                        name=\"status\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Status</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select status\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"completed\">Completed</SelectItem>\n                                <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                                <SelectItem value=\"planned\">Planned</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={roundForm.control}\n                        name=\"type\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Type</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Select type\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"equity\">Equity</SelectItem>\n                                <SelectItem value=\"convertible\">Convertible</SelectItem>\n                                <SelectItem value=\"safe\">SAFE</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"flex justify-end space-x-3 pt-4\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setShowRoundDialog(false)}>\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={addRoundMutation.isPending}>\n                        {addRoundMutation.isPending ? \"Adding...\" : \"Add Round\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <div className=\"space-y-4\">\n            {investment.rounds && investment.rounds.length > 0 ? (\n              investment.rounds.map((round: any) => (\n                <Card key={round.id}>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <CardTitle className=\"text-lg\">{round.name}</CardTitle>\n                        <CardDescription>\n                          {format(new Date(round.date), 'MMM dd, yyyy')} ΓÇó {round.leadInvestor}\n                        </CardDescription>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant={round.status === 'completed' ? 'default' : 'secondary'}>\n                          {round.status}\n                        </Badge>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Edit3 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Investment: ${(round.amount / 1000000).toFixed(1)}M</span>\n                        {round.status === 'projected' && (\n                          <span className=\"text-muted-foreground\">Reserved: ${(round.amount / 1000000).toFixed(1)}M</span>\n                        )}\n                        <span className=\"text-muted-foreground\">Round: ${((round.valuation * 0.3) / 1000000).toFixed(1)}M</span>\n                        <span className=\"text-muted-foreground\">Pre-Money: ${((round.valuation - round.amount) / 1000000).toFixed(1)}M</span>\n                        <span className=\"text-muted-foreground\">Post-Money: ${(round.valuation / 1000000).toFixed(1)}M</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">MOIC: 1.00x</span>\n                        <span className=\"text-muted-foreground\">IRR: -</span>\n                        <span className=\"text-muted-foreground\">FMV: ${(round.valuation / 1000000).toFixed(1)}M</span>\n                        <span className=\"text-muted-foreground\">Ownership: {round.ownership}%</span>\n                        <span className=\"text-muted-foreground\">Return the Fund: $0.0mm</span>\n                      </div>\n                      <div className=\"flex space-x-2 pt-2\">\n                        <Button size=\"sm\" variant=\"outline\">\n                          <Edit3 className=\"mr-1 h-3 w-3\" />\n                          Edit\n                        </Button>\n                        <Button size=\"sm\" className=\"povc-bg-primary text-white hover:bg-blue-700\">\n                          <Plus className=\"mr-1 h-3 w-3\" />\n                          Add\n                        </Button>\n                        {round.status === 'projected' && (\n                          <Button size=\"sm\" variant=\"outline\" className=\"text-blue-600 border-blue-600\">\n                            Pro-Rata\n                          </Button>\n                        )}\n                      </div>\n                      {round.status === 'projected' && round.stage === 'Series B' && (\n                        <div className=\"pt-2 border-t\">\n                          <p className=\"text-xs text-muted-foreground\">\n                            Projected - 65% graduation rate\n                          </p>\n                        </div>\n                      )}\n                      {round.status === 'completed' && round.stage === 'Seed' && (\n                        <div className=\"pt-2 border-t\">\n                          <p className=\"text-xs text-muted-foreground\">\n                            Co-investors in this round were YCombinator, a16z and Macdonald Ventures\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              <Card className=\"text-center py-8\">\n                <CardContent>\n                  <Calendar className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No rounds added yet</p>\n                  <Button \n                    onClick={() => setShowRoundDialog(true)} \n                    className=\"mt-4\"\n                    variant=\"outline\"\n                  >\n                    Add First Round\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"performance\" className=\"space-y-4\">\n          <PerformanceCaseTabs \n            investment={{\n              id: investmentId?.toString() || \"\",\n              company: investment?.name || \"\",\n              amount: investment?.amount || 0\n            }}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"performance-legacy\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-lg font-medium\">Performance Cases (Legacy)</h3>\n              <p className=\"text-sm text-muted-foreground\">Model different exit scenarios</p>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button \n                variant=\"outline\"\n                onClick={() => setShowLiqPrefsDialog(true)}\n                className=\"flex items-center space-x-2\"\n              >\n                <TrendingDown className=\"h-4 w-4\" />\n                <span>Liq Prefs</span>\n              </Button>\n              <Dialog open={showCaseDialog} onOpenChange={setShowCaseDialog}>\n                <DialogTrigger asChild>\n                  <Button>\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Add Case\n                  </Button>\n                </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Add Performance Case</DialogTitle>\n                  <DialogDescription>\n                    Model a potential exit scenario for this investment\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...caseForm}>\n                  <form onSubmit={caseForm.handleSubmit((data) => addCaseMutation.mutate(data))} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={caseForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Case Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., Bull Case\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={caseForm.control}\n                        name=\"probability\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Probability (%)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., 30\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={caseForm.control}\n                        name=\"exitValuation\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Exit Valuation ($)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., 500000000\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={caseForm.control}\n                        name=\"exitDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Expected Exit Date</FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={caseForm.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Describe the scenario and assumptions...\" \n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end space-x-3 pt-4\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => setShowCaseDialog(false)}>\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={addCaseMutation.isPending}>\n                        {addCaseMutation.isPending ? \"Adding...\" : \"Add Case\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            {investment.performanceCases && investment.performanceCases.length > 0 ? (\n              investment.performanceCases.map((performanceCase: any) => (\n                <Card key={performanceCase.id}>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <CardTitle className=\"text-lg\">{performanceCase.name}</CardTitle>\n                        <CardDescription>\n                          Expected exit: {format(new Date(performanceCase.exitDate), 'MMM dd, yyyy')}\n                        </CardDescription>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant=\"outline\">{performanceCase.probability}% probability</Badge>\n                        {performanceCase.hasLiqPrefs && (\n                          <Badge variant=\"destructive\" className=\"text-xs\">Liq Prefs Active</Badge>\n                        )}\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedPerformanceCase(performanceCase);\n                            setShowLiqPrefsDialog(true);\n                          }}\n                        >\n                          <TrendingDown className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Edit3 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Exit Valuation</p>\n                        <p className=\"font-medium\">${(performanceCase.exitValuation / 1000000).toFixed(1)}M</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Expected Multiple</p>\n                        <p className=\"font-medium\">\n                          {(performanceCase.exitValuation / investment.valuationAtInvestment).toFixed(1)}x\n                        </p>\n                      </div>\n                    </div>\n                    {performanceCase.description && (\n                      <div className=\"mt-3 pt-3 border-t\">\n                        <p className=\"text-sm text-muted-foreground\">{performanceCase.description}</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              <Card className=\"text-center py-8\">\n                <CardContent>\n                  <TrendingUp className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">No performance cases added yet</p>\n                  <Button \n                    onClick={() => setShowCaseDialog(true)} \n                    className=\"mt-4\"\n                    variant=\"outline\"\n                  >\n                    Add First Case\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"cap-table\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-lg font-medium\">Cap Table Calculator</h3>\n              <p className=\"text-sm text-muted-foreground\">Model SAFE/Note conversions and analyze dilution scenarios for {investment.name}</p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" onClick={() => window.open('/cap-tables', '_blank')}>\n                <Calculator className=\"h-4 w-4 mr-2\" />\n                Open in Cap Tables\n              </Button>\n              <Button onClick={() => setShowCapTableCalculator(!showCapTableCalculator)}>\n                {showCapTableCalculator ? 'Hide Calculator' : 'Show Calculator'}\n              </Button>\n            </div>\n          </div>\n\n          <CapTableIntegration investment={investment} />\n        </TabsContent>\n\n        <TabsContent value=\"future\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-lg font-medium\">Build Future Rounds</h3>\n              <p className=\"text-sm text-muted-foreground\">Automatically add future rounds from pre-defined sector profiles</p>\n            </div>\n            <Button className=\"povc-bg-primary hover:bg-blue-700\">\n              Build Future Rounds\n            </Button>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Future Round Builder</CardTitle>\n              <CardDescription>\n                Configure parameters to automatically generate projected future rounds based on sector profiles\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Sector Profile</label>\n                  <Select defaultValue=\"default\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select sector profile\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"default\">Default</SelectItem>\n                      <SelectItem value=\"fintech\">FinTech</SelectItem>\n                      <SelectItem value=\"saas\">SaaS</SelectItem>\n                      <SelectItem value=\"healthcare\">Healthcare</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Starting Round</label>\n                  <Select defaultValue=\"pre-seed\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select starting round\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pre-seed\">Pre-Seed</SelectItem>\n                      <SelectItem value=\"seed\">Seed</SelectItem>\n                      <SelectItem value=\"series-a\">Series A</SelectItem>\n                      <SelectItem value=\"series-b\">Series B</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Graduation Rate</label>\n                  <Select defaultValue=\"sector-based\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select graduation rate\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"sector-based\">Based on Sector</SelectItem>\n                      <SelectItem value=\"custom\">Custom Rate</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Starting Date</label>\n                  <Select defaultValue=\"custom\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select starting date\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"custom\">Custom Date</SelectItem>\n                      <SelectItem value=\"auto\">Auto-calculated</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium\">Date of Next Round</label>\n                <Input type=\"date\" defaultValue=\"2024-04-01\" className=\"mt-1\" />\n              </div>\n\n              <div className=\"flex justify-end space-x-3 pt-4\">\n                <Button variant=\"outline\">Cancel</Button>\n                <Button className=\"povc-bg-primary hover:bg-blue-700\">Build</Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"details\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Investment Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"grid grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Building className=\"h-5 w-5 text-muted-foreground\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Company</p>\n                    <p className=\"font-medium\">{investment.name}</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-3\">\n                  <MapPin className=\"h-5 w-5 text-muted-foreground\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Geography</p>\n                    <p className=\"font-medium\">{investment.geography}</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-3\">\n                  <Tag className=\"h-5 w-5 text-muted-foreground\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Sector</p>\n                    <p className=\"font-medium\">{investment.sector}</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <TrendingUp className=\"h-5 w-5 text-muted-foreground\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Stage</p>\n                    <p className=\"font-medium\">{investment.stage}</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-3\">\n                  <Calendar className=\"h-5 w-5 text-muted-foreground\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Investment Date</p>\n                    <p className=\"font-medium\">\n                      {format(new Date(investment.investmentDate), 'MMM dd, yyyy')}\n                    </p>\n                  </div>\n                </div>\n\n                {investment.leadInvestor && (\n                  <div className=\"flex items-center space-x-3\">\n                    <Users className=\"h-5 w-5 text-muted-foreground\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Lead Investor</p>\n                      <p className=\"font-medium\">{investment.leadInvestor}</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Liquidation Preferences Dialog */}\n      <LiquidationPreferencesDialog\n        isOpen={showLiqPrefsDialog}\n        onOpenChange={setShowLiqPrefsDialog}\n        investment={{\n          id: investmentId?.toString() || \"\",\n          company: investment?.name || \"\",\n          amount: investment?.amount || 0\n        }}\n        performanceCase={selectedPerformanceCase || { id: \"default\", name: \"Base Case\" }}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\investments-table.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from 'react';\nimport { useFundContext } from '@/contexts/FundContext';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport EnhancedInvestmentsTable from '@/components/investments/enhanced-investments-table';\n\nexport default function InvestmentsTable() {\n  const { currentFund } = useFundContext();\n  const [, setLocation] = useLocation();\n\n  if (!currentFund) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <p className=\"text-gray-500\">Please select a fund to view investments.</p>\n          <Button className=\"mt-4\" onClick={() => setLocation('/setup')}>\n            Set Up Fund\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation('/investments')}\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Investments\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Enhanced Investments Table</h1>\n                <p className=\"text-sm text-gray-600\">\n                  Comprehensive portfolio view with advanced filtering and tag management\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <EnhancedInvestmentsTable />\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\investments.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport InvestmentsLayout from '@/components/investments/investments-layout';\nimport PortfolioCompanyDetail from '@/components/investments/portfolio-company-detail';\n\nexport default function InvestmentsPage() {\n  const [location] = useLocation();\n  \n  // Check if we're viewing a specific company\n  const isCompanyDetail = location.includes('/investments/company/');\n  \n  return (\n    <div className=\"flex-1 overflow-y-auto p-6 custom-scrollbar\">\n      {isCompanyDetail ? (\n        <PortfolioCompanyDetail />\n      ) : (\n        <InvestmentsLayout />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\kpi-manager.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Textarea' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'KPIData' is defined but never used.","line":48,"column":6,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'KPIRequest' is defined but never used.","line":63,"column":6,"nodeType":"Identifier","messageId":"unusedVar","endLine":63,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'kpis' is assigned a value but never used.","line":82,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'sampleKPIData' is assigned a value but never used.","line":132,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":132,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":649,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":649,"endColumn":40}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Plus, \n  Upload, \n  Send, \n  Copy, \n  Check, \n  X, \n  Info,\n  BarChart3,\n  Users,\n  FileText,\n  Settings,\n  Download,\n  Calculator\n} from \"lucide-react\";\n\ntype KPI = {\n  id: string;\n  name: string;\n  type: 'quantitative' | 'qualitative';\n  frequency: 'monthly' | 'quarterly' | 'semi-annual' | 'annual';\n  startDate: string;\n  term: number;\n  termUnit: 'quarters' | 'months' | 'years';\n  numberFormat: string;\n  askToUploadDocuments: boolean;\n  showFullProjectionPeriod: boolean;\n  hidePastHistoricals: boolean;\n  description?: string;\n  companyComments?: boolean;\n};\n\ntype KPIData = {\n  kpiId: string;\n  period: string;\n  value: string | number;\n  type: 'actual' | 'projected';\n  comments?: string;\n  documents?: string[];\n};\n\ntype Contact = {\n  investment: string;\n  contact: string;\n  status: 'valid' | 'invalid';\n};\n\ntype KPIRequest = {\n  id: string;\n  company: string;\n  status: 'pending' | 'sent' | 'completed' | 'review';\n  reportingPeriod: string;\n  createdDate: string;\n  lastUpdated: string;\n  passcode?: string;\n};\n\nexport default function KPIManager() {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [selectedCompany, setSelectedCompany] = useState(\"AlphaTech\");\n  const [showKPIDefinition, setShowKPIDefinition] = useState(false);\n  const [showRequestCreator, setShowRequestCreator] = useState(false);\n  \n  // Sample data based on Tactyc screenshots\n  const companies = [\"AlphaTech\", \"Amplio\", \"CatalystLabs\", \"Cybrosys Technologies\", \"DigitalWave\"];\n  \n  const [kpis] = useState<KPI[]>([\n    {\n      id: \"arr\",\n      name: \"ARR\",\n      type: \"quantitative\",\n      frequency: \"quarterly\",\n      startDate: \"2021-01\",\n      term: 66,\n      termUnit: \"quarters\",\n      numberFormat: \"United States Dollar ($)\",\n      askToUploadDocuments: true,\n      showFullProjectionPeriod: true,\n      hidePastHistoricals: false\n    },\n    {\n      id: \"sales\",\n      name: \"Sales\",\n      type: \"quantitative\",\n      frequency: \"quarterly\",\n      startDate: \"2021-01\",\n      term: 24,\n      termUnit: \"quarters\",\n      numberFormat: \"United States Dollar ($)\",\n      askToUploadDocuments: false,\n      showFullProjectionPeriod: true,\n      hidePastHistoricals: false\n    },\n    {\n      id: \"cash-balance\",\n      name: \"Cash Balance\",\n      type: \"quantitative\",\n      frequency: \"semi-annual\",\n      startDate: \"2021-01\",\n      term: 12,\n      termUnit: \"quarters\",\n      numberFormat: \"United States Dollar ($)\",\n      askToUploadDocuments: false,\n      showFullProjectionPeriod: false,\n      hidePastHistoricals: false\n    }\n  ]);\n\n  const [contacts] = useState<Contact[]>([\n    { investment: \"AlphaTech\", contact: \"anubhav+3@tactyc.io\", status: \"valid\" },\n    { investment: \"Amplio\", contact: \"anubhav+4@tactyc.io\", status: \"valid\" },\n    { investment: \"CatalystLabs\", contact: \"anubhav+5@tactyc.io\", status: \"valid\" },\n    { investment: \"Cybrosys Technologies\", contact: \"anubhav+6@tactyc.io\", status: \"valid\" },\n    { investment: \"DigitalWave\", contact: \"anubhav+7@tactyc.io\", status: \"valid\" }\n  ]);\n\n  const sampleKPIData = {\n    \"arr\": [\n      { period: \"Jan 2021\", value: \"C$1,900,000\", type: \"actual\" },\n      { period: \"Jul 2021\", value: \"C$2,100,000\", type: \"actual\" },\n      { period: \"Jan 2022\", value: \"C$2,200,000\", type: \"actual\" },\n      { period: \"Jul 2022\", value: \"C$2,315,250\", type: \"actual\" },\n      { period: \"Jan 2023\", value: \"C$2,400,000\", type: \"actual\" },\n      { period: \"Jul 2023\", value: \"C$2,500,000\", type: \"projected\" }\n    ],\n    \"sales\": [\n      { period: \"Jan 2021\", value: \"$4,010,042\", type: \"actual\" },\n      { period: \"Apr 2021\", value: \"$4,210,544\", type: \"actual\" },\n      { period: \"Jul 2021\", value: \"$4,421,071\", type: \"actual\" },\n      { period: \"Oct 2021\", value: \"$4,642,125\", type: \"actual\" },\n      { period: \"Jan 2022\", value: \"$4,874,231\", type: \"actual\" },\n      { period: \"Apr 2022\", value: \"$5,117,943\", type: \"projected\" }\n    ]\n  };\n\n  const [newKPI, setNewKPI] = useState<Partial<KPI>>({\n    type: \"quantitative\",\n    frequency: \"quarterly\",\n    numberFormat: \"United States Dollar ($)\",\n    askToUploadDocuments: false,\n    showFullProjectionPeriod: true,\n    hidePastHistoricals: false,\n    term: 66,\n    termUnit: \"quarters\"\n  });\n\n  const KPIDefinitionForm = () => (\n    <Card className=\"w-full max-w-2xl\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <BarChart3 className=\"w-5 h-5\" />\n          <span>KPI Definition</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div className=\"space-y-3\">\n          <Label htmlFor=\"kpi-name\">KPI Name</Label>\n          <Input\n            id=\"kpi-name\"\n            value={newKPI.name || \"\"}\n            onChange={(e) => setNewKPI(prev => ({ ...prev, name: e.target.value }))}\n            placeholder=\"ARR\"\n            className=\"border-gray-300\"\n          />\n        </div>\n\n        <div className=\"space-y-3\">\n          <Label>Type</Label>\n          <Select value={newKPI.type} onValueChange={(value: 'quantitative' | 'qualitative') => setNewKPI(prev => ({ ...prev, type: value }))}>\n            <SelectTrigger className=\"border-gray-300\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"quantitative\">Quantitative</SelectItem>\n              <SelectItem value=\"qualitative\">Qualitative</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-3\">\n          <Label>Frequency</Label>\n          <Select value={newKPI.frequency} onValueChange={(value: any) => setNewKPI(prev => ({ ...prev, frequency: value }))}>\n            <SelectTrigger className=\"border-gray-300\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"monthly\">Monthly</SelectItem>\n              <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n              <SelectItem value=\"semi-annual\">Semi-Annual</SelectItem>\n              <SelectItem value=\"annual\">Annual</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-3\">\n          <Label>Start Date</Label>\n          <Input\n            type=\"month\"\n            value={newKPI.startDate || \"\"}\n            onChange={(e) => setNewKPI(prev => ({ ...prev, startDate: e.target.value }))}\n            className=\"border-gray-300\"\n          />\n        </div>\n\n        <div className=\"space-y-3\">\n          <Label>Term</Label>\n          <div className=\"flex space-x-2\">\n            <Input\n              type=\"number\"\n              value={newKPI.term || \"\"}\n              onChange={(e) => setNewKPI(prev => ({ ...prev, term: parseInt(e.target.value) }))}\n              className=\"flex-1 border-gray-300\"\n              placeholder=\"66\"\n            />\n            <Select value={newKPI.termUnit} onValueChange={(value: any) => setNewKPI(prev => ({ ...prev, termUnit: value }))}>\n              <SelectTrigger className=\"w-32 border-gray-300\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"quarters\">quarters</SelectItem>\n                <SelectItem value=\"months\">months</SelectItem>\n                <SelectItem value=\"years\">years</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div className=\"space-y-3\">\n          <Label>Number Format</Label>\n          <Select value={newKPI.numberFormat} onValueChange={(value) => setNewKPI(prev => ({ ...prev, numberFormat: value }))}>\n            <SelectTrigger className=\"border-gray-300\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"United States Dollar ($)\">United States Dollar ($)</SelectItem>\n              <SelectItem value=\"Euro (Γé¼)\">Euro (Γé¼)</SelectItem>\n              <SelectItem value=\"Percentage (%)\">Percentage (%)</SelectItem>\n              <SelectItem value=\"Number\">Number</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div className=\"space-y-4\">\n          <Label className=\"text-base font-medium\">KPI Requests Configuration</Label>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Checkbox \n              id=\"upload-docs\"\n              checked={newKPI.askToUploadDocuments}\n              onCheckedChange={(checked) => setNewKPI(prev => ({ ...prev, askToUploadDocuments: !!checked }))}\n            />\n            <Label htmlFor=\"upload-docs\" className=\"text-sm\">Ask to upload documents</Label>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox \n              id=\"show-projection\"\n              checked={newKPI.showFullProjectionPeriod}\n              onCheckedChange={(checked) => setNewKPI(prev => ({ ...prev, showFullProjectionPeriod: !!checked }))}\n            />\n            <Label htmlFor=\"show-projection\" className=\"text-sm\">Show full projection period</Label>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox \n              id=\"hide-historicals\"\n              checked={newKPI.hidePastHistoricals}\n              onCheckedChange={(checked) => setNewKPI(prev => ({ ...prev, hidePastHistoricals: !!checked }))}\n            />\n            <Label htmlFor=\"hide-historicals\" className=\"text-sm\">Hide past historicals</Label>\n          </div>\n        </div>\n\n        <div className=\"flex space-x-3 pt-4\">\n          <Button onClick={() => setShowKPIDefinition(false)} className=\"flex-1\">\n            Save KPI\n          </Button>\n          <Button variant=\"outline\" onClick={() => setShowKPIDefinition(false)}>\n            Cancel\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const KPIRequestCreator = () => (\n    <Card className=\"w-full max-w-lg\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Create KPI Requests</span>\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => setShowRequestCreator(false)}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <p className=\"text-sm text-gray-600\">\n          Tactyc will now create a custom <strong>Request URL</strong>.\n        </p>\n        <p className=\"text-sm text-gray-600\">\n          Please send this request URLs to your contact at the portfolio company to request a KPI update.\n        </p>\n\n        <div className=\"space-y-4\">\n          <Button variant=\"outline\" className=\"w-full justify-start text-left\">\n            <span className=\"mr-2\">Γû╝</span>\n            Visible Metrics (Optional)\n          </Button>\n          <div className=\"ml-6 space-y-2\">\n            <p className=\"text-sm text-gray-600\">\n              Only selected metrics <strong>will be visible</strong> to the portfolio company in their KPI request form.\n            </p>\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox id=\"arr-visible\" defaultChecked />\n              <Label htmlFor=\"arr-visible\" className=\"text-sm\">ARR</Label>\n            </div>\n          </div>\n\n          <Button variant=\"outline\" className=\"w-full justify-start text-left\">\n            <span className=\"mr-2\">Γû╝</span>\n            Passcode Protection (Optional)\n          </Button>\n          <div className=\"ml-6 space-y-3\">\n            <p className=\"text-sm text-gray-600\">\n              To ensure these Request URLs are accessible only by intended parties, specify an optional passcode below. If left blank, anyone with access to the URL can update the KPI data.\n            </p>\n            <div className=\"relative\">\n              <Input \n                placeholder=\"Optional passcode\" \n                className=\"border-gray-300 pr-10\"\n              />\n              <Button variant=\"ghost\" size=\"sm\" className=\"absolute right-2 top-1/2 -translate-y-1/2 p-1\">\n                <Info className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex space-x-3 pt-4\">\n          <Button className=\"flex-1\">\n            Create Request\n          </Button>\n          <Button variant=\"outline\" onClick={() => setShowRequestCreator(false)}>\n            Cancel\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">KPI Manager</h1>\n            <p className=\"text-gray-600 mt-1\">Monitor and track portfolio company performance metrics</p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"outline\" onClick={() => setShowKPIDefinition(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add KPI\n            </Button>\n            <Button variant=\"outline\">\n              <Upload className=\"w-4 h-4 mr-2\" />\n              Import Excel\n            </Button>\n            <Button variant=\"outline\" disabled className=\"opacity-50\">\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Sync Notion\n            </Button>\n            <Button>\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export\n            </Button>\n          </div>\n        </div>\n\n        {/* Overlays */}\n        {showKPIDefinition && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n            <KPIDefinitionForm />\n          </div>\n        )}\n\n        {showRequestCreator && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n            <KPIRequestCreator />\n          </div>\n        )}\n\n        {/* Main Content */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"overview\" className=\"flex items-center space-x-2\">\n              <BarChart3 className=\"w-4 h-4\" />\n              <span>Manage KPIs</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"requests\" className=\"flex items-center space-x-2\">\n              <FileText className=\"w-4 h-4\" />\n              <span>KPI Requests</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"valuation\" className=\"flex items-center space-x-2\">\n              <Calculator className=\"w-4 h-4\" />\n              <span>Valuation Analysis</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"contacts\" className=\"flex items-center space-x-2\">\n              <Users className=\"w-4 h-4\" />\n              <span>Contacts</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"flex items-center space-x-2\">\n              <Settings className=\"w-4 h-4\" />\n              <span>Settings</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Company Selector */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-xl\">{selectedCompany}</CardTitle>\n                  <Select value={selectedCompany} onValueChange={setSelectedCompany}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {companies.map(company => (\n                        <SelectItem key={company} value={company}>{company}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {/* KPI Grid */}\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border-collapse\">\n                    <thead>\n                      <tr className=\"border-b border-gray-200\">\n                        <th className=\"text-left p-2 w-8\">\n                          <Checkbox />\n                        </th>\n                        <th className=\"text-left p-2 font-medium text-blue-600\">Quantitative KPIs</th>\n                        <th className=\"text-left p-2 font-medium\">Value Type</th>\n                        <th className=\"text-left p-2 font-medium\">Type</th>\n                        <th className=\"text-left p-2 font-medium\">Frequency</th>\n                        <th className=\"text-left p-2 font-medium\">Period 1</th>\n                        <th className=\"text-left p-2 font-medium\">Period 2</th>\n                        <th className=\"text-left p-2 font-medium\">Period 3</th>\n                        <th className=\"text-left p-2 font-medium\">Period 4</th>\n                        <th className=\"text-left p-2 font-medium\">Period 5</th>\n                        <th className=\"text-left p-2 font-medium\">Period 6</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr className=\"border-b border-gray-100 hover:bg-gray-50\">\n                        <td className=\"p-2\"><Checkbox /></td>\n                        <td className=\"p-2\">\n                          <span className=\"text-blue-600 font-medium\">ARR</span>\n                        </td>\n                        <td className=\"p-2\">Quantitative</td>\n                        <td className=\"p-2\">Actual</td>\n                        <td className=\"p-2\">Semi-Annual</td>\n                        <td className=\"p-2\">\n                          <div className=\"text-blue-600 font-medium\">C$1,900,000</div>\n                          <div className=\"text-xs text-gray-500\">Jan 2021</div>\n                        </td>\n                        <td className=\"p-2\">\n                          <div className=\"text-blue-600 font-medium\">C$2,100,000</div>\n                          <div className=\"text-xs text-gray-500\">Jul 2021</div>\n                        </td>\n                        <td className=\"p-2\">\n                          <div className=\"text-blue-600 font-medium\">C$2,200,000</div>\n                          <div className=\"text-xs text-gray-500\">Jan 2022</div>\n                        </td>\n                        <td className=\"p-2\">\n                          <div className=\"text-blue-600 font-medium\">C$2,315,250</div>\n                          <div className=\"text-xs text-gray-500\">Jul 2022</div>\n                        </td>\n                        <td className=\"p-2\">\n                          <div className=\"text-blue-600 font-medium\">C$2,400,000</div>\n                          <div className=\"text-xs text-gray-500\">Jan 2023</div>\n                        </td>\n                        <td className=\"p-2\">\n                          <div className=\"text-blue-600 font-medium\">C$2,500,000</div>\n                          <div className=\"text-xs text-gray-500\">Jul 2023</div>\n                        </td>\n                      </tr>\n                      <tr className=\"border-b border-gray-100 hover:bg-gray-50\">\n                        <td className=\"p-2\"><Checkbox /></td>\n                        <td className=\"p-2\">\n                          <span className=\"text-blue-600 font-medium\">Sales</span>\n                        </td>\n                        <td className=\"p-2\">Quantitative</td>\n                        <td className=\"p-2\">Actual</td>\n                        <td className=\"p-2\">Quarterly</td>\n                        <td className=\"p-2\">\n                          <div className=\"text-blue-600 font-medium\">$4,010,042</div>\n                          <div className=\"text-xs text-gray-500\">Jan 2021</div>\n                        </td>\n                        <td className=\"p-2\">\n                          <div className=\"text-blue-600 font-medium\">$4,210,544</div>\n                          <div className=\"text-xs text-gray-500\">Apr 2021</div>\n                        </td>\n                        <td className=\"p-2\">\n                          <div className=\"text-blue-600 font-medium\">$4,421,071</div>\n                          <div className=\"text-xs text-gray-500\">Jul 2021</div>\n                        </td>\n                        <td className=\"p-2\">\n                          <div className=\"text-blue-600 font-medium\">$4,642,125</div>\n                          <div className=\"text-xs text-gray-500\">Oct 2021</div>\n                        </td>\n                        <td className=\"p-2\">\n                          <div className=\"text-blue-600 font-medium\">$4,874,231</div>\n                          <div className=\"text-xs text-gray-500\">Jan 2022</div>\n                        </td>\n                        <td className=\"p-2\">\n                          <div className=\"text-blue-600 font-medium\">$5,117,943</div>\n                          <div className=\"text-xs text-gray-500\">Apr 2022</div>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Chart Section */}\n                <div className=\"mt-8 pt-6 border-t border-gray-200\">\n                  <div className=\"flex items-center space-x-2 mb-4\">\n                    <span className=\"font-medium\">ARR</span>\n                    <Info className=\"w-4 h-4 text-gray-400\" />\n                  </div>\n                  \n                  <div className=\"bg-white rounded-lg border p-6\">\n                    <div className=\"h-80 relative\">\n                      {/* Simple Bar Chart Implementation */}\n                      <div className=\"flex items-end justify-between h-full space-x-4 pt-8\">\n                        {[\"Jan 2021\", \"Jul 2021\", \"Jan 2022\", \"Jul 2022\", \"Jan 2023\", \"Jul 2023\"].map((period, index) => {\n                          const values = [1.9, 2.1, 2.2, 2.315, 2.4, 2.5];\n                          const isProjected = index >= 5;\n                          const height = (values[index] / 2.5) * 100;\n                          \n                          return (\n                            <div key={period} className=\"flex flex-col items-center flex-1\">\n                              <div className=\"flex space-x-1 mb-2\">\n                                <div \n                                  className={`w-8 ${isProjected ? 'bg-gray-400' : 'bg-blue-500'} rounded-t`}\n                                  style={{ height: `${height * 2}px` }}\n                                />\n                                <div \n                                  className=\"w-8 bg-gray-800 rounded-t\"\n                                  style={{ height: `${height * 2}px` }}\n                                />\n                              </div>\n                              <div className=\"text-xs text-gray-600 text-center\">\n                                <div>{period}</div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                      \n                      {/* Y-axis labels */}\n                      <div className=\"absolute left-0 top-0 h-full flex flex-col justify-between text-xs text-gray-500 -ml-12\">\n                        <span>6M</span>\n                        <span>4M</span>\n                        <span>2M</span>\n                        <span>0</span>\n                      </div>\n                      \n                      {/* Legend */}\n                      <div className=\"absolute bottom-0 right-0 flex items-center space-x-4 text-xs\">\n                        <div className=\"flex items-center space-x-1\">\n                          <div className=\"w-3 h-3 bg-blue-500 rounded\"></div>\n                          <span>Actual</span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <div className=\"w-3 h-3 bg-gray-400 rounded\"></div>\n                          <span>Projected</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"requests\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>KPI Requests</CardTitle>\n                  <div className=\"flex space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      Send Selected\n                    </Button>\n                    <Button onClick={() => setShowRequestCreator(true)}>\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create KPI Request(s)\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {/* Request Status Summary */}\n                <div className=\"grid grid-cols-4 gap-4 mb-6\">\n                  <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-yellow-600\">3</div>\n                    <div className=\"text-sm text-yellow-700\">Pending Update</div>\n                  </div>\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-blue-600\">2</div>\n                    <div className=\"text-sm text-blue-700\">Sent</div>\n                  </div>\n                  <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-orange-600\">1</div>\n                    <div className=\"text-sm text-orange-700\">Pending Review</div>\n                  </div>\n                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\">4</div>\n                    <div className=\"text-sm text-green-700\">Completed</div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {[\n                    { company: \"AlphaTech\", status: \"Pending Review\", updated: \"2 hours ago\", color: \"orange\" },\n                    { company: \"Amplio\", status: \"Pending Update\", updated: \"Dec 15, 2023\", color: \"yellow\" },\n                    { company: \"CatalystLabs\", status: \"Sent\", updated: \"Dec 18, 2023\", color: \"blue\" },\n                    { company: \"Cybrosys Technologies\", status: \"Completed\", updated: \"Dec 20, 2023\", color: \"green\" },\n                    { company: \"DigitalWave\", status: \"Pending Update\", updated: \"Dec 10, 2023\", color: \"yellow\" }\n                  ].map((request, index) => (\n                    <div key={request.company} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50\">\n                      <div className=\"flex items-center space-x-4\">\n                        <Checkbox />\n                        <div>\n                          <p className=\"font-medium\">{request.company}</p>\n                          <p className=\"text-sm text-gray-500\">Last updated: {request.updated}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge \n                          variant=\"outline\" \n                          className={`\n                            ${request.color === 'orange' ? 'text-orange-600 border-orange-200 bg-orange-50' : ''}\n                            ${request.color === 'yellow' ? 'text-yellow-600 border-yellow-200 bg-yellow-50' : ''}\n                            ${request.color === 'blue' ? 'text-blue-600 border-blue-200 bg-blue-50' : ''}\n                            ${request.color === 'green' ? 'text-green-600 border-green-200 bg-green-50' : ''}\n                          `}\n                        >\n                          {request.status}\n                        </Badge>\n                        {request.status === \"Pending Review\" && (\n                          <Button variant=\"outline\" size=\"sm\" className=\"text-green-600\">\n                            <Check className=\"w-4 h-4 mr-1\" />\n                            Review\n                          </Button>\n                        )}\n                        {request.status === \"Pending Update\" && (\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Send className=\"w-4 h-4 mr-1\" />\n                            Send\n                          </Button>\n                        )}\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Copy className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Bulk Actions */}\n                <div className=\"mt-6 pt-4 border-t border-gray-200 flex items-center justify-between\">\n                  <p className=\"text-sm text-gray-600\">Select requests to perform bulk actions</p>\n                  <div className=\"flex space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Download className=\"w-4 h-4 mr-1\" />\n                      Export\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      Archive Selected\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"valuation\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Valuation Analysis</CardTitle>\n                <p className=\"text-sm text-gray-600\">\n                  Automated valuation multiple analysis. Tactyc will automatically compute valuation multiples on collected KPIs by matching up the KPI provided at each date with the valuation of the company as of that date.\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Analysis Configuration */}\n                <div className=\"grid grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <Label>Compute Valuation Multiple on:</Label>\n                      <Select defaultValue=\"ARR\">\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"ARR\">ARR</SelectItem>\n                          <SelectItem value=\"Sales\">Sales</SelectItem>\n                          <SelectItem value=\"Revenue\">Revenue</SelectItem>\n                          <SelectItem value=\"EBITDA\">EBITDA</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <Label>Entry Round:</Label>\n                      <Select defaultValue=\"Seed\">\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"All\">All</SelectItem>\n                          <SelectItem value=\"Seed\">Seed</SelectItem>\n                          <SelectItem value=\"Series A\">Series A</SelectItem>\n                          <SelectItem value=\"Series B\">Series B</SelectItem>\n                          <SelectItem value=\"Series C\">Series C</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <Label>Sector:</Label>\n                      <Select defaultValue=\"All\">\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"All\">All</SelectItem>\n                          <SelectItem value=\"SaaS\">SaaS</SelectItem>\n                          <SelectItem value=\"Fintech\">Fintech</SelectItem>\n                          <SelectItem value=\"Healthcare\">Healthcare</SelectItem>\n                          <SelectItem value=\"E-commerce\">E-commerce</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <Label>Geography:</Label>\n                      <Select defaultValue=\"All\">\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"All\">All</SelectItem>\n                          <SelectItem value=\"North America\">North America</SelectItem>\n                          <SelectItem value=\"Europe\">Europe</SelectItem>\n                          <SelectItem value=\"Asia\">Asia</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <Label>Tag:</Label>\n                      <Select defaultValue=\"All\">\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"All\">All</SelectItem>\n                          <SelectItem value=\"AI/ML\">AI/ML</SelectItem>\n                          <SelectItem value=\"B2B\">B2B</SelectItem>\n                          <SelectItem value=\"B2C\">B2C</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <Label>Average Method:</Label>\n                      <div className=\"flex space-x-2\">\n                        <Button variant=\"default\" size=\"sm\" className=\"bg-blue-600\">\n                          Mean\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          Median\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                    Compute Analysis\n                  </Button>\n                </div>\n\n                {/* Results Table */}\n                <div className=\"pt-6 border-t border-gray-200\">\n                  <h3 className=\"text-lg font-medium mb-4\">Valuation/ARR Multiple</h3>\n                  \n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full border border-gray-300\">\n                      <thead>\n                        <tr className=\"bg-gray-100\">\n                          <th className=\"border border-gray-300 p-3 text-left font-medium\">Company</th>\n                          <th className=\"border border-gray-300 p-3 text-left font-medium\">Round 1</th>\n                          <th className=\"border border-gray-300 p-3 text-left font-medium\">Round 2</th>\n                          <th className=\"border border-gray-300 p-3 text-left font-medium\">Round 3</th>\n                          <th className=\"border border-gray-300 p-3 text-left font-medium\">Round 4</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {[\n                          { company: \"AlphaTech\", round1: \"27.39x\", round2: \"10.31x\", round3: \"5.81x\", round4: \"-\" },\n                          { company: \"CatalystLabs\", round1: \"22.50x\", round2: \"-\", round3: \"-\", round4: \"-\" },\n                          { company: \"CybrosX2\", round1: \"11.20x\", round2: \"11.67x\", round3: \"-\", round4: \"-\" },\n                          { company: \"DigitalWave\", round1: \"23.97x\", round2: \"11.10x\", round3: \"11.10x\", round4: \"-\" },\n                          { company: \"EchelonTech\", round1: \"-\", round2: \"7.60x\", round3: \"12.37x\", round4: \"-\" },\n                          { company: \"Glyphic\", round1: \"-\", round2: \"-\", round3: \"-\", round4: \"-\" },\n                          { company: \"Hypernoval\", round1: \"-\", round2: \"-\", round3: \"-\", round4: \"-\" },\n                          { company: \"InfinityTech\", round1: \"14.01x\", round2: \"3.99x\", round3: \"-\", round4: \"-\" },\n                          { company: \"Metaflux\", round1: \"25.00x\", round2: \"10.00x\", round3: \"-\", round4: \"-\" },\n                          { company: \"ParadigmShift\", round1: \"7.00x\", round2: \"-\", round3: \"-\", round4: \"-\" },\n                          { company: \"Speculative\", round1: \"-\", round2: \"-\", round3: \"-\", round4: \"-\" },\n                          { company: \"Synapse\", round1: \"-\", round2: \"-\", round3: \"-\", round4: \"-\" },\n                          { company: \"Vantage\", round1: \"4.68x\", round2: \"-\", round3: \"-\", round4: \"-\" },\n                          { company: \"Yanbal\", round1: \"2.49x\", round2: \"9.70x\", round3: \"7.05x\", round4: \"5.31x\" }\n                        ].map((row, index) => (\n                          <tr key={index} className={index % 2 === 0 ? \"bg-white\" : \"bg-gray-50\"}>\n                            <td className=\"border border-gray-300 p-3 font-medium\">{row.company}</td>\n                            <td className=\"border border-gray-300 p-3 text-center\">{row.round1}</td>\n                            <td className=\"border border-gray-300 p-3 text-center\">{row.round2}</td>\n                            <td className=\"border border-gray-300 p-3 text-center\">{row.round3}</td>\n                            <td className=\"border border-gray-300 p-3 text-center\">{row.round4}</td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n\n                  {/* Summary Statistics */}\n                  <div className=\"mt-6 grid grid-cols-3 gap-4\">\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">18.7x</div>\n                      <div className=\"text-sm text-blue-700\">Average Multiple (Mean)</div>\n                    </div>\n                    <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">11.2x</div>\n                      <div className=\"text-sm text-green-700\">Average Multiple (Median)</div>\n                    </div>\n                    <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4 text-center\">\n                      <div className=\"text-2xl font-bold text-gray-600\">14</div>\n                      <div className=\"text-sm text-gray-700\">Companies Analyzed</div>\n                    </div>\n                  </div>\n\n                  {/* Export Options */}\n                  <div className=\"mt-6 flex justify-end space-x-3\">\n                    <Button variant=\"outline\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Export CSV\n                    </Button>\n                    <Button variant=\"outline\">\n                      <FileText className=\"w-4 h-4 mr-2\" />\n                      Export PDF\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"contacts\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>KPI Contacts List</CardTitle>\n                    <p className=\"text-sm text-gray-600 mt-1\">Set contact information for automated email notifications</p>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button variant=\"outline\">\n                      Import\n                    </Button>\n                    <Button>\n                      Save Contacts\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b border-gray-200\">\n                        <th className=\"text-left p-3 font-medium\">Investment</th>\n                        <th className=\"text-left p-3 font-medium\">Contact</th>\n                        <th className=\"text-left p-3 font-medium\">Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {contacts.map((contact, index) => (\n                        <tr key={index} className=\"border-b border-gray-100\">\n                          <td className=\"p-3\">{contact.investment}</td>\n                          <td className=\"p-3\">\n                            <Input \n                              value={contact.contact}\n                              className=\"border-0 p-0 h-auto bg-transparent\"\n                              readOnly\n                            />\n                          </td>\n                          <td className=\"p-3\">\n                            <Badge variant=\"outline\" className=\"text-green-600 border-green-200\">\n                              <Check className=\"w-3 h-3 mr-1\" />\n                              Valid Email\n                            </Badge>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>KPI Manager Settings</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium\">Auto-Approve KPI Requests</p>\n                    <p className=\"text-sm text-gray-600\">Automatically approve all incoming KPI data without manual review</p>\n                  </div>\n                  <Checkbox />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium\">Email Notifications</p>\n                    <p className=\"text-sm text-gray-600\">Receive email notifications when KPI requests are submitted</p>\n                  </div>\n                  <Checkbox defaultChecked />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium\">Default Request Frequency</p>\n                    <p className=\"text-sm text-gray-600\">How often to automatically send KPI requests to portfolio companies</p>\n                  </div>\n                  <Select defaultValue=\"quarterly\">\n                    <SelectTrigger className=\"w-32\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"monthly\">Monthly</SelectItem>\n                      <SelectItem value=\"quarterly\">Quarterly</SelectItem>\n                      <SelectItem value=\"annual\">Annual</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"pt-6 border-t border-gray-200\">\n                  <h3 className=\"font-medium text-gray-900 mb-4\">Integration Settings</h3>\n                  \n                  <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-6 h-6 bg-black rounded text-white text-xs flex items-center justify-center font-bold\">N</div>\n                        <span className=\"font-medium\">Notion Integration</span>\n                        <Badge variant=\"outline\" className=\"text-gray-500\">Not Connected</Badge>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\" disabled className=\"opacity-50\">\n                        Connect\n                      </Button>\n                    </div>\n                    <p className=\"text-sm text-gray-600\">\n                      Connect your Notion workspace to sync KPI data automatically. Portfolio companies can update metrics directly in Notion.\n                    </p>\n                  </div>\n\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mt-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        <FileText className=\"w-6 h-6 text-blue-600\" />\n                        <span className=\"font-medium\">Excel Integration</span>\n                        <Badge variant=\"outline\" className=\"text-green-600 border-green-200\">Active</Badge>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">\n                        Configure\n                      </Button>\n                    </div>\n                    <p className=\"text-sm text-gray-600\">\n                      Import and export KPI data using Excel templates. Supports bulk data uploads and automated formatting.\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"pt-6 border-t border-gray-200\">\n                  <h3 className=\"font-medium text-gray-900 mb-4\">Data Management</h3>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Data Retention Period</p>\n                        <p className=\"text-sm text-gray-600\">How long to keep historical KPI data</p>\n                      </div>\n                      <Select defaultValue=\"unlimited\">\n                        <SelectTrigger className=\"w-32\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"1year\">1 Year</SelectItem>\n                          <SelectItem value=\"3years\">3 Years</SelectItem>\n                          <SelectItem value=\"5years\">5 Years</SelectItem>\n                          <SelectItem value=\"unlimited\">Unlimited</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Backup KPI Data</p>\n                        <p className=\"text-sm text-gray-600\">Automatically backup KPI data to external storage</p>\n                      </div>\n                      <Checkbox defaultChecked />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\kpi-submission.tsx","messages":[{"ruleId":"no-undef","severity":2,"message":"'React' is not defined.","line":41,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":41,"endColumn":41},{"ruleId":"no-undef","severity":2,"message":"'HTMLInputElement' is not defined.","line":41,"column":54,"nodeType":"Identifier","messageId":"undef","endLine":41,"endColumn":70}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Upload, Info } from \"lucide-react\";\n\n// This component simulates what portfolio companies see when they click the KPI request link\nexport default function KPISubmission() {\n  const [kpiData, setKpiData] = useState({\n    arr: {\n      \"Jan 2021\": \"$1,500,000\",\n      \"Apr 2021\": \"$1,592,560\", \n      \"Jul 2021\": \"$1,692,560\",\n      \"Oct 2021\": \"$1,800,000\",\n      \"Jan 2022\": \"$2,000,000\",\n      \"Apr 2022\": \"$2,100,000\"\n    },\n    comments: \"\"\n  });\n\n  const [uploadedFiles, setUploadedFiles] = useState<string[]>([]);\n\n  const handleKPIChange = (period: string, value: string) => {\n    setKpiData(prev => ({\n      ...prev,\n      arr: {\n        ...prev.arr,\n        [period]: value\n      }\n    }));\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    setUploadedFiles(prev => [...prev, ...files.map(f => f.name)]);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        {/* Header - Tactyc Branding */}\n        <div className=\"text-center py-8\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <span className=\"text-2xl font-bold text-blue-600\">TACTYC</span>\n            <span className=\"text-lg text-gray-600\">VENTURES</span>\n          </div>\n          <p className=\"text-gray-600\">June 2023 Data Request</p>\n        </div>\n\n        {/* Company Info */}\n        <Card>\n          <CardHeader className=\"bg-blue-50 border-b\">\n            <CardTitle className=\"text-xl text-center\">\n              Quantum Ventures II L.P. is requesting information from AlphaTech\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            {/* Instructions */}\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6\">\n              <h3 className=\"font-medium text-gray-900 mb-2\">Instructions</h3>\n              <ul className=\"text-sm text-gray-700 space-y-1\">\n                <li>ΓÇó Please provide updates to requested KPI metrics below.</li>\n                <li>ΓÇó Data can be entered directly into the grid below or copy/pasted from Excel or Google Sheets. Remember to click <strong>Submit</strong> at the end of this sheet to send your updates.</li>\n                <li>ΓÇó For quantitative data, please enter data directly as <strong>numbers</strong>. For e.g. to enter $1 million, enter the data as 1000000.</li>\n              </ul>\n            </div>\n\n            {/* ARR Section */}\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-4\">ARR</h3>\n                <p className=\"text-sm text-gray-600 mb-4\">Please provide us your latest ARR estimates.</p>\n                \n                {/* KPI Data Grid */}\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border border-gray-300\">\n                    <thead>\n                      <tr className=\"bg-blue-600 text-white\">\n                        <th className=\"border border-gray-300 p-3 text-left font-medium\">As of</th>\n                        <th className=\"border border-gray-300 p-3 text-left font-medium\">Jan 2021</th>\n                        <th className=\"border border-gray-300 p-3 text-left font-medium\">Apr 2021</th>\n                        <th className=\"border border-gray-300 p-3 text-left font-medium\">Jul 2021</th>\n                        <th className=\"border border-gray-300 p-3 text-left font-medium\">Oct 2021</th>\n                        <th className=\"border border-gray-300 p-3 text-left font-medium\">Jan 2022</th>\n                        <th className=\"border border-gray-300 p-3 text-left font-medium\">Apr 2022</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td className=\"border border-gray-300 p-3 bg-blue-600 text-white font-medium\">ARR</td>\n                        {Object.entries(kpiData.arr).map(([period, value]) => (\n                          <td key={period} className=\"border border-gray-300 p-1\">\n                            <Input\n                              value={value}\n                              onChange={(e) => handleKPIChange(period, e.target.value)}\n                              className=\"border-0 bg-blue-50 text-right\"\n                              placeholder=\"$0\"\n                            />\n                          </td>\n                        ))}\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n\n              {/* Company Comments */}\n              <div className=\"space-y-3\">\n                <Label htmlFor=\"comments\" className=\"text-base font-medium\">\n                  Company Comments\n                </Label>\n                <Textarea\n                  id=\"comments\"\n                  value={kpiData.comments}\n                  onChange={(e) => setKpiData(prev => ({ ...prev, comments: e.target.value }))}\n                  placeholder=\"Enter any additional comments or context about the data...\"\n                  className=\"min-h-24\"\n                />\n              </div>\n\n              {/* File Upload */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Upload className=\"w-4 h-4 text-gray-600\" />\n                  <Label className=\"text-base font-medium\">Upload Document</Label>\n                </div>\n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                  <input\n                    type=\"file\"\n                    multiple\n                    onChange={handleFileUpload}\n                    className=\"hidden\"\n                    id=\"file-upload\"\n                  />\n                  <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                    <Upload className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                    <p className=\"text-sm text-gray-600\">Click to upload supporting documents</p>\n                    <p className=\"text-xs text-gray-500 mt-1\">PDF, Excel, or image files accepted</p>\n                  </label>\n                </div>\n                \n                {uploadedFiles.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium text-gray-700\">Uploaded Files:</p>\n                    {uploadedFiles.map((file, index) => (\n                      <div key={index} className=\"flex items-center space-x-2\">\n                        <Badge variant=\"outline\" className=\"text-green-600 border-green-200\">\n                          {file}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Submit Section */}\n              <div className=\"pt-6 border-t border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                    <Info className=\"w-4 h-4\" />\n                    <span>Data will be securely transmitted to Quantum Ventures II L.P.</span>\n                  </div>\n                  <Button className=\"bg-blue-600 hover:bg-blue-700 px-8\">\n                    Submit\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center text-sm text-gray-500 py-4\">\n          <p>Powered by Tactyc ΓÇó Secure Data Collection Platform</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\moic-analysis.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useQuery' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsContent' is defined but never used.","line":9,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsList' is defined but never used.","line":9,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsTrigger' is defined but never used.","line":9,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Progress' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Separator' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Calculator' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'PieChartIcon' is defined but never used.","line":35,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'Activity' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedView' is assigned a value but never used.","line":65,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'setSelectedView' is assigned a value but never used.","line":65,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedMOICType' is assigned a value but never used.","line":66,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'setSelectedMOICType' is assigned a value but never used.","line":66,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":47},{"ruleId":"no-unused-vars","severity":2,"message":"'moicTypes' is assigned a value but never used.","line":200,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":200,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'chartData' is assigned a value but never used.","line":245,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":245,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'getMOICBadgeVariant' is assigned a value but never used.","line":261,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":261,"endColumn":28}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\n// Chart libraries removed for bundle optimization\nconst ChartPlaceholder = ({ title, height = \"h-96\" }: { title: string; height?: string }) => (\n  <div className={`${height} bg-gray-50 rounded-lg flex flex-col items-center justify-center`}>\n    <div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mb-4\">\n      <BarChart3 className=\"h-8 w-8 text-gray-400\" />\n    </div>\n    <p className=\"text-gray-500 font-medium\">{title}</p>\n    <p className=\"text-gray-400 text-sm mt-1\">Chart placeholder - data available via API</p>\n  </div>\n);\nimport { \n  TrendingUp, \n  TrendingDown,\n  DollarSign,\n  Target,\n  Calculator,\n  Info,\n  Award,\n  AlertTriangle,\n  BarChart3,\n  PieChart as PieChartIcon,\n  Activity\n} from \"lucide-react\";\n\ninterface MOICMetric {\n  company: string;\n  currentMOIC: number;\n  currentMOICOnInitial: number;\n  currentMOICOnDeployedReserves: number;\n  exitMOIC: number;\n  exitMOICOnInitial: number;\n  exitMOICOnFollowOns: number;\n  exitMOICOnPlannedReserves: number;\n  totalInvestment: number;\n  initialInvestment: number;\n  deployedReserves: number;\n  plannedReserves: number;\n  sector: string;\n  stage: string;\n}\n\ninterface MOICComparison {\n  metric: string;\n  question: string;\n  calculation: string;\n  category: 'performance' | 'planning';\n}\n\nexport default function MOICAnalysisPage() {\n  const [selectedCompany, setSelectedCompany] = useState<string>(\"all\");\n  const [selectedView, setSelectedView] = useState<'table' | 'chart' | 'comparison'>('table');\n  const [selectedMOICType, setSelectedMOICType] = useState<string>(\"exitMOICOnPlannedReserves\");\n\n  // Sample MOIC data based on your documentation\n  const moicData: MOICMetric[] = [\n    {\n      company: \"Company H\",\n      currentMOIC: 3.2,\n      currentMOICOnInitial: 4.1,\n      currentMOICOnDeployedReserves: 2.8,\n      exitMOIC: 7.06,\n      exitMOICOnInitial: 8.2,\n      exitMOICOnFollowOns: 6.1,\n      exitMOICOnPlannedReserves: 7.06,\n      totalInvestment: 2500000,\n      initialInvestment: 1000000,\n      deployedReserves: 800000,\n      plannedReserves: 700000,\n      sector: \"AI/ML\",\n      stage: \"Series B\"\n    },\n    {\n      company: \"Company L\",\n      currentMOIC: 2.8,\n      currentMOICOnInitial: 3.5,\n      currentMOICOnDeployedReserves: 2.2,\n      exitMOIC: 6.21,\n      exitMOICOnInitial: 7.1,\n      exitMOICOnFollowOns: 5.4,\n      exitMOICOnPlannedReserves: 6.21,\n      totalInvestment: 1800000,\n      initialInvestment: 750000,\n      deployedReserves: 600000,\n      plannedReserves: 450000,\n      sector: \"Fintech\",\n      stage: \"Series A\"\n    },\n    {\n      company: \"Company J\",\n      currentMOIC: 1.9,\n      currentMOICOnInitial: 2.4,\n      currentMOICOnDeployedReserves: 1.6,\n      exitMOIC: 3.24,\n      exitMOICOnInitial: 3.8,\n      exitMOICOnFollowOns: 2.9,\n      exitMOICOnPlannedReserves: 3.24,\n      totalInvestment: 1200000,\n      initialInvestment: 500000,\n      deployedReserves: 400000,\n      plannedReserves: 300000,\n      sector: \"Healthcare\",\n      stage: \"Seed\"\n    },\n    {\n      company: \"Company B\",\n      currentMOIC: 1.7,\n      currentMOICOnInitial: 2.1,\n      currentMOICOnDeployedReserves: 1.4,\n      exitMOIC: 3.13,\n      exitMOICOnInitial: 3.6,\n      exitMOICOnFollowOns: 2.7,\n      exitMOICOnPlannedReserves: 3.13,\n      totalInvestment: 2000000,\n      initialInvestment: 800000,\n      deployedReserves: 650000,\n      plannedReserves: 550000,\n      sector: \"Enterprise\",\n      stage: \"Series A\"\n    },\n    {\n      company: \"Company D\",\n      currentMOIC: 1.5,\n      currentMOICOnInitial: 1.8,\n      currentMOICOnDeployedReserves: 1.2,\n      exitMOIC: 3.12,\n      exitMOICOnInitial: 3.5,\n      exitMOICOnFollowOns: 2.8,\n      exitMOICOnPlannedReserves: 3.12,\n      totalInvestment: 1500000,\n      initialInvestment: 600000,\n      deployedReserves: 500000,\n      plannedReserves: 400000,\n      sector: \"Consumer\",\n      stage: \"Seed\"\n    },\n    {\n      company: \"Company X\",\n      currentMOIC: 1.3,\n      currentMOICOnInitial: 1.6,\n      currentMOICOnDeployedReserves: 1.1,\n      exitMOIC: 2.80,\n      exitMOICOnInitial: 3.2,\n      exitMOICOnFollowOns: 2.4,\n      exitMOICOnPlannedReserves: 2.80,\n      totalInvestment: 1800000,\n      initialInvestment: 700000,\n      deployedReserves: 600000,\n      plannedReserves: 500000,\n      sector: \"SaaS\",\n      stage: \"Series B\"\n    },\n    {\n      company: \"Company A\",\n      currentMOIC: 0.8,\n      currentMOICOnInitial: 0.9,\n      currentMOICOnDeployedReserves: 0.7,\n      exitMOIC: 0.53,\n      exitMOICOnInitial: 0.6,\n      exitMOICOnFollowOns: 0.4,\n      exitMOICOnPlannedReserves: 0.53,\n      totalInvestment: 2200000,\n      initialInvestment: 900000,\n      deployedReserves: 750000,\n      plannedReserves: 550000,\n      sector: \"Hardware\",\n      stage: \"Series C\"\n    },\n    {\n      company: \"Company Y\",\n      currentMOIC: 0.6,\n      currentMOICOnInitial: 0.7,\n      currentMOICOnDeployedReserves: 0.5,\n      exitMOIC: 0.45,\n      exitMOICOnInitial: 0.5,\n      exitMOICOnFollowOns: 0.3,\n      exitMOICOnPlannedReserves: 0.45,\n      totalInvestment: 1600000,\n      initialInvestment: 650000,\n      deployedReserves: 550000,\n      plannedReserves: 400000,\n      sector: \"Biotech\",\n      stage: \"Series A\"\n    }\n  ];\n\n  const moicTypes: MOICComparison[] = [\n    {\n      metric: \"Current MOIC\",\n      question: \"What is the return on $1 of investment so far?\",\n      calculation: \"Unrealized FMV today + Realized Proceeds / Total Investment to Date\",\n      category: \"performance\"\n    },\n    {\n      metric: \"Current MOIC on Initial\",\n      question: \"What is the return on $1 of initial investment so far?\",\n      calculation: \"Current Share Price / Purchase Price at Entry Round\",\n      category: \"performance\"\n    },\n    {\n      metric: \"Current MOIC on Deployed Reserves\",\n      question: \"What is the return on $1 of follow-on investments so far?\",\n      calculation: \"Current Share Price / Weighted Average Follow-On Share Price\",\n      category: \"performance\"\n    },\n    {\n      metric: \"Exit MOIC\",\n      question: \"What is the expected return on $1 of investment?\",\n      calculation: \"Expected Exit Proceeds / Expected Total Invested Capital By Exit\",\n      category: \"planning\"\n    },\n    {\n      metric: \"Exit MOIC on Initial\",\n      question: \"What is the expected return on $1 of initial investment?\",\n      calculation: \"Expected Exit Share Price / Purchase Price at Entry Round\",\n      category: \"planning\"\n    },\n    {\n      metric: \"Exit MOIC on Follow-Ons\",\n      question: \"What is the expected return on $1 of follow-on investment?\",\n      calculation: \"Expected Exit Share Price / Weighted Average Follow-On Share Price\",\n      category: \"planning\"\n    },\n    {\n      metric: \"Exit MOIC on Planned Reserves\",\n      question: \"What is the expected return on $1 of future follow-on investment?\",\n      calculation: \"Expected Exit Share Price / Weighted Average Follow-On Share Price\",\n      category: \"planning\"\n    }\n  ];\n\n  const chartData = moicData.map(company => ({\n    name: company.company,\n    currentMOIC: company.currentMOIC,\n    exitMOIC: company.exitMOIC,\n    exitMOICOnPlannedReserves: company.exitMOICOnPlannedReserves,\n    currentMOICOnInitial: company.currentMOICOnInitial,\n    exitMOICOnInitial: company.exitMOICOnInitial\n  }));\n\n  const getMOICColor = (moic: number) => {\n    if (moic >= 3.0) return 'text-green-600';\n    if (moic >= 2.0) return 'text-blue-600';\n    if (moic >= 1.0) return 'text-yellow-600';\n    return 'text-red-500';\n  };\n\n  const getMOICBadgeVariant = (moic: number) => {\n    if (moic >= 3.0) return 'default';\n    if (moic >= 2.0) return 'secondary';\n    if (moic >= 1.0) return 'outline';\n    return 'destructive';\n  };\n\n  const filteredData = selectedCompany === \"all\" ? moicData : moicData.filter(d => d.company === selectedCompany);\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Advanced MOIC Analysis</h1>\n          <p className=\"text-muted-foreground\">\n            Moving beyond simple MOIC - analyze 7 different types of MOIC calculations\n          </p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Select value={selectedCompany} onValueChange={setSelectedCompany}>\n            <SelectTrigger className=\"w-[200px]\">\n              <SelectValue placeholder=\"Select company\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Companies</SelectItem>\n              {moicData.map(company => (\n                <SelectItem key={company.company} value={company.company}>\n                  {company.company}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Key Insight */}\n      <Card className=\"border-blue-200 bg-blue-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2 text-blue-900\">\n            <Info className=\"h-5 w-5\" />\n            <span>Moving Beyond Simple MOIC</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-blue-800\">\n            MOICs are more than just a reporting metric - they can be a very useful <strong>planning</strong> metric, \n            especially for reserve deployment. This analysis shows 7 different MOIC calculations that each answer \n            different questions and help develop a more nuanced understanding of deal performance.\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Chart View - Main Focus */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Expected Exit MOIC Analysis</CardTitle>\n          <CardDescription>\n            Portfolio companies ranked by expected return on planned reserves (the key planning metric)\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ChartPlaceholder title=\"Expected Exit MOIC Analysis Bar Chart\" />\n        </CardContent>\n      </Card>\n\n      {/* MOIC Types Breakdown */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-gray-800\">Performance to Date</CardTitle>\n            <CardDescription>Current returns on investments made</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {filteredData.slice(0, 3).map((company) => (\n                <div key={company.company} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <div className=\"font-medium\">{company.company}</div>\n                    <div className=\"text-sm text-muted-foreground\">Current MOIC</div>\n                  </div>\n                  <div className={`font-bold text-lg ${getMOICColor(company.currentMOIC)}`}>\n                    {company.currentMOIC.toFixed(2)}x\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-blue-800\">Expected Performance at Exit</CardTitle>\n            <CardDescription>Projected returns including future rounds</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {filteredData\n                .sort((a, b) => b.exitMOICOnPlannedReserves - a.exitMOICOnPlannedReserves)\n                .slice(0, 3)\n                .map((company) => (\n                <div key={company.company} className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\n                  <div>\n                    <div className=\"font-medium\">{company.company}</div>\n                    <div className=\"text-sm text-muted-foreground\">Exit MOIC on Planned Reserves</div>\n                  </div>\n                  <div className={`font-bold text-lg ${getMOICColor(company.exitMOICOnPlannedReserves)}`}>\n                    {company.exitMOICOnPlannedReserves.toFixed(2)}x\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Performance Insights */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"border-green-200 bg-green-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2 text-green-800\">\n              <TrendingUp className=\"h-5 w-5\" />\n              <span>Top Exit MOIC</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {moicData\n                .sort((a, b) => b.exitMOIC - a.exitMOIC)\n                .slice(0, 3)\n                .map((company) => (\n                <div key={company.company} className=\"flex items-center justify-between\">\n                  <span className=\"font-medium\">{company.company}</span>\n                  <span className=\"text-green-700 font-bold\">{company.exitMOIC.toFixed(2)}x</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-blue-200 bg-blue-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2 text-blue-800\">\n              <Target className=\"h-5 w-5\" />\n              <span>Best Planned Reserves</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {moicData\n                .sort((a, b) => b.exitMOICOnPlannedReserves - a.exitMOICOnPlannedReserves)\n                .slice(0, 3)\n                .map((company) => (\n                <div key={company.company} className=\"flex items-center justify-between\">\n                  <span className=\"font-medium\">{company.company}</span>\n                  <span className=\"text-blue-700 font-bold\">{company.exitMOICOnPlannedReserves.toFixed(2)}x</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-red-200 bg-red-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2 text-red-800\">\n              <AlertTriangle className=\"h-5 w-5\" />\n              <span>Underperforming</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {moicData\n                .filter(c => c.exitMOIC < 1.0)\n                .map((company) => (\n                <div key={company.company} className=\"flex items-center justify-between\">\n                  <span className=\"font-medium\">{company.company}</span>\n                  <span className=\"text-red-700 font-bold\">{company.exitMOIC.toFixed(2)}x</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Special Mention */}\n      <Card className=\"border-yellow-200 bg-yellow-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2 text-yellow-800\">\n            <Award className=\"h-5 w-5\" />\n            <span>Exit MOIC on Planned Reserves - Special Mention</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-yellow-800 mb-3\">\n            The <strong>Exit MOIC on Planned Reserves</strong> deserves special mention as it is a very useful metric in optimizing reserves. \n            By summarizing the future follow-on performance it enables us to compare one company's reserves with another.\n          </p>\n          <p className=\"text-sm text-yellow-800\">\n            When optimizing follow-on reserves, comparing this metric can guide future follow-on deployments. \n            Tactyc automatically calculates and ranks all of your portfolio companies based on this metric.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\partial-sales.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useQuery' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":9,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsContent' is defined but never used.","line":9,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsList' is defined but never used.","line":9,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsTrigger' is defined but never used.","line":9,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":9,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":11,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":11,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectContent' is defined but never used.","line":14,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectItem' is defined but never used.","line":14,"column":33,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectTrigger' is defined but never used.","line":14,"column":45,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":58},{"ruleId":"no-unused-vars","severity":2,"message":"'SelectValue' is defined but never used.","line":14,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":71},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":27,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":28,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'Award' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'Activity' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":8}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n// Chart libraries removed for bundle optimization\nconst ChartPlaceholder = ({ title, height = \"h-64\" }: { title: string; height?: string }) => (\n  <div className={`${height} bg-gray-50 rounded-lg flex flex-col items-center justify-center`}>\n    <div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mb-4\">\n      <BarChart3 className=\"h-8 w-8 text-gray-400\" />\n    </div>\n    <p className=\"text-gray-500 font-medium\">{title}</p>\n    <p className=\"text-gray-400 text-sm mt-1\">Chart placeholder - data available via API</p>\n  </div>\n);\nimport { \n  TrendingUp, \n  TrendingDown,\n  DollarSign,\n  Target,\n  Calculator,\n  Info,\n  Award,\n  AlertTriangle,\n  BarChart3,\n  Activity,\n  Users,\n  Building2,\n  Percent\n} from \"lucide-react\";\n\ninterface PartialSaleData {\n  company: string;\n  holdingPeriod: number;\n  case: string;\n  probability: number;\n  minimumSaleValuation: number;\n  currentValuation: number;\n  impliedPremium: number;\n  newProjectedMOIC: number;\n  currentlyProjectedMOIC: number;\n  dealIRR: number;\n  fundIRR: number;\n}\n\nexport default function PartialSalesPage() {\n  const [percentSold, setPercentSold] = useState<number>(25);\n  const [minimumHoldingPeriod, setMinimumHoldingPeriod] = useState<number>(12);\n\n  // Sample data based on your Tactyc screenshot\n  const partialSalesData: PartialSaleData[] = [\n    {\n      company: \"AlphaTech\",\n      holdingPeriod: 29,\n      case: \"Upside\",\n      probability: 30.0,\n      minimumSaleValuation: 93999603,\n      currentValuation: 133700000,\n      impliedPremium: -29.69,\n      newProjectedMOIC: 6.17,\n      currentlyProjectedMOIC: 8.23,\n      dealIRR: 28.5,\n      fundIRR: 24.2\n    },\n    {\n      company: \"AlphaTech\",\n      holdingPeriod: 29,\n      case: \"Base\",\n      probability: 60.0,\n      minimumSaleValuation: 94293045,\n      currentValuation: 133700000,\n      impliedPremium: -29.47,\n      newProjectedMOIC: 3.92,\n      currentlyProjectedMOIC: 5.23,\n      dealIRR: 22.8,\n      fundIRR: 19.5\n    },\n    {\n      company: \"AlphaTech\",\n      holdingPeriod: 29,\n      case: \"Downside\",\n      probability: 10.0,\n      minimumSaleValuation: 46579399,\n      currentValuation: 133700000,\n      impliedPremium: -65.16,\n      newProjectedMOIC: 0.16,\n      currentlyProjectedMOIC: 0.22,\n      dealIRR: -8.2,\n      fundIRR: -12.5\n    },\n    {\n      company: \"Amplio\",\n      holdingPeriod: 29,\n      case: \"Upside\",\n      probability: 25.0,\n      minimumSaleValuation: 111514453,\n      currentValuation: 48571429,\n      impliedPremium: 129.59,\n      newProjectedMOIC: 17.65,\n      currentlyProjectedMOIC: 23.53,\n      dealIRR: 45.2,\n      fundIRR: 38.7\n    },\n    {\n      company: \"Amplio\",\n      holdingPeriod: 29,\n      case: \"Base\",\n      probability: 50.0,\n      minimumSaleValuation: 91994320,\n      currentValuation: 48571429,\n      impliedPremium: 89.40,\n      newProjectedMOIC: 9.35,\n      currentlyProjectedMOIC: 11.82,\n      dealIRR: 32.1,\n      fundIRR: 28.9\n    },\n    {\n      company: \"DigitalWave\",\n      holdingPeriod: 18,\n      case: \"Base\",\n      probability: 50.0,\n      minimumSaleValuation: 31056431,\n      currentValuation: 33300000,\n      impliedPremium: -6.74,\n      newProjectedMOIC: 5.32,\n      currentlyProjectedMOIC: 6.43,\n      dealIRR: 26.7,\n      fundIRR: 23.4\n    },\n    {\n      company: \"DigitalWave\",\n      holdingPeriod: 18,\n      case: \"Bull\",\n      probability: 10.0,\n      minimumSaleValuation: 31056431,\n      currentValuation: 33300000,\n      impliedPremium: -6.74,\n      newProjectedMOIC: 5.32,\n      currentlyProjectedMOIC: 6.43,\n      dealIRR: 26.7,\n      fundIRR: 23.4\n    },\n    {\n      company: \"TechFlow\",\n      holdingPeriod: 24,\n      case: \"Base\",\n      probability: 60.0,\n      minimumSaleValuation: 42750000,\n      currentValuation: 45000000,\n      impliedPremium: -5.0,\n      newProjectedMOIC: 4.2,\n      currentlyProjectedMOIC: 5.1,\n      dealIRR: 24.8,\n      fundIRR: 22.1\n    },\n    {\n      company: \"DataCore\",\n      holdingPeriod: 36,\n      case: \"Upside\",\n      probability: 20.0,\n      minimumSaleValuation: 85600000,\n      currentValuation: 67200000,\n      impliedPremium: 27.38,\n      newProjectedMOIC: 8.9,\n      currentlyProjectedMOIC: 12.4,\n      dealIRR: 35.6,\n      fundIRR: 31.2\n    }\n  ];\n\n  const filteredData = partialSalesData.filter(item => item.holdingPeriod >= minimumHoldingPeriod);\n\n  const formatCurrency = (value: number) => {\n    if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;\n    if (value >= 1000) return `$${(value / 1000).toFixed(0)}K`;\n    return `$${value.toLocaleString()}`;\n  };\n\n  const formatPercent = (value: number) => {\n    if (value > 0) return `+${value.toFixed(2)}%`;\n    return `${value.toFixed(2)}%`;\n  };\n\n  const getPremiumColor = (premium: number) => {\n    if (premium > 0) return 'text-red-600';\n    return 'text-green-600';\n  };\n\n  const getPremiumBadge = (premium: number) => {\n    if (premium > 0) return 'destructive';\n    return 'secondary';\n  };\n\n  // Summary calculations\n  const totalOpportunities = filteredData.length;\n  const attractiveOpportunities = filteredData.filter(item => item.impliedPremium <= 0).length;\n  const avgFundIRR = filteredData.reduce((sum, item) => sum + item.fundIRR, 0) / filteredData.length;\n  const totalMOICLoss = filteredData.reduce((sum, item) => \n    sum + (item.currentlyProjectedMOIC - item.newProjectedMOIC), 0\n  );\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Partial Sales Optimization</h1>\n          <p className=\"text-muted-foreground\">\n            Calculate minimum partial sale valuations for IRR accretive liquidity\n          </p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-lg px-4 py-2 bg-red-50 text-red-700 border-red-200\">\n          Beta Feature\n        </Badge>\n      </div>\n\n      {/* Methodology Overview */}\n      <Card className=\"border-blue-200 bg-blue-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2 text-blue-900\">\n            <Info className=\"h-5 w-5\" />\n            <span>Realizing DPI Through Optimal Partial Sales</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium text-blue-900 mb-2\">The Challenge</h4>\n              <ul className=\"text-sm text-blue-800 space-y-1\">\n                <li>ΓÇó What valuation should we sell at?</li>\n                <li>ΓÇó What % of the investment should we sell?</li>\n                <li>ΓÇó How to ensure the sale is accretive to fund IRR?</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium text-blue-900 mb-2\">The Solution</h4>\n              <p className=\"text-sm text-blue-800\">\n                Calculate the <strong>Minimum Partial Sale Valuation</strong> - the lowest price \n                the fund could sell for the resulting cash flows to still be accretive to the fund's IRR, \n                accounting for time value of money and opportunity cost.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Controls */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Analysis Parameters</CardTitle>\n          <CardDescription>\n            If the fund were to partially liquidate its investments today, what is the minimum valuation needed for the sale to be accretive to the fund's IRR?\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <Label>What % of each position would the fund consider selling today?</Label>\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  type=\"number\"\n                  value={percentSold}\n                  onChange={(e) => setPercentSold(Number(e.target.value))}\n                  className=\"w-20\"\n                  min=\"1\"\n                  max=\"100\"\n                />\n                <span className=\"text-sm text-muted-foreground\">%</span>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label>Only show investments the fund has held for at least</Label>\n              <div className=\"flex items-center space-x-2\">\n                <Input\n                  type=\"number\"\n                  value={minimumHoldingPeriod}\n                  onChange={(e) => setMinimumHoldingPeriod(Number(e.target.value))}\n                  className=\"w-20\"\n                  min=\"1\"\n                  max=\"60\"\n                />\n                <span className=\"text-sm text-muted-foreground\">months</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"p-4\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <Building2 className=\"h-4 w-4 text-blue-600\" />\n            <span className=\"font-medium\">Total Opportunities</span>\n          </div>\n          <div className=\"text-2xl font-bold\">{totalOpportunities}</div>\n          <div className=\"text-sm text-muted-foreground\">\n            Investments meeting criteria\n          </div>\n        </Card>\n\n        <Card className=\"p-4\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <TrendingUp className=\"h-4 w-4 text-green-600\" />\n            <span className=\"font-medium\">Attractive Sales</span>\n          </div>\n          <div className=\"text-2xl font-bold\">{attractiveOpportunities}</div>\n          <div className=\"text-sm text-muted-foreground\">\n            At or below current valuation\n          </div>\n        </Card>\n\n        <Card className=\"p-4\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <Percent className=\"h-4 w-4 text-purple-600\" />\n            <span className=\"font-medium\">Avg Fund IRR</span>\n          </div>\n          <div className=\"text-2xl font-bold\">{avgFundIRR.toFixed(1)}%</div>\n          <div className=\"text-sm text-muted-foreground\">\n            Weighted across cases\n          </div>\n        </Card>\n\n        <Card className=\"p-4\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n            <span className=\"font-medium\">MOIC Impact</span>\n          </div>\n          <div className=\"text-2xl font-bold\">-{totalMOICLoss.toFixed(1)}x</div>\n          <div className=\"text-sm text-muted-foreground\">\n            Total MOIC reduction\n          </div>\n        </Card>\n      </div>\n\n      {/* Main Analysis Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Minimum Partial Sale Valuation Analysis</CardTitle>\n          <CardDescription>\n            Showing {percentSold}% partial sale scenarios for investments held ΓëÑ{minimumHoldingPeriod} months\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full border-collapse\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left p-3 font-medium\">Company</th>\n                  <th className=\"text-center p-3 font-medium\">Holding Period</th>\n                  <th className=\"text-center p-3 font-medium\">Case</th>\n                  <th className=\"text-center p-3 font-medium\">Probability</th>\n                  <th className=\"text-center p-3 font-medium bg-blue-50\">Minimum Sale Valuation for IRR Accretion</th>\n                  <th className=\"text-center p-3 font-medium\">Current Valuation</th>\n                  <th className=\"text-center p-3 font-medium\">Implied Premium to Current Valuation</th>\n                  <th className=\"text-center p-3 font-medium\">New Projected MOIC</th>\n                  <th className=\"text-center p-3 font-medium\">Currently Projected MOIC</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredData.map((item, index) => (\n                  <tr key={index} className=\"border-b hover:bg-gray-50\">\n                    <td className=\"p-3\">\n                      <div className=\"font-medium\">{item.company}</div>\n                    </td>\n                    <td className=\"text-center p-3\">\n                      <span className=\"text-sm\">{item.holdingPeriod} months</span>\n                    </td>\n                    <td className=\"text-center p-3\">\n                      <Badge variant=\"outline\">{item.case}</Badge>\n                    </td>\n                    <td className=\"text-center p-3\">\n                      <span className=\"text-sm\">{item.probability.toFixed(1)}%</span>\n                    </td>\n                    <td className=\"text-center p-3 bg-blue-50\">\n                      <span className=\"font-bold text-blue-700\">\n                        {formatCurrency(item.minimumSaleValuation)}\n                      </span>\n                    </td>\n                    <td className=\"text-center p-3\">\n                      <span className=\"font-medium\">\n                        {formatCurrency(item.currentValuation)}\n                      </span>\n                    </td>\n                    <td className=\"text-center p-3\">\n                      <div className=\"flex items-center justify-center\">\n                        <Badge variant={getPremiumBadge(item.impliedPremium)}>\n                          <span className={getPremiumColor(item.impliedPremium)}>\n                            ({formatPercent(item.impliedPremium)})\n                          </span>\n                        </Badge>\n                      </div>\n                    </td>\n                    <td className=\"text-center p-3\">\n                      <span className=\"font-bold\">{item.newProjectedMOIC.toFixed(2)}x</span>\n                    </td>\n                    <td className=\"text-center p-3\">\n                      <span className=\"font-bold\">{item.currentlyProjectedMOIC.toFixed(2)}x</span>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Insights and Analysis */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Premium Analysis */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Premium Analysis</CardTitle>\n            <CardDescription>Distribution of required premiums for IRR accretive sales</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ChartPlaceholder title=\"Premium Analysis Bar Chart\" />\n          </CardContent>\n        </Card>\n\n        {/* MOIC Impact */}\n        <Card>\n          <CardHeader>\n            <CardTitle>MOIC Impact Analysis</CardTitle>\n            <CardDescription>How partial sales affect projected returns</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {filteredData.slice(0, 5).map((item, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <div className=\"font-medium\">{item.company}</div>\n                    <div className=\"text-sm text-muted-foreground\">{item.case} Case</div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-bold\">\n                      {item.currentlyProjectedMOIC.toFixed(2)}x ΓåÆ {item.newProjectedMOIC.toFixed(2)}x\n                    </div>\n                    <div className=\"text-sm text-red-600\">\n                      -{(item.currentlyProjectedMOIC - item.newProjectedMOIC).toFixed(2)}x loss\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Key Insights */}\n      <Card className=\"border-yellow-200 bg-yellow-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2 text-yellow-800\">\n            <Calculator className=\"h-5 w-5\" />\n            <span>Deal IRR vs Fund IRR Consideration</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-yellow-800 mb-3\">\n            <strong>Important:</strong> This analysis focuses on Fund IRR rather than Deal IRR to ensure \n            partial sales are truly accretive. A sale might be accretive at the deal level but still \n            dilutive at the fund level due to time value of money considerations.\n          </p>\n          <p className=\"text-sm text-yellow-800\">\n            If the fund made an investment later in its horizon, there could be deviation between \n            Deal IRR and Fund IRR as fund-level cash flows are discounted relative to deal-level flows.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\performance.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\planning.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'useQuery' is defined but never used.","line":7,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'useMutation' is defined but never used.","line":7,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":7,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'DialogTrigger' is defined but never used.","line":20,"column":79,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":92},{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":25,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":26,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used.","line":32,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":34,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":34,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'currentFund' is assigned a value but never used.","line":66,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'queryClient' is assigned a value but never used.","line":67,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":67,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'showCaseDialog' is assigned a value but never used.","line":72,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":72,"endColumn":24}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useFundContext } from \"@/contexts/FundContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport OptimalReservesRanking from \"@/components/reserves/optimal-reserves-ranking\";\nimport GraduationRateStrategy from \"@/components/planning/graduation-rate-strategy\";\nimport ExitAnalysis from \"@/components/planning/exit-analysis\";\nimport PortfolioConstruction from \"@/components/planning/portfolio-construction\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Calendar, \n  DollarSign, \n  TrendingUp, \n  Filter, \n  Edit3, \n  Copy, \n  RotateCcw,\n  Plus,\n  Info,\n  AlertCircle\n} from \"lucide-react\";\nimport { format } from \"date-fns/format\";\nimport FundLiquidationWarnings from \"@/components/investment/fund-liquidation-warnings\";\nimport ExitProceedsRecycling from \"@/components/recycling/exit-proceeds-recycling\";\n\ninterface InvestmentCase {\n  id: string;\n  name: string;\n  probability: number;\n  isDefault?: boolean;\n}\n\ninterface InvestmentRound {\n  id: string;\n  company: string;\n  round: string;\n  date: string;\n  investment: number;\n  roundSize: number;\n  preMoney: number;\n  postMoney: number;\n  moic: number;\n  irr: number;\n  fmv: number;\n  ownership: number;\n  returnFund: number;\n  graduationRate?: number;\n  reserveAmount?: number;\n  isProjected?: boolean;\n  fmvOverride?: boolean;\n}\n\nexport default function Planning() {\n  const { currentFund } = useFundContext();\n  const queryClient = useQueryClient();\n  const [selectedCase, setSelectedCase] = useState(\"default\");\n  const [showFMVDialog, setShowFMVDialog] = useState(false);\n  const [selectedRound, setSelectedRound] = useState<InvestmentRound | null>(null);\n  const [filterRounds, setFilterRounds] = useState(\"next-4\");\n  const [showCaseDialog, setShowCaseDialog] = useState(false);\n\n  // Mock data for demonstration\n  const investmentCases: InvestmentCase[] = [\n    { id: \"default\", name: \"Default\", probability: 100, isDefault: true },\n    { id: \"downside\", name: \"Downside\", probability: 20 },\n    { id: \"base\", name: \"Base\", probability: 60 },\n    { id: \"upside\", name: \"Upside\", probability: 20 }\n  ];\n\n  const futureRounds: InvestmentRound[] = [\n    {\n      id: \"1\",\n      company: \"TechCorp Inc\",\n      round: \"Series A\",\n      date: \"2024-06-01\",\n      investment: 1000000,\n      roundSize: 5000000,\n      preMoney: 8000000,\n      postMoney: 13000000,\n      moic: 2.0,\n      irr: 0,\n      fmv: 200000,\n      ownership: 1.11,\n      returnFund: 9000000,\n      graduationRate: 50,\n      reserveAmount: 1500000,\n      isProjected: true\n    },\n    {\n      id: \"2\", \n      company: \"FinanceAI\",\n      round: \"Series B\",\n      date: \"2024-08-15\",\n      investment: 2000000,\n      roundSize: 15000000,\n      preMoney: 25000000,\n      postMoney: 40000000,\n      moic: 1.5,\n      irr: 0,\n      fmv: 300000,\n      ownership: 2.5,\n      returnFund: 12000000,\n      graduationRate: 70,\n      reserveAmount: 2000000,\n      isProjected: true\n    }\n  ];\n\n  const handleFMVOverride = (round: InvestmentRound, newFMV: number) => {\n    console.log(`Setting FMV override for ${round.company} to $${newFMV}`);\n    setShowFMVDialog(false);\n  };\n\n  const handleSyncCases = () => {\n    console.log(\"Syncing cases from base case\");\n    // Implementation would sync rounds across cases\n  };\n\n  const handleCloneCase = (fromCase: string) => {\n    console.log(`Cloning case from ${fromCase}`);\n    // Implementation would create new case from existing\n  };\n\n  return (\n    <div className=\"flex-1 space-y-6 p-8 overflow-auto\">\n      {/* Header Section */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Planning View</h1>\n          <p className=\"text-muted-foreground\">\n            Manage future rounds, reserves, and investment cases with probability weighting\n          </p>\n        </div>\n        <div className=\"flex space-x-3\">\n          <Button \n            onClick={() => setShowCaseDialog(true)}\n            variant=\"outline\"\n          >\n            <Plus className=\"mr-2 h-4 w-4\" />\n            New Case\n          </Button>\n          <Button \n            onClick={handleSyncCases}\n            className=\"povc-bg-primary hover:bg-blue-700\"\n          >\n            <RotateCcw className=\"mr-2 h-4 w-4\" />\n            Sync Cases\n          </Button>\n        </div>\n      </div>\n\n      {/* Case Selection and Filters */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Investment Cases</CardTitle>\n              <CardDescription>\n                Select and manage different probability-weighted investment scenarios\n              </CardDescription>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Label htmlFor=\"case-select\">Case:</Label>\n                <Select value={selectedCase} onValueChange={setSelectedCase}>\n                  <SelectTrigger className=\"w-[180px]\">\n                    <SelectValue placeholder=\"Select case\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {investmentCases.map((investmentCase) => (\n                      <SelectItem key={investmentCase.id} value={investmentCase.id}>\n                        {investmentCase.name} ({investmentCase.probability}%)\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Label htmlFor=\"filter-rounds\">Show:</Label>\n                <Select value={filterRounds} onValueChange={setFilterRounds}>\n                  <SelectTrigger className=\"w-[160px]\">\n                    <SelectValue placeholder=\"Filter rounds\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"next-3\">Next 3 Rounds</SelectItem>\n                    <SelectItem value=\"next-4\">Next 4 Rounds</SelectItem>\n                    <SelectItem value=\"next-6\">Next 6 Rounds</SelectItem>\n                    <SelectItem value=\"all\">All Future</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-4 gap-4\">\n            {investmentCases.map((investmentCase) => (\n              <Card \n                key={investmentCase.id} \n                className={`cursor-pointer transition-colors ${\n                  selectedCase === investmentCase.id \n                    ? 'ring-2 ring-blue-600 bg-blue-50' \n                    : 'hover:bg-gray-50'\n                }`}\n                onClick={() => setSelectedCase(investmentCase.id)}\n              >\n                <CardContent className=\"p-4 text-center\">\n                  <div className=\"space-y-2\">\n                    <h3 className=\"font-medium\">{investmentCase.name}</h3>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {investmentCase.probability}% probability\n                    </div>\n                    {investmentCase.isDefault && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">Default</Badge>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Future Rounds Planning Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Calendar className=\"h-5 w-5\" />\n            <span>Future Rounds Planning</span>\n          </CardTitle>\n          <CardDescription>\n            Probability-weighted reserves and expected investment levels for {selectedCase} case\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {/* Info Banner */}\n            <div className=\"flex items-start space-x-2 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <Info className=\"h-4 w-4 text-blue-600 mt-0.5\" />\n              <div className=\"text-sm\">\n                <p className=\"font-medium text-blue-800\">Reserve Calculation</p>\n                <p className=\"text-blue-700\">\n                  Reserved amounts are probability-weighted based on graduation rate. \n                  E.g., 50% graduation rate on $1.5M reserve = $750K actual reserve.\n                </p>\n              </div>\n            </div>\n\n            {/* Rounds Table */}\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full border-collapse\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left p-3 font-medium\">Company</th>\n                    <th className=\"text-left p-3 font-medium\">Round</th>\n                    <th className=\"text-left p-3 font-medium\">Expected Date</th>\n                    <th className=\"text-left p-3 font-medium\">Investment</th>\n                    <th className=\"text-left p-3 font-medium\">Reserve Amount</th>\n                    <th className=\"text-left p-3 font-medium\">Graduation Rate</th>\n                    <th className=\"text-left p-3 font-medium\">Actual Reserve</th>\n                    <th className=\"text-left p-3 font-medium\">FMV</th>\n                    <th className=\"text-left p-3 font-medium\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {futureRounds.map((round) => {\n                    const actualReserve = (round.reserveAmount || 0) * ((round.graduationRate || 0) / 100);\n                    return (\n                      <tr key={round.id} className=\"border-b hover:bg-gray-50\">\n                        <td className=\"p-3\">\n                          <div className=\"font-medium\">{round.company}</div>\n                        </td>\n                        <td className=\"p-3\">\n                          <Badge variant=\"outline\">{round.round}</Badge>\n                        </td>\n                        <td className=\"p-3\">\n                          <Input \n                            type=\"date\" \n                            defaultValue={round.date}\n                            className=\"w-auto\"\n                          />\n                        </td>\n                        <td className=\"p-3\">\n                          <Input \n                            defaultValue={`$${(round.investment / 1000000).toFixed(1)}M`}\n                            className=\"w-20\"\n                          />\n                        </td>\n                        <td className=\"p-3\">\n                          <Input \n                            defaultValue={`$${((round.reserveAmount || 0) / 1000000).toFixed(1)}M`}\n                            className=\"w-20\"\n                          />\n                        </td>\n                        <td className=\"p-3\">\n                          <Input \n                            defaultValue={`${round.graduationRate}%`}\n                            className=\"w-16\"\n                          />\n                        </td>\n                        <td className=\"p-3\">\n                          <span className=\"font-medium text-green-600\">\n                            ${(actualReserve / 1000000).toFixed(1)}M\n                          </span>\n                        </td>\n                        <td className=\"p-3\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span className={`text-sm ${round.fmvOverride ? 'text-blue-600 font-medium' : ''}`}>\n                              ${(round.fmv / 1000).toFixed(0)}K\n                            </span>\n                            {round.fmvOverride && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">Manual</Badge>\n                            )}\n                          </div>\n                        </td>\n                        <td className=\"p-3\">\n                          <div className=\"flex space-x-1\">\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => {\n                                setSelectedRound(round);\n                                setShowFMVDialog(true);\n                              }}\n                            >\n                              <Edit3 className=\"h-3 w-3\" />\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\">\n                              <Copy className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button variant=\"outline\">\n                Reset Changes\n              </Button>\n              <Button className=\"povc-bg-primary hover:bg-blue-700\">\n                Save Changes\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Case Management Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Case Management</CardTitle>\n          <CardDescription>\n            Sync rounds between cases and manage different investment scenarios\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-3 gap-4\">\n            <Button \n              variant=\"outline\" \n              className=\"h-20 flex-col space-y-2\"\n              onClick={() => handleCloneCase(\"base\")}\n            >\n              <Copy className=\"h-5 w-5\" />\n              <span>Clone from Base</span>\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"h-20 flex-col space-y-2\"\n              onClick={handleSyncCases}\n            >\n              <RotateCcw className=\"h-5 w-5\" />\n              <span>Sync All Cases</span>\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"h-20 flex-col space-y-2\"\n              onClick={() => setShowCaseDialog(true)}\n            >\n              <Plus className=\"h-5 w-5\" />\n              <span>New Case</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* FMV Override Dialog */}\n      <Dialog open={showFMVDialog} onOpenChange={setShowFMVDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>FMV Override</DialogTitle>\n            <DialogDescription>\n              Override the Fair Market Value calculation for this investment round\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-gray-50 rounded-lg\">\n              <h4 className=\"font-medium mb-2\">FMV Override</h4>\n              <p className=\"text-sm text-muted-foreground mb-3\">\n                By default, Tactyc determines the FMV based on the Valuation and \n                Ownership as Aggregate Valuation x Ownership (%). You can override \n                the FMV here to disconnect the FMV from the underlying Aggregate \n                Valuation and Ownership.\n              </p>\n              \n              <div className=\"space-y-3\">\n                <div>\n                  <h5 className=\"font-medium text-sm mb-1\">When to override?</h5>\n                  <p className=\"text-sm text-muted-foreground\">\n                    You may want to override the FMV if your fund's valuation policy \n                    differs from Tactyc's. These include affecting FMV for any \n                    outstanding liquidation preferences, or how your fund wants to \n                    report valuations on SAFEs and Convertible Notes.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Switch id=\"enable-override\" />\n              <Label htmlFor=\"enable-override\">Enable Manual FMV Override?</Label>\n            </div>\n\n            <div>\n              <Label htmlFor=\"new-fmv\">New Fair Market Value</Label>\n              <div className=\"flex items-center space-x-2 mt-1\">\n                <span className=\"text-sm\">$</span>\n                <Input \n                  id=\"new-fmv\"\n                  defaultValue={selectedRound?.fmv.toString() || \"200000\"}\n                  className=\"flex-1\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button variant=\"outline\" onClick={() => setShowFMVDialog(false)}>\n                Cancel\n              </Button>\n              <Button \n                className=\"povc-bg-primary hover:bg-blue-700\"\n                onClick={() => {\n                  if (selectedRound) {\n                    handleFMVOverride(selectedRound, 200000);\n                  }\n                }}\n              >\n                OK\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Planning Analysis Tabs */}\n      <Tabs defaultValue=\"cases\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-7\">\n          <TabsTrigger value=\"cases\">Investment Cases</TabsTrigger>\n          <TabsTrigger value=\"construction\">Portfolio Construction</TabsTrigger>\n          <TabsTrigger value=\"reserves\">Optimal Reserves</TabsTrigger>\n          <TabsTrigger value=\"graduation\">Follow-On Strategy</TabsTrigger>\n          <TabsTrigger value=\"exits\">Exit Analysis</TabsTrigger>\n          <TabsTrigger value=\"liquidation\">Fund Liquidation</TabsTrigger>\n          <TabsTrigger value=\"recycling\">Exit Recycling</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"cases\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Investment Cases Management</CardTitle>\n              <CardDescription>\n                Current investment cases view displayed above - switch tabs for advanced planning analysis\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">\n                The investment cases table and management interface is shown above. Use the other tabs to access:\n              </p>\n              <ul className=\"list-disc list-inside mt-2 space-y-1 text-sm text-muted-foreground\">\n                <li><strong>Portfolio Construction:</strong> Interactive fund modeling with parameter sliders</li>\n                <li><strong>Optimal Reserves:</strong> Rank portfolio companies by follow-on MOIC potential</li>\n                <li><strong>Follow-On Strategy:</strong> Graduation rate analysis and Monte Carlo simulations</li>\n                <li><strong>Exit Analysis:</strong> Calculate fund returns based on exit rates and valuations</li>\n                <li><strong>Fund Liquidation:</strong> Review investments that extend beyond fund term with early liquidation warnings</li>\n                <li><strong>Exit Recycling:</strong> Manage recycling of exit proceeds into new investments based on timing conditions</li>\n              </ul>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"construction\">\n          <PortfolioConstruction />\n        </TabsContent>\n\n        <TabsContent value=\"reserves\">\n          <OptimalReservesRanking />\n        </TabsContent>\n\n        <TabsContent value=\"graduation\">\n          <GraduationRateStrategy />\n        </TabsContent>\n\n        <TabsContent value=\"exits\">\n          <ExitAnalysis />\n        </TabsContent>\n\n        <TabsContent value=\"liquidation\">\n          <FundLiquidationWarnings \n            fundEndDate=\"March 2030\"\n            investments={[]}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"recycling\">\n          <ExitProceedsRecycling />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\portfolio-modern.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsContent' is defined but never used.","line":13,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsList' is defined but never used.","line":13,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'TabsTrigger' is defined but never used.","line":13,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":50},{"ruleId":"no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":16,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":9},{"ruleId":"no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":22,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":24,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'activeView' is assigned a value but never used.","line":50,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'setActiveView' is assigned a value but never used.","line":50,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":50,"endColumn":35}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState } from 'react';\nimport { POVBrandHeader } from \"@/components/ui/POVLogo\";\nimport { PremiumCard } from \"@/components/ui/PremiumCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Search, \n  Filter, \n  Plus, \n  Download, \n  TrendingUp, \n  TrendingDown,\n  ExternalLink,\n  Calendar,\n  DollarSign,\n  Users,\n  Building2,\n  Target,\n  Eye,\n  MoreHorizontal\n} from \"lucide-react\";\n\ninterface Portfolio {\n  id: string;\n  company: string;\n  sector: string;\n  stage: string;\n  investmentDate: string;\n  initialInvestment: number;\n  currentValue: number;\n  ownershipPercent: number;\n  moic: number;\n  status: 'active' | 'exited' | 'written-off';\n  lastFunding: string;\n  lastFundingAmount: number;\n}\n\nexport default function ModernPortfolio() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [filterSector, setFilterSector] = useState('all');\n  const [activeView, setActiveView] = useState('overview');\n\n  // Sample portfolio data\n  const portfolioCompanies: Portfolio[] = [\n    {\n      id: '1',\n      company: 'FinanceAI',\n      sector: 'FinTech',\n      stage: 'Series A',\n      investmentDate: '2023-03-15',\n      initialInvestment: 2000000,\n      currentValue: 5600000,\n      ownershipPercent: 8.5,\n      moic: 2.8,\n      status: 'active',\n      lastFunding: 'Series B',\n      lastFundingAmount: 15000000\n    },\n    {\n      id: '2',\n      company: 'HealthLink',\n      sector: 'HealthTech',\n      stage: 'Seed',\n      investmentDate: '2022-11-08',\n      initialInvestment: 1500000,\n      currentValue: 4200000,\n      ownershipPercent: 12.3,\n      moic: 2.8,\n      status: 'active',\n      lastFunding: 'Series A',\n      lastFundingAmount: 8000000\n    },\n    {\n      id: '3',\n      company: 'DataStream',\n      sector: 'Enterprise SaaS',\n      stage: 'Series B',\n      investmentDate: '2023-01-22',\n      initialInvestment: 3500000,\n      currentValue: 8900000,\n      ownershipPercent: 5.2,\n      moic: 2.54,\n      status: 'active',\n      lastFunding: 'Series C',\n      lastFundingAmount: 25000000\n    },\n    {\n      id: '4',\n      company: 'RetailBot',\n      sector: 'Consumer',\n      stage: 'Seed',\n      investmentDate: '2022-06-12',\n      initialInvestment: 1000000,\n      currentValue: 0,\n      ownershipPercent: 15.8,\n      moic: 0,\n      status: 'written-off',\n      lastFunding: 'Seed',\n      lastFundingAmount: 2500000\n    },\n    {\n      id: '5',\n      company: 'CryptoSecure',\n      sector: 'FinTech',\n      stage: 'Series A',\n      investmentDate: '2021-09-03',\n      initialInvestment: 2500000,\n      currentValue: 12500000,\n      ownershipPercent: 6.7,\n      moic: 5.0,\n      status: 'exited',\n      lastFunding: 'Series B',\n      lastFundingAmount: 20000000\n    }\n  ];\n\n  const filteredCompanies = portfolioCompanies.filter(company => {\n    const matchesSearch = company.company.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         company.sector.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = filterStatus === 'all' || company.status === filterStatus;\n    const matchesSector = filterSector === 'all' || company.sector === filterSector;\n    \n    return matchesSearch && matchesStatus && matchesSector;\n  });\n\n  const portfolioMetrics = {\n    totalCompanies: portfolioCompanies.length,\n    activeCompanies: portfolioCompanies.filter(c => c.status === 'active').length,\n    exitedCompanies: portfolioCompanies.filter(c => c.status === 'exited').length,\n    totalInvested: portfolioCompanies.reduce((sum, c) => sum + c.initialInvestment, 0),\n    totalValue: portfolioCompanies.reduce((sum, c) => sum + c.currentValue, 0),\n    averageMOIC: portfolioCompanies.filter(c => c.status !== 'written-off').reduce((sum, c) => sum + c.moic, 0) / \n                 portfolioCompanies.filter(c => c.status !== 'written-off').length\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'active':\n        return <Badge className=\"bg-pov-success/10 text-pov-success border-pov-success/20\">Active</Badge>;\n      case 'exited':\n        return <Badge className=\"bg-blue-100 text-blue-700 border-blue-200\">Exited</Badge>;\n      case 'written-off':\n        return <Badge className=\"bg-pov-error/10 text-pov-error border-pov-error/20\">Written Off</Badge>;\n      default:\n        return <Badge variant=\"outline\">Unknown</Badge>;\n    }\n  };\n\n  const getMOICIndicator = (moic: number) => {\n    if (moic > 2) {\n      return <TrendingUp className=\"h-4 w-4 text-pov-success\" />;\n    } else if (moic > 1) {\n      return <TrendingUp className=\"h-4 w-4 text-yellow-500\" />;\n    } else {\n      return <TrendingDown className=\"h-4 w-4 text-pov-error\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-100\">\n      <POVBrandHeader\n        title=\"Portfolio\"\n        subtitle=\"Monitor and analyze your portfolio companies performance\"\n        variant=\"light\"\n      />\n\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        \n        {/* Portfolio Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <PremiumCard className=\"text-center\">\n            <div className=\"space-y-2\">\n              <div className=\"p-2 bg-pov-charcoal/10 rounded-lg w-fit mx-auto\">\n                <Building2 className=\"h-5 w-5 text-pov-charcoal\" />\n              </div>\n              <div className=\"font-inter font-bold text-3xl text-pov-charcoal\">\n                {portfolioMetrics.totalCompanies}\n              </div>\n              <p className=\"font-poppins text-sm text-gray-600\">Total Companies</p>\n              <div className=\"flex justify-center space-x-4 text-xs\">\n                <span className=\"text-pov-success\">{portfolioMetrics.activeCompanies} Active</span>\n                <span className=\"text-blue-600\">{portfolioMetrics.exitedCompanies} Exited</span>\n              </div>\n            </div>\n          </PremiumCard>\n\n          <PremiumCard className=\"text-center\">\n            <div className=\"space-y-2\">\n              <div className=\"p-2 bg-pov-success/10 rounded-lg w-fit mx-auto\">\n                <DollarSign className=\"h-5 w-5 text-pov-success\" />\n              </div>\n              <div className=\"font-inter font-bold text-3xl text-pov-charcoal\">\n                ${(portfolioMetrics.totalInvested / 1000000).toFixed(1)}M\n              </div>\n              <p className=\"font-poppins text-sm text-gray-600\">Total Invested</p>\n              <p className=\"font-mono text-xs text-gray-500\">\n                Capital deployed across portfolio\n              </p>\n            </div>\n          </PremiumCard>\n\n          <PremiumCard className=\"text-center\">\n            <div className=\"space-y-2\">\n              <div className=\"p-2 bg-pov-beige/50 rounded-lg w-fit mx-auto\">\n                <Target className=\"h-5 w-5 text-pov-charcoal\" />\n              </div>\n              <div className=\"font-inter font-bold text-3xl text-pov-charcoal\">\n                ${(portfolioMetrics.totalValue / 1000000).toFixed(1)}M\n              </div>\n              <p className=\"font-poppins text-sm text-gray-600\">Current Value</p>\n              <Badge className=\"bg-pov-success/10 text-pov-success border-pov-success/20 text-xs\">\n                +{(((portfolioMetrics.totalValue - portfolioMetrics.totalInvested) / portfolioMetrics.totalInvested) * 100).toFixed(1)}%\n              </Badge>\n            </div>\n          </PremiumCard>\n\n          <PremiumCard className=\"text-center\">\n            <div className=\"space-y-2\">\n              <div className=\"p-2 bg-pov-charcoal/10 rounded-lg w-fit mx-auto\">\n                <TrendingUp className=\"h-5 w-5 text-pov-charcoal\" />\n              </div>\n              <div className=\"font-inter font-bold text-3xl text-pov-charcoal\">\n                {portfolioMetrics.averageMOIC.toFixed(1)}x\n              </div>\n              <p className=\"font-poppins text-sm text-gray-600\">Average MOIC</p>\n              <p className=\"font-mono text-xs text-gray-500\">\n                Multiple on invested capital\n              </p>\n            </div>\n          </PremiumCard>\n        </div>\n\n        {/* Controls and Filters */}\n        <PremiumCard className=\"mb-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4\">\n            <div className=\"flex items-center space-x-4 flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search companies...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-64 border-pov-gray focus:ring-pov-beige\"\n                />\n              </div>\n              \n              <Select value={filterStatus} onValueChange={setFilterStatus}>\n                <SelectTrigger className=\"w-32 border-pov-gray\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"exited\">Exited</SelectItem>\n                  <SelectItem value=\"written-off\">Written Off</SelectItem>\n                </SelectContent>\n              </Select>\n\n              <Select value={filterSector} onValueChange={setFilterSector}>\n                <SelectTrigger className=\"w-40 border-pov-gray\">\n                  <SelectValue placeholder=\"Sector\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Sectors</SelectItem>\n                  <SelectItem value=\"FinTech\">FinTech</SelectItem>\n                  <SelectItem value=\"HealthTech\">HealthTech</SelectItem>\n                  <SelectItem value=\"Enterprise SaaS\">Enterprise SaaS</SelectItem>\n                  <SelectItem value=\"Consumer\">Consumer</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              <Button variant=\"outline\" size=\"sm\" className=\"border-pov-gray hover:bg-pov-charcoal hover:text-pov-white\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n              <Button size=\"sm\" className=\"bg-pov-charcoal hover:bg-pov-charcoal/90 text-pov-white\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Company\n              </Button>\n            </div>\n          </div>\n        </PremiumCard>\n\n        {/* Portfolio Table */}\n        <PremiumCard \n          title=\"Portfolio Companies\"\n          subtitle={`${filteredCompanies.length} companies`}\n        >\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-pov-gray/30\">\n                  <th className=\"text-left py-4 px-2 font-inter font-semibold text-sm text-pov-charcoal\">Company</th>\n                  <th className=\"text-left py-4 px-2 font-inter font-semibold text-sm text-pov-charcoal\">Sector</th>\n                  <th className=\"text-left py-4 px-2 font-inter font-semibold text-sm text-pov-charcoal\">Status</th>\n                  <th className=\"text-right py-4 px-2 font-inter font-semibold text-sm text-pov-charcoal\">Investment</th>\n                  <th className=\"text-right py-4 px-2 font-inter font-semibold text-sm text-pov-charcoal\">Current Value</th>\n                  <th className=\"text-right py-4 px-2 font-inter font-semibold text-sm text-pov-charcoal\">MOIC</th>\n                  <th className=\"text-center py-4 px-2 font-inter font-semibold text-sm text-pov-charcoal\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredCompanies.map((company) => (\n                  <tr key={company.id} className=\"border-b border-pov-gray/20 hover:bg-pov-beige/10 transition-colors\">\n                    <td className=\"py-4 px-2\">\n                      <div className=\"space-y-1\">\n                        <div className=\"font-poppins font-medium text-pov-charcoal\">\n                          {company.company}\n                        </div>\n                        <div className=\"font-poppins text-xs text-gray-500\">\n                          {company.stage} ΓÇó {new Date(company.investmentDate).toLocaleDateString()}\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"py-4 px-2\">\n                      <Badge variant=\"outline\" className=\"font-poppins text-xs\">\n                        {company.sector}\n                      </Badge>\n                    </td>\n                    <td className=\"py-4 px-2\">\n                      {getStatusBadge(company.status)}\n                    </td>\n                    <td className=\"py-4 px-2 text-right\">\n                      <div className=\"space-y-1\">\n                        <div className=\"font-mono font-medium text-pov-charcoal\">\n                          ${(company.initialInvestment / 1000000).toFixed(2)}M\n                        </div>\n                        <div className=\"font-poppins text-xs text-gray-500\">\n                          {company.ownershipPercent}% ownership\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"py-4 px-2 text-right\">\n                      <div className=\"space-y-1\">\n                        <div className=\"font-mono font-medium text-pov-charcoal\">\n                          ${(company.currentValue / 1000000).toFixed(2)}M\n                        </div>\n                        <div className=\"font-poppins text-xs text-gray-500\">\n                          Current valuation\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"py-4 px-2 text-right\">\n                      <div className=\"flex items-center justify-end space-x-2\">\n                        {getMOICIndicator(company.moic)}\n                        <span className=\"font-mono font-bold text-pov-charcoal\">\n                          {company.moic > 0 ? `${company.moic.toFixed(1)}x` : 'ΓÇö'}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"py-4 px-2 text-center\">\n                      <div className=\"flex items-center justify-center space-x-1\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <ExternalLink className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </PremiumCard>\n      </div>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\portfolio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\reports.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\reserves-demo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\return-the-fund.tsx","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'LineChart' is defined but never used.","line":13,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":13,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'Line' is defined but never used.","line":14,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":14,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'ComposedChart' is defined but never used.","line":15,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'Area' is defined but never used.","line":16,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'AreaChart' is defined but never used.","line":17,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":17,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'useQuery' is defined but never used.","line":19,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":23,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":29,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":30,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":15},{"ruleId":"no-unused-vars","severity":2,"message":"'DollarSign' is defined but never used.","line":31,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Calculator' is defined but never used.","line":33,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":13},{"ruleId":"no-unused-vars","severity":2,"message":"'Award' is defined but never used.","line":35,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":35,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'AlertTriangle' is defined but never used.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'Activity' is defined but never used.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":11},{"ruleId":"no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":8},{"ruleId":"no-unused-vars","severity":2,"message":"'setSelectedRound' is assigned a value but never used.","line":62,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":62,"endColumn":41}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { BarChart } from 'recharts/es6/chart/BarChart';\nimport { Bar } from 'recharts/es6/cartesian/Bar';\nimport { XAxis } from 'recharts/es6/cartesian/XAxis';\nimport { YAxis } from 'recharts/es6/cartesian/YAxis';\nimport { CartesianGrid } from 'recharts/es6/cartesian/CartesianGrid';\nimport { Tooltip } from 'recharts/es6/component/Tooltip';\nimport { ResponsiveContainer } from 'recharts/es6/component/ResponsiveContainer';\nimport { LineChart } from 'recharts/es6/chart/LineChart';\nimport { Line } from 'recharts/es6/cartesian/Line';\nimport { ComposedChart } from 'recharts/es6/chart/ComposedChart';\nimport { Area } from 'recharts/es6/cartesian/Area';\nimport { AreaChart } from 'recharts/es6/chart/AreaChart';\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { \n  TrendingUp, \n  TrendingDown,\n  DollarSign,\n  Target,\n  Calculator,\n  Info,\n  Award,\n  AlertTriangle,\n  BarChart3,\n  Activity,\n  Users,\n  Building2\n} from \"lucide-react\";\n\ninterface ReturnTheFundData {\n  round: string;\n  roundPercent: number;\n  investmentAmount: number;\n  resultingOwnership: number;\n  returnTheFund: number;\n  exitOwnership: number;\n  exitFMV: number;\n  exitMOIC: number;\n}\n\ninterface OwnershipData {\n  round: string;\n  ownership: number;\n  returnTheFund: number;\n}\n\nexport default function ReturnTheFundPage() {\n  const [selectedInvestment, setSelectedInvestment] = useState<string>(\"series-a\");\n  const [selectedRound, setSelectedRound] = useState<string>(\"series-b\");\n  const [reserveAmount, setReserveAmount] = useState<number[]>([375000]);\n  const [activeTab, setActiveTab] = useState<'construction' | 'portfolio' | 'reserves'>('construction');\n\n  // Sample Return the Fund data for Series B optimization\n  const returnTheFundData: ReturnTheFundData[] = [\n    {\n      round: \"0.00%\",\n      roundPercent: 0.0,\n      investmentAmount: 0,\n      resultingOwnership: 4.71,\n      returnTheFund: 3183,\n      exitOwnership: 3.31,\n      exitFMV: 7.6,\n      exitMOIC: 3.34\n    },\n    {\n      round: \"2.50%\",\n      roundPercent: 2.5,\n      investmentAmount: 75000,\n      resultingOwnership: 4.80,\n      returnTheFund: 3127,\n      exitOwnership: 3.36,\n      exitFMV: 7.8,\n      exitMOIC: 3.29\n    },\n    {\n      round: \"5.00%\",\n      roundPercent: 5.0,\n      investmentAmount: 150000,\n      resultingOwnership: 4.88,\n      returnTheFund: 3072,\n      exitOwnership: 3.42,\n      exitFMV: 7.9,\n      exitMOIC: 3.24\n    },\n    {\n      round: \"7.50%\",\n      roundPercent: 7.5,\n      investmentAmount: 225000,\n      resultingOwnership: 4.97,\n      returnTheFund: 3020,\n      exitOwnership: 3.47,\n      exitFMV: 8.0,\n      exitMOIC: 3.19\n    },\n    {\n      round: \"10.00%\",\n      roundPercent: 10.0,\n      investmentAmount: 300000,\n      resultingOwnership: 5.05,\n      returnTheFund: 2969,\n      exitOwnership: 3.53,\n      exitFMV: 8.1,\n      exitMOIC: 3.15\n    },\n    {\n      round: \"12.50%\",\n      roundPercent: 12.5,\n      investmentAmount: 375000,\n      resultingOwnership: 5.14,\n      returnTheFund: 2920,\n      exitOwnership: 3.58,\n      exitFMV: 8.3,\n      exitMOIC: 3.11\n    },\n    {\n      round: \"15.00%\",\n      roundPercent: 15.0,\n      investmentAmount: 450000,\n      resultingOwnership: 5.22,\n      returnTheFund: 2873,\n      exitOwnership: 3.63,\n      exitFMV: 8.4,\n      exitMOIC: 3.07\n    },\n    {\n      round: \"17.50%\",\n      roundPercent: 17.5,\n      investmentAmount: 525000,\n      resultingOwnership: 5.31,\n      returnTheFund: 2827,\n      exitOwnership: 3.69,\n      exitFMV: 8.5,\n      exitMOIC: 3.03\n    },\n    {\n      round: \"20.00%\",\n      roundPercent: 20.0,\n      investmentAmount: 600000,\n      resultingOwnership: 5.39,\n      returnTheFund: 2782,\n      exitOwnership: 3.74,\n      exitFMV: 8.6,\n      exitMOIC: 2.99\n    },\n    {\n      round: \"22.50%\",\n      roundPercent: 22.5,\n      investmentAmount: 675000,\n      resultingOwnership: 5.48,\n      returnTheFund: 2739,\n      exitOwnership: 3.80,\n      exitFMV: 8.8,\n      exitMOIC: 2.96\n    },\n    {\n      round: \"25.00%\",\n      roundPercent: 25.0,\n      investmentAmount: 750000,\n      resultingOwnership: 5.56,\n      returnTheFund: 2697,\n      exitOwnership: 3.85,\n      exitFMV: 8.9,\n      exitMOIC: 2.93\n    }\n  ];\n\n  // Sample ownership dilution data\n  const seriesAOwnership: OwnershipData[] = [\n    { round: \"Series A\", ownership: 10.0, returnTheFund: 1500 },\n    { round: \"Series B\", ownership: 10.0, returnTheFund: 1500 },\n    { round: \"Series C\", ownership: 9.02, returnTheFund: 1663 },\n    { round: \"Series D\", ownership: 7.60, returnTheFund: 1974 },\n    { round: \"Series E+\", ownership: 7.11, returnTheFund: 2109 }\n  ];\n\n  const seedOwnership: OwnershipData[] = [\n    { round: \"Seed\", ownership: 7.14, returnTheFund: 2101 },\n    { round: \"Series A\", ownership: 7.58, returnTheFund: 1978 },\n    { round: \"Series B\", ownership: 7.07, returnTheFund: 2122 },\n    { round: \"Series C\", ownership: 5.69, returnTheFund: 2634 },\n    { round: \"Series D\", ownership: 4.79, returnTheFund: 3132 },\n    { round: \"Series E+\", ownership: 4.48, returnTheFund: 3348 }\n  ];\n\n  const investments = [\n    { id: \"series-a\", name: \"Series A Investments\", data: seriesAOwnership },\n    { id: \"seed\", name: \"Seed Investments\", data: seedOwnership }\n  ];\n\n  const selectedInvestmentData = investments.find(inv => inv.id === selectedInvestment)?.data || seriesAOwnership;\n\n  const currentReserve = reserveAmount[0];\n  const selectedData = returnTheFundData.find(item => item.investmentAmount === currentReserve) || returnTheFundData[5];\n\n  const formatCurrency = (value: number) => {\n    if (value >= 1000000) return `$${(value / 1000000).toFixed(1)}M`;\n    if (value >= 1000) return `$${(value / 1000).toFixed(0)}K`;\n    return `$${value.toLocaleString()}`;\n  };\n\n  const formatReturnTheFund = (value: number) => {\n    return `$${value.toFixed(0)}mm`;\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Return the Fund Analysis</h1>\n          <p className=\"text-muted-foreground\">\n            Calculate the aggregate valuation companies need to achieve to pay back the entire fund\n          </p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-lg px-4 py-2\">\n          Fund Size: $150M\n        </Badge>\n      </div>\n\n      {/* What is Return the Fund */}\n      <Card className=\"border-blue-200 bg-blue-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2 text-blue-900\">\n            <Info className=\"h-5 w-5\" />\n            <span>What is Return the Fund?</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-blue-800\">\n            <strong>Return the Fund</strong> is a common analysis managers undertake when evaluating venture deals. \n            This involves calculating a Return the Fund metric - the aggregate valuation a company needs to achieve \n            in order to pay back the entire fund. A \"Fund Returner\" is a single deal that achieves this threshold.\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Analysis Tabs */}\n      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as any)}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"construction\" className=\"flex items-center space-x-2\">\n            <Building2 className=\"h-4 w-4\" />\n            <span>Portfolio Construction</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"portfolio\" className=\"flex items-center space-x-2\">\n            <BarChart3 className=\"h-4 w-4\" />\n            <span>Active Portfolio</span>\n          </TabsTrigger>\n          <TabsTrigger value=\"reserves\" className=\"flex items-center space-x-2\">\n            <Target className=\"h-4 w-4\" />\n            <span>Reserve Optimization</span>\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Portfolio Construction Tab */}\n        <TabsContent value=\"construction\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Ownerships and Return the Fund</CardTitle>\n              <CardDescription>\n                Select an investment type to view how ownership dilutes and Return the Fund changes over subsequent rounds\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <Label htmlFor=\"investment-select\">Select an investment for the charts below:</Label>\n                  <Select value={selectedInvestment} onValueChange={setSelectedInvestment}>\n                    <SelectTrigger className=\"w-[300px]\">\n                      <SelectValue placeholder=\"Select investment type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {investments.map(investment => (\n                        <SelectItem key={investment.id} value={investment.id}>\n                          {investment.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Ownership Chart */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Ownerships</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"h-80\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          <BarChart data={selectedInvestmentData}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"round\" />\n                            <YAxis \n                              domain={[0, 0.125]}\n                              tickFormatter={(value) => `${(value * 100).toFixed(1)}%`}\n                            />\n                            <Tooltip \n                              formatter={(value: number) => [`${value.toFixed(2)}%`, 'Ownership']}\n                            />\n                            <Bar \n                              dataKey=\"ownership\" \n                              fill=\"#3b82f6\"\n                              name=\"Ownership %\"\n                            />\n                          </BarChart>\n                        </ResponsiveContainer>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Return the Fund Chart */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Return the Fund</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"h-80\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          <BarChart data={selectedInvestmentData}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"round\" />\n                            <YAxis \n                              tickFormatter={(value) => `$${value}mm`}\n                            />\n                            <Tooltip \n                              formatter={(value: number) => [`$${value}mm`, 'Return the Fund']}\n                            />\n                            <Bar \n                              dataKey=\"returnTheFund\" \n                              fill=\"#10b981\"\n                              name=\"Return the Fund\"\n                            />\n                          </BarChart>\n                        </ResponsiveContainer>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <p className=\"text-sm text-yellow-800\">\n                    <strong>Key Insight:</strong> As the fund's ownership dilutes over subsequent rounds, \n                    Return the Fund increases. This can be helpful in setting future reserves to keep this metric in check.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Active Portfolio Tab */}\n        <TabsContent value=\"portfolio\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Active Portfolio Analysis</CardTitle>\n              <CardDescription>\n                For active portfolio companies, view Return the Fund at each forecasted round\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Building2 className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>Select a specific investment's performance case to view the Return the Fund profile</p>\n                <p className=\"text-sm\">This would show forecasted rounds and dilution scenarios</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Reserve Optimization Tab */}\n        <TabsContent value=\"reserves\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Optimal Follow-on Investment Analysis</CardTitle>\n              <CardDescription>\n                What is the optimal follow-on investment in the {selectedRound.replace('-', ' ')} round?\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {/* Reserve Slider */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Reserve Amount</Label>\n                    <div className=\"text-lg font-bold\">{formatCurrency(currentReserve)}</div>\n                  </div>\n                  <Slider\n                    value={reserveAmount}\n                    onValueChange={setReserveAmount}\n                    max={750000}\n                    min={0}\n                    step={75000}\n                    className=\"w-full\"\n                  />\n                  <div className=\"flex justify-between text-sm text-muted-foreground\">\n                    <span>$0</span>\n                    <span>$750K</span>\n                  </div>\n                </div>\n\n                {/* Key Metrics */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <Card className=\"p-4\">\n                    <div className=\"text-sm text-muted-foreground\">Resulting Ownership</div>\n                    <div className=\"text-xl font-bold\">{selectedData.resultingOwnership.toFixed(2)}%</div>\n                  </Card>\n                  <Card className=\"p-4 bg-green-50 border-green-200\">\n                    <div className=\"text-sm text-muted-foreground\">Return the Fund</div>\n                    <div className=\"text-xl font-bold text-green-700\">\n                      {formatReturnTheFund(selectedData.returnTheFund)}\n                    </div>\n                  </Card>\n                  <Card className=\"p-4\">\n                    <div className=\"text-sm text-muted-foreground\">Exit FMV</div>\n                    <div className=\"text-xl font-bold\">${selectedData.exitFMV.toFixed(1)}mm</div>\n                  </Card>\n                  <Card className=\"p-4\">\n                    <div className=\"text-sm text-muted-foreground\">Exit MOIC</div>\n                    <div className=\"text-xl font-bold\">{selectedData.exitMOIC.toFixed(2)}x</div>\n                  </Card>\n                </div>\n\n                {/* Reserve Optimization Table */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Reserve Impact Analysis</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full border-collapse\">\n                        <thead>\n                          <tr className=\"border-b\">\n                            <th className=\"text-left p-3 font-medium\">Round %</th>\n                            <th className=\"text-left p-3 font-medium\">Investment Amount</th>\n                            <th className=\"text-left p-3 font-medium\">Resulting Ownership</th>\n                            <th className=\"text-left p-3 font-medium bg-green-50\">Return the Fund</th>\n                            <th className=\"text-left p-3 font-medium\">Exit Ownership</th>\n                            <th className=\"text-left p-3 font-medium\">Exit FMV</th>\n                            <th className=\"text-left p-3 font-medium\">Exit MOIC</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {returnTheFundData.slice(0, 8).map((row, index) => (\n                            <tr \n                              key={index} \n                              className={`border-b hover:bg-gray-50 ${\n                                row.investmentAmount === currentReserve ? 'bg-blue-50 border-blue-200' : ''\n                              }`}\n                            >\n                              <td className=\"p-3\">{row.round}</td>\n                              <td className=\"p-3\">\n                                {row.investmentAmount === 0 ? '-' : formatCurrency(row.investmentAmount)}\n                              </td>\n                              <td className=\"p-3\">{row.resultingOwnership.toFixed(2)}%</td>\n                              <td className=\"p-3 bg-green-50\">\n                                <span className=\"font-bold text-green-700\">\n                                  {formatReturnTheFund(row.returnTheFund)}\n                                </span>\n                              </td>\n                              <td className=\"p-3\">{row.exitOwnership.toFixed(2)}%</td>\n                              <td className=\"p-3\">${row.exitFMV.toFixed(1)}mm</td>\n                              <td className=\"p-3\">{row.exitMOIC.toFixed(2)}x</td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <p className=\"text-sm text-blue-800\">\n                    <strong>Optimization Insight:</strong> As reserves increase, Return the Fund decreases. \n                    Managers can use this as a guide to optimize their reserve for a particular deal while \n                    maintaining target fund return thresholds.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\scenario-builder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\pages\\sensitivity-analysis.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\schemas\\reserves-schema.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\selectors\\useStageValidation.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'shallow' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { shallow } from 'zustand/shallow';\nimport { useFundStore } from '../state/useFundStore';\n\nexport function useStageValidation() {\n  return useFundStore((s: any) => s.stageValidation());\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\sentry.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Sentry' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Re-export from centralized monitoring module\n// The actual initialization happens in @/monitoring/index.ts\nimport { Sentry } from '@/monitoring';\n\nexport function initSentry() {\n  // This is now a no-op since initialization happens in monitoring module\n  // Kept for backwards compatibility\n  console.log('Sentry initialization delegated to monitoring module');\n}","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\services\\__tests__\\funds.idempotency.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\services\\funds.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'AbortSignal' is not defined.","line":20,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":20,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'Response' is not defined.","line":27,"column":8,"nodeType":"Identifier","messageId":"undef","endLine":27,"endColumn":16},{"ruleId":"no-unused-vars","severity":2,"message":"'composeSignal' is defined but never used.","line":71,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":23},{"ruleId":"no-undef","severity":2,"message":"'AbortSignal' is not defined.","line":71,"column":54,"nodeType":"Identifier","messageId":"undef","endLine":71,"endColumn":65},{"ruleId":"no-undef","severity":2,"message":"'AbortController' is not defined.","line":72,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":72,"endColumn":35},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":73,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":73,"endColumn":27},{"ruleId":"no-undef","severity":2,"message":"'DOMException' is not defined.","line":73,"column":49,"nodeType":"Identifier","messageId":"undef","endLine":73,"endColumn":61},{"ruleId":"no-undef","severity":2,"message":"'DOMException' is not defined.","line":75,"column":60,"nodeType":"Identifier","messageId":"undef","endLine":75,"endColumn":72},{"ruleId":"no-undef","severity":2,"message":"'clearTimeout' is not defined.","line":82,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":82,"endColumn":17},{"ruleId":"no-undef","severity":2,"message":"'AbortController' is not defined.","line":95,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":95,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'assertInflightCapacity' is defined but never used.","line":102,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":102,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'AbortSignal' is not defined.","line":179,"column":11,"nodeType":"Identifier","messageId":"undef","endLine":179,"endColumn":22},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":193,"column":13,"nodeType":"BlockStatement","messageId":"unexpected","endLine":193,"endColumn":15,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[6506,6506],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":197,"column":23,"nodeType":"Identifier","messageId":"undef","endLine":197,"endColumn":28},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":220,"column":15,"nodeType":"BlockStatement","messageId":"unexpected","endLine":220,"endColumn":17,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[7328,7328],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":237,"column":15,"nodeType":"BlockStatement","messageId":"unexpected","endLine":237,"endColumn":17,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[7888,7888],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":297,"column":15,"nodeType":"BlockStatement","messageId":"unexpected","endLine":297,"endColumn":17,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[9996,9996],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n// client/src/services/funds.ts\n// Idempotent + cancellable fund creation with timeout and telemetry\n// Single source of truth lives in the store; this is a belt-and-suspenders final check.\n\nimport { clampPct, clampInt } from '../lib/coerce';\nimport * as Telemetry from '../lib/telemetry';\nimport { startInFlight, isInFlight, cancelInFlight } from '../lib/inflight';\n\ntype Json = Record<string, unknown> | unknown[] | string | number | boolean | null | undefined;\n\nexport interface CreateFundOptions {\n  endpoint?: string;            // default: '/api/funds'\n  method?: 'POST' | 'PUT';      // default: 'POST'\n  timeoutMs?: number;           // default: 10_000\n  signal?: AbortSignal;         // optional external signal\n  dedupe?: boolean;             // default: true\n  telemetry?: boolean;          // default: true\n  reuseExisting?: boolean;      // default: false - reuse existing fund if found\n}\n\nexport interface CreateFundResult {\n  res: Response;\n  hash: string;\n  aborted: boolean;\n  durationMs: number;\n}\n\nconst DEFAULT_ENDPOINT = '/api/funds';\nconst DEFAULT_TIMEOUT = 10_000;\n\n// ---------- Stable stringify + FNV-1a hash (deterministic) ----------\nfunction stableStringify(value: unknown): string {\n  const seen = new WeakSet();\n  const walk = (v: unknown): any => {\n    if (v === null || typeof v !== 'object') return v;\n    if (seen.has(v as object)) return '[Circular]';\n    seen.add(v as object);\n\n    if (Array.isArray(v)) return v.map(walk);\n\n    const obj = v as Record<string, unknown>;\n    const out: Record<string, unknown> = {};\n    for (const k of Object.keys(obj).sort()) out[k] = walk(obj[k]);\n    return out;\n  };\n  return JSON.stringify(walk(value));\n}\n\nfunction fnv1a(input: string): string {\n  let hash = 0x811c9dc5;\n  for (let i = 0; i < input.length; i++) {\n    hash ^= input.charCodeAt(i);\n    hash += (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n  }\n  // unsigned >>> 0, represent as hex\n  return (hash >>> 0).toString(16);\n}\n\nexport function computeCreateFundHash(payload: Json): string {\n  // Add environment namespace to avoid cross-env collisions\n  const namespace = (import.meta.env.MODE || 'unknown-env') + '|fund-create|';\n  return fnv1a(namespace + stableStringify(payload));\n}\n\n// ---------- Compose timeout + external AbortSignal ----------\nfunction composeSignal(timeoutMs: number, external?: AbortSignal) {\n  const ctrl = new AbortController();\n  const timer = setTimeout(() => ctrl.abort(new DOMException('Timeout', 'AbortError')), timeoutMs);\n\n  const onAbort = () => ctrl.abort(external?.reason ?? new DOMException('Aborted', 'AbortError'));\n  if (external) {\n    if (external.aborted) onAbort();\n    else external.addEventListener('abort', onAbort, { once: true });\n  }\n\n  const cleanup = () => {\n    clearTimeout(timer);\n    if (external) external.removeEventListener('abort', onAbort);\n  };\n\n  return { signal: ctrl.signal, controller: ctrl, cleanup };\n}\n\n// ---------- In-flight de-duplication registry (in-flight only, no cache) ----------\n// Purpose: Prevent duplicate requests while in-flight. Server handles post-completion idempotency.\nconst IDEMPOTENCY_MAX = Number(import.meta.env.VITE_IDEMPOTENCY_MAX || 200);\n\ntype InflightEntry = {\n  promise: Promise<CreateFundResult>;\n  controllers: AbortController[];\n  startedAt: number;\n};\n\nconst inflight = new Map<string, InflightEntry>();\n\n// Ensure we don't exceed capacity (throw if at limit)\nfunction assertInflightCapacity() {\n  if (inflight.size >= IDEMPOTENCY_MAX) {\n    const err = new Error('Too many concurrent requests; please retry shortly.');\n    (err as any).code = 'CAPACITY_EXCEEDED';\n    throw err;\n  }\n}\n\nexport function isCreateFundInFlight(hash: string) {\n  return isInFlight(hash);\n}\n\nexport function cancelCreateFund(hash: string) {\n  return cancelInFlight(hash);\n}\n\n// ---------- Final clamp before wire (defense-in-depth) ----------\nfunction finalizePayload(payload: any): any {\n  try {\n    const p = { ...payload };\n\n    // If stages exist, ensure values are sane\n    if (Array.isArray(p.stages)) {\n      p.stages = p.stages.map((s: any) => ({\n        ...s,\n        name: typeof s.name === 'string' ? s.name.trim() : s.name,\n        graduate: clampPct(Number(s.graduate)),\n        exit: clampPct(Number(s.exit)),\n        months: clampInt(Number(s.months) || 12, 1, 120),\n      }));\n    }\n\n    // Version tag enables non-breaking evolution\n    if (!p.modelVersion) p.modelVersion = 'reserves-ev1';\n\n    return p;\n  } catch {\n    return payload; // never block on \"safety\"; better to ship the payload than throw here\n  }\n}\n\n// ---------- Main entry ----------\nexport async function startCreateFund(\n  payload: Json,\n  opts: CreateFundOptions = {}\n): Promise<CreateFundResult> {\n  const endpoint = opts.endpoint ?? DEFAULT_ENDPOINT;\n  const method = opts.method ?? 'POST';\n  const timeoutMs = opts.timeoutMs ?? DEFAULT_TIMEOUT;\n  const dedupe = opts.dedupe ?? true;\n  const useTelemetry = opts.telemetry ?? true;\n\n  const finalized = finalizePayload(payload);\n  const hash = computeCreateFundHash(finalized);\n\n  // Optional: 1 ms hold only in test to avoid flicker; keep 0 in prod if you prefer.\n  const holdForMs = import.meta.env?.MODE === 'test' ? 1 : 0;\n\n  if (!dedupe) {\n    // Skip deduplication - create unique key with timestamp\n    const uniqueHash = `${hash}-${Date.now()}-${Math.random()}`;\n    return startInFlight(uniqueHash, async ({ signal }) => {\n      return await executeCreateFund(finalized, endpoint, method, timeoutMs, signal, useTelemetry, hash);\n    }, { holdForMs });\n  }\n\n  return startInFlight(hash, async ({ signal }) => {\n    return await executeCreateFund(finalized, endpoint, method, timeoutMs, signal, useTelemetry, hash);\n  }, { holdForMs });\n}\n\n// Helper function to execute the actual fund creation\nasync function executeCreateFund(\n  finalized: any,\n  endpoint: string,\n  method: string,\n  timeoutMs: number,\n  signal: AbortSignal,\n  useTelemetry: boolean,\n  hash: string\n): Promise<CreateFundResult> {\n  const startedAt = performance.now();\n\n  // Track attempt\n  if (useTelemetry) {\n    try {\n      (Telemetry as any).track?.('fund_create_attempt', {\n        hash,\n        model_version: finalized.basics?.modelVersion,\n        env: import.meta.env.MODE,\n      });\n    } catch {}\n  }\n  \n  try {\n    const res = await fetch(endpoint, {\n      method,\n      signal,\n      headers: { \n        'Content-Type': 'application/json',\n        'Idempotency-Key': hash  // Server-side deduplication\n      },\n      body: JSON.stringify(finalized),\n    });\n\n    const durationMs = Math.round(performance.now() - startedAt);\n    if (useTelemetry) {\n      try {\n        const eventName = res.ok ? 'fund_create_success' : 'fund_create_failure';\n        const idempotencyStatus = res.headers.get('Idempotency-Status') || 'created';\n        (Telemetry as any).track?.(eventName, {\n          status: res.status,\n          durationMs,\n          hash,\n          idempotency_status: idempotencyStatus,\n          model_version: finalized.basics?.modelVersion,\n          env: import.meta.env.MODE,\n        });\n      } catch {}\n    }\n    return { res, hash, aborted: false, durationMs };\n  } catch (err: any) {\n    const aborted = err?.name === 'AbortError';\n    const durationMs = Math.round(performance.now() - startedAt);\n    if (useTelemetry) {\n      try {\n        (Telemetry as any).track?.('fund_create_failure', {\n          aborted,\n          message: String(err?.message ?? err),\n          durationMs,\n          hash,\n          idempotency_status: 'error',\n          model_version: finalized.basics?.modelVersion,\n          env: import.meta.env.MODE,\n        });\n      } catch {}\n    }\n    // surface same shape; callers can inspect aborted if needed\n    throw Object.assign(err ?? new Error('Create fund failed'), { aborted, hash, durationMs });\n  }\n}\n\n// ---------- Toast throttling for capacity hits ----------\nlet lastCapacityToast = 0;\nconst TOAST_THROTTLE_MS = 10_000; // One toast every 10 seconds max\n\nfunction maybeToastCapacity() {\n  const now = Date.now();\n  if (now - lastCapacityToast > TOAST_THROTTLE_MS) {\n    lastCapacityToast = now;\n    return true;\n  }\n  return false;\n}\n\n// ---------- Convenience wrappers for backward compatibility ----------\nexport async function createFund(payload: Json, options?: CreateFundOptions): Promise<any> {\n  const result = await startCreateFund(payload, options);\n  if (!result.res.ok) {\n    throw new Error(`Fund creation failed: ${result.res.status}`);\n  }\n  return result.res.json();\n}\n\nexport async function createFundWithToast(payload: Json, options?: CreateFundOptions) {\n  const { toast } = await import('../lib/toast');\n  \n  try {\n    const result = await startCreateFund(payload, options);\n    if (!result.res.ok) {\n      const text = await result.res.text().catch(() => '');\n      toast(`Γ¥î Failed to save fund: ${text || result.res.statusText}`, 'error');\n      return null;\n    }\n    const data = await result.res.json();\n    toast('Γ£à Fund saved successfully!', 'success');\n    return data;\n  } catch (err: any) {\n    if (err?.aborted) {\n      toast('ΓÜá∩╕Å Save cancelled', 'info');\n    } else if (err?.code === 'CAPACITY_EXCEEDED') {\n      // Throttled user-friendly capacity hit message\n      const showToast = maybeToastCapacity();\n      if (showToast) {\n        toast('ΓÜá∩╕Å You have too many concurrent operations. Please wait a moment and try again.', 'info');\n      }\n      // Always track capacity hit for observability\n      try {\n        const { inFlightSize } = await import('../lib/inflight');\n        (Telemetry as any).track?.('client_capacity_hit', {\n          route: '/api/funds',\n          concurrent: inFlightSize(),\n          env: import.meta.env.MODE,\n          throttled: !showToast\n        });\n      } catch {}\n    } else {\n      toast('Γ¥î Network error saving fund', 'error');\n    }\n    throw err;\n  }\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\state\\useFundStore.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'name' is defined but never used.","line":20,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'amount' is defined but never used.","line":21,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":21,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'type' is defined but never used.","line":22,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'year' is defined but never used.","line":23,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":28}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n// Stub implementation for the fund store\nimport { create } from 'zustand';\n\ninterface FundState {\n  // Basic fund properties\n  name: string;\n  totalCommittedCapital: string;\n  fundType: string;\n  vintage: number;\n  \n  // Stage validation\n  stageValidation: () => Record<string, boolean>;\n  \n  // Actions\n  setName: (name: string) => void;\n  setTotalCommittedCapital: (amount: string) => void;\n  setFundType: (type: string) => void;\n  setVintage: (year: number) => void;\n}\n\nexport const useFundStore = create<FundState>((set, get) => ({\n  // Initial state\n  name: '',\n  totalCommittedCapital: '',\n  fundType: 'venture',\n  vintage: new Date().getFullYear(),\n  \n  // Validation\n  stageValidation: () => {\n    const state = get();\n    return {\n      'fund-basics': Boolean(state.name && state.totalCommittedCapital),\n      'fund-details': true,\n      'portfolio': true,\n    };\n  },\n  \n  // Actions\n  setName: (name) => set({ name }),\n  setTotalCommittedCapital: (amount) => set({ totalCommittedCapital: amount }),\n  setFundType: (type) => set({ fundType: type }),\n  setVintage: (year) => set({ vintage: year }),\n}));\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\stores\\useFundStore.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'Stage' is defined but never used.","line":10,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'idx' is defined but never used.","line":28,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'idx' is defined but never used.","line":29,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'name' is defined but never used.","line":29,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":46},{"ruleId":"no-unused-vars","severity":2,"message":"'idx' is defined but never used.","line":30,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":32},{"ruleId":"no-unused-vars","severity":2,"message":"'patch' is defined but never used.","line":30,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":97},{"ruleId":"no-unused-vars","severity":2,"message":"'strategy' is defined but never used.","line":37,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":56},{"ruleId":"no-unused-vars","severity":2,"message":"'v' is defined but never used.","line":177,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":177,"endColumn":38}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { allocate100 } from '../core/utils/allocate100';\nimport { clampPct, clampInt } from '../lib/coerce';\nimport type { Stage, SectorProfile, Allocation, InvestmentStrategy } from '@shared/types';\n\nexport type StrategyStage = {\n  id: string;\n  name: string;\n  graduate: number; // %\n  exit: number;     // %\n  months: number;   // int >= 1\n};\n\ntype StrategySlice = {\n  stages: StrategyStage[];\n  sectorProfiles: SectorProfile[];\n  allocations: Allocation[];\n  followOnChecks: { A: number; B: number; C: number };\n\n  // Stage management\n  addStage: () => void;\n  removeStage: (idx: number) => void;\n  updateStageName: (idx: number, name: string) => void;\n  updateStageRate: (idx: number, patch: Partial<Pick<StrategyStage, 'graduate'|'exit'|'months'>>) => void;\n\n  // Selector-like helper\n  stageValidation: () => { allValid: boolean; errorsByRow: (string | null)[] };\n\n  // Conversion utilities\n  toInvestmentStrategy: () => InvestmentStrategy;\n  fromInvestmentStrategy: (strategy: InvestmentStrategy) => void;\n};\n\n// helper functions\nconst enforceLast = (rows: StrategyStage[]) =>\n  rows.map((r, i) => (i === rows.length - 1 ? { ...r, graduate: 0 } : r));\n\nconst generateStableId = (): string => {\n  if (typeof crypto !== 'undefined' && 'randomUUID' in crypto) {\n    return (crypto as any).randomUUID();\n  }\n  return `stage-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n};\n\n/**\n * Business rules (canonical):\n * - Percentages are clamped to [0, 100].\n * - Last stage `graduate` is always 0.\n * - Remain is derived: remain = 100 - (graduate + exit). Never persisted.\n * - Months are integers ΓëÑ 1.\n * - graduate + exit must be Γëñ 100 for each stage.\n * \n * Any consumer should rely on these invariants.\n */\nexport const useFundStore = create<StrategySlice>()(\n  persist(\n    (set, get) => ({\n      stages: [\n        { id: generateStableId(), name: 'Seed', graduate: 30, exit: 20, months: 18 },\n        { id: generateStableId(), name: 'Series A', graduate: 40, exit: 25, months: 24 },\n        { id: generateStableId(), name: 'Series B+', graduate: 0, exit: 35, months: 30 }\n      ],\n      sectorProfiles: [\n        { id: 'sector-1', name: 'FinTech', targetPercentage: 40, description: 'Financial technology companies' },\n        { id: 'sector-2', name: 'HealthTech', targetPercentage: 30, description: 'Healthcare technology companies' },\n        { id: 'sector-3', name: 'Enterprise SaaS', targetPercentage: 30, description: 'B2B software solutions' }\n      ],\n      allocations: [\n        { id: 'alloc-1', category: 'New Investments', percentage: 75, description: 'Fresh capital for new portfolio companies' },\n        { id: 'alloc-2', category: 'Reserves', percentage: 20, description: 'Follow-on investments for existing portfolio' },\n        { id: 'alloc-3', category: 'Operating Expenses', percentage: 5, description: 'Fund management and operations' }\n      ],\n      followOnChecks: { A: 800_000, B: 1_500_000, C: 2_500_000 },\n\n      addStage: () => set((s) => {\n        const id = generateStableId();\n        const next = [...s.stages, { id, name: '', graduate: 0, exit: 0, months: 12 }];\n        return { stages: enforceLast(next) };\n      }),\n\n      removeStage: (idx: number) => set((s) => {\n        const next = s.stages.filter((_, i) => i !== idx);\n        return { stages: enforceLast(next) };\n      }),\n\n      updateStageName: (idx: number, name: string) => set((s) => {\n        const stages = [...s.stages];\n        if (stages[idx]) {\n          stages[idx] = { ...stages[idx], name };\n        }\n        return { stages };\n      }),\n\n      updateStageRate: (idx, patch) => set((s) => {\n        const stages: StrategyStage[] = [...s.stages];\n        const r = stages[idx];\n        if (!r) return {};\n\n        const isLast = idx === stages.length - 1;\n        const gradRaw = isLast ? 0 : clampPct(patch.graduate ?? r.graduate);\n        const exitRaw = clampPct(patch.exit ?? r.exit);\n        const months = clampInt(patch.months ?? r.months, 1, 120);\n\n        const [graduate, exit] = allocate100(gradRaw, exitRaw);\n        stages[idx] = { ...r, graduate, exit, months };\n\n        // Re-enforce last rule in case stages changed earlier\n        const lastIdx = stages.length - 1;\n        if (lastIdx >= 0 && stages[lastIdx].graduate !== 0) {\n          stages[lastIdx] = { ...stages[lastIdx], graduate: 0 };\n        }\n\n        return { stages };\n      }),\n\n      stageValidation: () => {\n        const { stages } = get();\n        const errors = stages.map((r: StrategyStage, i: number) => {\n          if (!r.name?.trim()) return 'Stage name required';\n          if (r.graduate + r.exit > 100) return 'Graduate + Exit must be Γëñ 100%';\n          if (i === stages.length - 1 && r.graduate !== 0) return 'Last stage must have 0% graduation';\n          return null;\n        });\n        return { allValid: errors.every(e => !e), errorsByRow: errors };\n      },\n\n      // Conversion utilities to work with existing InvestmentStrategy type\n      toInvestmentStrategy: () => {\n        const { stages, sectorProfiles, allocations } = get();\n        return {\n          stages: stages.map(s => ({\n            id: s.id,\n            name: s.name,\n            graduationRate: s.graduate,\n            exitRate: s.exit\n          })),\n          sectorProfiles,\n          allocations\n        };\n      },\n\n      fromInvestmentStrategy: (strategy: InvestmentStrategy) => set(() => {\n        const stages = strategy.stages.map(s => ({\n          id: s.id,\n          name: s.name,\n          graduate: s.graduationRate,\n          exit: s.exitRate,\n          months: 12 // Default months if not provided\n        }));\n        \n        return {\n          stages: enforceLast(stages),\n          sectorProfiles: strategy.sectorProfiles,\n          allocations: strategy.allocations\n        };\n      })\n    }),\n    {\n      name: 'investment-strategy',\n      version: 1,\n      partialize: (s) => ({\n        // Only persist primitive inputs (no derived remain)\n        stages: s.stages.map((r: StrategyStage) => ({\n          id: r.id, name: r.name, graduate: r.graduate, exit: r.exit, months: r.months\n        })),\n        sectorProfiles: s.sectorProfiles,\n        allocations: s.allocations,\n        followOnChecks: s.followOnChecks,\n        modelVersion: 'reserves-ev1',\n      }),\n      migrate: (state: any, v: number) => {\n        state.stages = (state.stages ?? []).map((r: any) => ({ months: 12, ...r }));\n        return state;\n      }\n    }\n  )\n);\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\types\\domain-min.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\types\\fund.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\types\\reserves.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\utils\\array-safety-enhanced.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":27,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":27,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'array' is defined but never used.","line":27,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":27,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":45,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":45,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'array' is defined but never used.","line":45,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":45,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":57,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":57,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'array' is defined but never used.","line":57,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":49},{"ruleId":"no-unused-vars","severity":2,"message":"'acc' is defined but never used.","line":69,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":69,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":69,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'array' is defined but never used.","line":69,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":56},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":81,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":81,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'array' is defined but never used.","line":81,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":81,"endColumn":49},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":93,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":93,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'array' is defined but never used.","line":93,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":93,"endColumn":49},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":105,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":105,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'array' is defined but never used.","line":105,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":49},{"ruleId":"no-unused-vars","severity":2,"message":"'array' is defined but never used.","line":144,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":144,"endColumn":52},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":146,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":146,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":146,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":146,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":151,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":151,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":151,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":151,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":155,"column":22,"nodeType":"Identifier","messageId":"unusedVar","endLine":155,"endColumn":29},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":155,"column":31,"nodeType":"Identifier","messageId":"unusedVar","endLine":155,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'acc' is defined but never used.","line":159,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":159,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":39},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":163,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":163,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":167,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":167,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":167,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":167,"endColumn":42},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":171,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":171,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":171,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":171,"endColumn":43},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":204,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":204,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'parent' is defined but never used.","line":205,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":205,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'child' is defined but never used.","line":205,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":205,"endColumn":33},{"ruleId":"no-unused-vars","severity":2,"message":"'parentIndex' is defined but never used.","line":205,"column":35,"nodeType":"Identifier","messageId":"unusedVar","endLine":205,"endColumn":54},{"ruleId":"no-unused-vars","severity":2,"message":"'childIndex' is defined but never used.","line":205,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":205,"endColumn":74},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":219,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":219,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":219,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":219,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":236,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":236,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":236,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":236,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":250,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":250,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":250,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":250,"endColumn":36}],"suppressedMessages":[],"errorCount":48,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n// client/src/utils/array-safety-enhanced.ts\n// --------------------------------------------------\n// Comprehensive array safety utilities for null/undefined handling\n// Enhanced version with additional features for server-side use\n\n/**\n * Type guards for array validation\n */\nexport function isArray<T>(value: unknown): value is T[] {\n  return Array.isArray(value);\n}\n\nexport function isSafeArray<T>(value: T[] | null | undefined): value is T[] {\n  return Array.isArray(value) && value !== null;\n}\n\n/**\n * Safe forEach implementation with comprehensive null/undefined handling\n */\nexport function forEach<T>(\n  array: T[] | null | undefined,\n  callback: (item: T, index: number, array: T[]) => void,\n  thisArg?: any\n): void {\n  if (!isSafeArray(array)) {\n    if (process.env.NODE_ENV === 'development') {\n      console.debug('forEach called on null/undefined array');\n    }\n    return;\n  }\n  \n  array.forEach(callback, thisArg);\n}\n\n/**\n * Safe map implementation\n */\nexport function map<T, R>(\n  array: T[] | null | undefined,\n  callback: (item: T, index: number, array: T[]) => R,\n  thisArg?: any\n): R[] {\n  if (!isSafeArray(array)) return [];\n  return array.map(callback, thisArg);\n}\n\n/**\n * Safe filter implementation\n */\nexport function filter<T>(\n  array: T[] | null | undefined,\n  predicate: (item: T, index: number, array: T[]) => boolean,\n  thisArg?: any\n): T[] {\n  if (!isSafeArray(array)) return [];\n  return array.filter(predicate, thisArg);\n}\n\n/**\n * Safe reduce implementation\n */\nexport function reduce<T, R>(\n  array: T[] | null | undefined,\n  callback: (acc: R, item: T, index: number, array: T[]) => R,\n  initialValue: R\n): R {\n  if (!isSafeArray(array)) return initialValue;\n  return array.reduce(callback, initialValue);\n}\n\n/**\n * Safe find implementation\n */\nexport function find<T>(\n  array: T[] | null | undefined,\n  predicate: (item: T, index: number, array: T[]) => boolean,\n  thisArg?: any\n): T | undefined {\n  if (!isSafeArray(array)) return undefined;\n  return array.find(predicate, thisArg);\n}\n\n/**\n * Safe some implementation\n */\nexport function some<T>(\n  array: T[] | null | undefined,\n  predicate: (item: T, index: number, array: T[]) => boolean,\n  thisArg?: any\n): boolean {\n  if (!isSafeArray(array)) return false;\n  return array.some(predicate, thisArg);\n}\n\n/**\n * Safe every implementation\n */\nexport function every<T>(\n  array: T[] | null | undefined,\n  predicate: (item: T, index: number, array: T[]) => boolean,\n  thisArg?: any\n): boolean {\n  if (!isSafeArray(array)) return true; // Empty array behavior\n  return array.every(predicate, thisArg);\n}\n\n/**\n * Safe array access with default fallback\n */\nexport function safeArray<T>(\n  array: T[] | null | undefined,\n  defaultValue: T[] = []\n): T[] {\n  return isSafeArray(array) ? array : defaultValue;\n}\n\n/**\n * Get array length safely\n */\nexport function length(array: any[] | null | undefined): number {\n  return isSafeArray(array) ? array.length : 0;\n}\n\n/**\n * Get item at index safely\n */\nexport function at<T>(\n  array: T[] | null | undefined,\n  index: number\n): T | undefined {\n  if (!isSafeArray(array)) return undefined;\n  return array.at(index);\n}\n\n/**\n * Chainable SafeArray class for fluent operations\n */\nexport class SafeArray<T> {\n  constructor(private array: T[] | null | undefined) {}\n  \n  forEach(callback: (item: T, index: number) => void): SafeArray<T> {\n    forEach(this.array, callback);\n    return this;\n  }\n  \n  map<R>(callback: (item: T, index: number) => R): SafeArray<R> {\n    return new SafeArray(map(this.array, callback));\n  }\n  \n  filter(predicate: (item: T, index: number) => boolean): SafeArray<T> {\n    return new SafeArray(filter(this.array, predicate));\n  }\n  \n  reduce<R>(callback: (acc: R, item: T) => R, initial: R): R {\n    return reduce(this.array, callback, initial);\n  }\n  \n  find(predicate: (item: T, index: number) => boolean): T | undefined {\n    return find(this.array, predicate);\n  }\n  \n  some(predicate: (item: T, index: number) => boolean): boolean {\n    return some(this.array, predicate);\n  }\n  \n  every(predicate: (item: T, index: number) => boolean): boolean {\n    return every(this.array, predicate);\n  }\n  \n  toArray(): T[] {\n    return safeArray(this.array);\n  }\n  \n  get length(): number {\n    return length(this.array);\n  }\n  \n  isEmpty(): boolean {\n    return this.length === 0;\n  }\n  \n  isNotEmpty(): boolean {\n    return this.length > 0;\n  }\n}\n\n/**\n * Factory function for chainable operations\n */\nexport function safe<T>(array: T[] | null | undefined): SafeArray<T> {\n  return new SafeArray(array);\n}\n\n/**\n * Helper for nested array operations\n */\nexport function forEachNested<T, U>(\n  array: T[] | null | undefined,\n  nestedGetter: (item: T) => U[] | null | undefined,\n  callback: (parent: T, child: U, parentIndex: number, childIndex: number) => void\n): void {\n  forEach(array, (parent, parentIndex) => {\n    forEach(nestedGetter(parent), (child, childIndex) => {\n      callback(parent, child, parentIndex, childIndex);\n    });\n  });\n}\n\n/**\n * Performance monitoring wrapper for debugging\n */\nexport function forEachWithMetrics<T>(\n  array: T[] | null | undefined,\n  callback: (item: T, index: number) => void,\n  metricName?: string\n): void {\n  const start = performance.now();\n  forEach(array, callback);\n  \n  if (metricName && process.env.NODE_ENV === 'development') {\n    const duration = performance.now() - start;\n    console.debug(`forEach[${metricName}]: ${duration.toFixed(2)}ms for ${length(array)} items`);\n  }\n}\n\n/**\n * Async-safe forEach for promise-based operations\n */\nexport async function forEachAsync<T>(\n  array: T[] | null | undefined,\n  callback: (item: T, index: number) => Promise<void>\n): Promise<void> {\n  if (!isSafeArray(array)) return;\n  \n  for (let i = 0; i < array.length; i++) {\n    await callback(array[i], i);\n  }\n}\n\n/**\n * Parallel processing for async operations\n */\nexport async function forEachParallel<T>(\n  array: T[] | null | undefined,\n  callback: (item: T, index: number) => Promise<void>,\n  concurrency: number = 10\n): Promise<void> {\n  if (!isSafeArray(array)) return;\n  \n  const chunks: T[][] = [];\n  for (let i = 0; i < array.length; i += concurrency) {\n    chunks.push(array.slice(i, i + concurrency));\n  }\n  \n  for (const chunk of chunks) {\n    await Promise.all(\n      chunk.map((item, localIndex) => {\n        const globalIndex = chunks.indexOf(chunk) * concurrency + localIndex;\n        return callback(item, globalIndex);\n      })\n    );\n  }\n}\n\n/**\n * Legacy compatibility - matches the existing utility pattern\n */\nexport const safeForEach = forEach;\nexport const safeMap = map;\nexport const safeFilter = filter;\nexport const safeReduce = reduce;\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\utils\\array-safety.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":22,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":22,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":32,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":32,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":40,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":40,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":40,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'acc' is defined but never used.","line":48,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":48,"column":21,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":48,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":43}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n// src/utils/array-safety.ts\n// --------------------------------------------------\n// Canonical ΓÇ£safeΓÇ¥ array utilities to prevent undefined errors\n// Usage: import { safeArray, forEach, map, filter, reduce } from '@/utils/array-safety'\n\n/**\n * Returns the array if itΓÇÖs non-null/undefined, else [].\n */\nexport const safeArray = <T>(arr?: T[] | null): T[] =>\n  Array.isArray(arr) ? arr : [];\n\n/**\n * Wrapper around Array.forEach that skips if arr is null/undefined.\n */\nexport const forEach = <T>(\n  arr: T[] | undefined | null,\n  callback: (item: T, index: number) => void\n): void => {\n  safeArray(arr).forEach(callback);\n};\n\n/**\n * Safe map: returns mapped array or [].\n */\nexport const map = <T, U>(\n  arr: T[] | undefined | null,\n  callback: (item: T, index: number) => U\n): U[] => safeArray(arr).map(callback);\n\n/**\n * Safe filter: returns filtered array or [].\n */\nexport const filter = <T>(\n  arr: T[] | undefined | null,\n  predicate: (item: T, index: number) => boolean\n): T[] => safeArray(arr).filter(predicate);\n\n/**\n * Safe reduce: returns reduced value or initialValue.\n */\nexport const reduce = <T, U>(\n  arr: T[] | undefined | null,\n  reducer: (acc: U, item: T, index: number) => U,\n  initialValue: U\n): U => safeArray(arr).reduce(reducer, initialValue);\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\utils\\async-iteration.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'safeArray' is defined but never used.","line":10,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":10,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":31,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":31,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":31,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":82,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":82,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":37},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":115,"column":36,"nodeType":"Identifier","messageId":"undef","endLine":115,"endColumn":46},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":127,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":127,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":127,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":127,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'array' is defined but never used.","line":127,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":127,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":150,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":150,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":36},{"ruleId":"no-unused-vars","severity":2,"message":"'array' is defined but never used.","line":150,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":48},{"ruleId":"no-undef","severity":2,"message":"'setTimeout' is not defined.","line":176,"column":38,"nodeType":"Identifier","messageId":"undef","endLine":176,"endColumn":48},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":202,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":202,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":202,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":202,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'array' is defined but never used.","line":202,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":202,"endColumn":49},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":215,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":215,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":215,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":215,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'array' is defined but never used.","line":215,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":215,"endColumn":49},{"ruleId":"no-unused-vars","severity":2,"message":"'accumulator' is defined but never used.","line":232,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":232,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'currentValue' is defined but never used.","line":232,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":232,"endColumn":44},{"ruleId":"no-unused-vars","severity":2,"message":"'currentIndex' is defined but never used.","line":232,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":232,"endColumn":66},{"ruleId":"no-unused-vars","severity":2,"message":"'array' is defined but never used.","line":232,"column":68,"nodeType":"Identifier","messageId":"unusedVar","endLine":232,"endColumn":78},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":249,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":249,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":249,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":249,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'array' is defined but never used.","line":249,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":249,"endColumn":49},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":266,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":266,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":266,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":266,"endColumn":37},{"ruleId":"no-unused-vars","severity":2,"message":"'array' is defined but never used.","line":266,"column":39,"nodeType":"Identifier","messageId":"unusedVar","endLine":266,"endColumn":49},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":281,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":281,"endColumn":56},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":286,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":286,"endColumn":54},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":291,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":291,"endColumn":53},{"ruleId":"no-unused-vars","severity":2,"message":"'item' is defined but never used.","line":300,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":300,"endColumn":55}],"suppressedMessages":[],"errorCount":33,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\n/**\n * Async iteration utilities to replace problematic forEach patterns\n */\n\nimport { safeArray } from './array-safety';\nimport { logger } from '../lib/logger';\n\n// Compile-time flag for metrics collection - dead-stripped in production builds\nconst withMetrics: boolean = import.meta.env?.MODE !== 'production';\n\nexport interface ProcessingOptions {\n  parallel?: boolean;\n  batchSize?: number;\n  continueOnError?: boolean;\n  delayBetweenBatches?: number;\n}\n\n/**\n * Process an array of items with proper async handling\n * @param items Array of items to process\n * @param processor Function to process each item\n * @param options Processing options\n */\nexport async function processAsync<T>(\n  items: T[],\n  processor: (item: T, index: number) => Promise<void>,\n  options: ProcessingOptions = {}\n): Promise<void> {\n  const { \n    parallel = false, \n    batchSize = 10, \n    continueOnError = false,\n    delayBetweenBatches = 0\n  } = options;\n  \n  if (!Array.isArray(items) || items.length === 0) {\n    return;\n  }\n\n  if (parallel) {\n    if (batchSize >= items.length) {\n      // Process all items in parallel\n      if (continueOnError) {\n        const results = await Promise.allSettled(items.map((item, index) => processor(item, index)));\n        // Handle errors from Promise.allSettled\n        for (let i = 0; i < results.length; i++) {\n          const result = results[i];\n          if (result.status === 'rejected') {\n            logger.error(`Failed to process item ${i}:`, result.reason);\n          }\n        }\n      } else {\n        await Promise.all(items.map((item, index) => processor(item, index)));\n      }\n    } else {\n      // Process in batches\n      await processBatches(items, processor, batchSize, delayBetweenBatches, continueOnError);\n    }\n  } else {\n    // Sequential processing\n    for (let i = 0; i < items.length; i++) {\n      try {\n        await processor(items[i], i);\n      } catch (error) {\n        if (!continueOnError) throw error;\n        logger.error(`Processing error at index ${i}:`, error as Error);\n      }\n    }\n  }\n}\n\n/**\n * Process items in batches with optional delays\n */\nasync function processBatches<T>(\n  items: T[],\n  processor: (item: T, index: number) => Promise<void>,\n  batchSize: number,\n  delay: number,\n  continueOnError: boolean\n): Promise<void> {\n  for (let i = 0; i < items.length; i += batchSize) {\n    const batch = items.slice(i, i + batchSize);\n    const batchStart = i;\n    \n    try {\n      if (continueOnError) {\n        const results = await Promise.allSettled(\n          batch.map((item, batchIndex) => processor(item, batchStart + batchIndex))\n        );\n        \n        for (let i = 0; i < results.length; i++) {\n          const result = results[i];\n          if (result.status === 'rejected') {\n            logger.error(`Failed to process item ${batchStart + i}:`, result.reason);\n          }\n        }\n      } else {\n        await Promise.all(\n          batch.map((item, batchIndex) => processor(item, batchStart + batchIndex))\n        );\n      }\n    } catch (error) {\n      if (!continueOnError) throw error;\n      logger.error(`Batch processing error starting at index ${batchStart}:`, error as Error);\n    }\n    \n    // Add delay between batches if specified\n    if (delay > 0 && i + batchSize < items.length) {\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n}\n\n/**\n * Sequential async forEach replacement\n * @param items Array to iterate over\n * @param callback Async callback function\n */\nexport async function forEachAsync<T>(\n  items: T[],\n  callback: (item: T, index: number, array: T[]) => Promise<void>\n): Promise<void> {\n  if (!Array.isArray(items)) return;\n  \n  const start = withMetrics ? performance.now() : 0;\n  \n  for (let i = 0; i < items.length; i++) {\n    await callback(items[i], i, items);\n  }\n  \n  if (withMetrics && items.length > 100) {\n    console.info(`[async-metrics] forEachAsync: ${items.length} items in ${(performance.now() - start).toFixed(1)}ms`);\n  }\n}\n\n/**\n * Parallel async map with proper error handling\n * @param items Array to map over\n * @param callback Async mapping function\n * @param options Processing options\n */\nexport async function mapAsync<T, R>(\n  items: T[],\n  callback: (item: T, index: number, array: T[]) => Promise<R>,\n  options: Omit<ProcessingOptions, 'continueOnError'> = {}\n): Promise<R[]> {\n  const { parallel = true, batchSize = 10, delayBetweenBatches = 0 } = options;\n  \n  if (!Array.isArray(items)) return [];\n  \n  const start = withMetrics ? performance.now() : 0;\n  let results: R[];\n  \n  if (parallel && batchSize >= items.length) {\n    // Process all items in parallel\n    results = await Promise.all(items.map(callback));\n  } else if (parallel) {\n    // Process in batches\n    results = [];\n    \n    for (let i = 0; i < items.length; i += batchSize) {\n      const batch = items.slice(i, i + batchSize);\n      const batchResults = await Promise.all(\n        batch.map((item, batchIndex) => callback(item, i + batchIndex, items))\n      );\n      results.push(...batchResults);\n      \n      // Add delay between batches if specified\n      if (delayBetweenBatches > 0 && i + batchSize < items.length) {\n        await new Promise(resolve => setTimeout(resolve, delayBetweenBatches));\n      }\n    }\n  } else {\n    // Sequential processing\n    results = [];\n    for (let i = 0; i < items.length; i++) {\n      const result = await callback(items[i], i, items);\n      results.push(result);\n    }\n  }\n  \n  if (withMetrics && items.length > 100) {\n    const mode = parallel ? 'parallel' : 'sequential';\n    console.info(`[async-metrics] mapAsync (${mode}): ${items.length} items in ${(performance.now() - start).toFixed(1)}ms`);\n  }\n  \n  return results;\n}\n\n\n/**\n * Filter with async predicate\n */\nexport async function filterAsync<T>(\n  items: T[],\n  predicate: (item: T, index: number, array: T[]) => Promise<boolean>\n): Promise<T[]> {\n  if (!Array.isArray(items)) return [];\n  \n  const results = await mapAsync(items, predicate);\n  return items.filter((_, index) => results[index]);\n}\n\n/**\n * Find with async predicate\n */\nexport async function findAsync<T>(\n  items: T[],\n  predicate: (item: T, index: number, array: T[]) => Promise<boolean>\n): Promise<T | undefined> {\n  if (!Array.isArray(items)) return undefined;\n  \n  for (let i = 0; i < items.length; i++) {\n    if (await predicate(items[i], i, items)) {\n      return items[i];\n    }\n  }\n  return undefined;\n}\n\n/**\n * Reduce with async reducer\n */\nexport async function reduceAsync<T, R>(\n  items: T[],\n  reducer: (accumulator: R, currentValue: T, currentIndex: number, array: T[]) => Promise<R>,\n  initialValue: R\n): Promise<R> {\n  if (!Array.isArray(items)) return initialValue;\n  \n  let accumulator = initialValue;\n  for (let i = 0; i < items.length; i++) {\n    accumulator = await reducer(accumulator, items[i], i, items);\n  }\n  return accumulator;\n}\n\n/**\n * Some with async predicate\n */\nexport async function someAsync<T>(\n  items: T[],\n  predicate: (item: T, index: number, array: T[]) => Promise<boolean>\n): Promise<boolean> {\n  if (!Array.isArray(items)) return false;\n  \n  for (let i = 0; i < items.length; i++) {\n    if (await predicate(items[i], i, items)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Every with async predicate\n */\nexport async function everyAsync<T>(\n  items: T[],\n  predicate: (item: T, index: number, array: T[]) => Promise<boolean>\n): Promise<boolean> {\n  if (!Array.isArray(items)) return true;\n  \n  for (let i = 0; i < items.length; i++) {\n    if (!(await predicate(items[i], i, items))) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Example usage patterns\nexport const examples = {\n  // Sequential processing (safest)\n  sequential: async <T>(items: T[], processor: (item: T) => Promise<void>) => {\n    await forEachAsync(items, processor);\n  },\n\n  // Parallel processing (fastest)\n  parallel: async <T>(items: T[], processor: (item: T) => Promise<void>) => {\n    await processAsync(items, processor, { parallel: true });\n  },\n\n  // Batched processing (balanced)\n  batched: async <T>(items: T[], processor: (item: T) => Promise<void>) => {\n    await processAsync(items, processor, { \n      parallel: true, \n      batchSize: 5, \n      delayBetweenBatches: 100 \n    });\n  },\n\n  // Error-resilient processing\n  resilient: async <T>(items: T[], processor: (item: T) => Promise<void>) => {\n    await processAsync(items, processor, { \n      parallel: true, \n      continueOnError: true \n    });\n  }\n};\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\utils\\export-excel.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Blob' is not defined.","line":24,"column":20,"nodeType":"Identifier","messageId":"undef","endLine":24,"endColumn":24},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":28,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":28,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-console */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable react-hooks/exhaustive-deps */\ninterface ExportData {\n  portfolioCompanies: Array<{\n    name: string;\n    sector: string;\n    stage: string;\n    investmentAmount: string;\n    currentValuation?: string;\n    status: string;\n    foundedYear?: string;\n  }>;\n}\n\nexport function exportToExcel(data: ExportData, filename: string = 'povc-fund-report') {\n  // Simple CSV export for demonstration\n  // In production, you would use a library like xlsx or similar\n  \n  const csvContent = generateCSV(data);\n  \n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n  const link = document.createElement('a');\n  \n  if (link.download !== undefined) {\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `${filename}-${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n}\n\nfunction generateCSV(data: ExportData): string {\n  if (!data || !data.portfolioCompanies) return '';\n  \n  const headers = [\n    'Company Name',\n    'Sector', \n    'Stage',\n    'Investment Amount',\n    'Current Valuation',\n    'Multiple',\n    'Status',\n    'Founded Year'\n  ];\n  \n  const rows = data.portfolioCompanies.map((company) => [\n    company.name,\n    company.sector,\n    company.stage,\n    `$${(parseFloat(company.investmentAmount) / 1000000).toFixed(1)}M`,\n    company.currentValuation ? `$${(parseFloat(company.currentValuation) / 1000000).toFixed(1)}M` : 'N/A',\n    company.currentValuation ? (parseFloat(company.currentValuation) / parseFloat(company.investmentAmount)).toFixed(2) + 'x' : 'N/A',\n    company.status,\n    company.foundedYear || 'N/A'\n  ]);\n  \n  const csvContent = [headers, ...rows]\n    .map(row => row.map(field => `\"${field}\"`).join(','))\n    .join('\\n');\n    \n  return csvContent;\n}\n\n","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\utils\\export-reserves.ts","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'toCents' is defined but never used.","line":29,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":29,"endColumn":17},{"ruleId":"no-unused-vars","severity":2,"message":"'toPercent' is defined but never used.","line":33,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":33,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'Blob' is not defined.","line":137,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":137,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":138,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":138,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":145,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":145,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'Blob' is not defined.","line":283,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":283,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":284,"column":17,"nodeType":"Identifier","messageId":"undef","endLine":284,"endColumn":20},{"ruleId":"no-undef","severity":2,"message":"'URL' is not defined.","line":291,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":291,"endColumn":8}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Dynamic export utilities for reserves data\n * Uses lazy loading to keep bundle size small\n */\n\nimport { isEnabled } from '@/lib/feature-flags';\nimport { metrics } from '@/metrics/reserves-metrics';\nimport type { ReservesOutput, Company } from '@shared/types/reserves-v11';\n\nexport interface ExportOptions {\n  format: 'csv' | 'excel' | 'json';\n  filename?: string;\n  includeMetadata?: boolean;\n  includeSummary?: boolean;\n}\n\nexport interface ExportData {\n  output: ReservesOutput;\n  companies: Company[];\n  config?: any;\n  timestamp?: Date;\n}\n\n// Helper functions for type-safe numeric conversions\nfunction toNumber(value: any): number {\n  return Number(value ?? 0);\n}\n\nfunction toCents(value: any): number {\n  return Math.round(toNumber(value) * 100);\n}\n\nfunction toPercent(value: any): string {\n  return toNumber(value).toFixed(2) + '%';\n}\n\n/**\n * Export reserves data to CSV format\n */\nasync function exportToCSV(data: ExportData, options: ExportOptions): Promise<void> {\n  const timer = metrics.startTimer('export.csv');\n  \n  try {\n    // Dynamic import of Papa Parse\n    const Papa = await import('papaparse');\n    \n    // Prepare data for CSV\n    const rows = data.output.allocations.map(allocation => {\n      const company = data.companies.find(c => c.id === allocation.company_id);\n      const rank = data.output.metadata.exit_moic_ranking.indexOf(allocation.company_id) + 1;\n      \n      return {\n        Rank: rank,\n        'Company ID': allocation.company_id,\n        'Company Name': company?.name || 'Unknown',\n        Stage: company?.stage || '',\n        Sector: company?.sector || '',\n        'Initial Investment': (company?.invested_cents || 0) / 100,\n        'Exit MOIC': (company?.exit_moic_bps || 0) / 10000,\n        'Reserve Allocation': allocation.planned_cents / 100,\n        'Reserve %': company?.invested_cents \n          ? ((allocation.planned_cents / company.invested_cents) * 100).toFixed(2) + '%'\n          : '0%',\n        'Cap Amount': allocation.cap_cents / 100,\n        'Allocation Pass': allocation.iteration,\n        Reason: allocation.reason\n      };\n    });\n    \n    // Add summary rows if requested\n    if (options.includeSummary) {\n      rows.push({\n        Rank: 0,\n        'Company ID': 'SUMMARY',\n        'Company Name': '',\n        Stage: '',\n        Sector: '',\n        'Initial Investment': 0,\n        'Exit MOIC': 0,\n        'Reserve Allocation': 0,\n        'Reserve %': '',\n        'Cap Amount': 0,\n        'Allocation Pass': 0,\n        Reason: ''\n      });\n      \n      rows.push({\n        Rank: 0,\n        'Company ID': 'Total Available',\n        'Company Name': String(data.output.metadata.total_available_cents / 100),\n        Stage: '',\n        Sector: '',\n        'Initial Investment': 0,\n        'Exit MOIC': 0,\n        'Reserve Allocation': 0,\n        'Reserve %': '',\n        'Cap Amount': 0,\n        'Allocation Pass': 0,\n        Reason: ''\n      });\n      \n      rows.push({\n        Rank: 0,\n        'Company ID': 'Total Allocated',\n        'Company Name': String(data.output.metadata.total_allocated_cents / 100),\n        Stage: '',\n        Sector: '',\n        'Initial Investment': 0,\n        'Exit MOIC': 0,\n        'Reserve Allocation': 0,\n        'Reserve %': '',\n        'Cap Amount': 0,\n        'Allocation Pass': 0,\n        Reason: ''\n      });\n      \n      rows.push({\n        Rank: 0,\n        'Company ID': 'Remaining',\n        'Company Name': String(data.output.remaining_cents / 100),\n        Stage: '',\n        Sector: '',\n        'Initial Investment': 0,\n        'Exit MOIC': 0,\n        'Reserve Allocation': 0,\n        'Reserve %': '',\n        'Cap Amount': 0,\n        'Allocation Pass': 0,\n        Reason: ''\n      });\n    }\n    \n    // Convert to CSV\n    const csv = Papa.default.unparse(rows);\n    \n    // Download file\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = options.filename || `reserves-allocation-${Date.now()}.csv`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    \n    metrics.recordDuration('export.csv.success', performance.now());\n    \n  } catch (error) {\n    metrics.recordError(`CSV export failed: ${error}`);\n    throw error;\n  } finally {\n    timer.end();\n  }\n}\n\n/**\n * Export reserves data to Excel format\n */\nasync function exportToExcel(data: ExportData, options: ExportOptions): Promise<void> {\n  const timer = metrics.startTimer('export.excel');\n  \n  try {\n    // Dynamic import of xlsx with type assertion for compatibility\n    const XLSX = await import('xlsx') as any;\n    \n    // Create workbook\n    const wb = XLSX.utils.book_new();\n    \n    // Main allocations sheet\n    const allocationsData = data.output.allocations.map(allocation => {\n      const company = data.companies.find(c => c.id === allocation.company_id);\n      const rank = data.output.metadata.exit_moic_ranking.indexOf(allocation.company_id) + 1;\n      \n      return {\n        Rank: rank,\n        'Company ID': allocation.company_id,\n        'Company Name': company?.name || 'Unknown',\n        Stage: company?.stage || '',\n        Sector: company?.sector || '',\n        'Initial Investment ($)': (company?.invested_cents || 0) / 100,\n        'Exit MOIC': (company?.exit_moic_bps || 0) / 10000,\n        'Reserve Allocation ($)': allocation.planned_cents / 100,\n        'Reserve %': company?.invested_cents \n          ? ((allocation.planned_cents / company.invested_cents) * 100)\n          : 0,\n        'Cap Amount ($)': allocation.cap_cents / 100,\n        'Allocation Pass': allocation.iteration,\n        Reason: allocation.reason\n      };\n    });\n    \n    const ws = XLSX.utils.json_to_sheet(allocationsData);\n    \n    // Auto-size columns\n    const colWidths = [\n      { wch: 6 },   // Rank\n      { wch: 15 },  // Company ID\n      { wch: 25 },  // Company Name\n      { wch: 10 },  // Stage\n      { wch: 12 },  // Sector\n      { wch: 18 },  // Initial Investment\n      { wch: 10 },  // Exit MOIC\n      { wch: 20 },  // Reserve Allocation\n      { wch: 12 },  // Reserve %\n      { wch: 15 },  // Cap Amount\n      { wch: 15 },  // Allocation Pass\n      { wch: 40 }   // Reason\n    ];\n    ws['!cols'] = colWidths;\n    \n    XLSX.utils.book_append_sheet(wb, ws, 'Allocations');\n    \n    // Summary sheet\n    if (options.includeSummary) {\n      const summaryData = [\n        { Metric: 'Total Available Reserves', Value: data.output.metadata.total_available_cents / 100 },\n        { Metric: 'Total Allocated', Value: data.output.metadata.total_allocated_cents / 100 },\n        { Metric: 'Remaining Reserves', Value: data.output.remaining_cents / 100 },\n        { Metric: 'Companies Funded', Value: data.output.metadata.companies_funded },\n        { Metric: 'Utilization %', \n          Value: ((data.output.metadata.total_allocated_cents / data.output.metadata.total_available_cents) * 100).toFixed(2) + '%' },\n        { Metric: 'Conservation Check', Value: data.output.metadata.conservation_check ? 'Passed' : 'Warning' },\n        { Metric: 'Max Iterations', Value: data.output.metadata.max_iterations },\n        { Metric: 'Export Date', Value: new Date().toISOString() }\n      ];\n      \n      const summaryWs = XLSX.utils.json_to_sheet(summaryData);\n      summaryWs['!cols'] = [{ wch: 25 }, { wch: 20 }];\n      XLSX.utils.book_append_sheet(wb, summaryWs, 'Summary');\n    }\n    \n    // Metadata sheet\n    if (options.includeMetadata && data.config) {\n      const metadataData = [\n        { Parameter: 'Reserve Percentage', Value: (data.config.reserve_bps / 100) + '%' },\n        { Parameter: 'Remain Passes', Value: data.config.remain_passes },\n        { Parameter: 'Cap Policy', Value: data.config.cap_policy?.kind || 'fixed_percent' },\n        { Parameter: 'Default Cap %', Value: (data.config.cap_policy?.default_percent * 100) + '%' },\n        { Parameter: 'Audit Level', Value: data.config.audit_level }\n      ];\n      \n      const metadataWs = XLSX.utils.json_to_sheet(metadataData);\n      metadataWs['!cols'] = [{ wch: 20 }, { wch: 20 }];\n      XLSX.utils.book_append_sheet(wb, metadataWs, 'Configuration');\n    }\n    \n    // Write file\n    XLSX.writeFile(wb, options.filename || `reserves-allocation-${Date.now()}.xlsx`);\n    \n    metrics.recordDuration('export.excel.success', performance.now());\n    \n  } catch (error) {\n    metrics.recordError(`Excel export failed: ${error}`);\n    throw error;\n  } finally {\n    timer.end();\n  }\n}\n\n/**\n * Export reserves data to JSON format\n */\nasync function exportToJSON(data: ExportData, options: ExportOptions): Promise<void> {\n  const timer = metrics.startTimer('export.json');\n  \n  try {\n    const exportData = {\n      timestamp: data.timestamp || new Date(),\n      output: data.output,\n      companies: options.includeMetadata ? data.companies : undefined,\n      config: options.includeMetadata ? data.config : undefined,\n      summary: options.includeSummary ? {\n        totalAvailable: data.output.metadata.total_available_cents / 100,\n        totalAllocated: data.output.metadata.total_allocated_cents / 100,\n        remaining: data.output.remaining_cents / 100,\n        companiesFunded: data.output.metadata.companies_funded,\n        utilization: (data.output.metadata.total_allocated_cents / data.output.metadata.total_available_cents) * 100\n      } : undefined\n    };\n    \n    const json = JSON.stringify(exportData, null, 2);\n    const blob = new Blob([json], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = options.filename || `reserves-allocation-${Date.now()}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    \n    metrics.recordDuration('export.json.success', performance.now());\n    \n  } finally {\n    timer.end();\n  }\n}\n\n/**\n * Main export function with format detection\n */\nexport async function exportReserves(\n  data: ExportData,\n  options: ExportOptions\n): Promise<void> {\n  // Check if async export is enabled\n  if (!isEnabled('export_async')) {\n    throw new Error('Async export is not enabled');\n  }\n  \n  const timer = metrics.startTimer('export.total');\n  \n  try {\n    switch (options.format) {\n      case 'csv':\n        await exportToCSV(data, options);\n        break;\n        \n      case 'excel':\n        await exportToExcel(data, options);\n        break;\n        \n      case 'json':\n        await exportToJSON(data, options);\n        break;\n        \n      default:\n        throw new Error(`Unsupported export format: ${options.format}`);\n    }\n    \n    // Record successful export\n    metrics.recordDuration('export.success', performance.now());\n    \n  } catch (error) {\n    metrics.recordError(`Export failed: ${error}`);\n    throw error;\n  } finally {\n    timer.end();\n  }\n}\n\n/**\n * Check if export format is supported\n */\nexport function isExportSupported(format: string): boolean {\n  return ['csv', 'excel', 'json'].includes(format);\n}\n\n/**\n * Get suggested filename for export\n */\nexport function getSuggestedFilename(format: string): string {\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);\n  const extension = format === 'excel' ? 'xlsx' : format;\n  return `reserves-allocation-${timestamp}.${extension}`;\n}","usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\utils\\pLimit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\utils\\resilientLimit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\dev\\Updog_restore\\client\\src\\vitals.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'Blob' is not defined.","line":93,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":93,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'fetch' is not defined.","line":97,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":97,"endColumn":10},{"ruleId":"no-undef","severity":2,"message":"'PerformanceObserver' is not defined.","line":150,"column":28,"nodeType":"Identifier","messageId":"undef","endLine":150,"endColumn":47}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { onLCP, onINP, onCLS, onFCP, onTTFB, Metric } from 'web-vitals';\nimport { Sentry } from '@/monitoring';\n\ninterface VitalMetric extends Omit<Metric, 'navigationType'> {\n  navigationType?: string;\n  delta: number;\n}\n\n/**\n * Check if telemetry is allowed based on privacy settings\n */\nfunction isTelemetryAllowed(): boolean {\n  // Check DNT header respect\n  if (navigator.doNotTrack === '1') {\n    return false;\n  }\n  \n  // Check user opt-out preference\n  const privacySettings = localStorage.getItem('privacy-settings');\n  if (privacySettings) {\n    try {\n      const settings = JSON.parse(privacySettings);\n      if (settings.telemetryOptOut === true) {\n        return false;\n      }\n    } catch (e) {\n      // Invalid settings, allow by default\n    }\n  }\n  \n  // Check if RUM v2 is enabled and should validate\n  if (import.meta.env.VITE_ENABLE_RUM_V2 === '1') {\n    // Additional v2 checks can go here\n    return true;\n  }\n  \n  return true;\n}\n\n/**\n * Send Core Web Vitals to monitoring backends\n */\nfunction sendToAnalytics(metric: VitalMetric) {\n  // Privacy check - short circuit if telemetry disabled\n  if (!isTelemetryAllowed()) {\n    if (import.meta.env.DEV) {\n      console.log('[Web Vital] Telemetry disabled by privacy settings');\n    }\n    return;\n  }\n  \n  // Get or create correlation ID\n  const cid = sessionStorage.getItem('cid') || crypto.randomUUID();\n  if (!sessionStorage.getItem('cid')) {\n    sessionStorage.setItem('cid', cid);\n  }\n  \n  const body = {\n    name: metric.name,\n    value: metric.value,\n    rating: metric.rating,\n    delta: metric.delta,\n    id: metric.id,\n    navigationType: metric.navigationType,\n    pathname: window.location.pathname,\n    timestamp: Date.now(), // Use numeric timestamp for v2 validation\n    release: import.meta.env.VITE_GIT_SHA || 'unknown',\n    env: import.meta.env.MODE,\n    cid,\n  };\n\n  // Send to Sentry as custom measurement (if privacy allows)\n  if ((window as any).Sentry && isTelemetryAllowed()) {\n    // Use span API for measurements in v10+\n    Sentry.withScope((scope) => {\n      scope.setMeasurement(`webvital.${metric.name.toLowerCase()}`, metric.value);\n      \n      // Also send as breadcrumb for observability\n      Sentry.addBreadcrumb({\n        message: `Web Vital: ${metric.name.toLowerCase()}`,\n        level: 'info',\n        data: {\n          value: metric.value,\n          rating: metric.rating\n        }\n      });\n    });\n  }\n\n  // Send to backend RUM endpoint\n  if (navigator.sendBeacon) {\n    const url = '/metrics/rum';\n    const blob = new Blob([JSON.stringify(body)], { type: 'application/json' });\n    navigator.sendBeacon(url, blob);\n  } else {\n    // Fallback for older browsers\n    fetch('/metrics/rum', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body),\n      keepalive: true,\n    }).catch(console.error);\n  }\n\n  // Log to console in development\n  if (import.meta.env.DEV) {\n    console.log(`[Web Vital] ${metric.name}:`, metric.value, metric.rating);\n  }\n}\n\n/**\n * Initialize Web Vitals collection\n */\nexport function startVitals() {\n  // Core Web Vitals\n  onLCP(sendToAnalytics);  // Largest Contentful Paint\n  onINP(sendToAnalytics);  // Interaction to Next Paint (replaces FID)\n  onCLS(sendToAnalytics);  // Cumulative Layout Shift\n  \n  // Additional metrics\n  onFCP(sendToAnalytics);  // First Contentful Paint\n  onTTFB(sendToAnalytics); // Time to First Byte\n  \n  // Custom performance marks\n  if (window.performance && window.performance.mark) {\n    // Mark when React app is interactive\n    window.addEventListener('load', () => {\n      window.performance.mark('app-interactive');\n      \n      // Measure time to interactive\n      window.performance.measure('time-to-interactive', 'navigationStart', 'app-interactive');\n      const measure = window.performance.getEntriesByName('time-to-interactive')[0];\n      \n      if (measure) {\n        sendToAnalytics({\n          name: 'TTI',\n          value: measure.duration,\n          rating: measure.duration < 3800 ? 'good' : measure.duration < 7300 ? 'needs-improvement' : 'poor',\n          id: `tti-${Date.now()}`,\n          entries: [],\n          navigationType: 'navigate',\n        } as unknown as VitalMetric);\n      }\n    });\n  }\n  \n  // Monitor long tasks\n  if ('PerformanceObserver' in window) {\n    try {\n      const observer = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          // Report tasks longer than 50ms as potential issues\n          if (entry.duration > 50) {\n            Sentry.addBreadcrumb({\n              category: 'performance',\n              message: `Long task detected: ${entry.duration}ms`,\n              level: entry.duration > 100 ? 'warning' : 'info',\n              data: {\n                duration: entry.duration,\n                startTime: entry.startTime,\n                name: entry.name,\n              },\n            });\n          }\n        }\n      });\n      \n      observer.observe({ entryTypes: ['longtask'] });\n    } catch (e) {\n      console.warn('Long task observer not supported:', e);\n    }\n  }\n  \n  console.log('Web Vitals monitoring initialized');\n}\n\n/**\n * Get current Web Vitals snapshot (for debugging)\n */\nexport function getVitalsSnapshot() {\n  const vitals: Record<string, number | null> = {\n    lcp: null,\n    inp: null,\n    cls: null,\n    fcp: null,\n    ttfb: null,\n  };\n  \n  // Collect current values (note: these are cumulative)\n  onLCP((metric) => { vitals['lcp'] = metric.value; }, { reportAllChanges: false });\n  onINP((metric) => { vitals['inp'] = metric.value; }, { reportAllChanges: false });\n  onCLS((metric) => { vitals['cls'] = metric.value; }, { reportAllChanges: false });\n  onFCP((metric) => { vitals['fcp'] = metric.value; }, { reportAllChanges: false });\n  onTTFB((metric) => { vitals['ttfb'] = metric.value; }, { reportAllChanges: false });\n  \n  return vitals;\n}\n\n// Expose for debugging in console\nif (import.meta.env.DEV) {\n  (window as any).getVitalsSnapshot = getVitalsSnapshot;\n}","usedDeprecatedRules":[]}]
