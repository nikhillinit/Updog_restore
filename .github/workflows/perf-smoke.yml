name: perf-smoke
on:
  pull_request:
    paths: 
      - 'client/**'
      - 'server/**'
      - 'shared/**'
      - 'package*.json'
  workflow_dispatch:

jobs:
  smoke:
    runs-on: ubuntu-latest
    # Non-gating - always continue even if this fails
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with: 
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Start preview server
        run: |
          npm run preview &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          # Wait for server to be ready
          for i in {1..30}; do
            if curl -f http://localhost:4173 > /dev/null 2>&1; then
              echo "Server is ready"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
          done
      
      - name: Run k6 smoke test
        run: |
          # Check if k6 scenarios exist
          if [ -d "k6/scenarios" ] && [ -f "k6/scenarios/smoke.js" ]; then
            # Install k6
            curl -L https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz | tar xvz
            ./k6 run k6/scenarios/smoke.js --out json=perf/smoke.json || true
          else
            # Create a basic smoke test if none exists
            mkdir -p k6/scenarios perf
            cat > k6/scenarios/smoke.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          
          export let options = {
            vus: 5,
            duration: '30s',
            thresholds: {
              http_req_duration: ['p(95)<1000'], // 95% of requests under 1s
              http_req_failed: ['rate<0.1'],     // Error rate under 10%
            },
          };
          
          export default function() {
            // Test health endpoint
            let res = http.get('http://localhost:4173/api/health');
            check(res, {
              'status is 200': (r) => r.status === 200,
              'response time < 400ms': (r) => r.timings.duration < 400,
            });
            
            // Test main page
            res = http.get('http://localhost:4173/');
            check(res, {
              'main page loads': (r) => r.status === 200,
            });
            
            sleep(1);
          }
          EOF
            echo "Created basic k6 smoke test"
            curl -L https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz | tar xvz
            ./k6 run k6/scenarios/smoke.js --out json=perf/smoke.json || true
          fi
      
      - name: Stop server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi
      
      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with: 
          name: perf-smoke-${{ github.run_number }}
          path: perf/smoke.json
          retention-days: 30
      
      - name: Comment results on PR (optional)
        if: github.event_name == 'pull_request' && always()
        continue-on-error: true
        run: |
          if [ -f "perf/smoke.json" ]; then
            echo "ðŸ“Š Performance smoke test completed. Results attached as artifact." > perf-comment.txt
            # Parse basic metrics if jq is available
            if command -v jq > /dev/null 2>&1; then
              echo "" >> perf-comment.txt
              echo "**Key Metrics:**" >> perf-comment.txt
              # Add parsing logic here if needed
            fi
          fi