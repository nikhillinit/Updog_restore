name: Guardian (Scheduled Canary)

on:
  schedule:
    - cron: "0 */4 * * *"  # Every 4 hours
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if muted'
        required: false
        default: 'false'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  guardian-gate:
    name: Guardian TTL Gate
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.ttl-check.outputs.should_run }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check Guardian TTL Mute Status
        id: ttl-check
        run: |
          # Check for Guardian mute label and TTL
          if [[ "${{ github.event.inputs.force_run }}" == "true" ]]; then
            echo "🔒 Force run requested - bypassing TTL check"
            echo "should_run=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Look for latest PR with guardian-mute label
          mute_pr=$(gh pr list --repo $GITHUB_REPOSITORY --label "guardian-mute" --state all --limit 1 --json number,body || echo "[]")
          
          if [[ "$mute_pr" == "[]" ]]; then
            echo "✅ No Guardian mute found - proceeding"
            echo "should_run=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          pr_number=$(echo "$mute_pr" | jq -r '.[0].number')
          pr_body=$(echo "$mute_pr" | jq -r '.[0].body')
          
          # Extract TTL from PR body (format: Guardian-TTL: 2024-01-15T10:30:00Z)
          ttl_line=$(echo "$pr_body" | grep -i "Guardian-TTL:" || true)
          if [[ -z "$ttl_line" ]]; then
            echo "❌ Guardian mute PR #$pr_number missing TTL timestamp"
            echo "should_run=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          ttl_timestamp=$(echo "$ttl_line" | sed -E 's/.*Guardian-TTL:\s*([0-9T:Z-]+).*/\1/')
          echo "🕒 Found Guardian TTL: $ttl_timestamp (PR #$pr_number)"
          
          # Compare timestamps using Node.js for cross-platform compatibility
          node -e "
            const ttl = new Date('$ttl_timestamp');
            const now = new Date();
            if (isNaN(ttl.getTime())) {
              console.error('❌ Invalid TTL timestamp format');
              process.exit(1);
            }
            if (now > ttl) {
              console.log('⏰ Guardian TTL expired - proceeding with checks');
              console.log('should_run=true');
            } else {
              const remaining = Math.round((ttl - now) / 1000 / 60);
              console.log(\`🛡️ Guardian muted for \${remaining} more minutes\`);
              console.log('should_run=false');
              process.exit(1);
            }
          " >> $GITHUB_OUTPUT

  canary-health:
    name: Canary Health Check
    runs-on: ubuntu-latest
    needs: guardian-gate
    if: needs.guardian-gate.outputs.should_run == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Start application
        run: |
          npm run build
          npm start &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          
          # Wait for app to be ready
          timeout 60 bash -c 'until curl -f http://localhost:5000/api/health; do sleep 2; done'
        
      - name: Run canary health checks
        run: |
          chmod +x scripts/canary-check.sh
          scripts/canary-check.sh
        env:
          BASE_URL: http://localhost:5000
          
      - name: Cleanup
        if: always()
        run: |
          if [[ -n "${APP_PID:-}" ]]; then
            kill $APP_PID || true
          fi

  evaluate-guardian:
    name: Evaluate Guardian History
    runs-on: ubuntu-latest
    needs: canary-health
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Evaluate Guardian rolling window
        run: |
          chmod +x scripts/guardian-evaluate.sh
          scripts/guardian-evaluate.sh
        env:
          GUARDIAN_WINDOW_SIZE: 3
          GUARDIAN_MIN_SUCCESS: 2
