name: Stage Validation CI

on:
  pull_request:
    paths:
      - 'server/lib/stage-validation-*.ts'
      - 'server/routes/_ops-stage-validation.ts'
      - 'shared/schemas/parse-stage-distribution.ts'
      - 'shared/schemas/investment-stages.ts'
      - 'tests/perf/validator.microbench.test.ts'
      - 'tests/unit/stage-validation-*.test.ts'
      - 'tests/integration/ops-webhook.test.ts'
      - 'tests/integration/enforce-gate.test.ts'
      - 'observability/prometheus/rules/stage-validation.yml'
      - 'observability/prometheus/alerts/stage-normalization.yml'
      - '.github/workflows/stage-validation-ci.yml'
  push:
    branches: [main]
    paths:
      - 'server/lib/stage-validation-*.ts'
      - 'observability/prometheus/**/*.yml'
  workflow_dispatch:

concurrency:
  group: stage-validation-ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  # Job 1: Performance Micro-Benchmark
  perf-validator:
    name: Validator Performance (p99 < 1ms)
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run validator micro-benchmark
        id: benchmark
        run: |
          npm test tests/perf/validator.microbench.test.ts -- --reporter=json > benchmark-results.json
          # Extract p99 latency from results
          P99=$(jq -r '.testResults[0].assertionResults[] | select(.title | contains("p99")) | .failureMessages' benchmark-results.json || echo "0.5")
          echo "p99_ms=$P99" >> $GITHUB_OUTPUT

      - name: Load baseline
        id: baseline
        run: |
          if [ -f tests/perf/baselines/validator.p99.json ]; then
            BASELINE=$(jq -r '.p99_ms' tests/perf/baselines/validator.p99.json)
            echo "baseline_ms=$BASELINE" >> $GITHUB_OUTPUT
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Check regression (3x threshold)
        if: steps.baseline.outputs.exists == 'true'
        run: |
          P99="${{ steps.benchmark.outputs.p99_ms }}"
          BASELINE="${{ steps.baseline.outputs.baseline_ms }}"
          THRESHOLD=$(echo "$BASELINE * 3" | bc)

          echo "üìä Performance Comparison:"
          echo "  Baseline: ${BASELINE}ms"
          echo "  Current:  ${P99}ms"
          echo "  Threshold (3x): ${THRESHOLD}ms"

          if (( $(echo "$P99 >= $THRESHOLD" | bc -l) )); then
            echo "‚ùå Performance regression detected!"
            exit 1
          else
            echo "‚úÖ Performance within tolerance"
          fi

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: validator-benchmark-${{ github.sha }}
          path: benchmark-results.json
          retention-days: 30

  # Job 2: Promtool Validation
  promtool-validate:
    name: Validate Prometheus Rules
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Promtool
        run: |
          # Install Prometheus (includes promtool)
          PROM_VERSION="2.45.0"
          wget -q https://github.com/prometheus/prometheus/releases/download/v${PROM_VERSION}/prometheus-${PROM_VERSION}.linux-amd64.tar.gz
          tar -xzf prometheus-${PROM_VERSION}.linux-amd64.tar.gz
          sudo mv prometheus-${PROM_VERSION}.linux-amd64/promtool /usr/local/bin/
          promtool --version

      - name: Validate stage-validation rules
        run: |
          if [ -f observability/prometheus/rules/stage-validation.yml ]; then
            echo "üìã Validating stage-validation.yml..."
            promtool check rules observability/prometheus/rules/stage-validation.yml
          fi

      - name: Validate stage-normalization alerts
        run: |
          if [ -f observability/prometheus/alerts/stage-normalization.yml ]; then
            echo "üìã Validating stage-normalization.yml..."
            promtool check rules observability/prometheus/alerts/stage-normalization.yml
          fi

      - name: Check for required alerts
        run: |
          echo "üîç Checking for required alerts..."

          REQUIRED_ALERTS=(
            "StageValidatorLatencyRegression"
            "RedisModeFetchFailing"
            "EnforceGateUnknownRateHigh"
          )

          MISSING=()
          for ALERT in "${REQUIRED_ALERTS[@]}"; do
            if ! grep -q "alert: $ALERT" observability/prometheus/rules/stage-validation.yml; then
              MISSING+=("$ALERT")
            fi
          done

          if [ ${#MISSING[@]} -gt 0 ]; then
            echo "‚ùå Missing required alerts: ${MISSING[*]}"
            exit 1
          else
            echo "‚úÖ All required alerts present"
          fi

  # Job 3: Test Coverage
  test-coverage:
    name: Stage Validation Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run stage validation unit tests
        run: |
          npm test tests/unit/stage-validation-mode.test.ts

      - name: Run ops webhook integration tests
        run: |
          npm test tests/integration/ops-webhook.test.ts

      - name: Run enforce gate tests
        run: |
          npm test tests/integration/enforce-gate.test.ts

      - name: Coverage summary
        run: |
          echo "üìä Test Coverage Summary:"
          echo "  Unit Tests: ‚úÖ"
          echo "  Integration Tests: ‚úÖ"
          echo "  Gate Invariant Tests: ‚úÖ"

  # Job 4: Startup Validation Check
  startup-check:
    name: Startup Validation
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test startup validation (valid config)
        run: |
          export STAGE_VALIDATION_MODE="warn"
          export ALERTMANAGER_WEBHOOK_SECRET="test-secret-at-least-32-characters-long"
          node -e "import('./server/lib/stage-validation-startup.js').then(m => m.validateOrThrow())"

      - name: Test startup validation (invalid mode)
        run: |
          export STAGE_VALIDATION_MODE="invalid"
          if node -e "import('./server/lib/stage-validation-startup.js').then(m => m.validateOrThrow())"; then
            echo "‚ùå Should have failed with invalid mode"
            exit 1
          else
            echo "‚úÖ Correctly rejected invalid mode"
          fi

      - name: Test startup validation (short secret)
        run: |
          export STAGE_VALIDATION_MODE="warn"
          export ALERTMANAGER_WEBHOOK_SECRET="short"
          if node -e "import('./server/lib/stage-validation-startup.js').then(m => m.validateOrThrow())"; then
            echo "‚ùå Should have failed with short secret"
            exit 1
          else
            echo "‚úÖ Correctly rejected short secret"
          fi

  # Summary Job
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [perf-validator, promtool-validate, test-coverage, startup-check]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "üìä Stage Validation CI Results:"
          echo "  Performance: ${{ needs.perf-validator.result }}"
          echo "  Promtool: ${{ needs.promtool-validate.result }}"
          echo "  Tests: ${{ needs.test-coverage.result }}"
          echo "  Startup: ${{ needs.startup-check.result }}"

          if [ "${{ needs.perf-validator.result }}" != "success" ] || \
             [ "${{ needs.promtool-validate.result }}" != "success" ] || \
             [ "${{ needs.test-coverage.result }}" != "success" ] || \
             [ "${{ needs.startup-check.result }}" != "success" ]; then
            echo "‚ùå One or more checks failed"
            exit 1
          else
            echo "‚úÖ All checks passed"
          fi
