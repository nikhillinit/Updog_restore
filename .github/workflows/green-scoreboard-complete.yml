name: Green Scoreboard

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write
  actions: read

jobs:
  # Gate 1: TypeScript
  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af
        with:
          node-version: '20'
          cache: 'npm'

      - name: Pin npm version (CI)
        run: |
          corepack enable || true
          npm install -g npm@10.9.2
          npm --version
          node --version

      - run: npm ci
      
      - name: TypeScript Check
        id: ts-check
        run: |
          echo "🔍 Checking TypeScript compilation..."
          
          # Run typecheck and capture output
          npm run check 2>&1 | tee ts-output.log || true
          
          # Count errors safely (works even with 0 matches)
          TS_ERRORS=$(grep -c "error TS" ts-output.log || echo "0")
          TS_ERRORS="${TS_ERRORS:-0}"
          
          # Ensure it's a number
          if [[ "$TS_ERRORS" =~ ^[0-9]+$ ]]; then
            echo "errors=$TS_ERRORS" >> $GITHUB_OUTPUT
            
            if [ "$TS_ERRORS" -gt 0 ]; then
              echo "❌ TypeScript: $TS_ERRORS errors found"
              exit 1
            else
              echo "✅ TypeScript: Clean (0 errors)"
            fi
          else
            echo "::warning::Non-numeric error count detected: $TS_ERRORS"
            echo "errors=0" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Block new @ts-ignore
        if: github.event_name == 'pull_request'
        run: |
          echo "🔍 Checking for new @ts-ignore comments..."
          
          # Get the base branch
          BASE_BRANCH="${{ github.base_ref }}"
          
          # Check for new @ts-ignore
          if git diff origin/${BASE_BRANCH}...HEAD | grep -E '^\+.*@ts-ignore'; then
            echo "❌ New @ts-ignore detected. Fix the type error properly."
            exit 1
          fi
          
          echo "✅ No new @ts-ignore comments"

  # Gate 2: Tests
  tests:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af
        with:
          node-version: '20'
          cache: 'npm'

      - name: Pin npm version (CI)
        run: |
          corepack enable || true
          npm install -g npm@10.9.2
          npm --version
          node --version

      - run: npm ci
      
      - name: Unit Tests
        run: |
          echo "🧪 Running unit tests..."
          
          # Run tests and capture output
          npm run test:unit 2>&1 | tee unit-test.log || true
          
          # Extract test count
          PASSING=$(grep -oP '\d+(?= passing)' unit-test.log | head -1 || echo "0")
          FAILING=$(grep -oP '\d+(?= failing)' unit-test.log | head -1 || echo "0")
          
          echo "📊 Test Results: $PASSING passing, $FAILING failing"
          
          if [ "$FAILING" -gt 0 ]; then
            echo "❌ Tests failed"
            exit 1
          fi
          
          if [ "$PASSING" -lt 50 ]; then
            echo "❌ Insufficient test coverage (only $PASSING tests)"
            exit 1
          fi
          
          echo "✅ Unit tests: $PASSING tests passed"
      
      - name: Integration Tests
        run: |
          echo "🔗 Running integration tests..."
          npm run test:integration || echo "⚠️ Integration tests not configured"
        timeout-minutes: 5
        continue-on-error: true

  # Gate 3: Build & Bundle
  build:
    name: Build & Bundle Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af
        with:
          node-version: '20'
          cache: 'npm'

      - name: Pin npm version (CI)
        run: |
          corepack enable || true
          npm install -g npm@10.9.2
          npm --version
          node --version

      - run: npm ci
      
      - name: Build Application
        run: |
          echo "🔨 Building application..."
          
          # Build and capture output
          npm run build 2>&1 | tee build.log
          
          echo "✅ Build completed"
      
      - name: Extract Bundle Size
        run: |
          echo "📦 Extracting bundle size..."
          
          # Make script executable
          chmod +x scripts/extract-bundle-size.mjs
          
          # Run extraction
          node scripts/extract-bundle-size.mjs
      
      - name: Check Bundle Budget
        run: |
          BUDGET_KB=400
          WARNING_KB=380
          
          if [ -f "dist/.app-size-kb" ]; then
            SIZE_KB=$(cat dist/.app-size-kb)
            echo "📦 Bundle size: ${SIZE_KB}KB / ${BUDGET_KB}KB"
            
            if [ "$SIZE_KB" -gt "$BUDGET_KB" ]; then
              echo "❌ Bundle exceeds budget!"
              exit 1
            elif [ "$SIZE_KB" -gt "$WARNING_KB" ]; then
              echo "⚠️ Bundle approaching limit (${SIZE_KB}KB > ${WARNING_KB}KB warning threshold)"
            else
              echo "✅ Bundle within budget"
            fi
          else
            echo "⚠️ Could not determine bundle size"
          fi
      
      - uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882
        if: always()
        with:
          name: bundle-report
          path: |
            dist/.app-size-kb
            dist/.bundle-report.json
            build.log

  # Gate 4: CI Health
  ci-health:
    name: CI Health Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            console.log('🔍 Checking CI health...');
            
            // Check recent CI runs on main branch
            try {
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: 'main',
                status: 'completed',
                per_page: 10
              });
              
              if (runs.workflow_runs.length === 0) {
                console.log('⚠️ No recent CI runs found (new repository?)');
                return;
              }
              
              const recentRuns = runs.workflow_runs.slice(0, 5);
              const successCount = recentRuns.filter(r => r.conclusion === 'success').length;
              const successRate = successCount / recentRuns.length;
              
              console.log(`📊 CI Success Rate: ${(successRate * 100).toFixed(0)}% (${successCount}/${recentRuns.length})`);
              
              if (successRate < 0.6) {
                core.setFailed(`❌ CI health poor: ${(successRate * 100).toFixed(0)}% success rate`);
              } else if (successRate < 0.8) {
                console.log('⚠️ CI health degraded');
              } else {
                console.log('✅ CI health good');
              }
            } catch (error) {
              console.log('⚠️ Could not check CI health:', error.message);
            }

  # Gate 5: Guardian Window
  guardian-window:
    name: Guardian Window Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      
      - uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af
        with:
          node-version: '20'
      
      - name: Check Guardian Window
        run: |
          echo "🛡️ Checking Guardian window..."
          
          # Make script executable
          chmod +x tools/check-guardian-window.mjs
          
          # Run check
          node tools/check-guardian-window.mjs || echo "⚠️ Guardian check not critical for now"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GUARDIAN_MUTE_UNTIL: ${{ vars.GUARDIAN_MUTE_UNTIL }}
        continue-on-error: true

  # Optional: E2E Tests (label-triggered)
  e2e-wizard:
    name: E2E Wizard Tests
    if: contains(github.event.pull_request.labels.*.name, 'e2e:wizard')
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af
        with:
          node-version: '20'
          cache: 'npm'

      - name: Pin npm version (CI)
        run: |
          corepack enable || true
          npm install -g npm@10.9.2
          npm --version
          node --version

      - run: npm ci
      
      - name: Install Playwright
        run: npx playwright install --with-deps chromium
      
      - name: Start Application
        run: |
          npm run build
          npm start &
          echo "SERVER_PID=$!" >> $GITHUB_ENV
          
          # Wait for server
          for i in {1..30}; do
            if curl -f http://localhost:5000/healthz 2>/dev/null; then
              echo "✅ Server ready"
              break
            fi
            sleep 2
          done
      
      - name: Run E2E Tests
        run: |
          npm run test:e2e:wizard || npx playwright test tests/e2e/wizard.spec.ts || echo "E2E tests need configuration"
        env:
          E2E_BASE_URL: http://localhost:5000
      
      - name: Cleanup
        if: always()
        run: |
          [[ -n "${SERVER_PID:-}" ]] && kill $SERVER_PID || true
      
      - uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Final Gate: Scoreboard Summary
  scoreboard:
    name: 📊 Scoreboard Summary
    needs: [typecheck, tests, build, ci-health, guardian-window]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Evaluate Gates
        id: evaluate
        run: |
          echo "📊 Evaluating gate status..."
          
          # Check job statuses
          TS_STATUS="${{ needs.typecheck.result }}"
          TEST_STATUS="${{ needs.tests.result }}"
          BUILD_STATUS="${{ needs.build.result }}"
          CI_STATUS="${{ needs.ci-health.result }}"
          GUARDIAN_STATUS="${{ needs.guardian-window.result }}"
          
          # Count successes
          SUCCESS_COUNT=0
          [ "$TS_STATUS" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "$TEST_STATUS" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "$BUILD_STATUS" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "$CI_STATUS" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [ "$GUARDIAN_STATUS" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          
          echo "gates_passed=$SUCCESS_COUNT" >> $GITHUB_OUTPUT
          echo "all_green=$( [ $SUCCESS_COUNT -eq 5 ] && echo true || echo false )" >> $GITHUB_OUTPUT
      
      - name: Post PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            const gates = {
              'TypeScript': '${{ needs.typecheck.result }}' === 'success',
              'Tests': '${{ needs.tests.result }}' === 'success',
              'Build & Bundle': '${{ needs.build.result }}' === 'success',
              'CI Health': '${{ needs.ci-health.result }}' === 'success',
              'Guardian': '${{ needs.guardian-window.result }}' === 'success'
            };
            
            const passedCount = Object.values(gates).filter(v => v).length;
            const allGreen = passedCount === 5;
            
            let summary = '## 📊 Green Scoreboard\n\n';
            
            if (allGreen) {
              summary += '### 🟢 ALL GATES GREEN - Ready to merge\n\n';
            } else if (passedCount >= 3) {
              summary += `### 🟡 PARTIAL PASS - ${passedCount}/5 gates green\n\n`;
            } else {
              summary += `### 🔴 GATES FAILING - ${passedCount}/5 gates green\n\n`;
            }
            
            summary += '| Gate | Status | Details |\n';
            summary += '|------|--------|---------|\\n';
            
            for (const [gate, passed] of Object.entries(gates)) {
              const icon = passed ? '✅' : '❌';
              let details = '';
              
              if (gate === 'TypeScript' && !passed) {
                details = 'Fix TypeScript errors';
              } else if (gate === 'Tests' && !passed) {
                details = 'Ensure tests pass';
              } else if (gate === 'Build & Bundle' && !passed) {
                details = 'Check bundle size';
              } else if (gate === 'CI Health' && !passed) {
                details = 'Recent CI failures';
              } else if (gate === 'Guardian' && !passed) {
                details = 'Guardian canary issues';
              }
              
              summary += `| ${gate} | ${icon} | ${details} |\\n`;
            }
            
            if (!allGreen) {
              summary += '\n### 🔧 Required Actions\n\n';
              
              if (!gates['TypeScript']) {
                summary += '1. Fix TypeScript compilation errors\n';
              }
              if (!gates['Tests']) {
                summary += '2. Fix failing tests\n';
              }
              if (!gates['Build & Bundle']) {
                summary += '3. Reduce bundle size or fix build errors\n';
              }
              if (!gates['CI Health']) {
                summary += '4. Investigate recent CI failures on main branch\n';
              }
              if (!gates['Guardian']) {
                summary += '5. Fix Guardian canary health checks\n';
              }
            }
            
            summary += '\n---\n';
            summary += '_Last updated: ' + new Date().toISOString() + '_';
            
            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(c => 
              c.user.type === 'Bot' && c.body.includes('Green Scoreboard')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }
            
            // Set final status
            if (!allGreen) {
              core.setFailed(`Only ${passedCount}/5 gates passed`);
            } else {
              console.log('✅ All gates passed!');
            }