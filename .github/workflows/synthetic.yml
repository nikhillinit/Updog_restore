name: Synthetic Smoke Tests (Production)

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  smoke-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        
      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af
        with:
          node-version: '22.16.0'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
        
      - name: Run smoke tests
        id: smoke
        run: npx playwright test tests/smoke/wizard.spec.ts --reporter=json
        env:
          BASE_URL: ${{ secrets.PROD_BASE_URL }}
          SMOKE_USER: ${{ secrets.SMOKE_USER }}
          SMOKE_PASS: ${{ secrets.SMOKE_PASS }}
        continue-on-error: true
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882
        with:
          name: smoke-test-results-${{ github.run_id }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7
          
      - name: Parse test results
        if: always()
        id: parse
        run: |
          if [ -f "test-results.json" ]; then
            PASSED=$(jq '.stats.expected' test-results.json)
            FAILED=$(jq '.stats.unexpected' test-results.json)
            echo "passed=$PASSED" >> $GITHUB_OUTPUT
            echo "failed=$FAILED" >> $GITHUB_OUTPUT
          fi
          
      - name: Send alert on failure
        if: steps.smoke.outcome == 'failure'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            const message = `ðŸš¨ **Production Smoke Tests Failed**
            
            Failed tests: ${{ steps.parse.outputs.failed || 'Unknown' }}
            Passed tests: ${{ steps.parse.outputs.passed || 'Unknown' }}
            
            [View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            **Action Required**: Check production health immediately!`;
            
            // Create issue for tracking
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[ALERT] Production smoke tests failed - ${new Date().toISOString()}`,
              body: message,
              labels: ['incident', 'production', 'urgent']
            });
            
      - name: Slack notification on failure
        if: steps.smoke.outcome == 'failure' && secrets.SLACK_WEBHOOK_URL
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "ðŸš¨ Production Smoke Tests Failed!",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {"title": "Environment", "value": "Production", "short": true},
                  {"title": "Failed Tests", "value": "${{ steps.parse.outputs.failed || 0 }}", "short": true},
                  {"title": "Action", "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"}
                ]
              }]
            }'
            
      - name: PagerDuty alert on failure
        if: steps.smoke.outcome == 'failure' && secrets.PAGERDUTY_INTEGRATION_KEY
        run: |
          curl -X POST https://events.pagerduty.com/v2/enqueue \
            -H 'Content-Type: application/json' \
            -d '{
              "routing_key": "${{ secrets.PAGERDUTY_INTEGRATION_KEY }}",
              "event_action": "trigger",
              "payload": {
                "summary": "Production smoke tests failed",
                "severity": "critical",
                "source": "github-actions",
                "custom_details": {
                  "failed_tests": "${{ steps.parse.outputs.failed }}",
                  "passed_tests": "${{ steps.parse.outputs.passed }}",
                  "run_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                }
              }
            }'
            
      - name: Create metrics
        if: always()
        run: |
          echo "smoke_test_passed{environment=\"production\"} ${{ steps.smoke.outcome == 'success' && '1' || '0' }}" >> metrics.txt
          echo "smoke_test_duration_seconds{environment=\"production\"} ${{ steps.smoke.outputs.duration || '0' }}" >> metrics.txt
          
      - name: Success notification
        if: steps.smoke.outcome == 'success'
        run: echo "âœ… All smoke tests passed successfully!"
