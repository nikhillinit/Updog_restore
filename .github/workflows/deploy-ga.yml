name: GA Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      strategy:
        description: 'Deployment strategy'
        required: true
        default: 'canary'
        type: choice
        options:
          - canary
          - blue-green
          - direct
      dry_run:
        description: 'Dry run (simulate only)'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '22.16.0'
  ENABLE_TELEMETRY: '1'

jobs:
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      checklist_passed: ${{ steps.checklist.outputs.passed }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - run: npm ci
      
      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Deploying version: ${VERSION}"
      
      - name: Run GA checklist
        id: checklist
        run: |
          npm run ga:checklist
          echo "passed=$?" >> $GITHUB_OUTPUT
        env:
          PROMETHEUS_URL: ${{ secrets.PROMETHEUS_URL }}
          ALERTMANAGER_URL: ${{ secrets.ALERTMANAGER_URL }}
          GRAFANA_URL: ${{ secrets.GRAFANA_URL }}
      
      - name: Upload checklist results
        uses: actions/upload-artifact@v4
        with:
          name: ga-checklist-results
          path: ga-checklist-results.json
      
      - name: Comment checklist status
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('ga-checklist-results.json'));
            
            let comment = '## 📋 GA Deployment Checklist\n\n';
            
            for (const [key, category] of Object.entries(results.categories)) {
              const icon = category.passed ? '✅' : '❌';
              comment += `### ${icon} ${category.name}\n`;
              
              for (const check of category.checks) {
                const checkIcon = check.passed ? '✅' : check.critical ? '❌' : '⚠️';
                comment += `- ${checkIcon} ${check.name}\n`;
              }
              comment += '\n';
            }
            
            if (!results.passed) {
              comment += '### ❌ Deployment blocked\n';
              comment += 'Critical checks failed:\n';
              results.criticalFailures.forEach(f => {
                comment += `- ${f}\n`;
              });
            }
            
            // Post to deployment issue or PR
            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: comment
              });
            }

  canary-deployment:
    name: Canary Deployment
    needs: pre-deployment
    if: |
      needs.pre-deployment.outputs.checklist_passed == '0' &&
      inputs.strategy == 'canary'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - run: npm ci
      
      - name: Build production bundle
        run: npm run build
        env:
          NODE_ENV: production
          VITE_ENABLE_RUM_V2: '1'
          VITE_ENABLE_SENTRY: '1'
      
      - name: Run canary deployment
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            npm run ga:canary -- --dry-run
          else
            npm run ga:canary
          fi
        env:
          PROMETHEUS_URL: ${{ secrets.PROMETHEUS_URL }}
          ALERTMANAGER_URL: ${{ secrets.ALERTMANAGER_URL }}
          FLAGS_API_URL: ${{ secrets.FLAGS_API_URL }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Upload deployment report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: canary-deployment-report
          path: canary-report-*.json

  stability-monitoring:
    name: Stability Monitoring
    needs: canary-deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Monitor deployment for 48 hours
        run: |
          echo "Starting 48-hour stability watch"
          echo "Version: ${{ needs.pre-deployment.outputs.version }}"
          echo "Environment: ${{ inputs.environment }}"
          
          # Create stability watch issue
          gh issue create \
            --title "Stability Watch: v${{ needs.pre-deployment.outputs.version }}" \
            --label "deployment,stability-watch" \
            --body "Monitoring deployment of v${{ needs.pre-deployment.outputs.version }} to ${{ inputs.environment }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup monitoring dashboard
        run: |
          # Would create/update Grafana dashboard
          echo "Dashboard URL: https://grafana.example.com/d/ga-deployment"

  rollback-on-failure:
    name: Automatic Rollback
    needs: [canary-deployment]
    if: failure()
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - run: npm ci
      
      - name: Execute rollback
        run: |
          npm run ga:rollback -- --force --reason="Automated rollback due to deployment failure"
        env:
          FLAGS_API_URL: ${{ secrets.FLAGS_API_URL }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
      
      - name: Create incident report
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Deployment Rollback: v${{ needs.pre-deployment.outputs.version }}',
              labels: ['incident', 'rollback', 'production'],
              body: `## Automated Rollback Executed
              
              **Version:** ${{ needs.pre-deployment.outputs.version }}
              **Environment:** ${{ inputs.environment }}
              **Time:** ${new Date().toISOString()}
              **Reason:** Deployment failure detected
              
              ### Next Steps
              1. Review deployment logs
              2. Check rollback report
              3. Schedule post-mortem
              
              /cc @oncall-team`
            });

  post-deployment:
    name: Post-deployment Tasks
    needs: [canary-deployment]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Tag release
        run: |
          git tag -a "v${{ needs.pre-deployment.outputs.version }}-${{ inputs.environment }}" \
            -m "Deployed to ${{ inputs.environment }} on $(date)"
          git push --tags
      
      - name: Update deployment tracking
        run: |
          echo "${{ needs.pre-deployment.outputs.version }}" > .last-deployed-version
          echo "$(date -Iseconds)" > .last-deployed-time
      
      - name: Send success notification
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "✅ Deployment Successful",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Version", "value": "${{ needs.pre-deployment.outputs.version }}", "short": true},
                  {"title": "Environment", "value": "${{ inputs.environment }}", "short": true},
                  {"title": "Strategy", "value": "${{ inputs.strategy }}", "short": true},
                  {"title": "Status", "value": "Completed", "short": true}
                ]
              }]
            }'