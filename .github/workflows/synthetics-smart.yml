name: Synthetics Smart

on:
  schedule:
    - cron: '0 */2 * * *'  # Every 2 hours
  push:
    branches: [main]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/**'
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
  workflow_dispatch:

concurrency:
  group: synthetics-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read

jobs:
  guard:
    name: Decide whether to run
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.decide.outputs.should_run }}
      reason: ${{ steps.decide.outputs.reason }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for customer-facing changes
        id: paths
        uses: dorny/paths-filter@v3
        with:
          filters: |
            customer_facing:
              - 'client/**'
              - 'server/**'
              - 'workers/**'
              - 'shared/**'

      - name: Decide
        id: decide
        run: |
          EVENT='${{ github.event_name }}'
          LABELS='${{ toJson(github.event.pull_request.labels) }}'
          CF='${{ steps.paths.outputs.customer_facing }}'
          
          should="false"
          reason="none"
          
          if [ "$EVENT" = "workflow_dispatch" ]; then
            should="true"; reason="manual";
          elif [ "$EVENT" = "push" ]; then
            should="true"; reason="main-push";
          elif [ "$EVENT" = "pull_request" ]; then
            echo "$LABELS" | grep -qi '"name":"hotfix"' && { should="true"; reason="hotfix-label"; }
            if [ "$should" = "false" ] && [ "$CF" = "true" ]; then 
              should="true"; reason="customer-facing-change";
            fi
          elif [ "$EVENT" = "schedule" ]; then
            should="true"; reason="scheduled";
          fi
          
          echo "should_run=$should" >> $GITHUB_OUTPUT
          echo "reason=$reason" >> $GITHUB_OUTPUT

  run:
    name: Run synthetics
    needs: [guard]
    if: needs.guard.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Resolve BASE_URL
        id: base
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ] && [ -n "${{ secrets.SYNTHETIC_URL }}" ]; then
            echo "base=${{ secrets.SYNTHETIC_URL }}" >> "$GITHUB_OUTPUT"
          elif [ -n "${{ vars.SYNTHETIC_URL }}" ]; then
            echo "base=${{ vars.SYNTHETIC_URL }}" >> "$GITHUB_OUTPUT"
          else
            echo "base=http://localhost:5000" >> "$GITHUB_OUTPUT"
            echo "local=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Start local server (if needed)
        if: steps.base.outputs.local == 'true'
        run: |
          npm run dev:quick &
          npx wait-on http://localhost:5000/api/health --timeout 30000

      - name: Run smoke tests
        run: |
          BASE_URL="${{ steps.base.outputs.base }}"
          
          # Quick health check
          code=$(curl -s -o /dev/null -w "%{http_code}" "${BASE_URL}/")
          echo "GET / -> $code"
          test $code -ge 200 -a $code -lt 400
          
          # API health
          code=$(curl -s -o /dev/null -w "%{http_code}" "${BASE_URL}/api/health")
          echo "GET /api/health -> $code"
          test $code -ge 200 -a $code -lt 400

      - name: Run E2E (if available)
        if: hashFiles('tests/synthetics/wizard.e2e.spec.ts') != ''
        run: |
          npx playwright test tests/synthetics/wizard.e2e.spec.ts --project=smoke --reporter=dot
        env:
          BASE_URL: ${{ steps.base.outputs.base }}
        continue-on-error: true