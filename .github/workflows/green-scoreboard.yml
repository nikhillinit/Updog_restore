name: Green Scoreboard

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip-guardian:
        description: 'Skip Guardian check (for testing only)'
        required: false
        type: boolean
        default: false

jobs:
  scoreboard:
    name: Green Scoreboard Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        
      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --ignore-scripts
        
      - name: Run Green Scoreboard
        id: scoreboard
        uses: ./.github/actions/green-scoreboard
        with:
          guardian-check: ${{ !inputs.skip-guardian }}
          
      - name: Update PR Status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            const status = '${{ steps.scoreboard.outputs.scoreboard-status }}';
            const isGreen = status === 'green';
            
            const comment = `## 📊 Green Scoreboard Status
            
            ${isGreen ? '### 🟢 ALL GREEN - Ready for merge' : '### 🔴 RED - Blocking merge'}
            
            | Gate | Status |
            |------|--------|
            | TypeScript | ${{ steps.scoreboard.outputs.typescript-status == 'green' && '✅' || '❌' }} |
            | Tests | ${{ steps.scoreboard.outputs.test-status == 'green' && '✅' || '❌' }} |
            | CI Checks | ${{ steps.scoreboard.outputs.ci-status == 'green' && '✅' || '❌' }} |
            | Guardian | ${{ steps.scoreboard.outputs.guardian-status == 'green' && '✅' || '❌' }} |
            | Bundle Size | ${{ steps.scoreboard.outputs.bundle-status == 'green' && '✅' || '❌' }} |
            
            ${!isGreen ? '**Action Required:** Fix all red gates before merging.' : '**Ready:** All gates passed, safe to merge.'}
            `;
            
            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Green Scoreboard Status')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
            
      - name: Set Check Status
        if: always()
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            const status = '${{ steps.scoreboard.outputs.scoreboard-status }}';
            const conclusion = status === 'green' ? 'success' : 'failure';
            
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Green Scoreboard',
              head_sha: context.sha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: `Scoreboard ${status === 'green' ? 'Passed' : 'Failed'}`,
                summary: `The Green Scoreboard is ${status}`,
                text: `
                  TypeScript: ${{ steps.scoreboard.outputs.typescript-status }}
                  Tests: ${{ steps.scoreboard.outputs.test-status }}
                  CI: ${{ steps.scoreboard.outputs.ci-status }}
                  Guardian: ${{ steps.scoreboard.outputs.guardian-status }}
                  Bundle: ${{ steps.scoreboard.outputs.bundle-status }}
                `
              }
            });