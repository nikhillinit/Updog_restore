name: Automated Performance Logging

on:
  push:
    branches: [ feature/*, develop, main ]
  pull_request:
    branches: [ develop, main ]
  # Allow manual trigger
  workflow_dispatch:
  # Schedule to run daily at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'

jobs:
  performance-analysis:
    name: Database Performance Analysis
    runs-on: ubuntu-latest
    
    # Only run on feature branches, develop, or main
    if: |
      github.event_name == 'schedule' || 
      github.event_name == 'workflow_dispatch' ||
      contains(github.ref, 'refs/heads/feature/') || 
      github.ref == 'refs/heads/develop' || 
      github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Need full history to commit back
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: |
          npm ci
          # Install additional tools for shell script version
          sudo apt-get update
          sudo apt-get install -y postgresql-client jq bc
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - Performance Logger"
      
      - name: Run Performance Analysis (Node.js)
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NODE_ENV: production
        run: |
          echo "üöÄ Running Node.js performance analysis..."
          node scripts/auto-perf-log.js
        continue-on-error: true
        id: node_analysis
      
      - name: Run Performance Analysis (Shell) - Fallback
        if: steps.node_analysis.outcome == 'failure'
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "üîÑ Node.js analysis failed, trying shell script..."
          chmod +x scripts/auto-perf-log.sh
          ./scripts/auto-perf-log.sh
        continue-on-error: true
        id: shell_analysis
      
      - name: Check if Performance Log was Updated
        id: check_changes
        run: |
          if [[ $(git status --porcelain perf-log.md | wc -l) -gt 0 ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Performance log was updated"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No changes to performance log"
          fi
      
      - name: Validate Performance Log Format
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          echo "üîç Validating performance log format..."
          
          # Check if file exists and has content
          if [[ ! -f "perf-log.md" ]]; then
            echo "‚ùå perf-log.md file not found"
            exit 1
          fi
          
          # Check for required sections
          if ! grep -q "## Performance Analysis" perf-log.md; then
            echo "‚ùå Performance analysis section not found"
            exit 1
          fi
          
          if ! grep -q "Execution Time:" perf-log.md; then
            echo "‚ùå Execution time metrics not found"
            exit 1
          fi
          
          if ! grep -q "Buffer Hit Ratio:" perf-log.md; then
            echo "‚ùå Buffer statistics not found"
            exit 1
          fi
          
          echo "‚úÖ Performance log format validation passed"
      
      - name: Extract Performance Metrics for PR Comment
        if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'pull_request'
        id: extract_metrics
        run: |
          # Extract the latest performance metrics for PR comment
          echo "Extracting latest performance metrics..."
          
          # Get the last performance analysis section
          LATEST_ANALYSIS=$(sed -n '/## Performance Analysis/,$p' perf-log.md | head -30)
          
          # Extract key metrics using grep and sed
          EXECUTION_TIME=$(echo "$LATEST_ANALYSIS" | grep "Execution Time:" | sed 's/.*: //' | head -1)
          P95_LATENCY=$(echo "$LATEST_ANALYSIS" | grep "P95 Latency:" | sed 's/.*: //' | head -1)
          BUFFER_HIT_RATIO=$(echo "$LATEST_ANALYSIS" | grep "Buffer Hit Ratio:" | sed 's/.*: //' | head -1)
          TOTAL_ROWS=$(echo "$LATEST_ANALYSIS" | grep "Total Rows Processed:" | sed 's/.*: //' | head -1)
          GRADE=$(echo "$LATEST_ANALYSIS" | grep "Grade:" | sed 's/.*Grade: //' | sed 's/\*\*//g' | head -1)
          
          # Save to outputs for PR comment
          echo "execution_time=${EXECUTION_TIME}" >> $GITHUB_OUTPUT
          echo "p95_latency=${P95_LATENCY}" >> $GITHUB_OUTPUT
          echo "buffer_hit_ratio=${BUFFER_HIT_RATIO}" >> $GITHUB_OUTPUT
          echo "total_rows=${TOTAL_ROWS}" >> $GITHUB_OUTPUT
          echo "grade=${GRADE}" >> $GITHUB_OUTPUT
      
      - name: Comment Performance Results on PR
        if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const metrics = {
              execution_time: '${{ steps.extract_metrics.outputs.execution_time }}',
              p95_latency: '${{ steps.extract_metrics.outputs.p95_latency }}',
              buffer_hit_ratio: '${{ steps.extract_metrics.outputs.buffer_hit_ratio }}',
              total_rows: '${{ steps.extract_metrics.outputs.total_rows }}',
              grade: '${{ steps.extract_metrics.outputs.grade }}'
            };
            
            const comment = `## üìä Database Performance Analysis Results
            
            The automated performance analysis has been completed for this PR:
            
            ### Key Metrics
            - **Execution Time:** ${metrics.execution_time}
            - **P95 Latency:** ${metrics.p95_latency}
            - **Buffer Hit Ratio:** ${metrics.buffer_hit_ratio}
            - **Total Rows Processed:** ${metrics.total_rows}
            - **Performance Grade:** ${metrics.grade}
            
            ### Details
            Complete analysis results have been automatically appended to \`perf-log.md\`.
            
            > ü§ñ This comment was generated automatically by the performance logging workflow.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: Commit and Push Performance Log
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          echo "üìù Committing performance log updates..."
          
          # Add the updated performance log
          git add perf-log.md
          
          # Create commit message with metrics summary
          LATEST_METRICS=$(tail -20 perf-log.md | grep -E "(Execution Time|P95 Latency|Grade):" | tr '\n' ' ')
          
          git commit -m "chore: automated performance analysis update
          
          - Updated perf-log.md with latest database performance metrics
          - Analysis run: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Trigger: ${{ github.event_name }}
          - Branch: ${{ github.ref_name }}
          
          Metrics: ${LATEST_METRICS}
          
          [skip ci]"
          
          # Push the changes
          git push origin ${{ github.ref_name }}
          
          echo "‚úÖ Performance log committed and pushed successfully"
      
      - name: Create Performance Alert Issue
        if: |
          steps.check_changes.outputs.changes == 'true' && 
          (contains(steps.extract_metrics.outputs.grade, 'D') || contains(steps.extract_metrics.outputs.grade, 'C'))
        uses: actions/github-script@v7
        with:
          script: |
            const grade = '${{ steps.extract_metrics.outputs.grade }}';
            const execution_time = '${{ steps.extract_metrics.outputs.execution_time }}';
            const buffer_hit_ratio = '${{ steps.extract_metrics.outputs.buffer_hit_ratio }}';
            
            const title = `üö® Performance Alert: Grade ${grade} - Database Query Performance Degradation`;
            
            const body = `## Performance Alert
            
            The automated performance analysis has detected performance issues:
            
            ### Alert Details
            - **Performance Grade:** ${grade}
            - **Execution Time:** ${execution_time}
            - **Buffer Hit Ratio:** ${buffer_hit_ratio}%
            - **Analysis Date:** ${new Date().toISOString()}
            - **Branch:** ${{ github.ref_name }}
            
            ### Recommended Actions
            - [ ] Review query execution plan in \`perf-log.md\`
            - [ ] Check for missing indexes on \`mc_stats_1min\` table
            - [ ] Analyze buffer cache hit ratio and consider memory tuning
            - [ ] Review recent schema changes that might affect performance
            - [ ] Consider query optimization or partitioning strategies
            
            ### Context
            This issue was automatically created because the database performance grade fell below acceptable thresholds (Grade C or D).
            
            Complete analysis details are available in the [performance log](./perf-log.md).
            
            ---
            ü§ñ Auto-generated by: \`.github/workflows/auto-perf-log.yml\`
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['performance', 'database', 'alert', 'automated']
            });
      
      - name: Performance Analysis Summary
        if: always()
        run: |
          echo "=== PERFORMANCE ANALYSIS SUMMARY ==="
          echo "Node.js Analysis: ${{ steps.node_analysis.outcome }}"
          echo "Shell Analysis: ${{ steps.shell_analysis.outcome }}"
          echo "Changes Detected: ${{ steps.check_changes.outputs.changes }}"
          echo "Trigger Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          
          if [[ -f "perf-log.md" ]]; then
            echo "Performance log file size: $(wc -l < perf-log.md) lines"
            echo "Latest analysis timestamp: $(grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}.*[0-9]\{2\}:[0-9]\{2\}:[0-9]\{2\}' perf-log.md | tail -1 || echo 'N/A')"
          else
            echo "‚ö†Ô∏è No performance log file found"
          fi
