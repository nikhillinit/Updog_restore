/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/reserves/calculate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Calculate optimal reserve allocations */
        post: operations["calculateReserves"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reserves/calculate-protected": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Calculate reserves with approval guard */
        post: operations["calculateReservesProtected"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/funds/{fundId}/reserves": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get fund reserve history */
        get: operations["getFundReserves"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/flags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get feature flags for current user */
        get: operations["getFlags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/approvals/{approvalId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get approval details */
        get: operations["getApproval"];
        put?: never;
        /** Sign an approval */
        post: operations["signApproval"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Prometheus metrics endpoint */
        get: operations["getMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check endpoint */
        get: operations["healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description Error code */
            error: string;
            /** @description Human-readable error message */
            message: string;
            /** @description Additional error context */
            details?: Record<string, never>;
            /** @description Seconds to wait before retry */
            retryAfter?: number;
        };
        ReserveCalculationInput: {
            /** Format: uuid */
            fundId: string;
            portfolioCompanies: components["schemas"]["PortfolioCompany"][];
            fundMetrics: components["schemas"]["FundMetrics"];
            configuration: components["schemas"]["ReserveConfiguration"];
            /**
             * @default moderate
             * @enum {string}
             */
            scenarioType: "conservative" | "moderate" | "aggressive";
        };
        PortfolioCompany: {
            /** Format: uuid */
            id: string;
            name: string;
            /** Format: double */
            invested: number;
            /** Format: double */
            currentValue: number;
            /** @enum {string} */
            stage: "seed" | "seriesA" | "seriesB" | "seriesC" | "growth" | "late";
            metadata?: {
                [key: string]: unknown;
            };
        };
        FundMetrics: {
            /** Format: double */
            totalCommitted: number;
            /** Format: double */
            totalCalled: number;
            /** Format: double */
            totalDistributed?: number;
            /** Format: double */
            remainingCapital: number;
            /** Format: double */
            netAssetValue?: number;
            /** Format: double */
            managementFees?: number;
            /** Format: double */
            carriedInterest?: number;
        };
        ReserveConfiguration: {
            /**
             * Format: double
             * @default 1.5
             */
            reserveMultiple: number;
            /**
             * Format: double
             * @default 50
             */
            maxReservePercentage: number;
            /**
             * @default v1.1
             * @enum {string}
             */
            engineVersion: "v1.0" | "v1.1" | "v1.2";
            /**
             * @default rules
             * @enum {string}
             */
            mode: "rules" | "ml" | "hybrid";
        };
        ReserveCalculationResult: {
            /** Format: uuid */
            fundId: string;
            /** Format: uuid */
            calculationId: string;
            /** Format: date-time */
            timestamp: string;
            allocations: components["schemas"]["CompanyAllocation"][];
            summary: components["schemas"]["ReserveSummary"];
            /** @description Deterministic hash of calculation for caching */
            hash: string;
            metadata?: {
                [key: string]: unknown;
            };
            approvalRequired?: boolean;
            /** Format: uuid */
            approvalId?: string;
        };
        CompanyAllocation: {
            /** Format: uuid */
            companyId: string;
            /** Format: double */
            recommendedReserve: number;
            /** Format: double */
            confidence: number;
            rationale?: string;
        };
        ReserveSummary: {
            /** Format: double */
            totalReserves: number;
            /** Format: double */
            reservePercentage: number;
            /** Format: double */
            riskScore: number;
            recommendations?: string[];
        };
        Approval: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            strategyId: string;
            /** @enum {string} */
            status: "pending" | "approved" | "denied" | "expired";
            requiredSignatures: number;
            signatures: components["schemas"]["Signature"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            expiresAt: string;
        };
        Signature: {
            /** Format: uuid */
            partnerId: string;
            /** Format: date-time */
            timestamp: string;
            metadata?: Record<string, never>;
        };
        /** @example {
         *       "wizard.v1": true,
         *       "reserves.v1_1": true,
         *       "ml.enabled": false
         *     } */
        FeatureFlags: {
            [key: string]: boolean;
        };
    };
    responses: never;
    parameters: {
        /** @description ETag value for optimistic concurrency control */
        IfMatchHeader: string;
        /** @description ETag value for conditional GET */
        IfNoneMatchHeader: string;
        /** @description Unique key for idempotent request processing */
        IdempotencyKeyHeader: string;
        /** @description Fund identifier */
        FundId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    calculateReserves: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key for idempotent request processing */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReserveCalculationInput"];
            };
        };
        responses: {
            /** @description Successful calculation */
            200: {
                headers: {
                    /** @description Entity tag for caching */
                    ETag?: string;
                    /** @description Idempotency key used */
                    "X-Idempotency-Key"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReserveCalculationResult"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Precondition Required */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Service temporarily unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    calculateReservesProtected: {
        parameters: {
            query?: never;
            header: {
                /** @description ETag value for optimistic concurrency control */
                "If-Match": components["parameters"]["IfMatchHeader"];
                /** @description Unique key for idempotent request processing */
                "Idempotency-Key": components["parameters"]["IdempotencyKeyHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReserveCalculationInput"];
            };
        };
        responses: {
            /** @description Calculation completed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReserveCalculationResult"];
                };
            };
            /** @description Approval required */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        error?: string;
                        approvalRequired?: boolean;
                        approvalId?: string;
                    };
                };
            };
            /** @description Precondition Failed */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getFundReserves: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: {
                /** @description ETag value for conditional GET */
                "If-None-Match"?: components["parameters"]["IfNoneMatchHeader"];
            };
            path: {
                /** @description Fund identifier */
                fundId: components["parameters"]["FundId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reserve history */
            200: {
                headers: {
                    ETag?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items?: components["schemas"]["ReserveCalculationResult"][];
                        total?: number;
                        limit?: number;
                        offset?: number;
                    };
                };
            };
            /** @description Not Modified */
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Fund not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFlags: {
        parameters: {
            query?: {
                fundId?: string;
            };
            header?: {
                /** @description ETag value for conditional GET */
                "If-None-Match"?: components["parameters"]["IfNoneMatchHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Feature flags */
            200: {
                headers: {
                    ETag?: string;
                    "Cache-Control"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeatureFlags"];
                };
            };
            /** @description Not Modified */
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getApproval: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                approvalId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Approval details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Approval"];
                };
            };
            /** @description Approval not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    signApproval: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                approvalId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    partnerId?: string;
                    metadata?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Signature added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Approval"];
                };
            };
            /** @description Invalid signature */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not authorized to sign */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Already signed or expired */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Prometheus metrics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status?: "healthy";
                        /** Format: date-time */
                        timestamp?: string;
                        version?: string;
                    };
                };
            };
        };
    };
}
